%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 529 0 R /F4 530 0 R /F5 531 0 R /F6 532 0 R 
  /F7 533 0 R /F8 651 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/Contents 961 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
5 0 obj
<<
/Contents 962 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
6 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 40.01575 754.0394 120.0257 766.0394 ] /Subtype /Link /Type /Annot
>>
endobj
7 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 754.7894 555.2598 766.7894 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 747.0394 0 ] /Rect [ 60.01575 736.0394 102.7957 748.0394 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 747.0394 0 ] /Rect [ 549.6998 736.7894 555.2598 748.7894 ] /Subtype /Link /Type /Annot
>>
endobj
10 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 591.8394 0 ] /Rect [ 60.01575 718.0394 100.5957 730.0394 ] /Subtype /Link /Type /Annot
>>
endobj
11 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 591.8394 0 ] /Rect [ 549.6998 718.7894 555.2598 730.7894 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 556.6394 0 ] /Rect [ 80.01575 700.0394 157.2757 712.0394 ] /Subtype /Link /Type /Annot
>>
endobj
13 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 556.6394 0 ] /Rect [ 549.6998 700.7894 555.2598 712.7894 ] /Subtype /Link /Type /Annot
>>
endobj
14 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 523.8394 0 ] /Rect [ 100.0157 682.0394 130.0257 694.0394 ] /Subtype /Link /Type /Annot
>>
endobj
15 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 534 0 R /XYZ 40.01575 523.8394 0 ] /Rect [ 549.6998 682.7894 555.2598 694.7894 ] /Subtype /Link /Type /Annot
>>
endobj
16 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 536 0 R /XYZ 40.01575 455.4394 0 ] /Rect [ 100.0157 664.0394 117.7957 676.0394 ] /Subtype /Link /Type /Annot
>>
endobj
17 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 536 0 R /XYZ 40.01575 455.4394 0 ] /Rect [ 549.6998 664.7894 555.2598 676.7894 ] /Subtype /Link /Type /Annot
>>
endobj
18 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 537 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 646.0394 117.2357 658.0394 ] /Subtype /Link /Type /Annot
>>
endobj
19 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 537 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 646.7894 555.2598 658.7894 ] /Subtype /Link /Type /Annot
>>
endobj
20 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 537 0 R /XYZ 40.01575 158.6394 0 ] /Rect [ 100.0157 628.0394 134.4757 640.0394 ] /Subtype /Link /Type /Annot
>>
endobj
21 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 537 0 R /XYZ 40.01575 158.6394 0 ] /Rect [ 549.6998 628.7894 555.2598 640.7894 ] /Subtype /Link /Type /Annot
>>
endobj
22 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 545 0 R /XYZ 40.01575 669.2394 0 ] /Rect [ 100.0157 610.0394 148.9257 622.0394 ] /Subtype /Link /Type /Annot
>>
endobj
23 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 545 0 R /XYZ 40.01575 669.2394 0 ] /Rect [ 544.1398 610.7894 555.2598 622.7894 ] /Subtype /Link /Type /Annot
>>
endobj
24 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 546 0 R /XYZ 40.01575 581.6394 0 ] /Rect [ 100.0157 592.0394 115.5757 604.0394 ] /Subtype /Link /Type /Annot
>>
endobj
25 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 546 0 R /XYZ 40.01575 581.6394 0 ] /Rect [ 544.1398 592.7894 555.2598 604.7894 ] /Subtype /Link /Type /Annot
>>
endobj
26 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 547 0 R /XYZ 40.01575 300.4394 0 ] /Rect [ 100.0157 574.0394 151.7057 586.0394 ] /Subtype /Link /Type /Annot
>>
endobj
27 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 547 0 R /XYZ 40.01575 300.4394 0 ] /Rect [ 544.1398 574.7894 555.2598 586.7894 ] /Subtype /Link /Type /Annot
>>
endobj
28 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 549 0 R /XYZ 40.01575 711.0394 0 ] /Rect [ 80.01575 556.0394 127.2557 568.0394 ] /Subtype /Link /Type /Annot
>>
endobj
29 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 549 0 R /XYZ 40.01575 711.0394 0 ] /Rect [ 544.1398 556.7894 555.2598 568.7894 ] /Subtype /Link /Type /Annot
>>
endobj
30 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 549 0 R /XYZ 40.01575 678.2394 0 ] /Rect [ 100.0157 538.0394 136.1357 550.0394 ] /Subtype /Link /Type /Annot
>>
endobj
31 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 549 0 R /XYZ 40.01575 678.2394 0 ] /Rect [ 544.1398 538.7894 555.2598 550.7894 ] /Subtype /Link /Type /Annot
>>
endobj
32 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 550 0 R /XYZ 40.01575 318.4394 0 ] /Rect [ 100.0157 520.0394 122.2357 532.0394 ] /Subtype /Link /Type /Annot
>>
endobj
33 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 550 0 R /XYZ 40.01575 318.4394 0 ] /Rect [ 544.1398 520.7894 555.2598 532.7894 ] /Subtype /Link /Type /Annot
>>
endobj
34 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 551 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 100.0157 502.0394 140.5857 514.0394 ] /Subtype /Link /Type /Annot
>>
endobj
35 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 551 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 544.1398 502.7894 555.2598 514.7894 ] /Subtype /Link /Type /Annot
>>
endobj
36 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 551 0 R /XYZ 40.01575 460.0394 0 ] /Rect [ 100.0157 484.0394 137.8057 496.0394 ] /Subtype /Link /Type /Annot
>>
endobj
37 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 551 0 R /XYZ 40.01575 460.0394 0 ] /Rect [ 544.1398 484.7894 555.2598 496.7894 ] /Subtype /Link /Type /Annot
>>
endobj
38 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 551 0 R /XYZ 40.01575 341.8394 0 ] /Rect [ 100.0157 466.0394 123.9157 478.0394 ] /Subtype /Link /Type /Annot
>>
endobj
39 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 551 0 R /XYZ 40.01575 341.8394 0 ] /Rect [ 544.1398 466.7894 555.2598 478.7894 ] /Subtype /Link /Type /Annot
>>
endobj
40 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 665.4394 0 ] /Rect [ 100.0157 448.0394 118.9157 460.0394 ] /Subtype /Link /Type /Annot
>>
endobj
41 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 665.4394 0 ] /Rect [ 544.1398 448.7894 555.2598 460.7894 ] /Subtype /Link /Type /Annot
>>
endobj
42 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 581.0394 0 ] /Rect [ 100.0157 430.0394 170.5957 442.0394 ] /Subtype /Link /Type /Annot
>>
endobj
43 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 581.0394 0 ] /Rect [ 544.1398 430.7894 555.2598 442.7894 ] /Subtype /Link /Type /Annot
>>
endobj
44 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 412.0394 0 ] /Rect [ 80.01575 412.0394 142.8157 424.0394 ] /Subtype /Link /Type /Annot
>>
endobj
45 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 412.0394 0 ] /Rect [ 544.1398 412.7894 555.2598 424.7894 ] /Subtype /Link /Type /Annot
>>
endobj
46 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 379.2394 0 ] /Rect [ 100.0157 394.0394 115.0157 406.0394 ] /Subtype /Link /Type /Annot
>>
endobj
47 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 552 0 R /XYZ 40.01575 379.2394 0 ] /Rect [ 544.1398 394.7894 555.2598 406.7894 ] /Subtype /Link /Type /Annot
>>
endobj
48 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 554 0 R /XYZ 40.01575 256.4394 0 ] /Rect [ 100.0157 376.0394 131.6957 388.0394 ] /Subtype /Link /Type /Annot
>>
endobj
49 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 554 0 R /XYZ 40.01575 256.4394 0 ] /Rect [ 544.1398 376.7894 555.2598 388.7894 ] /Subtype /Link /Type /Annot
>>
endobj
50 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 555 0 R /XYZ 40.01575 680.4394 0 ] /Rect [ 100.0157 358.0394 139.4657 370.0394 ] /Subtype /Link /Type /Annot
>>
endobj
51 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 555 0 R /XYZ 40.01575 680.4394 0 ] /Rect [ 544.1398 358.7894 555.2598 370.7894 ] /Subtype /Link /Type /Annot
>>
endobj
52 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 555 0 R /XYZ 40.01575 395.4394 0 ] /Rect [ 100.0157 340.0394 139.4757 352.0394 ] /Subtype /Link /Type /Annot
>>
endobj
53 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 555 0 R /XYZ 40.01575 395.4394 0 ] /Rect [ 544.1398 340.7894 555.2598 352.7894 ] /Subtype /Link /Type /Annot
>>
endobj
54 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 556 0 R /XYZ 40.01575 498.4394 0 ] /Rect [ 100.0157 322.0394 142.2457 334.0394 ] /Subtype /Link /Type /Annot
>>
endobj
55 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 556 0 R /XYZ 40.01575 498.4394 0 ] /Rect [ 544.1398 322.7894 555.2598 334.7894 ] /Subtype /Link /Type /Annot
>>
endobj
56 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 556 0 R /XYZ 40.01575 209.4394 0 ] /Rect [ 80.01575 304.0394 232.8957 316.0394 ] /Subtype /Link /Type /Annot
>>
endobj
57 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 556 0 R /XYZ 40.01575 209.4394 0 ] /Rect [ 544.1398 304.7894 555.2598 316.7894 ] /Subtype /Link /Type /Annot
>>
endobj
58 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 556 0 R /XYZ 40.01575 176.6394 0 ] /Rect [ 100.0157 286.0394 132.8157 298.0394 ] /Subtype /Link /Type /Annot
>>
endobj
59 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 556 0 R /XYZ 40.01575 176.6394 0 ] /Rect [ 544.1398 286.7894 555.2598 298.7894 ] /Subtype /Link /Type /Annot
>>
endobj
60 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 557 0 R /XYZ 40.01575 422.4394 0 ] /Rect [ 100.0157 268.0394 132.8157 280.0394 ] /Subtype /Link /Type /Annot
>>
endobj
61 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 557 0 R /XYZ 40.01575 422.4394 0 ] /Rect [ 544.1398 268.7894 555.2598 280.7894 ] /Subtype /Link /Type /Annot
>>
endobj
62 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 557 0 R /XYZ 40.01575 106.4394 0 ] /Rect [ 100.0157 250.0394 164.5057 262.0394 ] /Subtype /Link /Type /Annot
>>
endobj
63 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 557 0 R /XYZ 40.01575 106.4394 0 ] /Rect [ 544.1398 250.7894 555.2598 262.7894 ] /Subtype /Link /Type /Annot
>>
endobj
64 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 558 0 R /XYZ 40.01575 480.4394 0 ] /Rect [ 100.0157 232.0394 176.1757 244.0394 ] /Subtype /Link /Type /Annot
>>
endobj
65 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 558 0 R /XYZ 40.01575 480.4394 0 ] /Rect [ 544.1398 232.7894 555.2598 244.7894 ] /Subtype /Link /Type /Annot
>>
endobj
66 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 558 0 R /XYZ 40.01575 117.4394 0 ] /Rect [ 100.0157 214.0394 172.2857 226.0394 ] /Subtype /Link /Type /Annot
>>
endobj
67 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 558 0 R /XYZ 40.01575 117.4394 0 ] /Rect [ 544.1398 214.7894 555.2598 226.7894 ] /Subtype /Link /Type /Annot
>>
endobj
68 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 641.4394 0 ] /Rect [ 100.0157 196.0394 153.3757 208.0394 ] /Subtype /Link /Type /Annot
>>
endobj
69 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 641.4394 0 ] /Rect [ 544.1398 196.7894 555.2598 208.7894 ] /Subtype /Link /Type /Annot
>>
endobj
70 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 457.4394 0 ] /Rect [ 100.0157 178.0394 184.4957 190.0394 ] /Subtype /Link /Type /Annot
>>
endobj
71 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 457.4394 0 ] /Rect [ 544.1398 178.7894 555.2598 190.7894 ] /Subtype /Link /Type /Annot
>>
endobj
72 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 277.0394 0 ] /Rect [ 80.01575 160.0394 165.0657 172.0394 ] /Subtype /Link /Type /Annot
>>
endobj
73 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 277.0394 0 ] /Rect [ 544.1398 160.7894 555.2598 172.7894 ] /Subtype /Link /Type /Annot
>>
endobj
74 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 244.2394 0 ] /Rect [ 100.0157 142.0394 108.3557 154.0394 ] /Subtype /Link /Type /Annot
>>
endobj
75 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 559 0 R /XYZ 40.01575 244.2394 0 ] /Rect [ 544.1398 142.7894 555.2598 154.7894 ] /Subtype /Link /Type /Annot
>>
endobj
76 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 560 0 R /XYZ 40.01575 211.0394 0 ] /Rect [ 100.0157 124.0394 118.9057 136.0394 ] /Subtype /Link /Type /Annot
>>
endobj
77 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 560 0 R /XYZ 40.01575 211.0394 0 ] /Rect [ 544.1398 124.7894 555.2598 136.7894 ] /Subtype /Link /Type /Annot
>>
endobj
78 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 560 0 R /XYZ 40.01575 132.6394 0 ] /Rect [ 100.0157 106.0394 138.9257 118.0394 ] /Subtype /Link /Type /Annot
>>
endobj
79 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 560 0 R /XYZ 40.01575 132.6394 0 ] /Rect [ 544.1398 106.7894 555.2598 118.7894 ] /Subtype /Link /Type /Annot
>>
endobj
80 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 561 0 R /XYZ 40.01575 728.2394 0 ] /Rect [ 100.0157 88.03937 131.1457 100.0394 ] /Subtype /Link /Type /Annot
>>
endobj
81 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 561 0 R /XYZ 40.01575 728.2394 0 ] /Rect [ 544.1398 88.78937 555.2598 100.7894 ] /Subtype /Link /Type /Annot
>>
endobj
82 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 561 0 R /XYZ 40.01575 331.4394 0 ] /Rect [ 100.0157 70.03937 150.6057 82.03937 ] /Subtype /Link /Type /Annot
>>
endobj
83 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 561 0 R /XYZ 40.01575 331.4394 0 ] /Rect [ 544.1398 70.78937 555.2598 82.78937 ] /Subtype /Link /Type /Annot
>>
endobj
84 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 561 0 R /XYZ 40.01575 277.0394 0 ] /Rect [ 100.0157 52.03937 140.5857 64.03937 ] /Subtype /Link /Type /Annot
>>
endobj
85 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 561 0 R /XYZ 40.01575 277.0394 0 ] /Rect [ 544.1398 52.78937 555.2598 64.78937 ] /Subtype /Link /Type /Annot
>>
endobj
86 0 obj
<<
/Annots [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 
  16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 
  26 0 R 27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 
  36 0 R 37 0 R 38 0 R 39 0 R 40 0 R 41 0 R 42 0 R 43 0 R 44 0 R 45 0 R 
  46 0 R 47 0 R 48 0 R 49 0 R 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 
  56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 
  66 0 R 67 0 R 68 0 R 69 0 R 70 0 R 71 0 R 72 0 R 73 0 R 74 0 R 75 0 R 
  76 0 R 77 0 R 78 0 R 79 0 R 80 0 R 81 0 R 82 0 R 83 0 R 84 0 R 85 0 R ] /Contents 963 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
87 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 564 0 R /XYZ 40.01575 489.0394 0 ] /Rect [ 100.0157 784.0394 138.3657 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
88 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 564 0 R /XYZ 40.01575 489.0394 0 ] /Rect [ 544.1398 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
89 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 564 0 R /XYZ 40.01575 398.6394 0 ] /Rect [ 100.0157 766.0394 135.0257 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
90 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 564 0 R /XYZ 40.01575 398.6394 0 ] /Rect [ 544.1398 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
91 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 564 0 R /XYZ 40.01575 91.43937 0 ] /Rect [ 100.0157 748.0394 122.7957 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
92 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 564 0 R /XYZ 40.01575 91.43937 0 ] /Rect [ 544.1398 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
93 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 445.4394 0 ] /Rect [ 80.01575 730.0394 155.6057 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
94 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 445.4394 0 ] /Rect [ 544.1398 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
95 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 412.6394 0 ] /Rect [ 100.0157 712.0394 123.9057 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
96 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 412.6394 0 ] /Rect [ 544.1398 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
97 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 251.4394 0 ] /Rect [ 100.0157 694.0394 125.5857 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
98 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 251.4394 0 ] /Rect [ 544.1398 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
99 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 90.23937 0 ] /Rect [ 100.0157 676.0394 128.9157 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
100 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 565 0 R /XYZ 40.01575 90.23937 0 ] /Rect [ 544.1398 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
101 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 566 0 R /XYZ 40.01575 652.2394 0 ] /Rect [ 100.0157 658.0394 141.6957 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
102 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 566 0 R /XYZ 40.01575 652.2394 0 ] /Rect [ 544.1398 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
103 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 566 0 R /XYZ 40.01575 491.0394 0 ] /Rect [ 100.0157 640.0394 118.9057 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
104 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 566 0 R /XYZ 40.01575 491.0394 0 ] /Rect [ 544.1398 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
105 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 566 0 R /XYZ 40.01575 329.8394 0 ] /Rect [ 100.0157 622.0394 117.7957 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
106 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 566 0 R /XYZ 40.01575 329.8394 0 ] /Rect [ 544.1398 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
107 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 668.2394 0 ] /Rect [ 100.0157 604.0394 132.8057 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
108 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 668.2394 0 ] /Rect [ 544.1398 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
109 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 538.0394 0 ] /Rect [ 100.0157 586.0394 168.3657 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
110 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 538.0394 0 ] /Rect [ 544.1398 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
111 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 303.8394 0 ] /Rect [ 80.01575 568.0394 148.3657 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
112 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 303.8394 0 ] /Rect [ 544.1398 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
113 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 271.0394 0 ] /Rect [ 100.0157 550.0394 124.4557 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
114 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 271.0394 0 ] /Rect [ 544.1398 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
115 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 204.6394 0 ] /Rect [ 100.0157 532.0394 140.5857 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
116 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 204.6394 0 ] /Rect [ 544.1398 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
117 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 114.2394 0 ] /Rect [ 80.01575 514.0394 156.7157 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
118 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 568 0 R /XYZ 40.01575 114.2394 0 ] /Rect [ 544.1398 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
119 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 569 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 496.0394 143.3657 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
120 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 569 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
121 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 569 0 R /XYZ 40.01575 627.8394 0 ] /Rect [ 100.0157 478.0394 151.7057 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
122 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 569 0 R /XYZ 40.01575 627.8394 0 ] /Rect [ 544.1398 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
123 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 569 0 R /XYZ 40.01575 468.6394 0 ] /Rect [ 100.0157 460.0394 146.6957 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
124 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 569 0 R /XYZ 40.01575 468.6394 0 ] /Rect [ 544.1398 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
125 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 570 0 R /XYZ 40.01575 557.4394 0 ] /Rect [ 100.0157 442.0394 153.3857 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
126 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 570 0 R /XYZ 40.01575 557.4394 0 ] /Rect [ 544.1398 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
127 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 571 0 R /XYZ 40.01575 756.0394 0 ] /Rect [ 100.0157 424.0394 155.0357 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
128 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 571 0 R /XYZ 40.01575 756.0394 0 ] /Rect [ 544.1398 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
129 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 571 0 R /XYZ 40.01575 282.0394 0 ] /Rect [ 100.0157 406.0394 140.5857 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
130 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 571 0 R /XYZ 40.01575 282.0394 0 ] /Rect [ 544.1398 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
131 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 572 0 R /XYZ 40.01575 496.2394 0 ] /Rect [ 100.0157 388.0394 160.5957 400.0394 ] /Subtype /Link /Type /Annot
>>
endobj
132 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 572 0 R /XYZ 40.01575 496.2394 0 ] /Rect [ 544.1398 388.7894 555.2598 400.7894 ] /Subtype /Link /Type /Annot
>>
endobj
133 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 573 0 R /XYZ 40.01575 523.2394 0 ] /Rect [ 100.0157 370.0394 158.3857 382.0394 ] /Subtype /Link /Type /Annot
>>
endobj
134 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 573 0 R /XYZ 40.01575 523.2394 0 ] /Rect [ 544.1398 370.7894 555.2598 382.7894 ] /Subtype /Link /Type /Annot
>>
endobj
135 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 574 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 352.0394 135.0357 364.0394 ] /Subtype /Link /Type /Annot
>>
endobj
136 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 574 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 352.7894 555.2598 364.7894 ] /Subtype /Link /Type /Annot
>>
endobj
137 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 574 0 R /XYZ 40.01575 754.2394 0 ] /Rect [ 100.0157 334.0394 128.3557 346.0394 ] /Subtype /Link /Type /Annot
>>
endobj
138 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 574 0 R /XYZ 40.01575 754.2394 0 ] /Rect [ 544.1398 334.7894 555.2598 346.7894 ] /Subtype /Link /Type /Annot
>>
endobj
139 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 574 0 R /XYZ 40.01575 354.4394 0 ] /Rect [ 100.0157 316.0394 137.8157 328.0394 ] /Subtype /Link /Type /Annot
>>
endobj
140 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 574 0 R /XYZ 40.01575 354.4394 0 ] /Rect [ 544.1398 316.7894 555.2598 328.7894 ] /Subtype /Link /Type /Annot
>>
endobj
141 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 674.0394 0 ] /Rect [ 100.0157 298.0394 116.1257 310.0394 ] /Subtype /Link /Type /Annot
>>
endobj
142 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 674.0394 0 ] /Rect [ 544.1398 298.7894 555.2598 310.7894 ] /Subtype /Link /Type /Annot
>>
endobj
143 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 531.8394 0 ] /Rect [ 100.0157 280.0394 115.5757 292.0394 ] /Subtype /Link /Type /Annot
>>
endobj
144 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 531.8394 0 ] /Rect [ 544.1398 280.7894 555.2598 292.7894 ] /Subtype /Link /Type /Annot
>>
endobj
145 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 389.6394 0 ] /Rect [ 100.0157 262.0394 130.0357 274.0394 ] /Subtype /Link /Type /Annot
>>
endobj
146 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 389.6394 0 ] /Rect [ 544.1398 262.7894 555.2598 274.7894 ] /Subtype /Link /Type /Annot
>>
endobj
147 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 223.4394 0 ] /Rect [ 80.01575 244.0394 182.8357 256.0394 ] /Subtype /Link /Type /Annot
>>
endobj
148 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 223.4394 0 ] /Rect [ 544.1398 244.7894 555.2598 256.7894 ] /Subtype /Link /Type /Annot
>>
endobj
149 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 190.6394 0 ] /Rect [ 100.0157 226.0394 118.9057 238.0394 ] /Subtype /Link /Type /Annot
>>
endobj
150 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 575 0 R /XYZ 40.01575 190.6394 0 ] /Rect [ 544.1398 226.7894 555.2598 238.7894 ] /Subtype /Link /Type /Annot
>>
endobj
151 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 576 0 R /XYZ 40.01575 592.2394 0 ] /Rect [ 100.0157 208.0394 121.1257 220.0394 ] /Subtype /Link /Type /Annot
>>
endobj
152 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 576 0 R /XYZ 40.01575 592.2394 0 ] /Rect [ 544.1398 208.7894 555.2598 220.7894 ] /Subtype /Link /Type /Annot
>>
endobj
153 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 576 0 R /XYZ 40.01575 435.2394 0 ] /Rect [ 100.0157 190.0394 116.6857 202.0394 ] /Subtype /Link /Type /Annot
>>
endobj
154 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 576 0 R /XYZ 40.01575 435.2394 0 ] /Rect [ 544.1398 190.7894 555.2598 202.7894 ] /Subtype /Link /Type /Annot
>>
endobj
155 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 576 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 100.0157 172.0394 111.1357 184.0394 ] /Subtype /Link /Type /Annot
>>
endobj
156 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 576 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 544.1398 172.7894 555.2598 184.7894 ] /Subtype /Link /Type /Annot
>>
endobj
157 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 291.4394 0 ] /Rect [ 100.0157 154.0394 107.7957 166.0394 ] /Subtype /Link /Type /Annot
>>
endobj
158 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 293.8394 0 ] /Rect [ 100.0157 154.0394 107.7957 166.0394 ] /Subtype /Link /Type /Annot
>>
endobj
159 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 291.4394 0 ] /Rect [ 544.1398 154.7894 555.2598 166.7894 ] /Subtype /Link /Type /Annot
>>
endobj
160 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 158.2394 0 ] /Rect [ 80.01575 136.0394 146.7157 148.0394 ] /Subtype /Link /Type /Annot
>>
endobj
161 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 158.2394 0 ] /Rect [ 544.1398 136.7894 555.2598 148.7894 ] /Subtype /Link /Type /Annot
>>
endobj
162 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 125.4394 0 ] /Rect [ 100.0157 118.0394 161.7157 130.0394 ] /Subtype /Link /Type /Annot
>>
endobj
163 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 125.4394 0 ] /Rect [ 544.1398 118.7894 555.2598 130.7894 ] /Subtype /Link /Type /Annot
>>
endobj
164 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 579 0 R /XYZ 40.01575 249.0394 0 ] /Rect [ 100.0157 100.0394 127.2457 112.0394 ] /Subtype /Link /Type /Annot
>>
endobj
165 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 579 0 R /XYZ 40.01575 249.0394 0 ] /Rect [ 544.1398 100.7894 555.2598 112.7894 ] /Subtype /Link /Type /Annot
>>
endobj
166 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 580 0 R /XYZ 40.01575 635.2394 0 ] /Rect [ 100.0157 82.03937 133.9157 94.03937 ] /Subtype /Link /Type /Annot
>>
endobj
167 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 580 0 R /XYZ 40.01575 635.2394 0 ] /Rect [ 544.1398 82.78937 555.2598 94.78937 ] /Subtype /Link /Type /Annot
>>
endobj
168 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 580 0 R /XYZ 40.01575 289.4394 0 ] /Rect [ 100.0157 64.03937 138.3657 76.03937 ] /Subtype /Link /Type /Annot
>>
endobj
169 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 580 0 R /XYZ 40.01575 289.4394 0 ] /Rect [ 544.1398 64.78937 555.2598 76.78937 ] /Subtype /Link /Type /Annot
>>
endobj
170 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 581 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 46.03937 197.2957 58.03937 ] /Subtype /Link /Type /Annot
>>
endobj
171 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 581 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 46.78937 555.2598 58.78937 ] /Subtype /Link /Type /Annot
>>
endobj
172 0 obj
<<
/Annots [ 87 0 R 88 0 R 89 0 R 90 0 R 91 0 R 92 0 R 93 0 R 94 0 R 95 0 R 96 0 R 
  97 0 R 98 0 R 99 0 R 100 0 R 101 0 R 102 0 R 103 0 R 104 0 R 105 0 R 106 0 R 
  107 0 R 108 0 R 109 0 R 110 0 R 111 0 R 112 0 R 113 0 R 114 0 R 115 0 R 116 0 R 
  117 0 R 118 0 R 119 0 R 120 0 R 121 0 R 122 0 R 123 0 R 124 0 R 125 0 R 126 0 R 
  127 0 R 128 0 R 129 0 R 130 0 R 131 0 R 132 0 R 133 0 R 134 0 R 135 0 R 136 0 R 
  137 0 R 138 0 R 139 0 R 140 0 R 141 0 R 142 0 R 143 0 R 144 0 R 145 0 R 146 0 R 
  147 0 R 148 0 R 149 0 R 150 0 R 151 0 R 152 0 R 153 0 R 154 0 R 155 0 R 156 0 R 
  157 0 R 158 0 R 159 0 R 160 0 R 161 0 R 162 0 R 163 0 R 164 0 R 165 0 R 166 0 R 
  167 0 R 168 0 R 169 0 R 170 0 R 171 0 R ] /Contents 964 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
173 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 581 0 R /XYZ 40.01575 499.6394 0 ] /Rect [ 100.0157 784.0394 173.9357 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
174 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 581 0 R /XYZ 40.01575 499.6394 0 ] /Rect [ 544.1398 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
175 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 582 0 R /XYZ 40.01575 455.6394 0 ] /Rect [ 100.0157 766.0394 145.0357 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
176 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 582 0 R /XYZ 40.01575 455.6394 0 ] /Rect [ 544.1398 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
177 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 587 0 R /XYZ 40.01575 744.0394 0 ] /Rect [ 60.01575 748.0394 109.4857 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
178 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 587 0 R /XYZ 40.01575 744.0394 0 ] /Rect [ 544.1398 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
179 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 587 0 R /XYZ 40.01575 576.8394 0 ] /Rect [ 80.01575 730.0394 152.8257 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
180 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 587 0 R /XYZ 40.01575 576.8394 0 ] /Rect [ 544.1398 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
181 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 587 0 R /XYZ 40.01575 526.0394 0 ] /Rect [ 100.0157 712.0394 135.5957 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
182 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 587 0 R /XYZ 40.01575 526.0394 0 ] /Rect [ 544.1398 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
183 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 588 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 694.0394 153.9357 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
184 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 588 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
185 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 588 0 R /XYZ 40.01575 754.2394 0 ] /Rect [ 100.0157 676.0394 163.9257 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
186 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 588 0 R /XYZ 40.01575 754.2394 0 ] /Rect [ 544.1398 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
187 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 592 0 R /XYZ 40.01575 704.0394 0 ] /Rect [ 100.0157 658.0394 165.0457 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
188 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 592 0 R /XYZ 40.01575 704.0394 0 ] /Rect [ 544.1398 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
189 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 744.0394 0 ] /Rect [ 100.0157 640.0394 181.1657 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
190 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 744.0394 0 ] /Rect [ 544.1398 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
191 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 290.6394 0 ] /Rect [ 100.0157 622.0394 180.0457 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
192 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 290.6394 0 ] /Rect [ 544.1398 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
193 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 203.2394 0 ] /Rect [ 80.01575 604.0394 251.7757 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
194 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 203.2394 0 ] /Rect [ 544.1398 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
195 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 128.4394 0 ] /Rect [ 100.0157 586.0394 160.5957 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
196 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 595 0 R /XYZ 40.01575 128.4394 0 ] /Rect [ 544.1398 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
197 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 596 0 R /XYZ 40.01575 699.0394 0 ] /Rect [ 100.0157 568.0394 141.6857 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
198 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 596 0 R /XYZ 40.01575 699.0394 0 ] /Rect [ 544.1398 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
199 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 596 0 R /XYZ 40.01575 548.6394 0 ] /Rect [ 80.01575 550.0394 143.9257 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
200 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 596 0 R /XYZ 40.01575 548.6394 0 ] /Rect [ 544.1398 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
201 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 596 0 R /XYZ 40.01575 497.8394 0 ] /Rect [ 100.0157 532.0394 131.6957 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
202 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 596 0 R /XYZ 40.01575 497.8394 0 ] /Rect [ 544.1398 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
203 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 598 0 R /XYZ 40.01575 310.4394 0 ] /Rect [ 100.0157 514.0394 155.5857 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
204 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 598 0 R /XYZ 40.01575 310.4394 0 ] /Rect [ 544.1398 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
205 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 577.4394 0 ] /Rect [ 100.0157 496.0394 134.4757 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
206 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 577.4394 0 ] /Rect [ 544.1398 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
207 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 547.0394 0 ] /Rect [ 100.0157 478.0394 137.8157 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
208 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 547.0394 0 ] /Rect [ 544.1398 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
209 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 340.8394 0 ] /Rect [ 100.0157 460.0394 135.5957 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
210 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 340.8394 0 ] /Rect [ 544.1398 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
211 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 191.4394 0 ] /Rect [ 60.01575 442.0394 124.4757 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
212 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 599 0 R /XYZ 40.01575 191.4394 0 ] /Rect [ 544.1398 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
213 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 600 0 R /XYZ 40.01575 486.0394 0 ] /Rect [ 80.01575 424.0394 151.7057 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
214 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 600 0 R /XYZ 40.01575 486.0394 0 ] /Rect [ 544.1398 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
215 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 600 0 R /XYZ 40.01575 453.2394 0 ] /Rect [ 100.0157 406.0394 113.3557 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
216 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 600 0 R /XYZ 40.01575 453.2394 0 ] /Rect [ 544.1398 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
217 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 600 0 R /XYZ 40.01575 106.2394 0 ] /Rect [ 100.0157 388.0394 118.3557 400.0394 ] /Subtype /Link /Type /Annot
>>
endobj
218 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 600 0 R /XYZ 40.01575 106.2394 0 ] /Rect [ 544.1398 388.7894 555.2598 400.7894 ] /Subtype /Link /Type /Annot
>>
endobj
219 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 601 0 R /XYZ 40.01575 328.8394 0 ] /Rect [ 100.0157 370.0394 119.4657 382.0394 ] /Subtype /Link /Type /Annot
>>
endobj
220 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 601 0 R /XYZ 40.01575 328.8394 0 ] /Rect [ 544.1398 370.7894 555.2598 382.7894 ] /Subtype /Link /Type /Annot
>>
endobj
221 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 602 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 352.0394 137.8157 364.0394 ] /Subtype /Link /Type /Annot
>>
endobj
222 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 602 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 352.7894 555.2598 364.7894 ] /Subtype /Link /Type /Annot
>>
endobj
223 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 602 0 R /XYZ 40.01575 483.2394 0 ] /Rect [ 100.0157 334.0394 132.2457 346.0394 ] /Subtype /Link /Type /Annot
>>
endobj
224 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 602 0 R /XYZ 40.01575 483.2394 0 ] /Rect [ 544.1398 334.7894 555.2598 346.7894 ] /Subtype /Link /Type /Annot
>>
endobj
225 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 603 0 R /XYZ 40.01575 728.2394 0 ] /Rect [ 100.0157 316.0394 138.3657 328.0394 ] /Subtype /Link /Type /Annot
>>
endobj
226 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 603 0 R /XYZ 40.01575 728.2394 0 ] /Rect [ 544.1398 316.7894 555.2598 328.7894 ] /Subtype /Link /Type /Annot
>>
endobj
227 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 603 0 R /XYZ 40.01575 261.4394 0 ] /Rect [ 100.0157 298.0394 130.0157 310.0394 ] /Subtype /Link /Type /Annot
>>
endobj
228 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 603 0 R /XYZ 40.01575 261.4394 0 ] /Rect [ 544.1398 298.7894 555.2598 310.7894 ] /Subtype /Link /Type /Annot
>>
endobj
229 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 604 0 R /XYZ 40.01575 512.8394 0 ] /Rect [ 100.0157 280.0394 126.6957 292.0394 ] /Subtype /Link /Type /Annot
>>
endobj
230 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 604 0 R /XYZ 40.01575 512.8394 0 ] /Rect [ 544.1398 280.7894 555.2598 292.7894 ] /Subtype /Link /Type /Annot
>>
endobj
231 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 604 0 R /XYZ 40.01575 194.2394 0 ] /Rect [ 100.0157 262.0394 136.1357 274.0394 ] /Subtype /Link /Type /Annot
>>
endobj
232 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 604 0 R /XYZ 40.01575 194.2394 0 ] /Rect [ 544.1398 262.7894 555.2598 274.7894 ] /Subtype /Link /Type /Annot
>>
endobj
233 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 388.6394 0 ] /Rect [ 100.0157 244.0394 129.4657 256.0394 ] /Subtype /Link /Type /Annot
>>
endobj
234 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 388.6394 0 ] /Rect [ 544.1398 244.7894 555.2598 256.7894 ] /Subtype /Link /Type /Annot
>>
endobj
235 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 334.2394 0 ] /Rect [ 100.0157 226.0394 132.2457 238.0394 ] /Subtype /Link /Type /Annot
>>
endobj
236 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 334.2394 0 ] /Rect [ 544.1398 226.7894 555.2598 238.7894 ] /Subtype /Link /Type /Annot
>>
endobj
237 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 279.8394 0 ] /Rect [ 100.0157 208.0394 146.1457 220.0394 ] /Subtype /Link /Type /Annot
>>
endobj
238 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 279.8394 0 ] /Rect [ 544.1398 208.7894 555.2598 220.7894 ] /Subtype /Link /Type /Annot
>>
endobj
239 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 225.4394 0 ] /Rect [ 100.0157 190.0394 119.4757 202.0394 ] /Subtype /Link /Type /Annot
>>
endobj
240 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 225.4394 0 ] /Rect [ 544.1398 190.7894 555.2598 202.7894 ] /Subtype /Link /Type /Annot
>>
endobj
241 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 74.23937 0 ] /Rect [ 100.0157 172.0394 146.1557 184.0394 ] /Subtype /Link /Type /Annot
>>
endobj
242 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 605 0 R /XYZ 40.01575 74.23937 0 ] /Rect [ 544.1398 172.7894 555.2598 184.7894 ] /Subtype /Link /Type /Annot
>>
endobj
243 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 606 0 R /XYZ 40.01575 332.4394 0 ] /Rect [ 100.0157 154.0394 130.0157 166.0394 ] /Subtype /Link /Type /Annot
>>
endobj
244 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 606 0 R /XYZ 40.01575 332.4394 0 ] /Rect [ 544.1398 154.7894 555.2598 166.7894 ] /Subtype /Link /Type /Annot
>>
endobj
245 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 607 0 R /XYZ 40.01575 611.4394 0 ] /Rect [ 100.0157 136.0394 122.2557 148.0394 ] /Subtype /Link /Type /Annot
>>
endobj
246 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 607 0 R /XYZ 40.01575 611.4394 0 ] /Rect [ 544.1398 136.7894 555.2598 148.7894 ] /Subtype /Link /Type /Annot
>>
endobj
247 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 607 0 R /XYZ 40.01575 345.4394 0 ] /Rect [ 80.01575 118.0394 205.0757 130.0394 ] /Subtype /Link /Type /Annot
>>
endobj
248 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 607 0 R /XYZ 40.01575 345.4394 0 ] /Rect [ 544.1398 118.7894 555.2598 130.7894 ] /Subtype /Link /Type /Annot
>>
endobj
249 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 607 0 R /XYZ 40.01575 312.6394 0 ] /Rect [ 100.0157 100.0394 176.7257 112.0394 ] /Subtype /Link /Type /Annot
>>
endobj
250 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 607 0 R /XYZ 40.01575 312.6394 0 ] /Rect [ 544.1398 100.7894 555.2598 112.7894 ] /Subtype /Link /Type /Annot
>>
endobj
251 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 608 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 100.0157 82.03937 168.3757 94.03937 ] /Subtype /Link /Type /Annot
>>
endobj
252 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 608 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 544.1398 82.78937 555.2598 94.78937 ] /Subtype /Link /Type /Annot
>>
endobj
253 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 609 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 100.0157 64.03937 165.0557 76.03937 ] /Subtype /Link /Type /Annot
>>
endobj
254 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 609 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 544.1398 64.78937 555.2598 76.78937 ] /Subtype /Link /Type /Annot
>>
endobj
255 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 610 0 R /XYZ 40.01575 246.0394 0 ] /Rect [ 100.0157 46.03937 170.6057 58.03937 ] /Subtype /Link /Type /Annot
>>
endobj
256 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 610 0 R /XYZ 40.01575 246.0394 0 ] /Rect [ 544.1398 46.78937 555.2598 58.78937 ] /Subtype /Link /Type /Annot
>>
endobj
257 0 obj
<<
/Annots [ 173 0 R 174 0 R 175 0 R 176 0 R 177 0 R 178 0 R 179 0 R 180 0 R 181 0 R 182 0 R 
  183 0 R 184 0 R 185 0 R 186 0 R 187 0 R 188 0 R 189 0 R 190 0 R 191 0 R 192 0 R 
  193 0 R 194 0 R 195 0 R 196 0 R 197 0 R 198 0 R 199 0 R 200 0 R 201 0 R 202 0 R 
  203 0 R 204 0 R 205 0 R 206 0 R 207 0 R 208 0 R 209 0 R 210 0 R 211 0 R 212 0 R 
  213 0 R 214 0 R 215 0 R 216 0 R 217 0 R 218 0 R 219 0 R 220 0 R 221 0 R 222 0 R 
  223 0 R 224 0 R 225 0 R 226 0 R 227 0 R 228 0 R 229 0 R 230 0 R 231 0 R 232 0 R 
  233 0 R 234 0 R 235 0 R 236 0 R 237 0 R 238 0 R 239 0 R 240 0 R 241 0 R 242 0 R 
  243 0 R 244 0 R 245 0 R 246 0 R 247 0 R 248 0 R 249 0 R 250 0 R 251 0 R 252 0 R 
  253 0 R 254 0 R 255 0 R 256 0 R ] /Contents 965 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
258 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 611 0 R /XYZ 40.01575 215.0394 0 ] /Rect [ 100.0157 784.0394 174.4957 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
259 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 611 0 R /XYZ 40.01575 215.0394 0 ] /Rect [ 544.1398 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
260 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 612 0 R /XYZ 40.01575 471.6394 0 ] /Rect [ 100.0157 766.0394 167.8257 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
261 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 612 0 R /XYZ 40.01575 471.6394 0 ] /Rect [ 544.1398 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
262 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 613 0 R /XYZ 40.01575 428.6394 0 ] /Rect [ 100.0157 748.0394 170.6057 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
263 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 613 0 R /XYZ 40.01575 428.6394 0 ] /Rect [ 544.1398 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
264 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 614 0 R /XYZ 40.01575 389.8394 0 ] /Rect [ 100.0157 730.0394 184.5057 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
265 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 614 0 R /XYZ 40.01575 389.8394 0 ] /Rect [ 544.1398 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
266 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 615 0 R /XYZ 40.01575 509.6394 0 ] /Rect [ 100.0157 712.0394 171.1657 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
267 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 615 0 R /XYZ 40.01575 509.6394 0 ] /Rect [ 544.1398 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
268 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 615 0 R /XYZ 40.01575 188.6394 0 ] /Rect [ 100.0157 694.0394 137.7957 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
269 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 615 0 R /XYZ 40.01575 188.6394 0 ] /Rect [ 544.1398 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
270 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 616 0 R /XYZ 40.01575 153.0394 0 ] /Rect [ 100.0157 676.0394 138.9157 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
271 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 616 0 R /XYZ 40.01575 153.0394 0 ] /Rect [ 544.1398 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
272 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 617 0 R /XYZ 40.01575 116.0394 0 ] /Rect [ 80.01575 658.0394 185.6057 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
273 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 617 0 R /XYZ 40.01575 116.0394 0 ] /Rect [ 544.1398 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
274 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 617 0 R /XYZ 40.01575 83.23937 0 ] /Rect [ 100.0157 640.0394 157.2557 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
275 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 617 0 R /XYZ 40.01575 83.23937 0 ] /Rect [ 544.1398 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
276 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 619 0 R /XYZ 40.01575 696.2394 0 ] /Rect [ 100.0157 622.0394 148.9057 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
277 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 619 0 R /XYZ 40.01575 696.2394 0 ] /Rect [ 544.1398 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
278 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 620 0 R /XYZ 40.01575 609.4394 0 ] /Rect [ 100.0157 604.0394 145.5857 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
279 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 620 0 R /XYZ 40.01575 609.4394 0 ] /Rect [ 544.1398 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
280 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 621 0 R /XYZ 40.01575 504.6394 0 ] /Rect [ 100.0157 586.0394 151.1357 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
281 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 621 0 R /XYZ 40.01575 504.6394 0 ] /Rect [ 544.1398 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
282 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 622 0 R /XYZ 40.01575 372.8394 0 ] /Rect [ 100.0157 568.0394 155.0257 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
283 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 622 0 R /XYZ 40.01575 372.8394 0 ] /Rect [ 544.1398 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
284 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 623 0 R /XYZ 40.01575 368.8394 0 ] /Rect [ 100.0157 550.0394 148.3557 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
285 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 623 0 R /XYZ 40.01575 368.8394 0 ] /Rect [ 544.1398 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
286 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 624 0 R /XYZ 40.01575 416.8394 0 ] /Rect [ 100.0157 532.0394 151.1357 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
287 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 624 0 R /XYZ 40.01575 416.8394 0 ] /Rect [ 544.1398 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
288 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 625 0 R /XYZ 40.01575 479.6394 0 ] /Rect [ 100.0157 514.0394 165.0357 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
289 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 625 0 R /XYZ 40.01575 479.6394 0 ] /Rect [ 544.1398 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
290 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 626 0 R /XYZ 40.01575 536.6394 0 ] /Rect [ 100.0157 496.0394 167.2657 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
291 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 626 0 R /XYZ 40.01575 536.6394 0 ] /Rect [ 544.1398 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
292 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 627 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 478.0394 151.6957 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
293 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 627 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
294 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 627 0 R /XYZ 40.01575 289.2394 0 ] /Rect [ 80.01575 460.0394 258.9857 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
295 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 627 0 R /XYZ 40.01575 289.2394 0 ] /Rect [ 544.1398 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
296 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 627 0 R /XYZ 40.01575 256.4394 0 ] /Rect [ 100.0157 442.0394 126.6857 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
297 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 627 0 R /XYZ 40.01575 256.4394 0 ] /Rect [ 544.1398 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
298 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 629 0 R /XYZ 40.01575 675.2394 0 ] /Rect [ 100.0157 424.0394 137.7857 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
299 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 629 0 R /XYZ 40.01575 675.2394 0 ] /Rect [ 544.1398 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
300 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 630 0 R /XYZ 40.01575 375.8394 0 ] /Rect [ 100.0157 406.0394 134.4657 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
301 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 630 0 R /XYZ 40.01575 375.8394 0 ] /Rect [ 544.1398 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
302 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 631 0 R /XYZ 40.01575 196.2394 0 ] /Rect [ 100.0157 388.0394 143.9057 400.0394 ] /Subtype /Link /Type /Annot
>>
endobj
303 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 631 0 R /XYZ 40.01575 196.2394 0 ] /Rect [ 544.1398 388.7894 555.2598 400.7894 ] /Subtype /Link /Type /Annot
>>
endobj
304 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 633 0 R /XYZ 40.01575 687.2394 0 ] /Rect [ 100.0157 370.0394 135.0157 382.0394 ] /Subtype /Link /Type /Annot
>>
endobj
305 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 633 0 R /XYZ 40.01575 687.2394 0 ] /Rect [ 544.1398 370.7894 555.2598 382.7894 ] /Subtype /Link /Type /Annot
>>
endobj
306 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 635 0 R /XYZ 40.01575 495.6394 0 ] /Rect [ 100.0157 352.0394 135.0157 364.0394 ] /Subtype /Link /Type /Annot
>>
endobj
307 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 635 0 R /XYZ 40.01575 495.6394 0 ] /Rect [ 544.1398 352.7894 555.2598 364.7894 ] /Subtype /Link /Type /Annot
>>
endobj
308 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 636 0 R /XYZ 40.01575 452.8394 0 ] /Rect [ 100.0157 334.0394 138.3457 346.0394 ] /Subtype /Link /Type /Annot
>>
endobj
309 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 636 0 R /XYZ 40.01575 452.8394 0 ] /Rect [ 544.1398 334.7894 555.2598 346.7894 ] /Subtype /Link /Type /Annot
>>
endobj
310 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 637 0 R /XYZ 40.01575 114.4394 0 ] /Rect [ 100.0157 316.0394 133.9057 328.0394 ] /Subtype /Link /Type /Annot
>>
endobj
311 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 637 0 R /XYZ 40.01575 114.4394 0 ] /Rect [ 544.1398 316.7894 555.2598 328.7894 ] /Subtype /Link /Type /Annot
>>
endobj
312 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 642 0 R /XYZ 40.01575 596.4394 0 ] /Rect [ 100.0157 298.0394 142.7957 310.0394 ] /Subtype /Link /Type /Annot
>>
endobj
313 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 642 0 R /XYZ 40.01575 596.4394 0 ] /Rect [ 538.5798 298.7894 555.2598 310.7894 ] /Subtype /Link /Type /Annot
>>
endobj
314 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 643 0 R /XYZ 40.01575 662.4394 0 ] /Rect [ 100.0157 280.0394 131.6857 292.0394 ] /Subtype /Link /Type /Annot
>>
endobj
315 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 643 0 R /XYZ 40.01575 662.4394 0 ] /Rect [ 538.5798 280.7894 555.2598 292.7894 ] /Subtype /Link /Type /Annot
>>
endobj
316 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 643 0 R /XYZ 40.01575 369.4394 0 ] /Rect [ 80.01575 262.0394 209.5257 274.0394 ] /Subtype /Link /Type /Annot
>>
endobj
317 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 643 0 R /XYZ 40.01575 369.4394 0 ] /Rect [ 538.5798 262.7894 555.2598 274.7894 ] /Subtype /Link /Type /Annot
>>
endobj
318 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 643 0 R /XYZ 40.01575 336.6394 0 ] /Rect [ 100.0157 244.0394 171.7057 256.0394 ] /Subtype /Link /Type /Annot
>>
endobj
319 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 643 0 R /XYZ 40.01575 336.6394 0 ] /Rect [ 538.5798 244.7894 555.2598 256.7894 ] /Subtype /Link /Type /Annot
>>
endobj
320 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 644 0 R /XYZ 40.01575 669.0394 0 ] /Rect [ 100.0157 226.0394 225.0757 238.0394 ] /Subtype /Link /Type /Annot
>>
endobj
321 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 644 0 R /XYZ 40.01575 669.0394 0 ] /Rect [ 538.5798 226.7894 555.2598 238.7894 ] /Subtype /Link /Type /Annot
>>
endobj
322 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 644 0 R /XYZ 40.01575 266.6394 0 ] /Rect [ 100.0157 208.0394 205.6057 220.0394 ] /Subtype /Link /Type /Annot
>>
endobj
323 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 644 0 R /XYZ 40.01575 266.6394 0 ] /Rect [ 538.5798 208.7894 555.2598 220.7894 ] /Subtype /Link /Type /Annot
>>
endobj
324 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 645 0 R /XYZ 40.01575 585.0394 0 ] /Rect [ 100.0157 190.0394 278.9857 202.0394 ] /Subtype /Link /Type /Annot
>>
endobj
325 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 645 0 R /XYZ 40.01575 585.0394 0 ] /Rect [ 538.5798 190.7894 555.2598 202.7894 ] /Subtype /Link /Type /Annot
>>
endobj
326 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 645 0 R /XYZ 40.01575 110.6394 0 ] /Rect [ 80.01575 172.0394 145.0557 184.0394 ] /Subtype /Link /Type /Annot
>>
endobj
327 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 645 0 R /XYZ 40.01575 110.6394 0 ] /Rect [ 538.5798 172.7894 555.2598 184.7894 ] /Subtype /Link /Type /Annot
>>
endobj
328 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 645 0 R /XYZ 40.01575 77.83937 0 ] /Rect [ 100.0157 154.0394 134.4757 166.0394 ] /Subtype /Link /Type /Annot
>>
endobj
329 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 645 0 R /XYZ 40.01575 77.83937 0 ] /Rect [ 538.5798 154.7894 555.2598 166.7894 ] /Subtype /Link /Type /Annot
>>
endobj
330 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 646 0 R /XYZ 40.01575 127.0394 0 ] /Rect [ 100.0157 136.0394 137.8157 148.0394 ] /Subtype /Link /Type /Annot
>>
endobj
331 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 646 0 R /XYZ 40.01575 127.0394 0 ] /Rect [ 538.5798 136.7894 555.2598 148.7894 ] /Subtype /Link /Type /Annot
>>
endobj
332 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 647 0 R /XYZ 40.01575 561.2394 0 ] /Rect [ 100.0157 118.0394 146.7057 130.0394 ] /Subtype /Link /Type /Annot
>>
endobj
333 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 647 0 R /XYZ 40.01575 561.2394 0 ] /Rect [ 538.5798 118.7894 555.2598 130.7894 ] /Subtype /Link /Type /Annot
>>
endobj
334 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 647 0 R /XYZ 40.01575 145.2394 0 ] /Rect [ 100.0157 100.0394 135.0257 112.0394 ] /Subtype /Link /Type /Annot
>>
endobj
335 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 647 0 R /XYZ 40.01575 145.2394 0 ] /Rect [ 538.5798 100.7894 555.2598 112.7894 ] /Subtype /Link /Type /Annot
>>
endobj
336 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 649 0 R /XYZ 40.01575 300.4394 0 ] /Rect [ 100.0157 82.03937 236.1857 94.03937 ] /Subtype /Link /Type /Annot
>>
endobj
337 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 649 0 R /XYZ 40.01575 300.4394 0 ] /Rect [ 538.5798 82.78937 555.2598 94.78937 ] /Subtype /Link /Type /Annot
>>
endobj
338 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 649 0 R /XYZ 40.01575 114.0394 0 ] /Rect [ 60.01575 64.03937 98.35575 76.03937 ] /Subtype /Link /Type /Annot
>>
endobj
339 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 649 0 R /XYZ 40.01575 114.0394 0 ] /Rect [ 538.5798 64.78937 555.2598 76.78937 ] /Subtype /Link /Type /Annot
>>
endobj
340 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 60.01575 46.03937 120.5957 58.03937 ] /Subtype /Link /Type /Annot
>>
endobj
341 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 46.78937 555.2598 58.78937 ] /Subtype /Link /Type /Annot
>>
endobj
342 0 obj
<<
/Annots [ 258 0 R 259 0 R 260 0 R 261 0 R 262 0 R 263 0 R 264 0 R 265 0 R 266 0 R 267 0 R 
  268 0 R 269 0 R 270 0 R 271 0 R 272 0 R 273 0 R 274 0 R 275 0 R 276 0 R 277 0 R 
  278 0 R 279 0 R 280 0 R 281 0 R 282 0 R 283 0 R 284 0 R 285 0 R 286 0 R 287 0 R 
  288 0 R 289 0 R 290 0 R 291 0 R 292 0 R 293 0 R 294 0 R 295 0 R 296 0 R 297 0 R 
  298 0 R 299 0 R 300 0 R 301 0 R 302 0 R 303 0 R 304 0 R 305 0 R 306 0 R 307 0 R 
  308 0 R 309 0 R 310 0 R 311 0 R 312 0 R 313 0 R 314 0 R 315 0 R 316 0 R 317 0 R 
  318 0 R 319 0 R 320 0 R 321 0 R 322 0 R 323 0 R 324 0 R 325 0 R 326 0 R 327 0 R 
  328 0 R 329 0 R 330 0 R 331 0 R 332 0 R 333 0 R 334 0 R 335 0 R 336 0 R 337 0 R 
  338 0 R 339 0 R 340 0 R 341 0 R ] /Contents 966 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
343 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 721.8394 0 ] /Rect [ 80.01575 784.0394 131.6957 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
344 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 721.8394 0 ] /Rect [ 538.5798 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
345 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 571.8394 0 ] /Rect [ 80.01575 766.0394 155.5857 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
346 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 571.8394 0 ] /Rect [ 538.5798 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
347 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 308.2394 0 ] /Rect [ 80.01575 748.0394 110.0357 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
348 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 308.2394 0 ] /Rect [ 538.5798 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
349 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 137.0394 0 ] /Rect [ 80.01575 730.0394 128.9257 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
350 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 652 0 R /XYZ 40.01575 137.0394 0 ] /Rect [ 538.5798 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
351 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 653 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 80.01575 712.0394 202.2857 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
352 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 653 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 538.5798 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
353 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 653 0 R /XYZ 40.01575 602.2394 0 ] /Rect [ 80.01575 694.0394 187.8457 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
354 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 653 0 R /XYZ 40.01575 602.2394 0 ] /Rect [ 538.5798 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
355 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 653 0 R /XYZ 40.01575 491.0394 0 ] /Rect [ 80.01575 676.0394 220.0657 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
356 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 653 0 R /XYZ 40.01575 491.0394 0 ] /Rect [ 538.5798 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
357 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 654 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 60.01575 658.0394 137.8357 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
358 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 654 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
359 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 654 0 R /XYZ 40.01575 571.8394 0 ] /Rect [ 80.01575 640.0394 310.6657 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
360 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 654 0 R /XYZ 40.01575 571.8394 0 ] /Rect [ 538.5798 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
361 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 622.0394 181.1757 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
362 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
363 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 513.8394 0 ] /Rect [ 100.0157 604.0394 337.9057 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
364 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 513.8394 0 ] /Rect [ 538.5798 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
365 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 458.6394 0 ] /Rect [ 100.0157 586.0394 386.7857 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
366 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 458.6394 0 ] /Rect [ 538.5798 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
367 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 263.0394 0 ] /Rect [ 80.01575 568.0394 170.0557 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
368 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 263.0394 0 ] /Rect [ 538.5798 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
369 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 230.2394 0 ] /Rect [ 100.0157 550.0394 153.9257 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
370 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 655 0 R /XYZ 40.01575 230.2394 0 ] /Rect [ 538.5798 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
371 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 725.4394 0 ] /Rect [ 100.0157 532.0394 150.0257 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
372 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 725.4394 0 ] /Rect [ 538.5798 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
373 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 604.6394 0 ] /Rect [ 100.0157 514.0394 166.1457 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
374 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 604.6394 0 ] /Rect [ 538.5798 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
375 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 469.0394 0 ] /Rect [ 100.0157 496.0394 366.7757 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
376 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 469.0394 0 ] /Rect [ 538.5798 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
377 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 363.0394 0 ] /Rect [ 100.0157 478.0394 281.1857 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
378 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 363.0394 0 ] /Rect [ 538.5798 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
379 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 259.8394 0 ] /Rect [ 100.0157 460.0394 166.1557 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
380 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 259.8394 0 ] /Rect [ 538.5798 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
381 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 97.43937 0 ] /Rect [ 100.0157 442.0394 215.6157 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
382 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 656 0 R /XYZ 40.01575 97.43937 0 ] /Rect [ 538.5798 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
383 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 635.8394 0 ] /Rect [ 100.0157 424.0394 111.1357 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
384 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 635.8394 0 ] /Rect [ 538.5798 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
385 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 568.6394 0 ] /Rect [ 100.0157 406.0394 181.1457 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
386 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 568.6394 0 ] /Rect [ 538.5798 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
387 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 513.4394 0 ] /Rect [ 100.0157 388.0394 165.0257 400.0394 ] /Subtype /Link /Type /Annot
>>
endobj
388 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 513.4394 0 ] /Rect [ 538.5798 388.7894 555.2598 400.7894 ] /Subtype /Link /Type /Annot
>>
endobj
389 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 351.0394 0 ] /Rect [ 100.0157 370.7894 116.6857 382.7894 ] /Subtype /Link /Type /Annot
>>
endobj
390 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 351.0394 0 ] /Rect [ 538.5798 370.7894 555.2598 382.7894 ] /Subtype /Link /Type /Annot
>>
endobj
391 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 269.0394 0 ] /Rect [ 100.0157 352.0394 150.0157 364.0394 ] /Subtype /Link /Type /Annot
>>
endobj
392 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 269.0394 0 ] /Rect [ 538.5798 352.7894 555.2598 364.7894 ] /Subtype /Link /Type /Annot
>>
endobj
393 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 112.2394 0 ] /Rect [ 100.0157 334.0394 123.3557 346.0394 ] /Subtype /Link /Type /Annot
>>
endobj
394 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 657 0 R /XYZ 40.01575 112.2394 0 ] /Rect [ 538.5798 334.7894 555.2598 346.7894 ] /Subtype /Link /Type /Annot
>>
endobj
395 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 316.0394 222.2957 328.0394 ] /Subtype /Link /Type /Annot
>>
endobj
396 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 316.7894 555.2598 328.7894 ] /Subtype /Link /Type /Annot
>>
endobj
397 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 654.2394 0 ] /Rect [ 100.0157 298.0394 140.5857 310.0394 ] /Subtype /Link /Type /Annot
>>
endobj
398 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 654.2394 0 ] /Rect [ 538.5798 298.7894 555.2598 310.7894 ] /Subtype /Link /Type /Annot
>>
endobj
399 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 315.4394 0 ] /Rect [ 100.0157 280.0394 315.6457 292.0394 ] /Subtype /Link /Type /Annot
>>
endobj
400 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 315.4394 0 ] /Rect [ 538.5798 280.7894 555.2598 292.7894 ] /Subtype /Link /Type /Annot
>>
endobj
401 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 197.4394 0 ] /Rect [ 100.0157 262.0394 142.2457 274.0394 ] /Subtype /Link /Type /Annot
>>
endobj
402 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 658 0 R /XYZ 40.01575 197.4394 0 ] /Rect [ 538.5798 262.7894 555.2598 274.7894 ] /Subtype /Link /Type /Annot
>>
endobj
403 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 244.0394 228.9457 256.0394 ] /Subtype /Link /Type /Annot
>>
endobj
404 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 244.7894 555.2598 256.7894 ] /Subtype /Link /Type /Annot
>>
endobj
405 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 453.4394 0 ] /Rect [ 100.0157 226.0394 121.1357 238.0394 ] /Subtype /Link /Type /Annot
>>
endobj
406 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 453.4394 0 ] /Rect [ 538.5798 226.7894 555.2598 238.7894 ] /Subtype /Link /Type /Annot
>>
endobj
407 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 335.4394 0 ] /Rect [ 100.0157 208.0394 186.1657 220.0394 ] /Subtype /Link /Type /Annot
>>
endobj
408 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 335.4394 0 ] /Rect [ 538.5798 208.7894 555.2598 220.7894 ] /Subtype /Link /Type /Annot
>>
endobj
409 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 193.4394 0 ] /Rect [ 60.01575 190.0394 109.4857 202.0394 ] /Subtype /Link /Type /Annot
>>
endobj
410 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 659 0 R /XYZ 40.01575 193.4394 0 ] /Rect [ 538.5798 190.7894 555.2598 202.7894 ] /Subtype /Link /Type /Annot
>>
endobj
411 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 662 0 R /XYZ 40.01575 687.0394 0 ] /Rect [ 80.01575 172.0394 85.57575 184.0394 ] /Subtype /Link /Type /Annot
>>
endobj
412 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 662 0 R /XYZ 40.01575 687.0394 0 ] /Rect [ 538.5798 172.7894 555.2598 184.7894 ] /Subtype /Link /Type /Annot
>>
endobj
413 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 662 0 R /XYZ 40.01575 121.8394 0 ] /Rect [ 80.01575 154.0394 143.9257 166.0394 ] /Subtype /Link /Type /Annot
>>
endobj
414 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 662 0 R /XYZ 40.01575 121.8394 0 ] /Rect [ 538.5798 154.7894 555.2598 166.7894 ] /Subtype /Link /Type /Annot
>>
endobj
415 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 663 0 R /XYZ 40.01575 741.0394 0 ] /Rect [ 100.0157 136.0394 278.9857 148.0394 ] /Subtype /Link /Type /Annot
>>
endobj
416 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 663 0 R /XYZ 40.01575 741.0394 0 ] /Rect [ 538.5798 136.7894 555.2598 148.7894 ] /Subtype /Link /Type /Annot
>>
endobj
417 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 663 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 100.0157 118.0394 180.0557 130.0394 ] /Subtype /Link /Type /Annot
>>
endobj
418 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 663 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 538.5798 118.7894 555.2598 130.7894 ] /Subtype /Link /Type /Annot
>>
endobj
419 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 666 0 R /XYZ 40.01575 681.0394 0 ] /Rect [ 100.0157 100.0394 207.2757 112.0394 ] /Subtype /Link /Type /Annot
>>
endobj
420 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 666 0 R /XYZ 40.01575 681.0394 0 ] /Rect [ 538.5798 100.7894 555.2598 112.7894 ] /Subtype /Link /Type /Annot
>>
endobj
421 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 666 0 R /XYZ 40.01575 293.4394 0 ] /Rect [ 100.0157 82.03937 177.8257 94.03937 ] /Subtype /Link /Type /Annot
>>
endobj
422 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 666 0 R /XYZ 40.01575 293.4394 0 ] /Rect [ 538.5798 82.78937 555.2598 94.78937 ] /Subtype /Link /Type /Annot
>>
endobj
423 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 666 0 R /XYZ 40.01575 202.2394 0 ] /Rect [ 100.0157 64.03937 123.9057 76.03937 ] /Subtype /Link /Type /Annot
>>
endobj
424 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 666 0 R /XYZ 40.01575 202.2394 0 ] /Rect [ 538.5798 64.78937 555.2598 76.78937 ] /Subtype /Link /Type /Annot
>>
endobj
425 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 728.2394 0 ] /Rect [ 100.0157 46.03937 135.5857 58.03937 ] /Subtype /Link /Type /Annot
>>
endobj
426 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 728.2394 0 ] /Rect [ 538.5798 46.78937 555.2598 58.78937 ] /Subtype /Link /Type /Annot
>>
endobj
427 0 obj
<<
/Annots [ 343 0 R 344 0 R 345 0 R 346 0 R 347 0 R 348 0 R 349 0 R 350 0 R 351 0 R 352 0 R 
  353 0 R 354 0 R 355 0 R 356 0 R 357 0 R 358 0 R 359 0 R 360 0 R 361 0 R 362 0 R 
  363 0 R 364 0 R 365 0 R 366 0 R 367 0 R 368 0 R 369 0 R 370 0 R 371 0 R 372 0 R 
  373 0 R 374 0 R 375 0 R 376 0 R 377 0 R 378 0 R 379 0 R 380 0 R 381 0 R 382 0 R 
  383 0 R 384 0 R 385 0 R 386 0 R 387 0 R 388 0 R 389 0 R 390 0 R 391 0 R 392 0 R 
  393 0 R 394 0 R 395 0 R 396 0 R 397 0 R 398 0 R 399 0 R 400 0 R 401 0 R 402 0 R 
  403 0 R 404 0 R 405 0 R 406 0 R 407 0 R 408 0 R 409 0 R 410 0 R 411 0 R 412 0 R 
  413 0 R 414 0 R 415 0 R 416 0 R 417 0 R 418 0 R 419 0 R 420 0 R 421 0 R 422 0 R 
  423 0 R 424 0 R 425 0 R 426 0 R ] /Contents 967 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
428 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 607.4394 0 ] /Rect [ 100.0157 784.0394 130.0257 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
429 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 607.4394 0 ] /Rect [ 538.5798 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
430 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 552.2394 0 ] /Rect [ 100.0157 766.0394 232.8557 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
431 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 552.2394 0 ] /Rect [ 538.5798 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
432 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 497.0394 0 ] /Rect [ 100.0157 748.7894 166.1457 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
433 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 497.0394 0 ] /Rect [ 538.5798 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
434 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 376.2394 0 ] /Rect [ 100.0157 730.0394 192.8257 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
435 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 376.2394 0 ] /Rect [ 538.5798 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
436 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 231.4394 0 ] /Rect [ 100.0157 712.0394 188.9357 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
437 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 667 0 R /XYZ 40.01575 231.4394 0 ] /Rect [ 538.5798 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
438 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 668 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 80.01575 694.0394 153.9457 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
439 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 668 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 538.5798 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
440 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 668 0 R /XYZ 40.01575 227.8394 0 ] /Rect [ 80.01575 676.0394 248.4357 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
441 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 668 0 R /XYZ 40.01575 227.8394 0 ] /Rect [ 538.5798 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
442 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 669 0 R /XYZ 40.01575 725.4394 0 ] /Rect [ 60.01575 658.0394 118.3757 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
443 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 669 0 R /XYZ 40.01575 725.4394 0 ] /Rect [ 538.5798 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
444 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 669 0 R /XYZ 40.01575 582.2394 0 ] /Rect [ 80.01575 640.0394 116.6957 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
445 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 669 0 R /XYZ 40.01575 582.2394 0 ] /Rect [ 538.5798 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
446 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 669 0 R /XYZ 40.01575 301.0394 0 ] /Rect [ 80.01575 622.0394 258.9857 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
447 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 669 0 R /XYZ 40.01575 301.0394 0 ] /Rect [ 538.5798 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
448 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 569.4394 0 ] /Rect [ 100.0157 604.0394 464.0557 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
449 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 569.4394 0 ] /Rect [ 538.5798 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
450 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 332.2394 0 ] /Rect [ 80.01575 586.0394 236.7257 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
451 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 332.2394 0 ] /Rect [ 538.5798 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
452 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 299.4394 0 ] /Rect [ 100.0157 568.0394 163.3757 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
453 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 299.4394 0 ] /Rect [ 538.5798 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
454 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 181.4394 0 ] /Rect [ 100.0157 550.0394 198.9557 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
455 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 670 0 R /XYZ 40.01575 181.4394 0 ] /Rect [ 538.5798 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
456 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 100.0157 532.0394 242.3057 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
457 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 538.5798 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
458 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 529.8394 0 ] /Rect [ 100.0157 514.0394 275.6457 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
459 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 529.8394 0 ] /Rect [ 538.5798 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
460 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 343.4394 0 ] /Rect [ 80.01575 496.0394 365.7357 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
461 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 343.4394 0 ] /Rect [ 538.5798 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
462 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 199.0394 0 ] /Rect [ 80.01575 478.0394 241.1857 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
463 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 671 0 R /XYZ 40.01575 199.0394 0 ] /Rect [ 538.5798 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
464 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 672 0 R /XYZ 40.01575 99.83937 0 ] /Rect [ 80.01575 460.0394 226.7257 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
465 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 672 0 R /XYZ 40.01575 99.83937 0 ] /Rect [ 538.5798 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
466 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 673 0 R /XYZ 40.01575 627.0394 0 ] /Rect [ 80.01575 442.0394 184.5157 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
467 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 673 0 R /XYZ 40.01575 627.0394 0 ] /Rect [ 538.5798 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
468 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 673 0 R /XYZ 40.01575 138.2394 0 ] /Rect [ 80.01575 424.0394 202.3057 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
469 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 673 0 R /XYZ 40.01575 138.2394 0 ] /Rect [ 538.5798 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
470 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 674 0 R /XYZ 40.01575 307.4394 0 ] /Rect [ 60.01575 406.0394 118.9357 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
471 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 674 0 R /XYZ 40.01575 307.4394 0 ] /Rect [ 538.5798 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
472 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 674 0 R /XYZ 40.01575 230.2394 0 ] /Rect [ 80.01575 388.0394 98.35575 400.0394 ] /Subtype /Link /Type /Annot
>>
endobj
473 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 674 0 R /XYZ 40.01575 230.2394 0 ] /Rect [ 538.5798 388.7894 555.2598 400.7894 ] /Subtype /Link /Type /Annot
>>
endobj
474 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 674 0 R /XYZ 40.01575 197.4394 0 ] /Rect [ 100.0157 370.0394 350.6857 382.0394 ] /Subtype /Link /Type /Annot
>>
endobj
475 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 674 0 R /XYZ 40.01575 197.4394 0 ] /Rect [ 538.5798 370.7894 555.2598 382.7894 ] /Subtype /Link /Type /Annot
>>
endobj
476 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 352.0394 265.0857 364.0394 ] /Subtype /Link /Type /Annot
>>
endobj
477 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 352.7894 555.2598 364.7894 ] /Subtype /Link /Type /Annot
>>
endobj
478 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 695.8394 0 ] /Rect [ 100.0157 334.0394 286.7557 346.0394 ] /Subtype /Link /Type /Annot
>>
endobj
479 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 695.8394 0 ] /Rect [ 538.5798 334.7894 555.2598 346.7894 ] /Subtype /Link /Type /Annot
>>
endobj
480 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 479.0394 0 ] /Rect [ 100.0157 316.0394 231.1757 328.0394 ] /Subtype /Link /Type /Annot
>>
endobj
481 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 479.0394 0 ] /Rect [ 538.5798 316.7894 555.2598 328.7894 ] /Subtype /Link /Type /Annot
>>
endobj
482 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 363.8394 0 ] /Rect [ 80.01575 298.0394 130.0357 310.0394 ] /Subtype /Link /Type /Annot
>>
endobj
483 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 675 0 R /XYZ 40.01575 363.8394 0 ] /Rect [ 538.5798 298.7894 555.2598 310.7894 ] /Subtype /Link /Type /Annot
>>
endobj
484 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 676 0 R /XYZ 40.01575 692.2394 0 ] /Rect [ 100.0157 280.0394 205.6257 292.0394 ] /Subtype /Link /Type /Annot
>>
endobj
485 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 676 0 R /XYZ 40.01575 692.2394 0 ] /Rect [ 538.5798 280.7894 555.2598 292.7894 ] /Subtype /Link /Type /Annot
>>
endobj
486 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 676 0 R /XYZ 40.01575 577.0394 0 ] /Rect [ 100.0157 262.0394 253.3957 274.0394 ] /Subtype /Link /Type /Annot
>>
endobj
487 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 676 0 R /XYZ 40.01575 577.0394 0 ] /Rect [ 538.5798 262.7894 555.2598 274.7894 ] /Subtype /Link /Type /Annot
>>
endobj
488 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 676 0 R /XYZ 40.01575 403.0394 0 ] /Rect [ 100.0157 244.0394 167.8257 256.0394 ] /Subtype /Link /Type /Annot
>>
endobj
489 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 676 0 R /XYZ 40.01575 403.0394 0 ] /Rect [ 538.5798 244.7894 555.2598 256.7894 ] /Subtype /Link /Type /Annot
>>
endobj
490 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 677 0 R /XYZ 40.01575 689.4394 0 ] /Rect [ 80.01575 226.0394 134.4757 238.0394 ] /Subtype /Link /Type /Annot
>>
endobj
491 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 677 0 R /XYZ 40.01575 689.4394 0 ] /Rect [ 538.5798 226.7894 555.2598 238.7894 ] /Subtype /Link /Type /Annot
>>
endobj
492 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 677 0 R /XYZ 40.01575 602.6394 0 ] /Rect [ 60.01575 208.0394 124.4757 220.0394 ] /Subtype /Link /Type /Annot
>>
endobj
493 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 677 0 R /XYZ 40.01575 602.6394 0 ] /Rect [ 538.5798 208.7894 555.2598 220.7894 ] /Subtype /Link /Type /Annot
>>
endobj
494 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 677 0 R /XYZ 40.01575 159.4394 0 ] /Rect [ 80.01575 190.0394 291.7857 202.0394 ] /Subtype /Link /Type /Annot
>>
endobj
495 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 677 0 R /XYZ 40.01575 159.4394 0 ] /Rect [ 538.5798 190.7894 555.2598 202.7894 ] /Subtype /Link /Type /Annot
>>
endobj
496 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 678 0 R /XYZ 40.01575 455.8394 0 ] /Rect [ 100.0157 172.0394 238.9457 184.0394 ] /Subtype /Link /Type /Annot
>>
endobj
497 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 678 0 R /XYZ 40.01575 455.8394 0 ] /Rect [ 538.5798 172.7894 555.2598 184.7894 ] /Subtype /Link /Type /Annot
>>
endobj
498 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 678 0 R /XYZ 40.01575 244.6394 0 ] /Rect [ 80.01575 154.0394 178.9457 166.0394 ] /Subtype /Link /Type /Annot
>>
endobj
499 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 678 0 R /XYZ 40.01575 244.6394 0 ] /Rect [ 538.5798 154.7894 555.2598 166.7894 ] /Subtype /Link /Type /Annot
>>
endobj
500 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 679 0 R /XYZ 40.01575 581.4394 0 ] /Rect [ 80.01575 136.0394 188.4157 148.0394 ] /Subtype /Link /Type /Annot
>>
endobj
501 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 679 0 R /XYZ 40.01575 581.4394 0 ] /Rect [ 538.5798 136.7894 555.2598 148.7894 ] /Subtype /Link /Type /Annot
>>
endobj
502 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 679 0 R /XYZ 40.01575 366.2394 0 ] /Rect [ 80.01575 118.0394 225.0757 130.0394 ] /Subtype /Link /Type /Annot
>>
endobj
503 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 679 0 R /XYZ 40.01575 366.2394 0 ] /Rect [ 538.5798 118.7894 555.2598 130.7894 ] /Subtype /Link /Type /Annot
>>
endobj
504 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 679 0 R /XYZ 40.01575 257.8394 0 ] /Rect [ 80.01575 100.0394 247.3057 112.0394 ] /Subtype /Link /Type /Annot
>>
endobj
505 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 679 0 R /XYZ 40.01575 257.8394 0 ] /Rect [ 538.5798 100.7894 555.2598 112.7894 ] /Subtype /Link /Type /Annot
>>
endobj
506 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 680 0 R /XYZ 40.01575 374.6394 0 ] /Rect [ 100.0157 82.03937 306.2257 94.03937 ] /Subtype /Link /Type /Annot
>>
endobj
507 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 680 0 R /XYZ 40.01575 374.6394 0 ] /Rect [ 538.5798 82.78937 555.2598 94.78937 ] /Subtype /Link /Type /Annot
>>
endobj
508 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 681 0 R /XYZ 40.01575 135.4394 0 ] /Rect [ 60.01575 64.03937 174.4957 76.03937 ] /Subtype /Link /Type /Annot
>>
endobj
509 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 681 0 R /XYZ 40.01575 135.4394 0 ] /Rect [ 538.5798 64.78937 555.2598 76.78937 ] /Subtype /Link /Type /Annot
>>
endobj
510 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 682 0 R /XYZ 40.01575 494.6394 0 ] /Rect [ 80.01575 46.78937 98.91575 58.78937 ] /Subtype /Link /Type /Annot
>>
endobj
511 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 682 0 R /XYZ 40.01575 494.6394 0 ] /Rect [ 538.5798 46.78937 555.2598 58.78937 ] /Subtype /Link /Type /Annot
>>
endobj
512 0 obj
<<
/Annots [ 428 0 R 429 0 R 430 0 R 431 0 R 432 0 R 433 0 R 434 0 R 435 0 R 436 0 R 437 0 R 
  438 0 R 439 0 R 440 0 R 441 0 R 442 0 R 443 0 R 444 0 R 445 0 R 446 0 R 447 0 R 
  448 0 R 449 0 R 450 0 R 451 0 R 452 0 R 453 0 R 454 0 R 455 0 R 456 0 R 457 0 R 
  458 0 R 459 0 R 460 0 R 461 0 R 462 0 R 463 0 R 464 0 R 465 0 R 466 0 R 467 0 R 
  468 0 R 469 0 R 470 0 R 471 0 R 472 0 R 473 0 R 474 0 R 475 0 R 476 0 R 477 0 R 
  478 0 R 479 0 R 480 0 R 481 0 R 482 0 R 483 0 R 484 0 R 485 0 R 486 0 R 487 0 R 
  488 0 R 489 0 R 490 0 R 491 0 R 492 0 R 493 0 R 494 0 R 495 0 R 496 0 R 497 0 R 
  498 0 R 499 0 R 500 0 R 501 0 R 502 0 R 503 0 R 504 0 R 505 0 R 506 0 R 507 0 R 
  508 0 R 509 0 R 510 0 R 511 0 R ] /Contents 968 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
513 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 682 0 R /XYZ 40.01575 152.6394 0 ] /Rect [ 80.01575 784.0394 273.4457 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
514 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 682 0 R /XYZ 40.01575 152.6394 0 ] /Rect [ 538.5798 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
515 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 683 0 R /XYZ 40.01575 558.2394 0 ] /Rect [ 100.0157 766.0394 217.8357 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
516 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 683 0 R /XYZ 40.01575 558.2394 0 ] /Rect [ 538.5798 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
517 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 687 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 60.01575 748.0394 153.9257 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
518 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 687 0 R /XYZ 40.01575 740.2394 0 ] /Rect [ 538.5798 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
519 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 689 0 R /XYZ 40.01575 429.2705 0 ] /Rect [ 80.01575 730.0394 292.3457 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
520 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 689 0 R /XYZ 40.01575 429.2705 0 ] /Rect [ 538.5798 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
521 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 695 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 712.0394 224.5057 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
522 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 695 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 538.5798 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
523 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 695 0 R /XYZ 40.01575 633.4394 0 ] /Rect [ 60.01575 694.0394 140.6157 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
524 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 695 0 R /XYZ 40.01575 633.4394 0 ] /Rect [ 538.5798 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
525 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 699 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 40.01575 676.0394 140.5857 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
526 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 699 0 R /XYZ 40.01575 799.0394 0 ] /Rect [ 538.5798 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
527 0 obj
<<
/Annots [ 513 0 R 514 0 R 515 0 R 516 0 R 517 0 R 518 0 R 519 0 R 520 0 R 521 0 R 522 0 R 
  523 0 R 524 0 R 525 0 R 526 0 R ] /Contents 969 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
528 0 obj
<<
/Contents 970 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
529 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
530 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
531 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
532 0 obj
<<
/BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
533 0 obj
<<
/BaseFont /Symbol /Name /F7 /Subtype /Type1 /Type /Font
>>
endobj
534 0 obj
<<
/Contents 971 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
535 0 obj
<<
/Contents 972 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
536 0 obj
<<
/Contents 973 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
537 0 obj
<<
/Contents 974 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
538 0 obj
<<
/Contents 975 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
539 0 obj
<<
/Contents 976 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
540 0 obj
<<
/Contents 977 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
541 0 obj
<<
/Contents 978 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
542 0 obj
<<
/Contents 979 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
543 0 obj
<<
/Contents 980 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
544 0 obj
<<
/Contents 981 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
545 0 obj
<<
/Contents 982 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
546 0 obj
<<
/Contents 983 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
547 0 obj
<<
/Contents 984 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
548 0 obj
<<
/Contents 985 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
549 0 obj
<<
/Contents 986 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
550 0 obj
<<
/Contents 987 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
551 0 obj
<<
/Contents 988 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
552 0 obj
<<
/Contents 989 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
553 0 obj
<<
/Contents 990 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
554 0 obj
<<
/Contents 991 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
555 0 obj
<<
/Contents 992 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
556 0 obj
<<
/Contents 993 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
557 0 obj
<<
/Contents 994 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
558 0 obj
<<
/Contents 995 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
559 0 obj
<<
/Contents 996 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
560 0 obj
<<
/Contents 997 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
561 0 obj
<<
/Contents 998 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
562 0 obj
<<
/Contents 999 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
563 0 obj
<<
/Contents 1000 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
564 0 obj
<<
/Contents 1001 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
565 0 obj
<<
/Contents 1002 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
566 0 obj
<<
/Contents 1003 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
567 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://docs.python.org/3/library/csv.html)
>> /Border [ 0 0 0 ] /Rect [ 50.01575 130.2394 228.9757 142.2394 ] /Subtype /Link /Type /Annot
>>
endobj
568 0 obj
<<
/Annots [ 567 0 R ] /Contents 1004 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
569 0 obj
<<
/Contents 1005 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
570 0 obj
<<
/Contents 1006 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
571 0 obj
<<
/Contents 1007 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
572 0 obj
<<
/Contents 1008 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
573 0 obj
<<
/Contents 1009 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
574 0 obj
<<
/Contents 1010 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
575 0 obj
<<
/Contents 1011 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
576 0 obj
<<
/Contents 1012 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
577 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 293.8394 0 ] /Rect [ 40.01575 277.0394 50.68375 291.4394 ] /Subtype /Link /Type /Annot
>>
endobj
578 0 obj
<<
/Annots [ 577 0 R ] /Contents 1013 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
579 0 obj
<<
/Contents 1014 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
580 0 obj
<<
/Contents 1015 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
581 0 obj
<<
/Contents 1016 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
582 0 obj
<<
/Contents 1017 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
583 0 obj
<<
/Contents 1018 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
584 0 obj
<<
/Contents 1019 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
585 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://docs.mongodb.com/manual/tutorial/query-documents/)
>> /Border [ 0 0 0 ] /Rect [ 50.01575 457.6394 318.4657 469.6394 ] /Subtype /Link /Type /Annot
>>
endobj
586 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://tinydb.readthedocs.io/en/latest/usage.html)
>> /Border [ 0 0 0 ] /Rect [ 158.9257 433.6394 376.2657 445.6394 ] /Subtype /Link /Type /Annot
>>
endobj
587 0 obj
<<
/Annots [ 585 0 R 586 0 R ] /Contents 1020 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
588 0 obj
<<
/Contents 1021 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
589 0 obj
<<
/Contents 1022 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
590 0 obj
<<
/Contents 1023 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
591 0 obj
<<
/Contents 1024 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
592 0 obj
<<
/Contents 1025 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
593 0 obj
<<
/Contents 1026 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
594 0 obj
<<
/Contents 1027 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
595 0 obj
<<
/Contents 1028 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
596 0 obj
<<
/Contents 1029 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
597 0 obj
<<
/Contents 1030 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
598 0 obj
<<
/Contents 1031 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
599 0 obj
<<
/Contents 1032 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
600 0 obj
<<
/Contents 1033 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
601 0 obj
<<
/Contents 1034 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
602 0 obj
<<
/Contents 1035 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
603 0 obj
<<
/Contents 1036 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
604 0 obj
<<
/Contents 1037 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
605 0 obj
<<
/Contents 1038 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
606 0 obj
<<
/Contents 1039 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
607 0 obj
<<
/Contents 1040 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
608 0 obj
<<
/Contents 1041 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
609 0 obj
<<
/Contents 1042 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
610 0 obj
<<
/Contents 1043 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
611 0 obj
<<
/Contents 1044 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
612 0 obj
<<
/Contents 1045 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
613 0 obj
<<
/Contents 1046 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
614 0 obj
<<
/Contents 1047 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
615 0 obj
<<
/Contents 1048 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
616 0 obj
<<
/Contents 1049 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
617 0 obj
<<
/Contents 1050 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
618 0 obj
<<
/Contents 1051 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
619 0 obj
<<
/Contents 1052 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
620 0 obj
<<
/Contents 1053 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
621 0 obj
<<
/Contents 1054 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
622 0 obj
<<
/Contents 1055 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
623 0 obj
<<
/Contents 1056 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
624 0 obj
<<
/Contents 1057 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
625 0 obj
<<
/Contents 1058 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
626 0 obj
<<
/Contents 1059 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
627 0 obj
<<
/Contents 1060 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
628 0 obj
<<
/Contents 1061 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
629 0 obj
<<
/Contents 1062 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
630 0 obj
<<
/Contents 1063 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
631 0 obj
<<
/Contents 1064 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
632 0 obj
<<
/Contents 1065 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
633 0 obj
<<
/Contents 1066 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
634 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 635 0 R /XYZ 40.01575 498.0394 0 ] /Rect [ 202.8557 91.23937 237.8557 103.2394 ] /Subtype /Link /Type /Annot
>>
endobj
635 0 obj
<<
/Annots [ 634 0 R ] /Contents 1067 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
636 0 obj
<<
/Contents 1068 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
637 0 obj
<<
/Contents 1069 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
638 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 635 0 R /XYZ 40.01575 498.0394 0 ] /Rect [ 202.8557 289.6394 237.8557 301.6394 ] /Subtype /Link /Type /Annot
>>
endobj
639 0 obj
<<
/Annots [ 638 0 R ] /Contents 1070 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
640 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 642 0 R /XYZ 40.01575 598.8394 0 ] /Rect [ 202.8557 278.0394 245.6357 290.0394 ] /Subtype /Link /Type /Annot
>>
endobj
641 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Generalized_linear_model)
>> /Border [ 0 0 0 ] /Rect [ 70.58575 245.0394 312.7007 257.0394 ] /Subtype /Link /Type /Annot
>>
endobj
642 0 obj
<<
/Annots [ 640 0 R 641 0 R ] /Contents 1071 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
643 0 obj
<<
/Contents 1072 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
644 0 obj
<<
/Contents 1073 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
645 0 obj
<<
/Contents 1074 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
646 0 obj
<<
/Contents 1075 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
647 0 obj
<<
/Contents 1076 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
648 0 obj
<<
/Contents 1077 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
649 0 obj
<<
/Contents 1078 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
650 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://github.com/mewwts/addict)
>> /Border [ 0 0 0 ] /Rect [ 365.1157 749.8394 514.8693 761.8394 ] /Subtype /Link /Type /Annot
>>
endobj
651 0 obj
<<
/BaseFont /Courier-Oblique /Encoding /WinAnsiEncoding /Name /F8 /Subtype /Type1 /Type /Font
>>
endobj
652 0 obj
<<
/Annots [ 650 0 R ] /Contents 1079 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
653 0 obj
<<
/Contents 1080 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
654 0 obj
<<
/Contents 1081 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
655 0 obj
<<
/Contents 1082 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
656 0 obj
<<
/Contents 1083 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
657 0 obj
<<
/Contents 1084 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
658 0 obj
<<
/Contents 1085 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
659 0 obj
<<
/Contents 1086 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
660 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://tinydb.readthedocs.io/en/latest/usage.html#queries)
>> /Border [ 0 0 0 ] /Rect [ 63.01575 760.0394 318.7057 772.0394 ] /Subtype /Link /Type /Annot
>>
endobj
661 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://docs.mongodb.com/manual/tutorial/query-documents/)
>> /Border [ 0 0 0 ] /Rect [ 40.01575 640.2394 308.4657 652.2394 ] /Subtype /Link /Type /Annot
>>
endobj
662 0 obj
<<
/Annots [ 660 0 R 661 0 R ] /Contents 1087 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
663 0 obj
<<
/Contents 1088 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
664 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://github.com/man-group/arctic)
>> /Border [ 0 0 0 ] /Rect [ 168.6257 537.6394 330.4394 549.6394 ] /Subtype /Link /Type /Annot
>>
endobj
665 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://github.com/xor2k/npy-append-array/)
>> /Border [ 0 0 0 ] /Rect [ 120.8157 513.6394 312.4419 525.6394 ] /Subtype /Link /Type /Annot
>>
endobj
666 0 obj
<<
/Annots [ 664 0 R 665 0 R ] /Contents 1089 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
667 0 obj
<<
/Contents 1090 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
668 0 obj
<<
/Contents 1091 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
669 0 obj
<<
/Contents 1092 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
670 0 obj
<<
/Contents 1093 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
671 0 obj
<<
/Contents 1094 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
672 0 obj
<<
/Contents 1095 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
673 0 obj
<<
/Contents 1096 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
674 0 obj
<<
/Contents 1097 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
675 0 obj
<<
/Contents 1098 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
676 0 obj
<<
/Contents 1099 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
677 0 obj
<<
/Contents 1100 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
678 0 obj
<<
/Contents 1101 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
679 0 obj
<<
/Contents 1102 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
680 0 obj
<<
/Contents 1103 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
681 0 obj
<<
/Contents 1104 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
682 0 obj
<<
/Contents 1105 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
683 0 obj
<<
/Contents 1106 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
684 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceRGB /Filter [ /ASCII85Decode /FlateDecode ] /Height 249 /Length 25789 /SMask 685 0 R 
  /Subtype /Image /Type /XObject /Width 390
>>
stream
Gb"07GuPKu*^=ts47Bh+hB0Mn-Fr!#gdGDA`jk,"'9-T]C3C8#b`0WDk3@rG`$?Zc_^l)7VLZ:OW$j:.,GGGn+E".9L8#k?-mC&^qp&$AWiN%pkaiZ(L7.HIW6_H\BmOOiG#.jFl<Epe!+92B?smAM?smAM?smAM?smAM?smAM?smAM?smAMkZ[acHSF(@M'nl3`k]C:"^lldS-Lb\=_8p-VhEJQ0JLQP)&^QWJOqOb@USCDOI_N8Ob>G%"%*lUoSb%legs?YCA-l=6W+L6(`6e8>`9pfAm-,UK*=(h2;PidlY<="]I8#=oT_1$@UO/'^c/`uUnkE+<Gk)B$$\K"U>Vlq-RE@M_+)2)]DmhP(qM]bFJ=uH&I,lrG\Qdf=]VtJ"_/g4/e5^5gR5hoa\?cQXS-?$"1b79O9`'IP#eVHI/'p%H=i,sVWd=`n"JAe[hK8A5[HopBk_QnkDYPY'Te=l,B[-[^dr`rH2[X7s5oeh"qMb;C!rg2g0,!t%rZCTdA'3%7n8(+mC,0$mY'-9Siuu9X03!N1?@P`?`pE/Jn-`WhRqgbLVm0OiSes=b8A>qJJkFUh[,W.);9d$N!.hl`/,/sq"sNp?aOJYA>Glk+T*[#UrLEo?G1YN;M&O2.k@*YRoce"mHa'Gs(uF_JFBIFj3/Dq7WMF87]L09Q<On))*hN_q>7=B&Uqmj!h5Yu!]&31cT[8JPEM(mq;`418GW)Wp^Cc1bfn:.UINY5i,#E3hnDH<o^(6e0eq)D9>b.rj=\6,<*J*#[ic)S7n$^Ii/BLO7%>JE,CTFQVi[$58kSRjbXe'Q?%PZgh<M>m5"eF;kfC^u7WMF87_2N!/%6W0cGcd<;YWZgp/NEfg.n2""cn02n]0SG?ninR>$G!,("V*sC^Sp&B4kl/eC<,3/n6.c"_ORSJdT$l@;mhc'!I4;0r/6R!<WPMS2kZ[i5'BpK3,JbN!-YUm1CR4$lLf'riN?+f'DuYQ"n[=5m%?%I-[oD.Oo7`4rGTU.I^8^me0#Y"^u@&U=/Vo@O0#Ec5oC_`^jtSr03ee=Xpm'-F!Kf/Z)9($G4V!^b:#fg=,[c`^h]c`^mn\8B5Y5a=W2Z%r3)gCpf7=+4(&@HKI,uRGY,26_BV!B%qT=N9$"4D/I71IIafCEm)l8bq8e.?3s^l_+V^S+5hfN(9L:`0Lg(Q1puQ;;jq[%88_Sa!%Mbd0Ne0t`lfr/B0b+s>fK;e%`V$s%F+YsNOr.<_/N8Lo&*VmNU;'K'pdG`7Y7J:?>)mI?n7N_^;1Z.`PECJXOZYt?Qd1(YPK>l@mRQ.>V52D0hk0$H/;QN2BBpiQ=(h<&9RC[@jDiqA#/,,HMj"F5C5nPiC<Sc7OkF:[p2X$8('*>GO*SjJaQEhg!JLu[W?UjGjii@"H8S3Qa^PL(47)>)**';Ci_JqAYd(DKXk-BOiVRfVR1^WL3n3^@5uiO$M;KMkZcXZ^K'0%6A(J[OkpC)$4"^+Xs.NTW"-U!qG-"(m("LM'/3<V9$2o2IYa%jT92BCC'#s3G'h<@?]C]+od=SLXgS>LHk58r,#@!O3I_hd"<P3&XsOr0]t66=%WnPoBHGrs<j@,.G!Wc8+9<_;eC8m8_$<>^$lM$Di3mLW4?P`*.b2V&,N7C$mbGACj2^o^h)d/=$ue;CoB+;MeHQI$"DaGg1Le:Y7ilqdkg6#sTqRR1-;L*+m^qpOpY9h>rqWI">T"DN4;VIcA0p_C1G%KTF!VZ@R-u1\glV>gRnk7B@cd#NibEKgdRVK@_gsGs.2PP'3S]_$:'q@L=Bbhrg9k_JO$EW"O"2\0+="!l[0du$SND&bi5&Dn<=^-5kgljTXuU[lfTqhhio8s1T7-Fi]mJ`pJiQ`4?G0a=p%@u@HM"^gVp3A:.km,X9oUlj"oP_f"$`X*Nnf_(\:=DFN:adF@)T=>nDLL@:1pB"(4@jtrfG(abq47*'oFO-)k55FT<:9W#Kk+@'1d`*9R"Oa[AWQV1c-./A`IPFY5mlQYeS!9ArrRSh6Ub?^]+)qfWerU?cYc^n(ra'ldi0_9Ej+H]Y#5)'KjK14)J/;ComDjJ<<A5n%JJPn`.[SEF"-XJ=64r\b]SiK-^A[4ILhBip=f9^e\Z`icPRI(%]YA4"n$HXf#XcF,IXX=.H?X7;W_+a(3*spj.6'XO]UBNoik?p1F[W8[qY$B6<j,mQ1,`FdcD=Q%4u>b0%jbD;$gmoOr/]DrPA%Y6*[H^]+)1J:GLMbcN,+POKfC:tZ_C5%[uf"i+2$S26I`ImX]Wj/:BkhMJT5#?;4Y,q,48R$%C#@>U-/DS%SiV7W`J=KCc]Pq'S`dI10,qh]5C8eHPVD6V*5jhkZM"S8mi8kIQ&VrI<PP@>h;!j/T/YRkPLn/s&)#)?tMa%3gdmiF]B4OhcO*X?<c77BZ)1Dq&JDnPTEDWS0_"PCl*/XWm;4FT'c].k<JoN!!:&94c2kb[@tBJC`[^!;:d#l4*jf$t[E2rO?7/5<^rcKnnVa67%uEE#2dps\ff7LL-/`!]^C"kH6K8uMlOP`Ut\GjsXb6\c-n5!1tkh#\g(Za/E:e21d]Qm"hOi0A-qB-_OPf;bl+P$[%'2dGRp:U):jCZpm\F.G6B*lp8mbK9u4GS8FOg2g%h6R$hD\TX?L987UlMsaH(@riufSGQ;%`Zd4;FrAEX6]pDOHW]i3NR?)-DYN%70FLJ(7o=ts\*lsi&>"Q*7VB^=0M+[p=9:Sa6?NpJ1kS5Fdf\IGeXfk/\upIT_7u>=Eh:!JC4VN8[WPZV^drW%A@W!&>Jf^%2^j;/`^h_9Y/X#N6CTT2cT+*4AaXZg\2H&SS;P+G997j.3Cf`A%@MQ7c-MUt8Bt-abmi1XU)/S;Yrj+\'*b^4E8i-\>Nt9N8Rk,Jp>ucI0AeW*>VS]g.<IF:\lW<L5-RUAZ.eNC>48B*^0g6p),>!!KN>G'8@M7H1rPkj/!=s=Jg^'P#+FhuH5A-q[4d)2UWa0(1C>!Ud.T@4F\S/>M:Uo^=d>.#QJC;uP29N015H>-6H9IFN9!n#;N,-a4b;^rG'Kn1X'(!lJ[!bmmMn_j2&E@K$l?lK10gUR;Etq8P2h*F2T&":8@6]InB`#?AA75C1efI7D.+PJZARc>(dqD5V-(1`\+;\3j$Qbea`cM1>TBpN-"4PTqYn:^Q6u)r"*d\%O^&kO@$cBZo`!2'o_r<rH<RBDj.ON>QgU2R[!u^@J:M%S03(<"=AER"@VtXPjVkp;%Dh994FkQdX:pk@%X:,DNhSXgoEP7!b2oSPj]rW+U2>\>AYd4HD;ku&4b#'1ofeM\YFiRJ=F9RWs)]h;rK"a.'##-UgYTMa$ZC(-/":#L0*bgJ+R(.],Zhn;j!GUWZuS<W_*'sEc;<cPRpM1o?fsXp('T%<gbnmV4^p(`5(;2-l]KZM=5_uZg**X)-=N6"W3Y@^.7q,r:n??TJ21SeV2o)hhY3Wbr\"W]7AZD`,]&re::B="H`M6a_Jub4rWn!7QLhf/L%`<)45g'hEM<<lPgqVMo1_qRnBJZ#kl<@DB3$3aN9"_UPBp0O831WkH]3"<8B"':!2ioQfD2Mmk<-tDIA9;;^NgKi,F.G17"?_d5l<($.6XVEJ-X]WbleEcK4b,%8\';BoT10c[Q+L)=4j*na5kSoV`OH?5H<j5@4l5#6kYf[V5-$d-Bh6?Fm%\oa)4#4Y;ADGXSk&J$]L3Q%4%l$.D6J$H.p!7iGW,sXhhb2fJD!jcLI(gJ]rHf5G\Uu[d!N5h.$O%47L#`'RNGocfAj<^S;3ms$Ac`-48jm?33t;ktY"7Pi*n3[,6N3Ig>Y3jp$,p-s8\)!6)+/.btJiSa)S9EKeLQVhQY/>h$InKc.(!Kc'&`2#MGp5SE>?[3-+eQL9>]c30lFB=nBO[W@'UP,i"[EXm@55?WQ]G8GT)LgIc1#Ook4iLbW8YE8U"SduoQCK;9C"Bq!m)bDZ4<ORY/TkW3mn6!(GoD?V8n6h8K"iVn@p%V_P#J2I1=:=r)eZait"4s0H>_L$Z[o#8RpiRfoeuJ`P>NKXmoA,ufD?=NeQf\BP60\1a<"'p_K#@22+eTK$;^9`E]bN/XbBGJ`9qX=e\L!CWN0.?SZaZGL:ZI,ia6.`ne*A&Ld_#ShN,`?s-X'2]5cZ2[#HiB/<f,)[-%e_fNq>6g+L2>)2kJ0Mk*#<)9W21thtjl5Ka3K&Ou[s.=al6[8]L(YHWO#)Qe)()[1N:`6YN(i/K[b5%YVRtQG!FTZ6`4nj<X_KW$8h(i/Mb+pd=W:a]s;OFm@KH(@Q`@WB\9dgYeS26r*tcYQ>?X,etF?iD)DaB,Mr)1:e/EdAk[6V+E6HrcQc[[F]ecmUi@1[\@t(mfZqL2_M/ENfB;-JLL%[*!QigJ'XO%#cJhR7f&6&2#9N"%6rPf4<%&&(3ofh8Q$d,+ZIS0W^rt$93K2EfV<:'"+2HBEsA^1<Z/VX4W1f)(lS\jPJYSNJF>]gjh9_jBYc/a1BoBP%P%t9nJRdg;YaUCMLB^*'p,"g#-["t[BV-h6rJXlP,j.G,]3$[qMj?N'#e]LFS6&&H#ad.fmB>#N3r$J/b/X\W9pV_V'!K3*DSLP7_1E$.\2mj]_80Pg;._8'VfrW0!N*8+<Q5K**Vl=n.[i9cfEVBG)Ao8LC2tf,:NH/F.NVoK1CJMDo:U:'cR]/E>f_F.]tX>!1jn`FAXR<dt%2QTV\X&"tdL#Y?V+s9U9iUd$p'"jSCj$Mq4$3S<,IgCSFHV&ok:3jmpQn_!c!s+Ejf]`WKEYKan/G^'3!omM4K*9E7sNN!_tPfCM$;Tq1/"9eGrY#7"75:>a'M7+6qsB+"iLr6=M`f<m7o#ld:T&2p,5jd53&pQge/-Bo\l8/W)bgYSm'O>dM+\e+mg+^c8qmLSqAUt#\iiILNh8QW[-rdncd+(XE1"^BKKneMT:)>8O\Z3'L&S]r\NX,'oQrXR1D],2A0\JfpQj;2ZjaspWS"CnViA3)X3hKJTNf_$IkfE\\gH*=?,;F1F^_E#_l468CC<!19uNpQ<+$gFLu38LoMQ]R>U.e\RsVr2e!mN.A0Z&!S3U9."bR$!3Ajf=r1qCK4:s'6W\b0:G-O]HqrT?s"+,1>#>8i2<>b)1hlOfSE=EJAX=ZgR9iruW9Z(?>PJ7aKt@=FN5_B@im%p7$1K0Lg(?i+6=2eis*ZH6BEZ,9N1M,823,EdM4&ITC=6gA]lQEMWUH31X09E1LYF`:ZL.)tinjBMu"AIo.VO[:PA\4LiYG`Tlo8CHf7Nj0He3aGut1Um%FXLqDrMk'+BiCPQ<p-2d4QMS6-C4i-i1aI/3I8RTY:1'B]q=Kr<Y?@Od7*oH_ZIoSRDQt"5cogCsmpkkUZ8BQ3K]M\m9j_AZsnG?:aG/sdA1Ebs]\V61\N0.?S;q@am*d//:-2Sj4SiWXY-$J'/9N##L?Lnh'kuX@74)GUO[p=5A./A/5_$0^q)8U2)o,auXbJ#=cGP$of6UA16'qfuI]bg+r.'b0m9nUfH++n)[Gu_*MM0`bC5&[TrGEh&k\:><9SSBR3cTdFr``Wi3)Z>$2L0/\@eK!5RDWh'!X[&rc^7IR*1G:5dU,=?DpY6;b1@N%P-qm&gD1ZfM)YKHd%Y,>hNb2Z4(aHR0-ET<88I6D+]E;3L7=S:oe3]N*R3Y4Lq?CN3Cbf9%NEKK2]cEUu:mYSBSO`W`jL1Odq/UU]+#khYGS]Y7:7>QDL5CY`L>lZ[/4+ZE8a7(9J='L74D?c[Z"\s8X1r+&rYN:pHLE6N[N2?2]JgJ;Qk<Q3_.2P+#:V1Z(nG^I-1pcZL6&s]j=P2':jS7rDF**\Fj1bmDS(f,nirARFMA@!*&pT]U[mbdMAp%N=2U-qM::%I"sl4TUNh/@r=Q<q=e9^;KlHebkM$"Bants.oQeVCs*%s6]u?'.KP]t%ZJrf(W^(BX.;1\$lkF/c2rND$,lCl-bO&m0K9`Y"oAh1jQ%S0K<PZe89dRA`WZihN3lEdgPQESfes0S2G_u8YA;+$$[%oa-)(@NUUM!PO5Ka:mW[_1m(iA#]X/E?$F<eLOD?QL*V/"%e&CenE_riu#/XLR@0rcf:"h?MBWf&Q/D.>AY2%;<!&>q)ujGe&k(69K\"t4YcdCt!1oB)2nCFo5[h>/r"7\0jO"STo:hXgu7<J]ePB[D'6XHHMmV(ZKoog-%!@$jkqAu&8GmcaS'Gt@npFq!mYW*&;,O#H2C-dK@^\o'G[)f;_!r2SKJ?`>2Uoht-,T&3bVU4O[E4Ffb6`bEH#"F*2S?C?DrY@aibW7uYGZ5'l/n:fJ2S.&GXo&)D<Wce?;bpPP8jGNjgpp]QC&tJ-D%o!en'k7=b'%%E3rX8ikJB0[&]]P<3JG0^clEAd>-f^Q)go$LK5)g)=*[=fME.Mb3m);<^mifq[f\k+%ZAYb)<&J&B#@)6-&sES`G`>ZaZ=b2@nBMmq5B]ScTNq&?b'Shgg+@1!DcD2I[DjX)Bq)+?rP3?e\#KV1LF[`8+c^00NUe%/GOi,\`G!,0N&Qu:d2C$jmKS'h9rm+N;%rJ>\o%Y,(b<(#dXa-9PTZr>`NtK&qR/[(=,d9N4qm\;VTspWi-P\V)j0F3<M$t!GHf:h%W:edd-]98D.e^s80$@:C!VS/=qMi:Xi+\I7cN8+bEbM0363\^`]]db)uY-##lprgOoLM\rbM.OR_)rn;kW82,G*t$HI#j0`A:Dt5;3q:U1J<$It<$_>.tag`&I#/&moGDo-!0CHlT-]!r+tD^,DUl6?]KU)G)t!,FR&*i'_/6`BkP^#aa`5r!05^VKRmOoPeCOIMiA?G.a_XM2j7VY]=hj#3lh?J2jJs]r?r%/012_M(WSSg+pq^)j_:22o,!N_><n+H]WeEDaeKEY$:SM+)"4K@4h$I#BNP>k$9eG4QnF8!]sY_Aj88`En37S=0SueF+V;-&cOubWcK]KSI8!<@/aZoLj/9>CA@8O?mYYUWZT;6SOAR2Oar7SbXk.dFH2m"=>(=D&lb_jg6tM&Bh,HB`LXC#U&)SGD4f<X5NC?8APBG?i6YOG*tZaK;kk%h@Hsh%PcIk2kBsE@7TP4fVBK-R&cg[G\'%<R'Z$Mk-(H96BB0*g\fK22#mVq?]8OB=>%If+DEHY3c9Fk)j(FY?h1n<+&K<*ZfTQ"T@ALLsre+IW?s;[O_#'_@'O+*6XNBG!(+nLXRgUmj/Y,:kCTl"D'">EoSR[]PfrC8.4/b*6(&KH^j`r5"$7mVVB;8hU"r"6QM4G/.3VVKN-o+jfbKUgLS%eAP$aqRi:=-gm?`uOI=rE10k.MgeC>.j">P;gg_fURE0\SlCB;O96,=.D65>Zu"HXtu/*")XnW[[uY'WmsGYIqk#58.QD[gD_'dZ+lHrK1p]iKG2iH?"&f;KPc[ca>:$]R]UJYbSbR/P%>.CNS2j%qNYr1XjpHT"r<R!8$8mQ;f&!a[d2UfX_,/#rF!-0&cDHab=&BY$1@]\])cor/?S&'#Xl)d'P91TnPuq,JOXgIS`r55kch2R@kE"VcCgNg$=dnlH+"2AIZrs5IblP5-I9,F-)_NpMf7OgSRtqpP;^s<j-kE^LHrNMRoc!BbhNl(o*PhMsu<oDfSHEE8l#]YnL0.^aH%]iVWO6(n#GtZYS<\e#C^^]klAl*cF[1?ns]h.)1^ZfEc^j&`j?9+rR1hUb9:V04)Xi]3,Ke$Za<TB$gEs6RddaiDon&idLkD*:ge),9WpDp:qDQ;];jbJ:hO;3(<H8!6$SIgr8TAEQTscGm9<EHdQq?>T*])S*Cg''7[uU;V0t!=E0dLn9eY)cU\@DMQ4m2=JMXakXCnSM5:@A#L5R(8YZ.V;]e8oQ*EPXF%+AA]6=ukJ6W3cp'cFsrdet:_gMAr0?$+<>#t3V87K+QQe#a^3WUJQ@EJ^`!e3T%1LlZM8[)5Mk^_*'-TKE+_bK#3`QaVV!.NW6#;5:c:cFuQKf['].W9]^.')!OQb8=dK_S<`;+N5]LU)@&?!4'(#&9&NaX9O],W.LG0d@^N@<Tn]\-AFMWC\#-al0/3#X=#=/kds&*?b6U<MRMBV1b+mjMQ\\3dq1u*esQbi)Fq)%"DIHru?jj8Ks#Q#%JomOE@U,bTusdS\OV#I>6YJ/i)h13c47u5nEJP#+X#.LETCu.(^pGGjmIlDoo_Y%kB3Zbq^`,\[b=&+<H4f@^jNOo\,c/;gRt]p]<X4e<sNP`[8?.@(F0.b'I138:_#L&Jq/#Xg?C@Nr$,!nS#/S7+@Pu$-#Na^a'$?B9i2<J0e+l\_aeWBJJnj9#$+j,]\/7kO#eC5qE*uIoQNR-"OiG_m$udD1J:C<@PK+B1urbFSLP'kM14u8T:Fu<g^TE>u75KXE<PE-VMC`TZ)dG2d?C/PKB9k_mP[2:,hoJImuq/n(_<0,Rl:Y&ioB\M"s<H4A.cGIdMn+\t[HC@7e"Y+/&9?4u,^cdLfmc#NAdr1()C3D)*kNH:tkQ/;B?2^1<CbD>RHM9c>Kgf!I;;iU,P;@g$(76aZ7Es%GqGP'7I[NVp0(6='k$6+Qm@3^^:SWb&AroIfo47bEdc6Fm@<,=r!R>PWk[Vo&'"s/N`i7jMBu@cU5*3I)XP'KK!nDk0=.#<7iur8k>5q*8S<>CT$1.iO+e?*S6ic0dU-s4IG,GRsTeM1.VXY.$F<3KMn]>]@E\3Z].ICkB!O&Iu>_4&AetgScc!\7VlRY412S$cE@_+g<$pQ%1Z##&rPA5sr%ZK$+J?8.n1lXSn/7]O(=8-D06(1gPB&\Ir*nUPO`;a!u.*\(`:p/N"J]4_/j9@P[-0Q#hV]$t"B%7_<ZbGd)Ah!:<&_q&%6M[WKCVFuuVJP9ob1_^M`7*Fh]65Y<<]R0t9o5:&&VH7NH/WL^H@!bA"sX,8^f0"E.!m';0sOounNcFE5g]W]pM\jZKKI*>JGUB`8l'^L'Q3gui7*3@e!D<C)Z6$bV\MrmRKO6js,>\%-.j@`S2af0*\k_"26fUoFF&1RY6jM\"HK(p]O0p9@ENRpkC0\>^\gFqQMpF[G;G;XQaHG",HET/7L)sBTLb80#Q0$JQZiq<>Q7a$YKP[W?BlSeZT<["aMjg.e>9T`"h)8R.]!miUGF,IY*^/&ZKIghBj4Aka3#&_09jnU^&SG,nIoe;[(hEmj43MWGoC2p4nnOTnCA%FER7Y9-F*pdA[:sgN8]TL@@h2*0[fT+?C7LD)-r\di/oI7jk9=3EBKb#*aGDjq/43fk/%@M.O0unR4Iu/QsUot[WaD7Y4`Z78a\pkHEMQQDoQbs28-'V[n0Lh3*o_\ECaq$[AhlD.o^R17#]t-AIEKNb<$_cQDEGG91`9ZL.iK3M);DZIl$cbNmF*V#ITmM<.I7:7OK;Re=SKD/fY[K2V6ut+b_-FH6Dro4JDA61>%[mm23\rt:K?H#Xs-;5slU>Y1@8,7GZgknq'/^#CGD;Yh*8dF(@Q4$[&hKaCZ@O`n"J?jI7*XI/Y\-CinQGfojnGHhRB<e$&eaTeD6uic@jg9AAn<+`3suJ/>5qN8kr<;ED+0;IS.&k0D$M;nHUC?63<?)l6RG>uj+<J9[*Mf,)VS,pDh.PSrE!Gin1'O1X!i3p$g4ud]bB/Mg$fRob*YR_#6E/^Dh8^n^_fWEOLM"SIS$Td5EHrl!#EH9>M1TOKu<BS;C_O`Vk,D0&sM(H[=f4g/XuT/k?Y&(,hE>T([p"l8Dd;7^eKDS^][t^:_0B-rL&RE4[\>]:G&Q\.e+fAGnp*bgKfOn&C<dPY4/00ioKT-@-'q`Fc(jXb6GsW&cb.7;5`u0hl`Ft^q_<<@3iL!S5k@^L(;L)er)fJl.Iuf"I/"B=qF0?VWj0`X`',GiI?YGCT^!L/T39ln9Q<F=)dE+Loji?UgEf6-r9(/<YLh\R.GMR0G7Y\.jI'Pg'G:DPVm0=<h0@t^*%$OSK!NM,QN;M2F9ljq[I,-k#Q``?d_e@b'd*ggjQ/UHPluCY1?&?5g3$KD'LfAd(Y=#!bmd(b"lN9>4gF)9Z1#;%*M:Y,UfMIHqcu7i0M[Ld`.j,^1=8EG(Z/7AE5t&??6ZQcVEPcd$H!VhK^KAqe_:YprEXGSnNOD0+<BXq7mihfc\:*B6&kpa8iI;973>f(B8G'^KZ+EY7.8/[2fq71/c<,pVGR',ho^3(R_L.f+#[ujj8p$+)Nbo3?%#s#uE-+6m51S%d.Yl,][rN(1L6*bl(a@)o#W4,G!8A"NuN+*2VU.nUm[Y5R'/qHC-(>n1oSMP-]`6jl*Bg\@d`X%*<G^d#8+;,d9oOgM[.K_nM8]ZtD9&l:mK]=C+q/P:IK!<*DJ/^2l7>gP\9/XJgI_Fu_kF$"ldQL*hYaU;n_8E:H/#ghn5^Iu6?+i&Tgj<KQ)';32D=k\!@aqY8E:5/HcK_pSfD,8_Xc)u-C"<esR`oD9>lG[ht58'N,pP^$*k;M%c%aHHG]bTEF+EktW-am%r2pa,e7`0DZ?VSj&3P*FQQ-VKa%N+=;SCc:S(I\mrrKD.;M99_\Q",=I\.*aaK1i8L7_TN5)8BqEglK2nGO(.cuS3Y@qU4V0DHk\W+&5iUY;&mI4CW7NXBh!Y"6S,-2l:dj.<Y*+EG*<D)e<`XT@*V(Ic>WbP5/%4_8M[pDX,*bKlCP*ud&;<XStCimkh#%iY6QAKo*_-VBgXsDUh:rSNZhQpYZ;`,[=c7*hX&<_6$e[jQ1`'Y[c=,FXD,Vp'6+nj$qH7u@MAb8A]:M^h4l<\Rrh\mXY.3GC&=?WZ0?48(RWWc54I86MOj\[HcUD*!gQGYL18>Z1!8$QdDs6)W+.T.;tC_K\q0s5.khTTNB#\f)4nPch,,30ha*dZ&?/OYP>&+]3-Ni=KRngf5O`tU1[7d6mh-U?THqQT"1\TRN-*A.2%];<1o'[<ZFM*&ZW1a""fg/Pe(\q%rfdO8_>A!m'cZ-%keJH`57@0tnV3T=^5tK'V?E!JOj"",G6LI)Yi:>2p`]J0rJJ05g8,/s%74dp72nB2S;gdo7jLX9cEA7>eSeadH.diAMLsR)]i>a"DqqlGAu('nT;(^J8V!_?BZdGqWF+SGW>u$TB;@G+^C0Rd'Im>:TBZM@E)%:7c^oXae\9\?o>!I&-)n6:h6Ji"23LMJ8<-m(+Vm%Z5r#lC=h*SKYI9r@elIm:Y54AJ^"9#m6Q%PF<h"9)n&,ce$^&0POm[$45,VnArHaR5f^7/Wrr9(j*2_B:TR4?5!*TakJ,:B)#r5NHL6!lJHOCLioi<(u7jjYH(g09_8=tf.E*tsE_HkT#OE;0]OfYa^oMY$C]52K%3CHWc^in#ef=A2ocG(0mUD)rTs,*`lD]#c*&1\#N+)]!$_Wfp)&;q1(pJQ%XdP8,t3E-S""k^!rgZ862;o+1:2bT8qSm7BWUC4>OBMV?U&C,h=R9!YMf-to:"d#=<_uOgnD2led19iR5bM.\dTl$AE-_SEmfT&;$5uiTA+WP]kqPsXS>p5'V,oG>>Ys&'2l;SH2#u2N<WT/L!6MW.ZUrE-`rjltF&hJA9a-.L>Lb-u"P^,E=r(8%1<5;C7Lb"r'n;BFFd9Na919,_I[fjRk#[)?N?#:U=R#\t6G$6t^.tn]>7QS/PF2fkW8n`VRmT&aR_WXf5(0nbg%f?fArE'`Y^!sY>(li5S34E&C#OIjMcJZsTMp^B)Sj1!moWR3uP;.Mf,bt%2L?989j4N:mfSSPoN$S;grs1i!>/lViS(N;"#rm8n?#HkF%pDepA5/6*G0\0Y8-Iie,.][a'<_pIDFZAQa^l(na"u/]4Q8Ir^5d=&n<1S\B='=!dLPrCZ9O`C-]AF;=4bM2V*K(U4'MdFAV;UnA1O1p85S1k:Wpt\NeVcn`1ZTr`75(a"$=5<LoB]m=9o.11#+h(37\D?4:/#PENO[c94MVUhtAQTLlq+s!u*!YVYU\dCWk78j0'dmYKWLI&T'r:,!Vlu-Zr$87KREcASb7`mZc8Q2@;B\d^V_=;YWr:l0B<=Z<<PgT)8-1:;.]_%9BC$abG8tE3S^[$&7IXl$+VC7K`lX8A%hgI\\)&_$SNqc4%g85<*FV+^SVM<22i;c)*jOG7H;r!c8fhg0,G]4^n:b78?i1\4EEk+JUo\BD.WY7;bUF;PpNegOJIZ_[Y#L&_MoN0lhk&du6#t.Gq6l"(LGDT\fIfagM_7Q.&ft=VC[SR1!q;ket!pZ@akEB_r.#%._t.'V$F,MRXYTN%4B;jA:-V_5U]",gBT0q(@K*>d3bP*AbO+^(LkK:<:gcS'RcB$u<l@1EpsjIsgCl1UkLXpTs[;5-E\jU.;t6'$dst!FmC\'[1KLQuXH2#M_]Y(\)HFZ'!q.Mr5h%J#B(SP3G6;*Jna`aftX^8eG(;Im,WZGI$4,<ms#X+:0L?M[+f=e+$"=.Ro:<oVG.;X:;CIpKg=Y,CpmYp1L910/'mr,71YE_"-Hi@og%7I6!38lE:n&i:@1,o*tg0A'\3@\j+\->u`$37&@EAR(+j<;PB=B]/$&QMS?(NeQh=EI&E!YDuLh_cZ&=&rqIa6^1Q\S_iF@ND<aVc"Nt-:`4dL&S<;_;.sOT]F=\q=gXlpa#>$GY>DGG#]nlO/\R,Ng:c?,apfJmMD[s-^eg+Ga+umNc?#QQZQI#@SSMU\diL_"IbQLDSdchknRTnu'D/@9jCHC6l^7``@$3ud-GKEGIbDn4#8AsI!QXPb'dt5#1e*t>b8SrE,O]+#^b;nq9P[@;lQG+c8V`BaZHD;N2rTGkl<%bcKjU5^kC-PM72W#(V$B8%nN$^hT/XoO?2,Bu7:`dn3#,Sl/cZ;rYP$`Ad7\UuflO-1$<rMdHD.mt=UpoUh3A/!e&9X8Kdn,^,!/Yg6(l8H?,tkkmR4KBiFj_[7Ij[0>0g^N4W\pqbdne0cb'Iha`6+rs.7rCu(3Gm,?FjZTN'tDJdGD.@T@&48m5Ca^/X"S.OB2KD=h!Q1o].isn5OEdkauSR7sA*DGPgH:pOW@NepPI1iS4%FnA:O/Vk_IsB(D!FW3Ro8_njO7MJ<)441OXLX5=P#;=@1dN'tDJ"+.LD3bn/1!\F:o]++!pMe!Ho8t8)T5DYor,dAqR(eI&KPXPT("C>1oGkmq0ZSBmh_<iQ/_<Nu(I;72g9aoaCA486iF)U4P@.@XFMs_MIif$8Ukq+>MfWZGlPH'Kro#oshjr2[/ef7&CH*XsP\Io(=!#N()8aLVO`L+Aj3S574F!!h>5i:h'8KdqR-]LGW)!1`!^s;E5:VR0"V:q,Ie+>L\cY1;)oZ3$Ob5.X1ItIKW8JC2WH?=-r,2]d<C?Sm9\=jr4WH'^;P:JAR*uk'm,KZTM6BJV?s0VVd#o[TL,^-dB<%4.6/dRt#Bm][sPfDEb8*rRsX/HsNS2+q5T;JWL@^"YS0p(HHXr26Gk/lBk/%`Jo@!(11YWlo>aO*48s6.D3gDD0o;GkmK(A?F\q<0iXhKlATJG?m\B-]2h?.?TES0I%sYI3V^en2l!.^\=XIPdCL0`22iZ>*h$HJh%XUqEC+b9^ZPgqdm3h@j'IIAmPt\_:<lT<:9gH77Mk>qnh.R>8,p^C_7hO0ADp%`2PY]_k;=:/ls7*K>MU"t4XPHi;d]O/$7$P+]:F_#Rr7O&uI/)W#RPs#?)P.=B"T%N@T?Ab-YO_kcHmMFb:@JXQZVN!-pVJ(stL]8VmIV_i6*IS0L9%\/LQX`aX#?W(]kkM]C1Y.lcfTY.^q1`WIH;6P<J2OpO?]qp\'-YKBj:ffYtVB<d?0_7gR`dHZ&;pZ>&b?EqRCI!Y[(_r,8oeN*$*/B2+^Kk$$qu#0P-I>DjYLWMiE-T)a,e"(Vo1ci"]'f?q(<ZZ2A9u)nG\pV1';I'6'%nS'Yi5f<2@[2>!AHccE95Aipae!oIg7j@r)2QY&C)j/*t7.hNDnSnip!TB:q<YnpI+&9JatEUG4;KpPTX9s-lWFIV2dH8ZauhJWaI[nc&jAk'ieA4gmt</cj]M/]]!C-V#'\/n*V3?pV:*mYPK?/^>UU\U+p2_A.c:a&-;WCilOcTXOHXR<VKrJF5aOgMBN9J3ILR)>4a4(hsMA41WJ"a>g?\?!EfKf*m_Tg6L'I2BV3njF@A8.cDHV8hP@-Mkf@dW#])Z\?(B%S8IYT0Brja1;sGQJeZa,\0@AsbJ%8>:)C(4MR@e`)Uuo2LeXC'E3\E2u;`qqc#bAE6HHh4Qc.a9-gfDc45<2<JQH5r0HSH-e:JKsi3f/tk%B8=^+3jHNJ;\CDf?R#dHOlufOo9IV-FA,XK<RY,NW)D?RKb9qB`<qiSZ_P'FS*31YMB#?c4JWS<7[g\EUq91JhXniJK>qOY.8;@SG"[$1tDGhM[n3kbeP-sJ58+Z"KQpk^$elEdXI06^@/Nir!7n#FhDd"+_IN"b%59q_DQ]pI"D5h(,En_QCX-FbP<:Va@cf%aTId3j7T'UpsimSrHQRKote]`%AsCQ[b80l;Ld6Vp%LCegC.`S,1QX\k;gjU'VC&p75-b"e:1M?nZPuQ7O_fk!&N'5d%g:h&o)Gu%sju@3Z>=F,;o?a79pRDLqD%*7qZWS>)#:.^^iGB;GR/@J(nRb9K@qI8PDP'8E(ma_WsO:4l\iP:EZkh<r$+n3AbI#8Xp/2#_2;c]KsX999,.(s,&##9_WX`hjC+7>],J%F'2t6(gjF@q`Khlr3D]p)Dfg2L3.@boIOOK?.71@`h@1)Sd*Y9=FS;Q\k=@*9,0SMf\.qARP>^_i'DgP1tR-mM$tk?3tb1Ql8UJMjSc*)aR.;h%`8*t,A8+?.L&P#'"7r=Spu_YE,VS13G5Vn42((0Lct:^]pH^16I"4]!])eIe(1,Q,P&hPL(lR&^l/D/;t_roF,IZPFY79lK;@WaJ):tr"E0Iad-X0CTVI).Qg'>>g^#+$ih-#!>L(nbOBd-LEbTC_Xi&OncWnVe1Zm%!riJGWDW&H2&a.*geFq)4%WBb(P)T[W<8u+6$nd9Qet&4ZZX7]tB$h7#.>1U2fWZo&C-N1U*F,08+hJfQDC_47)ja!J^h];_nra-39$8#5j>d/1Yo=2VkEgG<#[_.mBSA(HZ7Y![S/^I"8e`;a7QB/mm9@'i$i8*Eaq^nEdBLa$Q!WH6E=jQH@;lDJ&:*u%V;/]b^<?"=0/60Y!_+B_,ktZ_H*ta@F=?1O]#i5'qr#06a@OW-G"J2uP%\C%r3[1iY"fHg7A'K[\WkukXt-u"+R'b89LN>!:&md='%pO-AN%"q?++k[RU`hrZPpYs:CmJ4Mseu$S@)mG7I2JJ89hToF\f/@:T8,C2VDWYaZP>LbM[@;\2!s>5)1sLQQ("+>&_D6a%5/o1<6_H-=ZYs_+;`cNrg7aEk(ULV4ADOTEj+&?2SlOo4YkVohk(8e\'']P.bbqEbTAK_,6/U?Wn\gPE!D2kcc4^:Y4rjK=?&kk/2Gg4.)%'CL7s^f^(mU0:7-5)-da%2l,L&kfAT;$Vk=XAf(jSKUIc)Z/#s#]<<C_GWu3=BcSi(DqcoVGp')<Q*5eA?TNQKF0J>.@Ht%P0j`(U.CJcZ>;34aN%W(?ia`TR.CO1G78$/lqU67f#;pi`YA+=$>@!rg^/@*'jf!$4VM!XM9d3A(Q^<]J<fjM!?Nuj/k\-("C*jgTjIChuMms)%%tWh0jYG?WjkUC_*X;^rF-U1JLQoD,_<0(7(K3a&@OHd9S."`3]Uu9NI?$oW:)VVYZ):4g,[mKOTpmh8a.e[@<o[^c$!F@q;N)mRU4q\6Ct;.f6dhUD)*[uqU13F(od;u)4O)-&L<NHcMS6kR8?S#FL32^c(CS'RIce)V9PSEhIhn@=9k?I7^IMj*_jlrF[&HJ)[E^:V'dNX:bhI+L`Dg!ma5Ne\"LaL;Kb&se[S0O%r`cXMZ?"@U@40Y0X,)>!25&it0#^@OXqhD:Zt8N@>3A+>n$u+sGliJ;k#NAeE6Z_.30#cI3Fa>d#PfDQ,HVssf"Z./RWoQ+ZbSQ4%Sd_PBMA[98`\U<G;c^CEtUqI-6X$j*)i]eWmJ6r6%3NB8E+c>JVt%+Y)^]Up:m8KEO9cbHM(fB8'BFi_t2q)NDX^FW6T=eEX:I#MVFim;N+"6N5XhFAlME-90';I%n+##RgYEQWZ/5N9m_[i=E3?nTO`i!al"G+YOXs@4g8QG#T7$\)C`RO&,.j'Y=8[@$0i1"$D?"'cp;(2A>`bQ>DlBUDG']<9+n`$3DX-KM\^a,=CjH3=6]N"s&(6iTV<pG>s/r")L]2$Zg]Tgo*`,H,E[`gQX5PtQ+A>Ip'I)D9JY$D.r<:LbM\g3he(+.]-&C2-+>bnLd?OZ0.;"(<,?r-6(?PJI8e=s,3'1Ia[6CB1*hZf4>u9as#+G=ga(0B`T`Fp)og76^tFiVpSdhP,6AX4ar:6I_rYC08I[#tNk5cGjkLYumdl1:U=<Hq)/0.^,khQ>2Rf<l_j_p>>3d:kAbmp#B57afC-SZ0q$E3.o$=8!\_GK>=(sOq0mseQ8$W:g]MSgu=qg$!%_iA?+PWlPk6/\J?q7[';fGR3X?ELs@n;f*X]U[e5(E/Di;7&sIPb>uOTa;8X_L.uY5:@f:J`EtGPBsW@mSn!$=fl,#4cV#V<*=k>Umj3'7kX)CpZDhs2=4KkHusgE6BJK\prN*l8RE=9pl>0o#m)=mIAYj-c!#rcEK\lGnha?!(oA_=IS22Y]!KmB7oXBJVkI50R)M18=-RAn-qK_i]ZbSfV"*`a$m1Mm@&t:VrC^f-VJR-TE(\:2.9Zm-c"r],lDLK*4lNW+.u[^/PKF:bLL=:>+B20Oj:kjF!e!aQ87GFB93>@[gQ6S:CG?kX)+;,gFG<b?qK?'(eF]RT)2HTiF&XfDZYh%*RVMKclbgS+//#\0YA'aTcE#=>4-c-<''uDeM]=09h+tJV1c>D1M)C(E922*SJ_SOQ[qG/PYajHBKL%H;^R^G:?!+f[j&7If6s-7_?e+MZH'Z+%u#X<log,q,N5#apFdMN-6PNJH%Yh`<fD!(:-`VjI.<4O'1u3>7<jB5HN#'qUmY'tF@2SiKt$\I>@i'o_&Nb2_HhhW>2":p-"t<*#5:VL,8MGoQSQ'4818!?:Y9Fa-**o:q;'#hDfB\e-?2WOAu]tBpjcs-4?fonp#jS4n'$:\f_i5+;McRVnbNp.d-l<ZYTTjPPG$sQ9rpq"$)/aR1/p:GE#OQ[IKi/$FN9E:`*mAHZEP59XcaU$35G.;MlPuqL-4L9/Um_72g;KVOW_bi&On7RD5:/i'X$?5<8&?,JAH@.^Wj#,8't1c-h-p:SQ>2XK/M@jYCt^>B=)tL5"Mp\^L&'2=27tfDqcq`pj?E8eK#^K[hZBhrbg!.e"fPmMqpu(m;iQOrX9S8Fj_\*Obd9kH3H3T#+!"tf4f'PB,1bYO,<UErUS?l1G(r/83-FF\d0N$br3R8!2hjKXo),b[d'XI/MU/+G;Q&tKBlomB^1O)0%@e@A))7XG4H6RJ;%QX<#Q#_#U2K\CJbFaE_bb_.!K#rq4LtKPIQiZM-#RBX(>P5[apN@dR<+COTRmA!&@qqG"OG@bXeQ%;=$_Dmf)+uD-1MVcDoMV'h'1M#h&a^>cpFRn`qBX6o%>n$Vj$spM8W'=(R$JD."WTAuINEULhK\>CQht_.R/t&=i&"I`9hHc/]i$\r(P^\oF)q)S&dI$g0sR]lr?l-)f0"clRjW(F<=9=io>ISm!:gr5RXFF5-guq/'c',%)[FV><eX]+%=IWjFXu!:Rr[)Z[MdPVdU=Kp(_Uj#?`5;k9D?r"!&O(:M/VD:8^7mHEh!CRS`lW9?$4q8O<5_Sh]eVFIBOs.h88cU75f[P)%D6f1'M@Ou[,+m0ru2#86&g0YN._Ws]E<Qu2lBp"JV0]0eJ;ebJE>>E-RiJ-9V3JSW<Us^Lk]3p#>kF2+.K9J/sKmI(;<oriDr-eH2G]5N'l(5&U\**,'`(8mUN/,6jJOI("=T8gH!84@hO(A4HAr.C1(fT"]6,eWZVm[$/4Uq,1,6!P*]W0V7?DXt?\-fp8#cC&'Pkt^N&r%m1YA7LTX6Tr]BM*e;]G>Uuo""$.YU;UiJ&43f/o5OI."W2*LLKY(Pp:-\4&rs"M3i#/[0gj8rOERr;UtV8Gim[n(^\Jui09^+[0[7cB)C7C3'R0;9D?efWRYlV\2apogW:T9U"T$%84nUOCfL1c&@YHaoe@]M-)82GnaPuuPm18n)1cUf/o-55?lM\QLZ`Ml"S;X'Oqp#e#b$cS*Q^VPfN-`j[39]Gl'P&TTLI&db2&CL@nj#u'0F\c<U-1B1bg9G9t4&*,sDVCcJ`g:G-Od!+MVL7e7*!;#.K+k>GiBd<Q?C*KMTQJ[4ujp@eFps\jo%R2-h:['!9s^<Q%#L4hXWII\:-TWh8W*fd0>LE0d-YKapFp:RhF+GiVJF=0/ZUXTKF.=>.WW'YNk<QfVtRHSVl&q6e?u=n?s;M6i2F0'm8Sp`qEf/u##6"dc`Pn(4Ysb27WMi8)AOH9GK`mSk;n?A)X&Y5^.52]AGr%;.j>]'`B>,PB0j$'.$;DA*!l.VfL)-g%ECQIQY(@qJ][\5:J$!D^kiN9PSB:_EJ<kG<"4%sgZM)^i$nlEAPQFhR#Vj'n,./SM?4r;NIROV0NjNqBtnf5I\(jO2bP`(5Ke&`f8;FL5UN>^X9n'2_==\dn3SEM]mk"NTr.fX"6B+gP!%fObA8rZJ/#)%$:5dBDg?aq_F8Z*&l"6iC6)ln.DW?Bg&%@co]r\Le-GO8l'J6M=CF/+`#SY%81SOq%S1r5<,(n-pc:VFI@!)(GK+Yl9%]q=`N9C2+5eUdYUAM3<";8e1sk!;p'1BaP,phPno0(gJ.Bn_&UXjambedo?=6?7%-h4VVn350ZVXfeHdLePdOQSdepU?!7eq\_AaL(;to@3mMTbf69'P4+3*]D'l-@E1C7WC<QG`;4u+*hA1iujf_BKO]>CRTNmF$Ql=B8c.01_6*e$i5B"S2g1]OP6dX5A.7G*!SXrdHeLu.Sh'.TV%:]2)o@EL7HI7&aq+MY-%n`c0f(?U1o!Zsq>j7Dh.RAp_!2''gZ%)))(do27/p=Hd!@*_V?h@+Sp\h-7f[M(:M!A(JC26q6'+Y>k%$ck-7nAhtOT\UXNb`Lk@/f/t$4Hc7S>lp87UA:`\&2oW\92d'=H\d/.f.A+PP*8Z(<3_$.OK*EAW=r\`'r5p/m="?G6^m/:2=4aS'OWC%fb@PrpJcFPQ?=kpG+ZI/0!-'O>V9(U\'LU;H&d6Ol4JeV>dLFq[(u5M4n_Eh!Kl_l0(a5E!_jn=5q$:Z7ln4o]673OhQRE,h\eWQL7TImcY$3[R-6/g#(?jB5Kj,:<6:O2oF]_&q0(d[*OA!PMf#7?S4f'#BL>9c:G0MBSYgs`]F+!(u,Sf16T/(:L"[bomkGph'Enp(H&-->2OL2LB($1befJYD=gfW^[2%2Ib^=I<um>?MO\H?;$ji>i8hOUROT;2;Qd\kRp^f0cC9-kn43,=refN+]#RtbGtB89K+$^U?C=AcZ+rmeE1Pmp?(`uhB=BaOF#NN0JerRSR#W+uinc#bjMMVqp0Jdq58!9(qYns4-lM/.7(Z"hcd4g?FdTnnHrb-;V:-rDLY\M`:?IdCAu&4fMsotX<9Uog$dUhBXriD$"-O%T/qXV<[B3u8GrmXA(%QO;3#o\&T/VeBHNr1imMKn]e(4)%lDd"8_gE!RW7pqs^#BOL`cp'KPjHfu6)68"DK%%C7QAirLq>H@ift_XdoB8s'QY>[q_'@@eh-*:[rdb'^T#-b$sa<bN@j3g)&I%XC^ef>cu5a@i;/!0Y7X5ROkfPjcJ\qe"aA`%!;H3KC>Jt/nh#`!bCsW9`k0f,LYL;HJ8NcNo&8YWA$_bU<EH6!+>Y]7Dm;)J+N`FWalH&=]UAP&o4m@>rJes<]Q."JKs`i.%%SI6.ZA):kAIn^haAH<)eIg/#kI:WILRS8fsDT0:[i*=(NpprrANfc=,f?84qH\k#k7O_d8Rm0J(rQuZ"QI!>Orp]p>.&q#qi3Gd1qS!%_QaWGA!]ll$)>!Hr[Gfa7H4l't`tMf7M&PL;!Yua9+HpAP+C-K8W*uE8fn`&j=th`c>iSJ5SY&/#X=&eY83G*KL1#FYjUY]`m#5*/Z#MB;U(trc]S/bQQuIk>mIbMc2CCoACg\=*m0\8e(=Q_IRk'U]FY/e4hpg5-95:?@IWPfI02LMi+Vg?B;K@C@S4hrq8'g.H%+57</ku"-kO(a/qKeXD,=dVk!1n=X%%foF5FrE+\C$B&q<b8Cs!\n1r]fbDm74j#,pZ/gSVDq`6R:F>YuY^OLgJZgdeU"sYA_7e2cue_?![gmsSk#uYUM$<!=jm>E!L%Vacdf3=IgQa4rqb.peA7Xg,9m6_@prt9b:;'OZrS8J>T,Pl&l.q%\0*U0]@#&.rC/l$gX-lLp1?b(PIT]i\0*@c8?_Yp,-5qtU3qEB0\(FACCI<`6%5Ap%?RU4fu-fh411D7BbLdE2bI'kE-2cSHW.>)DYh;J7EVB#pNFW`\;/2i,2"/fB?#Hi7e7,aA(<SZoQD498g4r>Q80.Fu,)U<3lG)##HhNqg'.j*ok8HR$E>ae;Z-AF$/=6cC$MjQuCno/Ys,b2gXQVWi=+9gRmMST6%;XE&/SqKiWILVcNg(1:0cujl2$>fJ#NnDMMZg_*KPC-6cY@]l(!.ETBH!ILc#D8!Llk[pfYd.QR"[)]`j]em7Wb'/jIYp;XjC#t#45)k-]#P=/`6tdCSWW+Tki4Z29o<h!$Z7MW<S;#(=l?30T4>ASn=Iq*'[Dm)dLOQN/Bbc1"T)OIS1/T==,3MK&k4@OBuIRk%RiR6bC@"BF#lFTWX?fsCh'gPPt1R[,QY0jBuY_N5nBt6`/Jdn\&:N1WoR&6\2<uga$t:'jfucF^Hfs=g[;>M/!A57PV6$&3#.A-ifS1"`Kg*H;fY"!*5OcQqhfMZc?YH`]A?N:2RtIciOoFn:^m&ghh/?NV`q*_OpfIk*\ab/\gL%Y\U,'6TWo9bmLK])%+5;5jMduhW9<o$fO8'@QMn:6ZT,PfGg/;R]&%2J?Qn6:,t+,:jh?[A0([o<WVfNQl#>"8O\dB6"pS#ARmD'f@6Y64o!.6G9"8gUbD4i`h1hEN27>'tdM\.p<tTL@4.pVJM:dkI!RKbEYXD_M(KKal]Y.^O\\O&mJ<Au14n%buRs<!#&Sr_ZPeh2:[=/fsaDF4bKKjX!iS&JT(BjKAW<WrdaZ<2Ap)TK"p'p+e5.#7Zh@</frt=>8^k:7[q`$pI&U3)n]Z=?Y:;BDg3VhdJV_7:oq0XjP.K=hn7>\qY0ec.TjD4M3.khKsd]&MqAZmSh^'B4dG.jisF)C7qD-tp+R`ojj-@JW""FPLBHN[5&c+r-Q$3!heUd`1JW*:r_HGLF8j8p@D)6!_.T76UHh:ALL&TC0Q7<N%S0\FKPQ,4^@7Ip-K@RbZR@5=I]^^T"hOl03FH-`Q!?2)umq9fYj^`XG2QaU%W#0i/("l5s'T@&*BQ6G1Df!I,KGM^M?.irf>(0IeDpl"!cHsS0VE)T4MqitNl3s/NC_GN$*(qL1[N7?XWIi'oF7/+oajjqH,(,-A'40C:,AUOE!E(\.s'Z;e'bsn,hHR\]aMu`#!$BbAULh]R8oD>pC3ppV$^u0AIKKd"H<h"@i^.%d0`WBrMaP&CI*:Wi,6gX:@#Hlo8YB,NCPotBlFtp14:,#'Q0F:fg,[bu[J)bue=L9*jU_jq0!O/m^/iOkO:C]T(Y+F(;Hd'XRKJZtneo=aJVcGiT4?<[qd^<OnQo$_>[C!B&1D4PG[:Yg[\s!Z-4&oks"r@EleB!Q0F2.""KulQY2!B'1Zmm%]5;#PIYHen=F%J_=Bi.R-]u,>X/*lGLbs?MBZ60IA:^JmJ^9oAC>ZtV+2depq]02Ar(u,pLm#.f@H%?4(n^^)GOmTRl."*4Z-Ydn`Oj7!]j`NB`PuK]P4!P=Ck"%.%;;/>S7tJ).S0TQdK8YAp#\/Hb64RT$<:$ZRh];'!hjULDXY1VQMW-j)0GC_o385%=TX("U[pUIc[5L(.6ncNnqY<p=rI6e2Ad/IkK\55GLuut5J0+)i=JL!e6kM/[^nQ:<Q&Q:E&)'L6[*Zt_)!OOXr*K$-TNmJ4rVU8?bKRc[RLh:'AE>$1;RDtKA@^ZVAE8gOdB_dp7BCt\XF&RXiq;u'V^Vlnk<>iQcpY%M2NoiHMIr[K)iT^i].q7_atEjL)kit9KjLCfqtNT@O,*'$A%CQOjbSi/=a,U5N(&.\bYJ]bNu1UMJ(pM:!I(l3'I^^tf?FF+Smoms$saj)C!mdiVgA,E1cJTOo%-VNqI&^\>?ak[5("t%rN[MPlu9dsDFhrb\VYYf;FZ*SS#_^kYCgudaX\;4KBs.'dLRgG`%\aD(7O.m)(;p+7*]5DIZhSP/$Efc=m5.ab*0C'KFrA\7`m89g0D=ifW(SD3&p7NVdp2E/cYns4g3M7pZVnUs)+M:%U2ne;jeWR,0'qDDR<i6oYK*;EA'eUX[$O"e;2cGFsrV'"%+GdG^]JKim0kT%h"8!psE>KXTj-1XFAVi\q])8,b+5@8/L]YPC(#I4f-j/+/#H%?J-/4A;?P7^/t,LJ[,fSCP(S9U'*W%jX?1HN=g/IP3iG?60mjK(F,Kq.jOfdN:u?<Tqg]aN.Je[+D.F`MO7HEB>D5gbV`OjE32'Z6@\A&iiYC:hQIs9r_*"V95CW4mp:rp1'^6QH$=8n5fJb0h%NN[s,pG;"pS.Zd:QKp,c/]gYCSQCirJkoAIZFRQ\.ogqbOhF]f@)#`CMF_<4\%dLM:0]YsfoB"q:#A$'n-TkH02/RqnaT\br1G,!&mbW[!oU*=hgQ,b1SFAO]u\!j)De?E"bY>Qgf(P;!@J;.9/#4D1<om0;#DdXU\t35Y+iW$t#TNWi',YQ_NQ,K4^A@C#J4:j/k'5^B28?uQ^B<]?Pk/M/NW_f6T7RB'5I"?g5l&q0c(Kur7F%'"C3XMb0EJ9s$!h?t_6<+3dq-Q."\0Xs!cgbNdG9Mkt69@h-XesmVC0g7E/,l+0o2N-/B'#VC"BkKm9][c*KI*`k4^=%$P#)9:8Mj/Jqmt[LFdq$_let;b_q/NWS3`nL8@Nd>@]bkH6BDPrLrY)MVUq@m+0Xr7.'ibl9)Pl9meXg#XZK@B/Bp2Sg";1*Q%3J4oUh.%P,Jj94;mB-es"&ts,HjWH$n_h>WPLq6fBgs,D=3n1B<+d&NCX-Zqmb@\j@5)]@sF#7Y"-^.^0Y]N(`6Kf=79/;"oqZ>rs$kL:"K5]fs1RZ9BA(c66m>p1>I\JYTGUgf6mJ&gd3_L\/a_RgW6dPjbFuVFd"]'L)fkl],eRWQZl(RUh.%J,JCSI(qdtAfZKr&6>iJ6(gIZ*F:!V_DQKB=!diqu[>iFbj`U>8'%]c?LEb;#jii\0aX=.r\,mn_)b(Gq'$7Md8+V1Fa9rVRaM?_'d)92/02)-g/m/gr.h1#cie,!$"bj>Vn`1Z3g5F$(0k=oBCLZ&4n?;kUSB3/%]:p;S2LQpcS.#ho!ma#tpgmSG[KLSF!HPWcB/ZC--c[1UP<cpiEXOCNM_L=hR)ZA.ri_"((Z@ODXb^idH3,@lV3R0o_4?+S5d7o#N8RTDTI^(2Pp=>kRb,fd1<BfG@AH7<:;M;P[W2gM5/P*C)9jc0KI]LTI0hqCI(I.$n@Xo&_FS51]6M.WYl/@JKb_Ii)2[QsOHDG<NeI.GNlofSfA[Va>S-glB[pe#q=@m^ZNDg>NES!S^*]dr*7Dt]V@]oS8-G$:I'n%SD2clTf+Q`",p-Q'BGYS?9'N>1%sIpP(([,W$"n8uWS#;ForXE^9HdYoOY!\P^\H=Y*Mo1R8$TO$fA.<IV&1%1++Dq6nP7/&OG_J!D`sCT)!O=$b4#$-QY=eNh:6(L,[eUZrsMX$IqKS11K>0?mbp#BU51TZFBSOSofS`kJZJ\+>BB@K,%RAJMHs_VX7):HXH)m7kFoAam$?F9$K2>Ne1US]oma,[?eD+PUe^XpBB4#?@-E!*]C!K$6-5do!&Dm.B[;-b4h%eHot!ZbZ;*bV$<)G.1*X+_b:TS&DS\jbh&gF`rOl7`XYf;^\Rf2WE"Dl\rSjaUUm/9)q4c!/q\&S2BN!paaM#(eOHGQ<?3;]bQ!6]kE!o/38,&qNc"t%-6^e_oL9?KMG$[LTCB=2o3#]Oq"X.eL?))f?7su+,9g2@)rI;m?UC"F6,Q5C5qrDMhT@U`NDfV,%#n.4p%d!-&@D7KtB*PS<4fq3*D<@S6NTs*c\ps8ODf^r[/Y`W^"XEt1h4M#21F<2k(C/&?68H(D;oeKtTY2DG>rW,RolA5h!fW6Y(citU@]p468cY+UaEpR?%9@:lTR-ku;GKo9g]EoK@jD85:'mQ&/=bRc0[f3TV=6,`V6<mJa0+<`><pYV,=[PSF'ENJ(`;$4rWfSm26EsWOYG4K6=\6ofSbH($YUGr_+=M/%Y=BD:)UB+@UQDU5mOSVkBW`)]ZqA0Xgj6.+3l@%><pYV$Uu>&rtuXjX@.$eoq'>)fKpMn5m.1u"Z-\.8.5ot&rR95UF=KD]\BXd+1Y%hQfOIX//TTd0Q]o<:V&i)!>lQ5FMG+&+)c;\-!A5Y$k/[>,a'E*mt;[/BNXAV3Ib+Jl-+`6&d(M!`9PiW6:Yr!VrZX:`fZBkM9g:kXae,'M1M@a,4`Z(_FPR?.,d^F;[`U!aAj&4BEO3U(`5:_kdZbAn"T`7/c&KahtdS:OVeor.J@)X9,K+i\-ekHs+VQ=PufjOOGo;q#)[4UH6`]),R+HW&J0GO0N*@6%6d?rD0&Fma@OlMfZ%<X`5#b2La<ZbpF>t9gA'S&<V>q*AcWN[D<<U70LfMZE%F<dA^f'+nOXNUNs(E((`5:_<[8XOOm8G2KOTiPY"oNh-*L^Bi=&0gX(1P&O@_ncD0tp=iG]qX(cjV>Q#4'CYlS[$`5'_K6*b2\7^>,r>M3UrO9SR[nfj+MKTd^m"gJ*6m'W6,,n"Q-,;Clo&P,#SZ4DnV(`9gi(aCah0XqT0,;Cl+\.0?#0eb;k%N$EF0JL!H(aCah0XqT0,;Cl+\.0?#0eb;k%buYu9KL<N0JIT@aNZ[2_[[hqZO)i<eXA1kSD$@LWMG;bhJG?C0WA<Z$'WN29c,+cpaGJq>\t0u+g*^1@jEKn@2Ip<UTb,G[8G_2OVeoP(`4),(qLX()h03D!\L$YGG]$1-kZq3B^Q5:97e=g*5uH,NkLMa?:@@:KPiF>]oltA>DN!C]jFB%d&q3EO"<iifMTR/3TEH-m,&tqM`u+"]s;Ya4%9f='VBU!&E8b@F<M8*+g0t'gL]Ipediqf9jD$DZn%r^%^>A=gGb#"Pr"0!qc;H+MG='(1kZ\d+%:,T(60CpKXd:'/jrstGsb]k\K.IC9a$4[+mumn=(DP0?BeRG%LQq!.,n:Q(rD;Oe(.C7E;"uFj;S^'DrK?"6\nr,j$Lu?GMj$^'1%3XERZoK7*h.?Tq)El4L("1m^'#^g,b,$Q1HWHVH[op-oMNFpCIhI?$%+1`ss(UgrcT4ip;"<fdPG/1$aT+$ZFL\@Q+GA,*p1&*O&++4%?KSs,L??h-[+_UKDe%Fq8$1*G]j5EGr:G@`K$<>s\cL7""<j0nf4dj!*B:\N8;K84Og%7`7W^r;+?ES2uQ!/jrOhW>B$g5kYXqEi]b2@e.g3]7J6E_X]!pE"i[-*IAr)*JJCmODi(uc2V!P=MBk,ic"3M>g3a%m2O#L290#/IGP]VQNT\.2p1#or$AXe#]nN9INe?/g$b1_UKB=*2('t_#Qk/2!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-6YF:9%i?U&K)~>endstream
endobj
685 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceGray /Decode [ 0 1 ] /Filter [ /ASCII85Decode /FlateDecode ] /Height 249 /Length 2500 
  /Subtype /Image /Type /XObject /Width 390
>>
stream
Gb"/lIqY'h*65hWgoPAHe>Z/!Vu@i6$.F`k<(aB:(o#;?Jc[/9#(\Q+6W$HQ.$[DA7>XT=R%Qb-ba+9G<fh0E\)#[ISISq>RMGf-qEaGmgZkBnqt8Y*C`e$Pn(/Z938XDCpN&"VHhZHRH]0,$&4-XGjT!#_E&`5Vfmn]&&,,J'WIsggQXh;g/r\Gegalf.$S'ZI/3NcoC!JM[c*X-qd),M>bqH>/5LY2k1(+sa%S<s&>#TLSCYrRA/Bn(0E(<eoAms<?`b^UI4)^bq'grfm0Ag9`^oESu")'t(iOcFggKj[dK,,#k"U&K>!Eqa=((d,B"D@f:>!RTR&>010BE8-;5_'U]TEPI3!<H@h5\)$N:K(a8Vo&';=a5G$aiNF?QlZkJrQ^')B.u0)=;ZPS]bB/+3#/<G`'WFTPKi6tS-m_4@c?0%A#AYVNhhHoh>-7OZ[*jo_XnCB(gg598UjKhl+s\a"D@f:>!RTR&>010BE8-;5_'U]TEPI3!<H@hJ//]h"U&K>!Eqa=((d,B"D@f:ObL7?E/igmSfTWp\Zm6Hc-o$tJWhd6Lb,&V?<bQjCf<`4@Ak%`REjJJ4f"^4<klEj8IpZ3XM-%IlWKb&dmISQ<$]nrP2Foh#g_39TEPI3!<H@hJ//]h"U&K>!Eqa=((d,B"D@f:>!RTR&>010BE8-;5_'U]OBG+9;8K4c7:[1VG#iQ39G*D@@9#*53#/<HaMOO*%p*^"9G*,83H#dr"\sdE1_L0L\$oZ<ogA.<H3ca7`a0%C$I_@[JQ$!'n>m'">!RTR&>010BE8-;5_'U]TEPI3!<H@hJ//]h"U&K>!Eqa=((d,B"D@f:M1rR%72j`r.SLG2Ki#3Ls(2V9_XnE-8=@LGEs=uBObL13[Ip$s;agCaaJg6$WA$K2T93I>GD.IiYqRTHgjO8SVo&(f=Eral?1^Q\KdjmF2?[[o!Eqa=((d,B"D@f:>!RTR&>010BE8-;5_'U]TEPI3!<H@hJ//]h"U$(dL0$;l/EKiu+qb9/'27;L!`"I6+l/:ScK#Cg*^U81BDZZu9FmPFm+V:5XtW:4(=F_VGYMC:6o3RZ2T:,c.SLA0KrH)8iG^NL_Xubh)ZmBs!%f<Y$OG)\!jmIX/Kd:d#g`VS["&-.+@$;?ciO9UJ,h/D5RRkE!Wo`ZJB5V$Mc%CF4@MXRVGE"Ni,"u+Z5kAYb"3FEj;']iVT5f@i+o$aiJrSAg]D-[oFP1#kklOicYtd<&"^0P5RRkE!Wo`Z!%f<Y$OG)\!jmIX/Kd:d#g`VS["&-.+@$;?ciO9UJ,h/DOG\`pc)6lVJd*Z+88B62&Lj@V"]DR$<,'R6'ssW!$5Q7B)=pff/LZ^4KnXLSD]$d^ofV#l&4jW(n'`L;,%G=QJQ+h4(:UZR1pinUce8r'"U&K>!Eqa=((d,B"D@f:>!RTR&>010BE8-;5_'U]TEPI3!<H@hJ//\-=BO5F=(1IIMGqc\d=Mi0$ho]B*4&HQkqfV&N>>J)m7;4)n`btS,$If/Cn^buA)8f2"VlV?*/_b(S$;BogqnX^[rX%#Vr<YhJCq`kfXp`h^,tX'YV<9Z[i[)Z=kVLkqk)V\GO7I#T!]_,$OG)\!jmIX/Kd:d#g`VS[",qD>.@brj.u^0[dFda#-:5XNrdtO$=(8%$^SH-.48##,5&tVD:/:p19A)NSoQ%J,uT4$ckbFj+f"qHFdq;%W@[#(oY2c`6n1h@6@93FDJWG/Fn*,_>g1._;d2RSM9Pom%Bfme@EbXsi!7BVg=!>N..BWQh<2?:,mICWMgp56\#189eT<D%mHFn$CUt/8T#lPO[Ipp`XJaN=h?;<:V''dJ]["'T@n!'nZ\&mYO-km$Z\+Pto63ZV+(WVWdjm@"d/.:Tfs'2D7+Tj6n`0B;Zie%2XsL_D*<C(Q8&Ek63Uks'1[[>Sc'u%`B&Z]gM>r:TCPiFI-R]SAAb35oJa>#tU*ai9F'6=2dP$Rc]j9nu(pbW6r/RB*J>8u+@JBBtm$bYAUZ]Am'=uu>olRdd5MIi2fs\h(9]7.)VH!aF@XmO1*YfB6I9sYVk^85WF0?VA4X=]tOt5^VUq)g_*5C=Y(U.[Y$*0sW@+VcOY^.W"9Z\GJ9deW%o/eUsQ^E]!'YiD:TLA-hG[OZN@/N4K4$%j8[pst<q]I#C?8XcC^<4,WiqTXIrd\"t8m"7T!NW)_Y^.W$`jUo9CH>%j/F0llhG&/=.q-Zq/V-PWpO-9CmtZN.U$KD9n:lJ/UaflOJ*((S]d$Y\In`#`mqDt'2=6(3B6%B^b<sR7djDG3PNfZ'?KYS;[o5TuM?=OX540/uK^o$\F!PqR0T1)Z"GWKiACeK[?D@$_p@`S2]JWt$Dbim=>LS`(oh5kV6uIC`ni`O=VKUIC_o8/_cV)L$'Ll<M6U?Q;*KB%Iih.TF(*&/C8*[,B$OSG!XP5]'-;1`EFKN6lf@(6)C:]`#p2gGM2-gN,cfDmAleuf-YlEr5KFgHU+bUDYbMSqie.M~>endstream
endobj
686 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceRGB /Filter [ /ASCII85Decode /FlateDecode ] /Height 249 /Length 22757 /SMask 685 0 R 
  /Subtype /Image /Type /XObject /Width 390
>>
stream
Gb"/l#?2C=s7`/WSG0\bH-cN'Bg,*^'2(/:QC)?e;55kCRpp\;9JQ'/N/:+_]?:tcK+o7+p'MR7"I11]!hu=h$A]fILihm0Qi#W$GI\.:=LQFi\Xt[51X+/"qjY2RhnA^W"+W_3:ad"bKgMJ0-km#B6D74('FKO\Thm-OMLG#uJ^AT!O<Ht<;^`>A5_fi:%s9&DX[pf6%]uL&.(mBk,&,i[#ZW,W`D5>sOn>o3.M@GE-ZH7[.ZH;+QB3nX%3*<dM%g;N-hpRbQ$qA$UJN@h.M@G%Yp;;0,aEq04\,OO,#Kb3!\Z^kK7tcfKjlE+7C!\$lWTMDX802U68:,mOfX8aN_p:<;g_e8TpQXr8Cdj,,H=9KRtiJV[=Au`Y3=j!&.6C8:dqZ*YTgJsFRs>TKjmNM,$>:UO_U@Ipbme7FrK)Gpbm[^W$5@P=HQ5A>5:(0@U;q?CZ-(H\)XJfOfS_f8D.P`HlGC,07L/bm<KCu.[%2iT@,66mdk9$`OtQL=@*bE_P)hiH5.mrFtMU+:s@+f.qS4.?Etf8DaX;N.[%2i($YXu)SQZSR$Z/mGMj;9h6'Cu)o<+bOfX/+SfXt(M0W*KgHmVJ].OfF<h"e1'raj/^e\[gN=*C:TpV1>j?fk;((O??QB#k\Pb-)Kk9.BbWPpQp[SAgfGu7Pn&9j$^P(c7<l$c8QIS,Z./`Rtc)'8<%YO_NJ%e??mi#S@Y(!4=dMH&9]Nh=b;QV0?[DONXbUl'nM%e??mi#J.P'oC-#FJ/"NW^rt/XnX@$J$FZZls=[iK6c9g5]n?_U1`ZbU@p4nK&[-Wj4RCo\BL!#=I]0?ert]cB)In]\kp=2G*?4lE-AiH'STo-$[97Xo/OgX!r;H72-Ae3*M`BfKHI^',k\_[<?s`D?-R<r:+kTM]?.3gE-;oH`Z@Z<;i$.JZ8fpl!r6`c-!^4.4ne)bL)3;,fM\K%Uk<"aADjA-;uA3WZ?s\^WCY?.U:6c,%<qdXUPcu%96R,i_XH]sa-JJfFX2ALM4A(b&L?>=A4f,sr-L8q$pUT&Yr=\a([&coeq@UTO=pe.`R]sWba[>Rd3f7pMT"ALXYq3,GKGK*a`?mShjJliP^5aZRP2_HVN0Z)(8+6]r]WX`M'G1j9!N#9=L;_q@TaRp'gJ*Nm7kV_,=SN^7c#h+N['5"+WbbpqIZXr0!jQ/&%>fZAWFelm1!A98K6BdZ8Y3M.!kB5$[Wg;31f1&@XR)`oAtldE]ohcY"3^t(sP54D*!^c]VMuiDd.I:@mr-]HW-_tL3@]*pd4$NS/sq"Vn(SRC(qkl80%6PL3'l?DcJ^cD$pkN7C#2"$uP\bF^1nFV!Kckj\$?1&m4(Y%%HFa^ouY'7t743OXuT@%;kB^Y[@<*ZdTSic;0&5h[N>kVl*%?Vf(=JFJkG9pu[0R5"Xe*@N=ab?RSo"9B0p'#!%:iAa,FqQPheiYCW?J%8Imi9\&:,>Dj8fKOVGcqus2LEPnj6$$]aLI<qKYMI^E4LKuC8T^[1ebk\Rsi[$b5O+8hbf>.B7&<5R]F!..4F1'S=7B0lZDCs-IDM.+/[!!0`fjk$dB2&&ULXd[J'sr/<?$JQ58=%8Uo,8<WQ>dYi"@pL45Ds&C+3N"@9Dg_\7_spsG;Xilc>eL[;V>pKoK\je.f=X!3cVT0!abG0T@8WW!':R:_`o#g$["%lHs=NH<08_kD.ddf/!>kUet+PM3aJs+WC5H@_\3"B^_I+ADVs),mQ.QobE9m9:L_,++trjCX=5$,M\N:`]2d,T(=J-,ppPuoW$5@_`2P3=7LC>sV5&BhkMYK,LW;r)I(<[B0AhQ9a.:MiVt!]/VKr(=lB4:m:2n.FG;`E[m--k$F0>t(iP3o;p,JV1""rG"i?LiS7bR/?-WMEb,9X7A4H1EcT]s)S*1*Aa9&=90YU]DM&29B>&*s&\1"L!.G^45"\].Yh#qgatC`WL.?Be3;qkE-(hs\8fG?0Shd#:TMY\uqte@hZG\:1mf(,`_ccF65I6P[_k=:oS-4H57WT3puq=s85H5r&];.`SSXNkjmFd"/cph,!4nK*Tg/p>kpfmu%)hl2;T!k*.gm9eAQM"Q`K1Tl:)JT2d(d"7egBrSsKmq"UaR+5E*mQ^_`mqmULHQ.Ein5+GqO(!2WD.n*o+SNbbp+Er/^fDX6$?2KqWV8\*3=X_#"52#U>NrCK.324=rhctYsSD`A9*+gp.&:tX2=ms3g\G[OjL*+s;FtqJ5gH"N;Fg-tRjA]#GZ=N<&Oef_WOnd^h_]S8;6%7S6>eYb!VJK_6ll8"k7G<%$8H&>LI`^Z(P)\p\bu4\-$5l:TqKZF/gT%=&QeMRRS)`?SWJ.8m.Aa8'.Zu)f=,KB]>/K\'QEPi9P@Ph@;,)rNSk\91*ZS;i=<cc>0sFFREcM`7&Z%gfC^^s0R3L9:?i(+b(58R?_2>&:e*cG0WqPpSTWnD%!3LC:Q4'=TqLciB/f3-!(5-T;Itqd7Fp:ql9B1f`b"eF`]#Gf#-btQRj<HdXqp=Fdi92r#DA6%`U([<I.3X^"2oaad<a(!b\f%a'd#g%HAOh&`+V+5t33&uLE.aLHYm<<6l6"sS%,XPH,;HA/eO&`[YE/9Rc3LDkk1_:ZTo*Ap/7mTfh^ECC,q8&/b`*kieMMKcO'lH)>RSBolC_<tCVhj)Hc1sVT(7`K8Ql7.pQ\TNKZ?o(n+\7E8tW0RT*'BActcUVN"VVI-PNs)XF1pfOur!^)\oT%EskWkqbu1rM:Jo0_7gHU2MtG3,$>gkDS,[8:^YoLF9cS'!c<A//K<HVPY0A+NYL`p`^-TBW^GBMHRD!1M0:u2(D6"7AJ<q@6i8OpJ&.B(Y8i-9AX/s/T+fiE^;'KVMB\nQXu0]$E5pRRW#3,uBPuAbm!Gs]bKoU-L+O$UfI$S!\GQTQm:\[5<?t4IEF9+f-+(/[Fg1Nrp.+LUo"Nu+J>r%iF3_?bU(RQ_$i)[@aunRWEO(t.^!SIj_+\IN)/`et]f8W'U;ujCE:cY@$!tU?;6O%gZDA8bR/"+8+a"/jUfIl'mm6o-`ER]3"WI*9i5A6MUV/P?W$5@_'A(5VfoZJRDP9Sjr-J',A.mqbKNfQk!*gV8k8?uniqJ(,Ff5/dhK8H&5?9$bXRe`nKs*pOGUfT5KqARGP"Y9EgtDU?e(urHA>#q.B]((R\Xqa#024r;!:LM=#H_lu(1,hC[p@e*UK:Zmk2]Rt<Hb*-Xe"8nG-1=H;&]fcb0Z[qKbp2;'can4I3hWDGJgk+]$p[sf-U,U*o%HeT(lRPe/'N6IZg="VX:Ct8l?%4?]ZJrK5-7@n;S%77!uo=0Qb([q0^rE#Q?@0p3m>MB>U4uK#hQWA)Quo^?sni^-)Frr+eNS"RA&UrQh4pl2GeHdD-XiBF5r4"'uK&SZY@STF_.e+[P+kGDSQ'K/3*P,BS.X^9d@b]:7*N'aZc#,;RHa^LngqJ^%-#?(PEV<8H&TQT7%X`]P,@)h^Y(pBof$oRY2o.rZ!NpCZ7XQV@S:([u8XG>L`f&e^X6rJb^[mBouD)E8Dss&_F<Icp'C&&(jIfn6oUT84Ke6n_W4Xr,sZ6Y:OW>7Y!dMapO:Oe%'SnE*_-g5[B5:1@hMTBFsh5/,j0](gT!T*O>ii;MJpc[b?A5b[,j1lgM-eY\BR2PWemI5i'G;2NLJ^YdI25'e:$J(?f:`nGO4E+p8o*K:^PGtZ5#dUjNI1O$KkPJpo7EK^O!F+r@G$L,0Eha0V/PO0brl"+t[q6>>%T`gE]^m5n-P7[1f=PXDch;KkP7Q0!ha.48jY=LoQQaBm^cEW@r[^]V?Y"5cOjj8KlZnh!(VDk>Y$I.+tdSXWZIrf![QF+^Se_T1<=rcWAQ%uQ6.G,XdrbB/dCHu@F-UQ^.fgEpXGQZ3!`q.2e7$/s?cn4-7cF4fdn@7Xl5mVI]okABFcN\!(F87]-XlB]$`nE7mEGIYh2X3gT#H"Hl.c]PrDb"g(s#>7gI$D!L"o=MNd,7#%]5Y\m5o';,4mBa53e2_?-$-o6B6DF(J`h8JkC'].dOaAF6KrR\3JYkd:Y\<48D_4('I"TC10uOg9@H?El$b?CP'):F'4AL%.(QQdNZ)K=O7$jn!4"(%!ZkLM,Ae%QLB62;M4k&8i)5\Z%'eK<,,qr:?ulVr`u[\%IEkOfYA*=HSEet/80gG_4T>&/F!AqQ3Zd+9Oudu2F\PT<lkt%[N+>,R<[hPi_Ymd":LPhJ+.XS@i!_1A9*.#*@#8/-@#WMNUaN>2Skeb#`)"G!A?bsXV'7j/<@J8!%0)kJfSBI>]Yf+d=qoaBP22/tX*<T/A7e$+`/o\qTQ#/j`&ML*A;3UeH9-Rr%f)Dt4RaDK=5^*bT8>md:6%f(f9.Dc`sRhVVn4oOn:iVfJ";.97:^0,MecmG[P3oZr6:SGJ>J-!J6E*MnP"m!Ndi:Sm[)j-7gL:RW*@AMgqW@/C)[jFTL`l0N@JB=Im_mZjpSYm#;YnD`cU@K->Be"_1(8/n,EkTgbd7V^e[&?5bBdYZA%@CfLGX%jG`iZjA_SU&1e<F!Yoj0S,%*O;it<%pK$HqU"QH^0$DAj(AqmIa0Qod(\8MY;,B^@L4m33D2P\YncnssFrh#@Y%p^Dac83C'P;Y<!+sIog_W'O_9;qiXaX^NFgPO+^Sh:,i$8,!UG5L1G-l]jM;(jDePVO'V]pCTkE.&WQ(bseWG&A/ldjA`HTs3VOVS+#,]:u-!;K].YL.mTDXf(]f:bI43D`ctCQ\\S@[T3.X,gf.rAh_88<HdPe1\`r+j7%-_%V9`HE&5'QrJ>"dN,Z[J;(:H'Su\)9PM]Ck]=Wh^j>S.hRRCqG:Wr&B!=M5\+O7>B6Ds`.M=](:aE>2=qL[nE-%%]6MldeFX.-?:Y@0Bh5l25YqH^![;DE<G.jZ"e^9=2oP9qPVCfJ.4eQ\IS[*\G3;/Q(dVeAM<dSr,A\]Z!O(I_Fp%I:MkuFtV,PJ#Q6-Ff!dq1A`d\)K9%4V_SJfmbFpt&:c-hn8[(V!fL*U[QXM:UcK:nd+KPnb=t!j`;BHK%!b[lF"UjM.G@m3D_Yc#,PM&pQMp<Z4CA8]d:_i8@[K9"Ucs3=gUF9V/\6n-ORc\jdH$GBf)JiP4AJ(GN"H4WT#A%n9'qRI%:/W$6539"4N[_VfUj&1g"D"K8p&Q>fKMj@t#t9D3=76/$j'P18tVI*t0LRE2HN/Vn&3gauT82qjhW(4mP7a%E,++t;2'hgA]d<DDkVKNgJo2oG0``/!2?5su6!A1bD%bu"7(`(\pg\Rd*L/IJLK*'iXHj6aA;D2%>m%H=5R0fpnR2,8+d;Dns,d7TP]"Ms&//Pe#=P$1I$W[!W[8b&4&BQds=/,SB]VTB$$L%e+Ln_<YuIZ!dTr>Fb/F3A4Bqd@G`AkMr<Dh'qTmI@LFq'NpRI:I2E^(kc<^**no7Tp>]:NO\+.`0M#bY5@t8S59WU7dC^!USG<=i#qIf-_)ehhV*cNl_)f#?+uMEr6AIc:819TUJRK^rn3!K%QWh2lh#!EW("OU9VLtOeD??#Q(#5D!2ILhPeP8fNqT,BE0sD@)L5OY^_L7["PWOjct?l^lCRCeY0!Jr$e4sY?Z*m/_!I;=qjqu3.S,%hhp4Je+LDq"ojKLWR^7\B,N9>YTm+19cP).0D6_Q''K!0E.*]4X;+6\Hj;<#\.R"]+ZR$:U"0,Hr<^OE$iJ&5.IET>9`m;5?ZD!6T2Vt4-2R%U7p8gucjZc6"NQn%&mmHJBi.\qiW/Zs(FtmY]S8@%of]A5Ltpl&DAm>p%UOP`[juZa,OQ"\\&d[c[Wo',B-E$`UDU!1'hQgCH^XZeXi_t)BZ\O[]uGHY88p5D[]d+*IOhMW^??Qkn!lQ0Z!A4\0Bg4C)0"kZ1YHJ>:ds@Dr)!>-HF:DcVT7d_BH7<XlL+9LgWthF_I]"+5XcXPq\89^`rHajjA'PBnOoi$Z>"56hjmpmnLc5#\Tu&SOL9`[^K,`ds!YcVi&M36rm!]EP&ouf_5XAI)>^0iN3kF?,&mU3hY*c]ULg[C?'Hi,*">^i4C4OVNYI68S=fEiJc=3+6fLOJ66M!,KahW4==6b)_lqqITh+NeQ>edhW-19"ZnJmo>TB+469ZXC->a^%80!/P\%PV#:AtRTT"mKODf7=1OUA.YKu^L[N)p[X)HW!G(_H[>GCPZIf;+U,UO^3.I4#YY7aj"1`ieeN:t2NBcV("QLncR:e?F9*e\?=i,+trbPF'#:H"g-k"glduoeB[,,<QN:Oj"9&N-)%l!r.`YTjQa<m'%UJ_D:Z,jl/<8Z?G^glE<bLSSs-$DmX\2P9[sKOfboZ;&!(=)l<0+RjLpubRdFmY9r-n86Xo;X0,!mP3HB'A<eM&&%aL0Zgf$V@&d#sMbS)eV*Pj<gu*0tpaZZR+([Q%`o,ln7=tOD,Sk3P1OKNLG5Fb;Y2_$_pW33^^.!"E$CT%%`ZEUaQ-GC4b;^`XD"<6*iQ><q3!:2W4APV[2ir[,lq[(mr:p__\&.AqOQ<7$cHlC9(]'b("us=3B6$'c%B;t]#![6D(*[S#\N`M4hKT\+TUKRU^g?$Bes>BT>X[.BOX#?;Y$miq%M7+6mO1Y,TAj`$89FFJm_6-9]-]u#j8?%-V6F-e%J7[=<'$AX(hdqO/Ie^Njp"%m.mpLl^fb(6,'&&cbK6mV\bpIjK<7[[>`g,Fb.PG>c:MW"%21<C`k=f;H,E=Y[XFP]@^(Rh=Q8Ap4&;$Hj[T]qS"5;r9?24u*kpg?i=#MBi76N;M<MJ('.@[qXi%gr=gAR[ZMUck>peu%`"1^^h.Ka)Mc;RBPNB'hkAn>6F%]C3H1DaWK97?`fT6&\7Bg,OHVe3k'76YV%T9)QHVL+$SeU6kUpaFjG\ru/a;Da5nm)o!,p*HlOae41dsU+TVh5oI1l9,V-a%#i5QjceLC!sHTLcjRr+tEPg)p'bRjp`!4,AM9ULr$#"HE?[VG\\`ZG#K^629pOV['R&Xhk$T^g71Z$;?_ImEen;c(gMc.-"kp:@M;?`39Tu/:5UoEJ61&?:Q;dHu6H&0AN2]Q(X_/gSp^JdV-!(nenH>gH$<)OuA*qQCpd,!\Tj4*tiKm27.M^B&[YVdnKI)1\'2a<R,\ok/\F4,9c<KZL8'8I4a(4'aJ>N<#9?_">1Vf@QQt$7uEPp@If(kPnd<0(%QN,LMZ3CfPlRP"TD\_b.abnI1q+/n8uH#AMcSt*`9JCED5uQX-&_o>An`WY"8Ck_Mob-W`Q*o[RGUP(]!";1rHGgWk#";6iFO2>UiXs'36B(.@_GI"3S-s[(4>4\_%Va:P*8Ra]$1EHI-K54)(qsIhOh;(5-eN*g*'aI6gs'grEb8<2uNQn*,)jf#?^0'V.^?.@\`ZfQQ05VHO\ha!+C6d:!@//oDk(RS&]5e5rr8&4E6i[Zc30`(o.HQs](/\ZrTf@g&*m$bL5i8(;MUa.`17VT("Gjp3.%/=f/gShCE\_Ct#8A3lRJ'4#2$dVd[2Tf5K]aa`kBr0<s12)Y<!"cR,0AT";,N0\Lf8Ep2h>A]qe$<".VfTmTnq3@t;Ul5VY1Bb.c.-te#f!fh>Hiq>pNtiZ-M`(GA5hdH$('s`kjJhkO\qPS62GM3j,\II-=3)BHS=V`jUKI=k0Jg`=a`m(*eC25a(/\A<i]9-rqD"2'C/OIUqJU*H87^ukgsATmESMs\:f4%3LRH-Voj##X^Xo.N'#o*Kn\]7ncN(<mG/"E./2VXP8k">SRrtLAn`Ag;*aHlNkj7L-"5H3Bp3qZ>gStgHM#*l-]&b?[EURp:)o`L)M>,EtC$pCX);j>Q@0CaMi99RpmEX;/dJ=GMqBUo9kDYT$_uO@="@XPjQC&oFLJj7R+E(l^/GV?TV,M-A?G%P3,tn*/""X5#`cQfq$di'n-Sm1TMVEt&-9'JLi'ib4Mn'Q/[eInmZ@&:L/m_P*:cJ_U[X*r78%pd9W<5J!#lCoT\=%;fJIN6s')7DDH)f"r^CcJ?l0];%;PZNGs5<V)B(7hTX%=tIe$b!e4c9;?k?-T)C_Ea=T`:J$5rEURlWRLS<IJ=`A3)<aVMo&V^=/l)CIMb&gttG8]K=UkcH&iS(/rgmQ&9\?TCI*Q"HULXW$"<&:lA]bBc8c:8U!3TC/R([@YtmF;nFp!m'[A%,(]`NZt.4mEBr.mI^nKkb/"IE-W77D8T?0(Clq:`*l'82IC\b)WN:FnT87A`@*qf/-Y4RpI?VD"FU;'`]LUs+.K(=s4fbb3Z6];03of)*gm7o5;agcd?fB=_;[7ZCb!@dQ&T?hX1Fq8$S(-9q81j2/UhOm0:[%sCqImBSg/MGR9E+V"($(Hkqs2CP<1EKWU9a5n.]Usgc@N>8HubQYJUZ31XDd\3<@$!-X;hREX7PNT?NSu"m"9:<Q$rKUoRW'"<>_VTP0<:&&d+*_E+1K]S3X9'`H;h@=kD(^dk_"^QMnjVUHdajA?$L"'T.I2ME#>QgnZ=#USalS",Q`sKVhokG-4@cd3@NBm\Y&O?;'(>_QBQ+rC2&74s#,X\NjP.`8sJAd/1*rS'!^mW)P\K"YMp*AU<g$[RSYIUe&JENj5n+L&ZA\-+%cmGDQY:^,FX&L*PrZrQa<p&_Q`]%Bh(_F%([6XNEn^]OU1lCM,U(*@+_Fd5q2&6mbO4TW/<'7*u"0U*@fl]JeDskn@aPhRStA![SZo/F\^IrQKNRMdV<mm-'bAT<ncNand9-r+]BL3YcOB6CVg+4'*]5i"9mk"X-OO6hIp.;ZECJGe6dKZQeH;?I2YLdf_R(,(0`%db*F.%colul_D2DKFUT+^<QE=%R_b4om)a/5:m,g9(Y]:m=I)GV\7Jp1=kkLM7"*)<@%9*EmnkD1TUQ4J/;r?1`7`':%iA/U/=hA@:lfM#K5'p<@#9ACdHt.q=Q(+%(>%biQ#i&TTi[XqQALI93#K64pdh'l?bor=->l[gkOOe^N?JHjQiE!*2-VMFF*V1(U>-b?UM!SSafH0jC$a4hpIY:V.$3`\RGM3F.^'Eiq<K^p0e;omcnjHS/(rHMYtPIrRb(.l/hL[qDt%`FR&<>9_?Z5YGjoe[j@ssOg"ZSM,5Tj*DSu;`g6nBOSrjT80Y/&Ur)jd'N:S6a<X?UOLuE<I;F.jN//>Xq_>Ue@3O8a=50Vk=0\aBSkKcYaS=NuqZ3dj?kR6,&3Er=FsC:ajGbP\UM<\*AO]63r)DF)lpki&kZ,8_3gW#B+pSh?>,[k5*Y</-O*g'l>Q*3Zcr?.ofFLHba&ioH4o<^SJl>+YZNjKY9eYq(`O%B!<b5cf60K5kp0f(F>qBA&fXW2gmofp"kTQSSP)fK;\=R[D+0PLG@6]"ooiBR65`d#Gc[/n=7i`:+6)9Ys"0@GK?Q6c4p0L,@I,C_G4-X0R7L;g<S/qk@Y3KY;5Bf2cYXZrLZc`+[DS)I^=l>XZ`pmsdNnm/>$#^8)SRC9P0Ze[f$;Rrir<GahUVA"P92h^0&m?!k+3IWRN4.I4j4%GOCUfL@?q3[sRj6^>FQ;We,EpBcV`Kb#$^!B)eSZOX\E/>BR=(2D728Cn4O!a$>:9C.I]g_-&G3!jmRM<V7m_^X7UnY:@g,B7SK?5Sj2`+jP2PCf*c8,.P*pOL\.u*tOV-9\'tL(r92^^*Xe6$3i1'!Q7oGp-fPP?=5d=b9!RB4WL:c<=MPO4IMp0\5]%`uJVc1&(fsCCGQN\Q%338"DcO\2IX)IAN(QK.KBpT9[(TnI/?5%4s#CdLL0gQ-A$pTV$U!k7Z`TX.8CmPMc4VM589]ik5,jrqGe@+?n^Zk,!(a4_%EIJ&/XYhkF"":9e]m./4kP6;^C]+WtoRn7S%]Yjh*ICg41.o8/hu[rR[2uH**@m-+&f(YCV%)GQ?jj-5[]_=i`tj4:#$HtG6ed^Id961GE)VO.8>jcnIQJU1Hn+KC][L[5f$,5kYR/n/dCoED;+6+DZ\Hn1/ncTD`pH>HhC\`&h>%B;Q[@XjMDIBSJ)#+5AC9X#JMW?kCkr,<8YX;Bf$8/\d/A'hFX`J3pY(#jOG&Z7/j6aMJ\:Rpq\_)OYpJA\9/\Fi1BD$IP[l,'o@4jp?^8?Q6TP8!VW&nCg!Wh3^Y'S2ld)'dcVd1M"EuZK(RM&l[##U.rdO@:r\%>F@@sH[M/-UZC0JnUB!cA06$P9RVKePV4?IA!o<rkZ[X#k?5$6GJ5<288/Wi>3lV]"$?(/-+BI60JD=15d?;1I\jC&j44P]oLQF60LoL13t^Kn;jNS\+lCp;%$r^L9O%A)K*q$I)uUW==rd9iVt$EG)i@Bf_f[\IMUr7YOQ^pY!Uma?^WJ,W.-A"ip*rEh1cRm&Y<XJ6*4<\m1kV>JL6rmg_#IiRg%hs]o7#/!GCTD2ek=/71oP,3:UH$EtZS)IWg4Sman?'3:qPtpnt.O"RP<hk0cZb7%2=-(u%7nI$*pI/$.E+f5,2]H[diihH=&'^4Wl900.]D2!JNiO2Mr0'r.*S@f@I>gkS`esDCJ$NL?KJ'fTSFIs\#gYCi31F:2d+61-LqCrP)+qY:Y83t6:h_'1LR^N(S?,rpo8qopjZ$9dFWo2R&i1sLmM?f/(^7d+6%cpGPQ,3\1Q)?6E%D!-r4TQg-\T.Gi>a<EWIfP@Z6qH`kJ*s0a_dl'99ptA`2:YT09H8cdbJu%L+?0S&#]u50W")1a53e\E;L#ilE95j/61dTa0XS7o(p"MGss7L8?8g^O[uA7I7NRgOE4)46*dMi*GYKCP%[s8fRqbCS4^/E+S8<S!kZ[k_#q29B@SkP^%a[Cm(r)0USK9?X+(I\ett3i_@cY]UVL^T=HPf)RVJ364Y&LC_I9)3e[,O`NP%Q_:ejS3dashPnZ]]X.<!ZIFh=Vt9Z96d.mgBUS.T+<D1&bFfL:S/^L#(*6!nNP-M8$Y&tkM-i5.r@brL&R3[R3T7BYht!tFV!&P%kS=:rqIi;,E\nNa9%O_o0V^j\8rcIJ1EA2g8XCS:"8*0LKn_^(h?3+1X_&s\4lqgUeRX'4W[#,e)G"8r\SaKBit<HK;&L:Ee]O6skT[C5*V\o$nKlm$EV"3sMN_+P8TEDfRGDs@?q.$i.iAr:_Z.8Wqg;GDc#269kp]UJ613)oT#E[G1/[h$cHI>[[0i$cXn,Y<oQD#]0^cIG^C;V;<4(N*3434IEWQ4`kKUb5(#/N=J=V+>-9%<!baT'Eo6T7P$=5d%3=W"aT)n:0Q*#:D=6,tA:d;C0e#BfF0Uh^\W2XeT+\-$rOI9k#].;d]t=^.3l*`k"&s$>+lM?7sgeX.Sd<[!qr^;m"ec6[IIO-@$('Vmu?U:.?;4D^S$]:..Y0<%=')bKTcs[1*IA.8i`SMg@s<qMo4#%8lqCgX24hG`PJRNKUr7jX<haFc,+-"06c7j3pZ+17B\[#ln2gY+HIu_EVHI4[L.VonGV5&.Y4cJ2:)e)u/UTCW%8cpiWfP"pk1EjLJqk[i>R.^F#07_VMqB>rraj>\.#,G,7ap_'!&"KJ5PX)ot&+:LB2Q99*ZJ9#otdDNG=`,$ok1e96#AS_LA%fmSF`\82jXdaJ<RT>IuGNJ^,5:;QX^qUKh>#i+8ODIRu`*&kEZfEhPZX%[\",<V8$%X\>0B:D""NKAE@G_:.4j-$kb-*p[16uN?``X%S`aW;geoW/#k%$(S5V6f$S'\&5i3kJ98Pp'>@rICe'ZBdk`5CLZ8%/`1Y&/lbli&?dn[T_%r[BWI=2eWB:lIe37ls0b$[+b$E/DRtk'_Rjk*n;PAR42NWQX$e3Du,IaL2$)GX,geCaPYB3"&?Z'AB:WiLXL\L;WRM6+S8U+cR2"-gO)G#JtG62h]9=,V"i_;Pp^F4ptMCJ&$t;aI^J2<rod6W*IGW1Z;/APPfCY@,$@'!QN=i;5lY.qfEut3E&>2.YBK:PX88Q5oe)=o9:J`T9'3RMM-4-kBF:K^?\)OdEK-Zf[`'on-GI=hEDW]3(.t42-Cltd\8.H+;_1G.`S\JkUkn.@[kaOWp?S+M^8d#-TscI?@XF'PgH!ALH!nD+7q=FuW3r2ZY"Pj1m`6j/]L$.+^kLIuM'fKk_@OcSQuLf.SW0t/]8NJ[n&^=1G<(Zc?o]pan5ZV9.k/j+!N9]UT:=BTf6i`XCeFK:F5j[r=i\7$(32ji!b!e,=6TFWntcn8LCI7K2eBKAZI<B`4rs)AEINJ0.2$p)n2<TEfdM2P*i[isVbrR?#VaM\!/fliQ[[`5,%!C1!uuL`SGb.KGKKG+qL4f&*)\VK`;J);(AK3UGCKf8(,Xi6'clpF%##\PNYJc(SO;C:<!YD5f`0gc4C=`-@-Xk(qba/@.b0g]b)*<)7o[d`W(;iF,2#'nf5X&+*)l!&_22@K;^Wl0`(9%.C(gI#LHf4OH*TZ]Fk%WllrDfACb^@O?0THHq(,_H0PE8t?^X)+o;^*fq"1"(3sWE[XX"Wn$AH(&WS^+4KY0pBB_<YV<h^J0"8V#_B15_/pSB(C7bLW5Uo?RCDf%Jsc&APs7C"SXg<dW`X9ADiqhajUpRTCu:M(1VCn!CGY/"&7"Wlli.(c\LI`-Yq+)\W>ia80>DNXMOm:\7`R(37(F22Rd@N7I?O,O_l!@i4>L@MR:%<8jrAP'H'Y%E4KmOE.O6IB;8MY)KCX@`,1NU1B?+B6*KBWKB1J9p5L_Df<QD[;!dV.7\[_ab%X?4qq.G"RL2140tEbKs7,lej!b?E]laNPfM74d_2[*1>R$4q[:/#+T#;9m1JkDXRYma2^j8WjEnGHc38:a)6,d')JBOaH+lBps8icfl(#/B=E:=ddJA'/?Y%fI_+@#ZS)X.-o9]aMPX6n(-WS5]p?J1F0k5<Daj*hgHR05#9L(3%JsVjTe<6upGdZGXs7AIU/b8jj)s&;[Ln;-60!7le'&UA&5O\!/FA@KdT)S>DfC]rh^XMjHs[*T6J/eh+>`sK#3sK&V2bZt_KMYEo)>]9@O1PlI%S=".WqCj0;[;Z/KNX`gm%+IQAO1UDh!E_&iSb->IGa:9"+>ulV<X@=%TU9j'<IYd-l=5&$qkN]U_S))<5UDgY(=hha]...S\"XF15R1A>1)j"jWmY@2H7jn20'tRMOOpJB)S/1pJ_#NAH#]mf(^diLs6c$&ZBd-rPJ/-bIKTlJ@.%V/<"/'W^00/Jj3rd-nE]@NX4gmE`]%p:,M-mI\csJtqgP`E2$kDV_!nJIN8Q0G6#dH-,.VM"hGSN&FTe=HU\;;"P+]rtoR$Kmc^/[j&FXFm1V`4kdVq(=GmIW"a/9<Kit%;K@5YcNLUu$-gpo*Up(+,3;LWUmo@nPb;+^0>!_l,reaQ*M)W)#Tn?:-]'rG.>9Xr@p(<fd'P)0a5sND&::/RT!O91eCN[S4EAq`IYd/POQ6_<*],XNP;]WhOUW'6EbKFWY5p:mm%']tYkK[/Gt]S2rM<2h6Wilb'1F+-Uu(T85]cD'bo<n/"rZ*p82SPPblb`?k)O?WNK4j.s46LWN'1mN[&t.pM^CMSb+T;!U,5o.S07XGgmfkLY>;Wa8a-%g]s=!pTQ8'm\Ypp>ZD[Ogpja0hGKKA$(Us>QS0--A!T6uHKN3f1eMMK?^SQ$+A_W+'EB4o^YU(gRp?uFU*T]cUF89ce7chHZB)0Fq(59m=#[9dZ,BE:&9;h[Ogufq[/"KpbbKaD)&tUf12==P."<G%BTfiXEnQBh7F3B.pP6@l7Lrq-5d_g.L^qmiYT<1AkHGE\FnFc_FE$jA^9i&8H)t*(&_Nkm-]dDdd43<%u\guP./TQ@mf?;2Zl2Mj4`>!*?XCkMH9h2P28*mrX=</;'4>fkL1Ic?]P4Y#Cfi,-&"@(TlrWG)n3!n#g=5p">:H4*S[1IE?U=-r#5NlsgAbr(&rCY:UobV@K>(qb'eq>28C>-'4MnI:_'!03j.Q9H=-Km%L_j=$$J+?N@pX"HTJPYs_(LKpCeCk!S0Ar@CM<Z16hCbSNN`#<7pECFK#&W+P<d!Lp-Xa[ih!j^V98b^#7m0CY*s)adk/`-[)M.E=BEGX!F._r%1B`%qcnUNm+@Y,K_IH`AZ_b]fa:[rhNO$TA`ePflKNj^9l3H:&A%:UVW>sDHW#RSV11`i[MWK@i<UWR4#+@Z;OjhrQfT!L?JeQ\?VkYQA:CnLHa<!bJbZs\uT$)%j@,1bYNsA1)1e/<Xn]794#&Mc'Y64E_fEabgRKFYpV#*!hj4Us<q2NHY;)6m<r+tE*$VE$N57"a>9]U<&/1ZP`?)m?irimtbDlu=*:sa)sgP!YkdJgC:<>:;&RrJBm>!E8egVdH@arXU[$bDnQRH;WdA\@!JA@L_bY\h,E$,VG45@I^j]g(]iD>b6L"cC&aIFRYQI>k3oS@>/r2XSo-q\1J[!p`D'$]b38qM27TS!as^-#<]5;B1_*/qNQ]f:]r1.E)d*43,pYNWaj-f]Oe"#3+L#]<W#R`cGAsEb1h<'&&7GBp.D_`.:/PQQ6l_\0/*&A^l5dMqF,1(gue;)P_lP8LaXRqo(`f$D%]M^$WVm=I[<rRRn48-fuaiA=[._LO^ZNs0h=p')4Y/<c;.U.j?]D2:gE1MM-U&ZaUD'V73:2>W-EXddgCnY.a,F\7n"M%*H$u)qA6UY1\r)hSXegZORq9+EDSg4]4dnE;O9t17D4.jMdH0WDnl0a0hJ;,D'I8>d=,r-@=1^&%t_.he+g"@GU0N_$PhM'<$^8'F&^K[:H=H%Bu]Gf9*P-*Q")TV/$E7@Qr^+56J*-]b/QbFNQEq5nug4s%[Tp<K?r8<t?cHp_plQnJmGD"L%3+es7?3IMU&P3Hm+HU.?b6,NE!FlH]=X9,2>[,B%rUnmpbV7@Ee&-rpc24/0lp16[AR<sLD7d<PZ@4(_jF`b#ghTWGJ(J[@t_M2Ssmp?o`=;OV^-U;*=#IJ@MpqO?fsK'UI=H'L=qAI#]Xil,Tj7!C$QMPRMR`f21Y_?gp+h;^U#FLIS)L+(WtI,?3/noCL1[0r<`=6bg.Gu5iWkppXkW4dqu,T.XjQCX]F];$e#m"%m27$#/2q!3J]YPTW@.AN?OP1W3)+FP;b3!TGTc^,hi6ed=7.h^VmUluPJ(RY3)-rs"0.WqjV8-G9C3Tk>2kdZ9^78fT>4Tb:pRkR,.5%UUFUK+Z+^I%1o%_>BGCiB/`E>5tq.T1!]qkO+kJDF^TE8G,DGT;((jD1i6;!:_$pa#'u8C%U&Fib]m3TJ&?`=sgg:IS0rjNg3FfTET5qbMl$2n1oB1j.Q#j$W%ie3;T\FA"#DEIHj#=QEH1oeCm-A8"UIN?WX1bt\9tLY5+uN69s<dqPh/S@'kF8jSGS7J]ij^.L;b5rKG5GX9!NF=?hh=ZeHjnZAq.,-=%l8J['kG_sQ<j5AJ%I#n5b7Z`T3Vm^,+)ZEf[4F=C")=1AXYc_&t+<("bRY??!p7gQGlu0p%.#V9j1rAJun^aj6Yr=/^'rdn//,Ul3n%TtNCNCGLB8g)^:?6H8#fTsiYP'qY%/[0VID/d)*`8^Oc<!38@sEQG^;`qK^o;aeocjAOl7MR,bID67B6C>b":qDsJjW2HjsfA9B=EKkWbrQ$M4Bh[PV[JpH6ub+,&-CXKS>8,%W"S:Cq^Xp0,+U#([*pcSmkd&3ckhGM6ji-*,rh*SWI3.nnZ='R@;Ac@tM6=O`$C$j`Y%=(p2<b,Y7/h5WR`di)a=H984``Ai-2M>AG<-o=^!a'"jd#b\C8;[t#9,C@-n#,e]FjK/3XW>TA6=?>pVYS*.Dfa8Z=A71Nus?T+6/;lgJaSP-V.CL[CoLBCWf&5K<*V6=$$F3Ae=!3hIF^^>"r,^pAO&j*h_YQTI0X)qqTMU+(A747VF;S.S983oYMo@#k(/EX*.[!"kV/+)r>$#A@2d])a01Sg4I$?f2XKZ]i,mYR4g:C$gbUY%T2nTFVIl%#\fDs=o8>*&E'<2:W1>^!oFWTDrL60fDV0ra,L[.cJL-]O-fKfbE[>i&mkJpfdfh4;@[.270"Tt-poOd:ec<$kPgo1?627:K>[=prWl)_@;8`Z]0D87"[X>ER03A"R6%pmoP,rSU[^ZGti-TKJru!iCRr08rKi3=0H.]t+./D!sdi^APgclTnB*%75;5)&a>P#R^U.a7\uWKf;<t28"^`mru<+amRu5h(RH]'o>):Lg2$<RF1+R&iSDY$[l5jO2CJ3PE#aYk<O%LfPCo6I-e`oR@9Mpq9Tb,4+&a#JMZ!+<,,OE;&JMSa#PoQY?cFg"BH0+V.2f.+dk)?7<"nsp3?-$-1%ZPXF*4[S99[a!'_$4J.bhMYT<a*?>sG9GVM83>EA'8&+!Df6Eq:mRIr,R.$b1BaRN?@JZSo@rt0Ohh([+ZSP*nIFq`p*E2gpd?M9%7@/:_VEHlGSi,GZ;</9h&\<mQq<S"<DliM9Kr"W4hDQ0e0"M?Yd.24Rha)hBHR$g'>8!rCJ3JJiV1B-CN9Vn%:)<IEP-rO>D-Z7-*=!WJhr[a5KI36KOiVln&c^aQTP87Qdd<ZO!7G(C.h>mQ8X.)0"'e,u``Zlt"F/p`(1P08p.6C(clYV\%Q5#0g7(+a:hC-3EE<_n&gi6:O[Vn_e^a!V(ZD!&lMhVT`.qQW$36tQ2HIL6pA\EtS`u<$R>\8\<&,K@t7Ysl]DCgLY"iT6P]nSGlfa7qu*Yq?cPRGhW(Rr,64+=A`#oXVPpFoO(@j`<DH+cm0;XF/`Pe3HQm2E16?:?'Iq<%O[b)siR@*i8C:aBKW`>1J)Xn3W8>f4(XfK<`L_eo2>[SHWf-Cb+i7LR(O8]N^nB^ks[-u^aJ4%mL2etPXej*09beE/a<"r(c_kZ)99'kDFqgOfsuQ;T+N6.uTo+(<s4*W$0<4u]DSnE$\\?,NAh^13n[c4TK[X0+_5#pV#aQ%_'D.lra(O4+5YET/!q52*0F!Cb-`.&iOrEF%-3cSr2;ria5-*4tm=:q22GP'8btV:7*\AT+Tq56[=<g<GL%`uPa\da9`h<1,HZNGD9bH[_+A4:O/([:&BZ"Fhk8/fo[W.!&V9]jVT^?a)[RUZMQ_:;?eN1&XK&W+\V:6Z]g$A=1FfOh`70Mo;)'gmHDjQ`,jGTET+4,ZrU`55o>MChUbP'(-4(;#'$FD85LPd+t[?)nJiCEBmuaSggUO7F/pqAounO<';:=D_5qGe&!Ima"$+1Bu*CVM2YMbZh"e8S;Fpg;CM6kMB[2d(&,1e<$QbdkKWl"gfBsnZf@$cY?15m4PqFE/PNc^b>/(R5)OGH6?ii+"ON/TGlBY;X"Cm,mrr"jI[M@5@WeWZ4tEaNbta+Yb9"lHds$bP^ET3OmS@snr8hoZpMPDK8X<Uel0mLe^J`b/>h&(J5U2Sf87:qYs80eLK+8e29Su0A!UsQ&]\T`.r\QSl=Su`slsW%?'=-_/QAh7)S[udnk-9?m-fe9jM+J*Q/?@<5]HXWD>]&6VMFt2NVHIc5:b311;Bmh]5ulC(Fc!kh,j9A!f?52N(rf4<ZH6.5c3+S2jc!Ylh`LbFZE]u!Y;UW,,TW24$C+3dak(q:K%e0>ILFqc)SAD)6EskL^+]2V(4/L5.;'<*llPY"Psuk:%RV%5R<#Q4H$pW9Jng`9XBgqo.WqO'=C0_P4_B9dDj\XG$H9k*0>`+o,el/2_Zc/SCPRM_JS,WRoj>lHP*,cW*RfZM!(T*p&ldK2BbcL^fN)3k@:'9=#XN"ug;h%/^WgUOKjpIK:\]d5bjFp?2IM1qFrLc[7/3t$B8gPA@lsJkrOk_d\B=(NBj%Y>?M(iPgkpd`l2bt\9VGQ8lAG55cj.9!ngjT[?Pnl\f&ONSl+Bn<G.e?.^1hWZ7QX)E,m`rU<]B?SKWhX=NG,q]X[k\Eku4C6]m_;Hr)+qD6q=_Vh*6P4nLJ,[pNM%gqnbdkOVWAWo9*!+Hq&bX?VG>YR5BWt*O(+uXDN]f9&hjSkAoMS"RXd;fJtG3U_*'O$M[qLGNu^!T.o=2HcPrVOL.)h=7X`lqt]n32iP*QfllYp`4?X3USQe;X.&^f_9TOb[>dN3*>M$>60*t=VD(lf-.kWjnuW$DLh"_+0Y(WbXds8Cb.ZDo;E-p(9']BNm'=>c=-Ec\MRALq3%$mAUJNKA'h*FTE)bfe-ogmdN_?V2U,j::jGXd)HnaeM)lB`9Y"u`eNHHZ_HPYfPOVeE%?)'`3;CFGRHN/0NqN$3j0HCV3i8d4L=pnXgZ?<=<g)>jb#MHI:7ClN':We'cprdR<rr@<\^U?uf]VDW#hht_V8(hO^?%W#EU&[>nodGjB+?e]ob-i+^dJBJR?&Ea7\;lgL-0Zr1rj2AWN'acPe.l])+M>bTBb:*P[S,2jjGh)akjqOom4-\pqUHEXA_el9D:/B2lVaOC!p"@_c1P_i$')C9L30!_LL7qI'MG*;cEONKPd9+O"l$E\!H:2i1DX%tU4pDU0nWuLR2kNjUa3r1>t2s7Ma>,):*^/MUL$HBgMZO/4ml*\]0m9\I?JY&g'aEb9Vb4C@pOtF6hFuW21U3k@+RL<>",,e#d_/VYR5Z^h!BAKreu<64#B`p?5&Vbbrm,Te=^m.q/U;U%]i<cU6p`jq'BT#3`V=Z^K+2[(.)kZ7quILH$pY*dtkJ5+or"sUX&<5YKgF?#]><jF%S*,Cp4DN99DtS6P6!61JX?P65P>beQaTh)uBA.jMc4DT@\>MnpMA`rQg&u=#A:$F*9L_=I14cAX($*Y!;<*l:C<%]!%i)m#=]ioGH[No^"8kB7@>UdefN[K;1Y_p#A%j;E*1'8>48Wp\%l7J1]7G22OZ)5k6BCM'@oq0TKmH2JG;FbAA%3#H!%=YCf",F)7XiX@n[`3=coo.Qj:'&M*Z7M*eI4fS^Xf"=LfeL8)M49mdqJo%!Gl@,35(H^1['Og#AB=i+H8q9sQXD%q\5ETGtlA5<2=npLfar(?";mqt2\hjnDJJMo`QNRWq&.2#rWXBaA)-]N&>-kqSlm<KX&mGIIe#bJ0gbQWI;Xud,g=6]Q9NfDPJ'e.R8)pZ8dp;4-eg)KfFMF+R9`lhhI,2LuC,OcV3O10:UQe/_*I4/>R]:@QgD'Lj]p^2MjC;:GrBg=V?:m";EQ/e%:Hi.4.fKoqaMNEKua"L*^IO8/01F`j'Bk.\PQ6bP>f#<bSpb7e"DN<[]OnA0\qnc;30/6ZK/FS=8!ndN-pNBF_eq2rPD#CST$/0ndV[P/c_FG*3Q&tr-il/_))8;)1`Bk81I@ndF-iP-MQ3k`RU`cD\Bh6hnkG"]F>`';)iH03>-S>$"XocFVY&HH9)?WD/+AFl%T.$,0Xd=l7X@88s>Y'Q[3)@$nQ>k6Zo//B_YV")$V:GYu(0EOmPk[.i_Ah<O7Eg_uoY,Rj!LH;BXLPd;Kd[SurN:5]#7c7$\$;r8Z6GES*)ra4#Bn!?>Ua]HMNiHNPKK!t@,\ni'&Q_dGXbg\$Ch80HubHSm!q#77W!f$ZHHqfnn2`H=L'+_TH^p==2A>SQb4X=)P3F^_l\pL#?<%l4J/G._G_TD#I&Y>>ENkMa6A2hbe1Z\I%.*mKd`,PT']*Fr3(O3`M3P`)J)9%pb0:pDGmGj/hW/k)g&uE&Q*f9QNJ,/q^$m$."$4%\K%>7eP.I+gLj3Q8IJe+cFY8$4\#HYGiJa0G'j0<OXDWr]MnaBDK<9&KSQ=[7/8G,.]atJgdq4kUa3uI'cJS^3a]D)ZjoNI>j]$>]hNVbfAC6JMDQHNTD3mpV([LX5A68Z#B[Cpn@B>N(I.ZLF5MHDm=YcZ(,'"Lg=kiMi8Etg4DWNLK*Mo>?+MjD$n\HmI/3>l))EU7SG:5WY;A*o6*XV,HM*LO;rCZl_857l;?p0`.'!h`S*caP)Tn`Dj;i=^,<0!T*NbDd=IbQZ'e)]O22[28n)i@u<NJNL*/6Z4/UOErp1Wj-DZT0H>8qkJZf"f82gDmA*2+RmP.>N4\O6DrqsSr\I%V[/H[FdKYp+=6G)dCo!f@UQdb*4)h;,belW.(g=86](8&s]4PBe/;U5DA7lYtu[:XgfY$2L[GA`s?g;H,)cHJmXO2lK9hP#oJc)1:2;!NT%mrsX;W(M7;4nl<tp,!GOVEq3=!6G`sLHiOn\Une,8_2=JJSNV&V9_MJj2DogQkSG+k%j)i3)f(c!ci^:=P^gQUOPa7:PNmK+^HQ4XF'r4IId;?U"lW`>O+UA\o516,X?r'Kcd5OCdc]&S;\`Rd@KJKj[UI(.iI.Xq++Eu.<2>s$AUn0i86K(uYS"pilJmpiNerTI[r(t,'o=+sQ9En9NPD..gYsM2Z:C8Ym+s7!gameGl0u,(So5Q*?knRk^P>"rNf;)>,/KF69hg?=bEaaOp%;<d,^-5jWMp35g0eb)c^2r'cYmM87$oIQ65>>DU5b6?DI^U^b"0lS&%&JY%hoAbD:APc,`P&X)EW-/o&\%B9UGfq5.G607?IT!ZTW0Z[##GD_S=@?bmK.k,SH(Y5CVCtENd(L>!iC1%LT-Y;4JhJ9Q3<UFu&LceqS5Z"Ga!g:I@Q##l!E75g<+odKietW%-rT`I(KNU:?`;_;VMQ,,O+uKn#dEI3WbsGOlm5#&;/8'^=PP48<0_8-;0nM;iM9(H0b-=uqKah'ha`GoMlKcF8@nYmNo<1N"Bf_pZ+sr%EKS#)!a(`B--L=i]"Qokf*ega\f7IU#VohZdi8.MR_arl<C;D*VbH;1)kl%Mt_R1UQ\LiW4RJ"#WF\aX3]M6s1UuO1[aP`nd6F&V$-I?fKg$X\_Hl8SA]52CI9h7ff"AR8DGdNqYnf]4<K)W^o#S/KtPl,`0"^rK?XDp2Ypq^!!m->+pgaPL(MJCctunjCk-';F+;=p5B-`W,)h^q?Ku^32*jl3$]aPn*f,HHc:jW]$LDKs7r9QV6>?^eJ/\8jQsTW6kh)F"9fcZmul^\j)ZeoTFF^die4,'Uj(^E([k9kU2U4hDrgT'B_d0`d:;-&s1m>'.7sS`]jpgA0@rN`9?TEc]JFQe`,XhW*BJ;`_8/D_&l"u^*EmLFb*@Yg(QKIq1+4OV0M\`OY?hZ6)aAd64B(:&C"&qBnA#,Z^A+G;^HY\nO$<F(br=O-p=X*1XBD;QGGm3FrUnc80>02lrqu'HC3X:D[V\s?9S)oq,q\UW;,Iq4#9K+#,ZKmSlC>A-QRGa\AJ77`rs_RQjOZ:1E2H/E*CUJ%4VGZG+rrgmFP3s2Ge]rG!@guT?m+63[;+6F#nrbrR\3J>qWO^LbQS@iaQ<!8b0"@gH03tsHg4+#l:<-hN.>WN\$lke2QX9m<+B&O3,elc3'04^$<:q[/cJ9l(2qp6$1>J+rqh':mY*_'!<H/^.-c%HjUjp2WDtSIAk-^E9R'M^I6;=U\8Se:kN<?t55_%&r],2j*;gU&dbVNKG[fj]SOBHMg=4a+6]H[&nW>+jQ:+,/W#nl6,a-#KDnU;mr-@tjs8DD9GBY:pI^a7QL,CKkPFS0@lDq,*8f+jLq=<Y:a<Qa.Jt3<,2E"H%U8UFk,/NYQK/1/!rjSo,SR:,n^i?DL>N?Ah;^=n>?/>MYqe+0B"Y2'5iBOpj#Ts!)O$?V98,\7PIO'.LI\`Pm>EL7,RKRi-&7oHcildZ@>m_E;_WO`aU1hLF9Kq4c5<`c>dj"ln,V>7IQbui=g^+K%`ssB&.FPJ2`tg:4#hs$s*=#eW'bqJK7kuhTk006GYL5q'?r7n+GS';Q]"7n7gM_%DaH.QF<E68$"P\Q2O^P4!$7=PZbt4p+'QjHiqrT-2G:CF0pr(tc1anVr_fTAu78e&a%B)T3'o?0ggc8h'Ghlh<@O=d9!*`,qVG'QW:Y2:2qXeSk-(-uIrksX,ER4?/M?FY`,*BP9o#pXec,2^!:j-5(C$sce:nY$:Oe-Dc:J[u]'Qr%kgO.a2#\Y7#-D<jr+jmZr,3dCu.XJP**EkiFaM-0`mH8B)aqETd$j'bTg,+\MNb`K9OetmEqBCjaltk_2[':gLfFJtROUT.9(!.HB,,/0g<iS\+lYjoYJ;$?*M.3;`UEUEf(#_G2^?i+8@'RMaiA$iTKjkJAW(:3"?1<isV.]lF%\Cs?Ti`>dW(7U0`E&[i7%mF.#HC</$H7%YMF=.7/-i4P,`N2n-kqP5_RJA1MucCOjsAM,9=oj\A_'MaZ&3lZZa:1OKN_r$QVaa,H3mRs$dXO`Lo'3"DoC(ETo-d"0(_Ua/Ji^XQBmG/-k_5#Thm-OMS5]In>C7S;"p(QCO1`s_EeqeQWldrEKGmG\S+[]Zo;IT>o7W-m)sZ-.rKAFC_m%+oLgon!Gtd88;H<(bshRUF52SCl'nKYfK84D.m:3m+;^:NeW61L$h]S)F<_c9TmiGuMG)9#oZoiM2>-RO@6c'fcN3m-[UH_F?Y,6K$nc8sEZ%jQK??M$j)\)."WdIebX27XF52TJal^c5s25Afj^2bi,Ra:0NP$J<d!/LSef&8`TQ3oEarFP$n8/Xn(NmrM,:<4U<79C'Do+'TY;4.XBKP+)=o:o%%W93ah[!&*Xu'a-51o"s)l]s0#A`C.F&B]pHoEgZU,FQh6"OSG(+(Rbp,T_Y9pgY2<G&oVF-dVS\`dC0qIcL>r1Lb<K2K/qF\B*,^n?WC+I>BjDp41Xr.PV=(Hl]Wi%,(4@KYbeT%[Rn0d)B?h1CbJU0_s(a?op]Z&illgH#,fLbYiX,O.a5r;+p(Qo,]Oh2'4qB"\e)1,:BgNHlD0MoLq-<e0>R6ME&KR>[)XVS*SJk/+jT,i=Et_Z*\eFPhn:r+dG):G]dW_fF.JRV?\nIG>HmMh<PhbN3)`r$=*L$Z2f0r'o>ZGqU[cEmZ6BI1GPV&IO4YThm-O$ACg?:ad"bKgMJ0-km#B6D74('FKO\Thm-O>N5YbC(aA?~>endstream
endobj
687 0 obj
<<
/Contents 1107 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] /XObject <<
/FormXob.637d4621e4e40c1e0d2dd14ffd25f01a 686 0 R /FormXob.8b531f9e59f36327d5032261fec8d29c 684 0 R
>>
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
688 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceRGB /Filter [ /ASCII85Decode /FlateDecode ] /Height 249 /Length 24965 /SMask 685 0 R 
  /Subtype /Image /Type /XObject /Width 390
>>
stream
Gb"/L#?4[E]'`^Bf=LFRGMbRPhD=?/GOIQ\*->e_UGPP.!>FUc""#^\c8_SZ@7DP7&sOL]-q`iD5eqmN;$dFl"UneUJ,qqjTnj=-e*l1"9sN@lBU[ei]BT/m/_6eBKn%^WrH8&Rra-op+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<]#ar1Q3nbP:b^?^h]?&Ej-/n,Rfs-6gEf"EJN2*<?1l`h5UeP'J2aKTQNGoE6(F,\85EN'oq(-fCSY(s89K8T;hes8DDVMF]utTHS!+OVl\<CEjrE&.qAU+<]#XE6Lk3Kmk=Lrs9n^&EjEW1:,e8&4Ridck?s[dM8!Hen75CTP5h\#hT;h,[J4dk>VP=Z^R23J:Lo:7a`"O*>(abkjopUUan]heCrKVBgE"1=9N%X>leE1]#GL[$UR+o+p]FX$4nG1XDQIo+9\d@l:\I\7F2kW,O#OH,F)9[CK_8NG*,l(&RMj$Y,`1)dM3lo.XY6mBgE$W7:=,FI9sl8N2.sh^%Bn!:RW&PJ6g*!HU/K?b<Zt:eA4]-T7>@t+9_&j`3!,1U@"\YCK_:oJ2!.h!&;pPV\PX9KRd>RhKT>[HDTPSV?P?U#UAR:g=t?o,@qY(f<d(3lp?e46F8X&#@XFjei)#NdiZ6OZn)@H+tU?n0Tq`S0N)1d$gOR$m_.SP]"#CNW9[)T.gL2/0G&Wj.:FJR#@XE(F\Sg$T"P#ZKBfO^?\H#II/^uK>m(T2V%jS3dW,mg.^*_T^%CO51(L=jgdNsG];c&Fl69WO1Z]cg,VH,r!-u*\,F)9[UL&91g'\Cj)sVhPl?ZZ'NKIE!gA+fC)OcKe`t=h;((s*rZ9#R*D.7-^8N_?,MgD?FVhB]fbe5X%l@_/DVf'8($fA<8%dG>?CcQM@)LR'VWhosI%(Kgnl*1e.,UJ#=RN[>s(NWED\^u++SV]j+r,l`^Z/^[f*7RU]==Lb2)S`sk+"bfPKTTe[C4q]`i0X3?e4]OAI*+`tK6Kp)C#G#YW%63Q@XA_r,`Z7KI2t1o@uENcb*j4n.Dn\9NS\uCKO;jVB,0q1Geko[9*6pjF&4NiM]T;Qh;t;9!l3fOCT,Kn)YDE($29BH^F!-R!]2aCL5S"6_;E'":J`_#Sbe/U)F)_.Q<)LlA22O$`s<o0KEYepqJ6Otb\V&HISIJ7HKL9nq<6fWVfNn.&(mqf^S>=r8",S,q0IA2ML3Q-OFu7,X``nJ1r;fS+>9(q0iD4[4'HTsL[Q7EcAXI2)EE_hH;R+;B-'Z$P27f\F,q49Y+c,MnZbj<Z=j4X1QlM"2b&*peK@Ql1NmXjMD9_PV7r+hH=[^$@3gjf-27g^n>GA*R[-AE+H3+M^cSpf@B'93`(9'sh,p\D0Tn>%6=;^MkKr/]?gFK#:r5b,LppAkU^=jiG_?ghd$en:EHmYh-+C@m/$RO*R#t^(,UU79^t:eQ7dfLFqJ%[J0Trm'ok,.a"CY&mnUb`/,nYbG$;=GP**Gt#B<5;I(Sq*Lg@)Em_^'+RddIf0=/_aWB*]_r)mI.2"t`pbGUrNLZ4@jd-KI$BW&UC+GaM[LP@m-GHKJt1s6P"99p)kDb0:IF<7NolH`rM%)k=`ZpI,oGTiY(JUj)8&#U=%&U9D^I,\u#F^^3[4(<k[D)D:G@320U8)oOfFP4-&LH'_iIItqQ&6kJL7RD@\t&On!n0;9\0qRN/a"!D*I'8*U<>H"W=d^2DIK.rIs+nG2FBgu8QT%4tMjtk4m5?oJ0X])@kFn)pLjI:Rmf=:G!DF?ufr"``BApS;\G@@;sMao%SM^qRfd,.0=.9l,<=pr2<g'2BC'SgTH:/6c-fa:E8qI[Y.3@BbcXmi`<eG6UqKl:PZV,t5QFsa/C4JtON*P8"7ndQs8nnd*)_nR:.oPlrI#IsJtEZ[<W3E:!a3!ggD)aZ?QiSHOUPhNie(GHTD-^f7,:uiPoYh=D6S0#]Gd#F;N-iTuQc<R6tL7J\pQ#.G3;V'd[l"&a&iD$hdh/*[3fL-\(p=_dU9<s6JYH+=ql'f5]-/ohrOgGS`'5ldc3,AQE`P.7iKfn)lKA5-+`rEa3k<hpK/[Z.rleE^!)1T>H95[*X:@oXOmp_+DiLB,b][F],V`ZA$p2C6,=lcp5J?hO?\2rb!MP'>44&Y1Go+/2#r;)C7AY5ZeO62c@7abo4'dM++VqE6X<W\k0K]rd2;tsDSl(,Trq0.Ma`*R't.UOsK&>b&6p0P`Fm.O,..Y]oQ,">bbENfqi>jo(>/*PV0G+N$tO^D8uNI:_63FO1ML>F]6:Ee5TjQ__QkZ1A0A[h&;?62MSS6\KXm$Z9(7cIc,OcCM*R#Mc\N3\hm2a3U//7t])5K2a5V4&EBCs,n.:DA?]j:tVb8@c\SKTWVZHGrGMTI#9a;58jPGk`Cc8O]2$GW4"q^<uD)7Yte(j*nRdRfGEf(sNV'>FT1"#h+gE9:2-/kBC`C_Y'7OOVfnA9DoXm3&J1R7J@UqTj^0+@?XW8TXD4tV3M-&PO&B!_MD1?&oeAt8D8e?KT\orZAO]1"['94$2>:ic@+d998E9sUBS<=eeZIBb#g+/L+#DA5.sngq>#eL&a]uI?K4Bdkq?@J611<bN\_OZ!b>rK#rk<;G1#`mBj-<Fa=MWJc$T?LVm)Acd$3AH-YG7f'W3(4Uhs3W2RE>>9i]#8d*7M%k4mk='t'$?$^@XO9+Io(p./uRQ?:_npVm,lBD82d`Yu[o:D,<.N[H4k(fQ(4:QFKfMD>if31uV[8-L[C`'0Rs*[6[F&8@=gl\l);W%h2tI7jTZ7YK0fBZ$HOL2'm?:-f^ggTVsog4HP6\-P7.fL3f]Wd9M?<Au`Z67=M%#E0ojZarXXZ2)J3;1=o8GGKMVmIU\X[(HTKUF#o1M:8-Yj@_Smf"G/7\khmff/*/.AMDR*k9&An"0QUr?f_2V;2Z4WXZBPYQ<JSo[iO>B,S+Pb]f(Ls]]Nfh3o`mN8_Ys!?nRNR>V$Tu?7[e*heHhB`Cr%VD[aCPU\uu'96BJPA6m'SYlRui\+CCUhC]rAY'@Jp_W$Aeh`@:3(@\cQgYaXH'Z8]9X+iUp5-%NSF)(i&#:N&Nc/+Zl!<.c9%6V'))!O,;j0lRdl^Qm'(eNIiifRXcID)F5$b@NHAJP.ZhScr(dSo%u1X$$80g7%R,rQgYXgmF6A+SqXr.pL)ZHhg`S690fcrNh0`e@iH3"&o?]DU`BHCn@s.#=Q6WJV)(j[oT"Ib>;tEKktY(Sfd`i/O8>\4tFmE<cqV[1u7N\WrLS:Dg(FW<N1%4b!Ahk__$#?=fqKb`J5/L^oj_E_Mi>An$*pn?s`H`T=9;gn6=]6"k%L^\C@*o``EOGp"uB>uT#'d@FA:dEjbq5jZ2oD;kBKV,-kF/52cTl,+0/bL$Xg0%S!DbnEnmk5..a%hffJ3\jFYEcD=Y=oN(3X$;OGj.&\,QXQ]+Li71-[U`m+VXB9S7gOA,D/G5BQqW$db_/+UTX"3;8"i?hRqP1RoQ3b7\MATj'fmRj)L2,H)uT0!"%-\KcDNAcUqGhW9d;^]@*gk+aV:;@)!U]F:!:ojac#)HY)O<RY31M,//&HCZs;C;0G9_fY%a`IkaIN7CIp`)Qp@:./qKU+Fc6J8Og1!\(Hc_pha4h*/'Cjf]C_9>bE)<dDW8PY.ANUH]04&9oWGdo0[fPDMNLN!"&TM:3M2c")oq-P,`G7FbC`;hLj+/Y=u;84ENMqQ8bri?1$3Ed@%`['pW]VI-@BU%A"ngA(OC,,iXua!D*Xj@T$sBQm[eB;2G91l-I#(D[rc.'cI=k#UoQ_EE%GM*i^\7e^8C?Q;V=d%Oe-)s=q1kcaouHnVF"V1M$:j?C>n%ZU!tXf`sOCr/Qi8ON$OSG-$b[31k!9>/^hh<)$uNVK<AFRB6\9J:3cS\Y]M&\&tkSOO#$VrC79_+@`d!b-6*6"V#$l&TtFDY+e\@bG4Q$bHoB5j)gh^Cgn\Sc(dRu<qZnF35GT.\_+@AE+TYd@*9%rp9jfO]ceEDhqV?F!F@t$1E<K"<[E4ruQC#+"N036Cb[o!JU\JCtPb7\ELMu3W^I:mRm5WqJ!&EMh_R'"+)bR6?h%UsWZop+qL9G:Z$Dd2b/$e?qY]^JI*(a!=W+iSc6^R3_MWi,6A9bRZnPQqlZ]?fgVc&D7DT?Nh";hr/AJ_h_;A4RoNc)MA#J>s&=*I#j?1de]@QP!$f)dcW,a[GPOVB@OklW.b1aZ%c:cu$36D&=*bVt_ER5o(b-R3%)nIRoBprX+5)\mJNJes\#nV_TEJVYH1im8i&X>1QPNpM?f_'hqoT#'UJ<,DhV6L>#8O`!Rm=+b;ZIDst*K>dc<OYI_a5'2hZ3d;lnmO*h/IE'.c!;q1#I3X)*C)+6k,e[L^Q_)4--JnRBn0&1`?nUC5+-Z*(ep@'Zl#K1$j,fH,1I_askQJ%F%Z.l\:rB)=Z_3(,4CC(g0`c-8JM>*g>Bufk\k_.JD&69ocr<Lida]K6C?W*+;$,Z"\4/P7(AguC8$?:W5^3)uVNhq&-_sd/;d*Cdcj(DEDP<1Y-L_sHNu@?I"!'-Cdog9C2RH34oKnY1\)1\45]N!u#6=F?i4uUFhU54.S/6:#\__,Lp%aC)X>Y[]!?):^l&muP2(6R;42p?aY!/\*X0)r0%e;G6f&4/M`Ck.9$)poIN5Q/X'pZsP,`e/poGD+$p@2)7h:O@V3hqAe5*n[s1M[2ZSWN[,4TILj):S"P#Gqj"'LIBdJMUjE;q%ChpADW(99_&ur7(ip)9Fh>#TjY!Nha%WdI/]H2Z6KkcJ&t$iW_.U!;0@g)%?\jGO<JF!a\N@K?S?cBq#6%a:S4dgj8<>>`Wh5!5aRUpS2h"ZkG4fC,i&qmJ`AJaMFt;_`(mokN_s6s&PAiM5@L^Q'cV[$"08CgTaiIB7\T<JI2;C>/&O'q)_[T(^M@+!sOX:Y6R$69lP<G*auEJ@%j5ApcYI?OS/B36m>hZ&E`IV<XNCpfC=GoE&[Xc0@UW(a$FDooFuY3742UW\6ABu8M]X0i0OHjE'/-$hdPo%Tm4I5rU/h3$!&(AVEPO-8DJa3!/=8=9DiVhn"MA^@X!CsJJ6EnoA1`s"\#i,[BH?N#KRK!_fnhhO8a9]Rm's,Bm(*kmEKfIQt.f,%<=U%(eK;]<hdK)=Xq%`?Et+!5J9To)O+XQOZW=LoJf$Q8&q^Y"L4q7]04Zf;LRqZQK6OF&4YXZN+m,J\)$0Jac8c1kA[F7\pNF26"WI?p"S;LqS8r$A,(:p4SBaP0qN_JPb,C][1/PO[MK@W(Ch<.4uQ%NM*g8_;=&+bb'm^HJ6TOd;>)^UF;N]Yqo7S?I:]PM't$ENf#J9WBh<"S96+b^#U=<h][%ILV>H#c$[HDR[.'_+cfpONG_6P1arZRACos5a9*[($\!S'Y@5gd@DV^(#^$fKu;-&i^AV2[/^iN;A3,hA(7f)pW!F&@&rJ6jjMOqmefrmIWj;H&5QT[5L$gn404C/^f9dbs@o+nO:\tHYGhb^3VBC)E&6!PoGB1Yk#!b!>a5l^bsF#\%`0O,B&Kh(/j`8d\*rc@#TD]MS<HrGrt,Q*KUOZ>org>p\pBTpt$?"ThXAgF$5W$j-,"Xn]LRQ%&u*508@PA<BJAHTo2*RK:mG04f328])#8q7=sU>aJ*@`_J/Zl:)-3BV`3M'Y0i$A=O$!1f6aH``([2:q_<oIhDbT`RSh.\&sG#IQNGEXa+XnJK<J$QB=S+kk:pJ@n6E&0F]h\Dfq1+[!BHWa>]@r@q(H/.,j%deN@ERVl-cU#$ULBq/\1RaY;@F.Z;kPlBWdR//6l]ppB/[0hSL2upY8/IELR;S[YZ\Uqgu)^`),p2j=?SN_RClfBMh2u(6gSGi3O[Ii?Z^sSX9O44?FIXq2`O-<H%e+/rk\$a;)U1S@^)gh!Dcn(9kfD=c24cF;R4Yu;9?uSatAW3aa>75]48#ER;VcJ@&&dL[mC.%"Ji\tG$`NIQ1;VIXi:Zn.n;7LtV-q?]L(HWLKMPiOZ@e0)"4gn"?`acD6DqTJ8h8@4&,5;,^Ouj;(Q;H^Z7?LkW),c1sGTMVfd?BuDAh4A:Rj0W_27EC'd!YnIOZ3@+DfL'!=k<`E'ICYeUC)s5er(WaW>9V6cB%.H6sYR\b<i:#lcljRAW[X"*@,@#<I;RW8Fib7Y8&`(4]o<#_i$U>r[U.bP/qG1&*C$UmG'VQ[m:jf"/,W/RoeltGfnBn)4mhD]k+#!&%.EFm^7qSRP739kTj,#=,TbY_MoBgh?9R#5/g(Cl9@7e9]6jc?E67!gl_<D95;bY$Mk1)oQs)`J;T92e'##Zhj>.IZfftWEriHtp^up(KTXmkhMd]rjOJK=DaUT`MPn&ifp6^r?/.!54E=Acdi>^*1=?N'\Xd\YI8d&mgO9XS(':)Rd2?\I38KA.q#=j3(Q<QoAO$!@ha53QcBg'+8Fm=[cJTWt%SHaD]K%S)9%*Me5ZY'p>uSA*g'5DbC]gf__lmV)AIl%W8;Z^A3[;JUTpa5Y00E7F(1d+J#M4V8TV-_9mlU_cm7R1,3I^rdofQ6H_35:bOihRA^#0p/,eN9&$T8]BT6l5)i5i=CCqDjZApA/N(@hs,@W!=g.5$*Jct2:rq!*ieC6qlR5T#>pTO.BaT`S'D/853)[#)@aC752H/+GTP-a01dq7_9;@i"qoJX?[2-[K-$T>HLKMNOK9<-uI64*aatVs_2j(*ibh1*5hDPucR+*I^4;<]krFLJla(>u#5=@3i:4HJPc]\*",mf$J5*bbl>hm<pS$`#$c<aZeWqC-7fSJ7B?71nDKB;X?S=+&W#f,u`P!iZ2J^_@b2:a/`^B,hD&^3$qc8%&ZMab_3Xn;)2J)VSfl5q.2nj:]\mD&!Uu")+g<78A=q"hpC/YhD./^jr"U%,4DQOnF>/ffCGoDks3fUh",C<Fo`g6VE(?"/R/e.F)I`@q#$:aUg(*=0/t;FZ7b^Q[S\=<"$EJKh`Dmumi!,pRH!02Def9S25AuTS.a;IbAfOBB];<p/XsX:eqX\7g;$6'mBEpVQ>9RBjK#=Hp`2atP9F2F&LMQ?5[B>%YU27M'aUAf=NGQCR4T:3M9jP6Q=d1uU:u75T.*7P$gg,h%tS%M14luSpIZ8(%20R2o9Z!4`J."3qV!WirGXp:pQBVYhIdo?E_V1Eos%Qhoj@k%a,D:ii4h0(d]Ce8Fn%i]j7cP\R\,N:D4qN,]F63_\uL^OdQkH8Y4je_A3GApR5bhHc&FD8&>+i3cXBPT%"FKEU:+*[OYV-]]jN[-KctYU9@HGGiJ\$e:n6K5T\kIQ_RJ_dfnBhV+lFN91,Aa`maO`/`'2Fi*LULcbKY#KK>nd#)+h>H,^%As]_GSV]s,+,Asgd_DU71k<eq"SlGAMnaZe[9Vj7Ahc9#]sVG&KijI5;[GO50a.*YWVV4r#oTUjmfN#179>VX/WEj1YgF*&ba^&@L8H;21S5K$YPk^3<n7Gg(qK8Z,'5=.A1<INZP-hk>G(`*N)_;*"h#>'%m'))0Z6[sl%9**B)n.`:OW>N_>(PMMtV5*i!,:CcgGoTecWsI]^kAAb/4mA%)4&UJUlL]+A"X_NBGUZ9Pbq0*RKo\u7J,YQK+RPR,\&+?rcmp%SO<n1-T_JLsH[GY/*$9T2/`iRdU`n0nf%/@!L'KUlFnm*;8NDusOAA-\0!Nl[iXSuYF+"_OCEGBVOCLUbLAH)op)P+m+\Gk4p/:FagP/hr)15q):X[B3`$X2W']8Ds]go#&5U\:Plk=XBq29>Tken[([2qOq$]3=bH`C@NXb'#Cs0Z\b$#^i80Zl&TQ_cii;oN,iT7g4kQeoAPgRPeU]WI?!$)=!,pd(kX*IrPC_WdfY8_kc[+]-@k\$_22n=103ig;0d%aZ):*Em2"0GuM$?[N6,[UgR<PF@PICh^#PI><k6p0hV:,ADPuhf;er>K3*.]5`5U/Wf^MH<A305$j6g273P@FtS%0#n)81+p_`>Ln,qnrR:bEj^5^4L(DVif.eYsG^>V%gb=q[iC4#.mgh1s$-OrU>@3ht9dr>FDM]%V/uhr<,E1,NYg#_3mrqMma7\$%/&MRFJO@R>5&[JA=0lWHhB<k(Zf.e$%0h4lVgfHK)5-\$;6sn?nY.@[*ZZ'E(ho,Y;P^ML#E;6W-GQochAIO6/qR(iF1V%?4pf(sU98,MH_fSa<S#b\0l:B,'2MeTWe"VTejhOKEXKg:9]rr*&oVhi]2%@uRqUuWeSZQ;[=!)=8pL6+E'[1;K6R)\$Fg?G84-ZL]D]!"?Ba6%VjIOKjpW$rRN(SB/#lX$0Tr@b,M>Lmmnq(b#FH!3F.QCY$XDgY>O5u\:TYgb,8C\],-RQNpK$Z#dJFW\##STfRd/F-lF;AGQ%BtCM%d-gWna`t6cn:;p+-O%BpUuV00LjIV-[$,$A=O0>sDcPn/bD]bT;K4.&*s(T]srS,IP\K%J#B<#AN`;c4b;o5Y*V-eSFiD3^,6E?2UhT0c!CcK-g1EebQPNKl:mo0Kn_V&:aW^9&/4U#/=qYNjgkI_FSo$(koLu@ibe==[72+7p^FBN_>l0q)`[AcZi1q8A=q"Ns4a,KbJmN_dnXehVD7COd1&`_gO.gZ94OnZp!7M7H1FY34-)9Y::a"%1ld.n$fd6N=bur;PU2E#!HTEL:7GG6hXe_1+tOi$K58j_h0mJ-pI%4jFG%KjNCSO_r6!\_T,=`'<Iq@]$kZXR="5.NnDr[Eg^C4db_.3dX`<d91"YqOE[AXJ2;5[f$i`8A,0^.oP7rkc03V7*;#b`i.GT_P"@s+Q-!.ce,mC;3#>c#6aohJV942Z^*Z%/1'nSB>5b?Y'n\-+16.[m*H1CDN:\Me/VQKCcg.ekitNG,G6cgRdRrtB'*=F[pjDZ+/,GV?)3ZUtHs/,MC*E5>Ommol'S\S;/e$C99Lc@k:2NhKGuh16i>+K$<:Z_t)W(hH+`N;'L/'mrqq?0'T?G_tOG%N+gf:j)f]1h@,PWn)\&;X'ThL#Z'9j:SQG7Za"j/rQ@B3S-eNsg:U3DcG&LR"Yhj8OOV''j,j;Y"<pcA@g#S`PmmEUmU$@j^6&4TP)9m%-p?/;QI_E`UkNUP(u%"7(*V\4BDhHSi<2^hV_fmB8qe2@&NCJ3.'5&DsD0G8ij_fm.hqpop2RFZ4EHIl>eE!oqg\YnIYpOpZ8EuMc?@S(SDT`7],?b9(MqnGSac>"eBKqQo-nE/qSecMF*s!&V#Pd:+HFs$0^3rAfZ]+D;N@+L*]aq.%ZY<+"dZF`(a^miX<I^,L$[BM"j>+kS'Di3#&`BV",&f=Lk!pC\W9h!*(X/.(f2cq,4^.;W]n#jl5Csntp-4.qE"u4jBNLm4>(Y)CH3?uq:oWVjf['?7/-M67o_2Cpq.k`-\C]0]H)dVCDV.lOUTTIWhS6-E9>9GY$a,gD3aru(o-q6@G&A;RIMWOqdd-o\Ck;f(am*Y;[^U/%u;olqUjjah.EO/An]U!0+PWkXjShh".f5A_)f>h&hM<%D$Duqf:\Dj?pgX&%=b)V$6FpMQlGI3'S='o=NP1\Rl;l->ocnQMCf)*@nDl^U2$coW3QFNpjf&6c$`kIYFdOCro4O5T[[VsrJeTl,gqs;3,J_>s0(\M4oD1n$JpfuQ5>/4@Ncgj/Qj6#?h6ff1WR[RiC)m'`fdXR-BCNC_(RrULcS&i'G0?ZV8N,TWm8pOB#F`Da]Mgb5`\Vk1Ac7R[M]9ZjMJXiD):Xi8V@3cQ6rqqkR+5qNCK\8\CWT*/4S8jFA,Nrh5%Pu0\6/IYIB0_W5B,>>[#$jR(+19nT4!3%pO:_u/^",Q3._$GH9@9?EVbHRhgN<O`Cul;(D9bD/@+YJ)m?ah+kR^3MiDAfCnTicWDk506n7S-pH%VY4+WcBto^k]YY<LPsiJ]ms6SP0bN4-@c8%JJkaSEI!5YTHtV=ldO"=+<,*iU]:IC+uOEacK(-.'i$q9N'!H1R@ElVX)D*HM;\*Kn[#]\qiAHWdW].''GapA?08C.TrCr!W5jKFIADBU2=1qTMKTQ$cVGcBbsPB`2D%CRXupb+l4ii'brM?@;+Hr.'0Q5f^[\Z&rf@*1$%r28S*kLk%F@YMk>Y?M4`>6d[oOOkrX+h.dm55R"3(C_>fo]W4rq4^P%STJ?2P&<g=5(Hg,D@+bA:*pAi_p$Ra=@r?IMbkX_u=ko_R$h02tWAq2tW<G`Y3ql1S(eL<ED,&]FKJ&$`YGJ(<[".<R:RN7]o?>j,lMg(I@DFRLKtR%_!DY:b5^R[anVd_u(er[)(egj)aCOsJP4&u0n%DC3W<[ZR5VZ0!`6otngq*%FD<4!bgu;(%,:4HL,o(Ro&":f,X22If1/i#"lQY/%nIG\Z-(6OD7dp77&t`@EMpAoQ80[lZ,VLB8N:aB`&[bqZBf=>ZZ&HpOZ%^s"8b[g3#j6n=qmV'9[1RNu@0;dSr^K.IUW,`R;piAO][n>g>3*$^C&)C""BHSo%@"=]c,u\PW-qGrdWNZ:EKF<"QkXXFq2^GOVU*=H]rq(b&0]BofZ`31p.>1q09*QOl#>h[^,9NXW"-.,>XFmAC1p,'r6pSNKn]7)Q)i9)SSa?Bd[SPq,P`]?C]u/2??-W%8,6`5X%2@I(PeGT&Z]rn2#uL&NIlT*=ApA]Uh=d>9T&dTS&N+"%A`?S&84/ZgI5HK#B/?dN&37;>;\m%OFCagoVe7'"Pr6?!gfO,W;=q9hhZ%a0GV`KCoC6)q+?74+J;J)hboK\X`$4?8**o6AgD(7;FV:b(^\Fp%<,'b8Jj[t_cu>dS`f/XbXK5Gd!Mt!P*glh)LM]I^4ja]&U_KmiBp:M*P!b'm`6#l(1EgqjT7[U`(2fcR4:#@p-U_lL2$&2iZ/-H*Et$'3\5EgI&TjK.c#^(ajG"891>E&^jOTVA#.A\_aq:8l+&$Q8T5S*HB<M]dfA/eE(:hR)mZ,ZraGV%^<s-hOqSpCVMVrD^jEh94%br_liSUR$[I1m6J(;qdW\!`<gUT)*9#7lb&NmfLliHAjJg-ih`2[c(@YQBa/`9,O-BmZMA]`iWA3&mB_>E"!-E!aP/h[AVVN();peD=qLi'&=/;h'2GIn&oVP",?S`%0i8qtK>pGoUbW-#J$.#]=igc6)Oh<\_`iX+FGbK[0Wl:PS#]pAeNZt\,.h[o,K4q=<&GBJrh@:ph\2sI0bISIf?3.ab4N(6m3D=77M$(\%Hbnq,aStdrV]QcG.ta^9NS(1M7=$htc/<m.)^>!W1YmirUNsmMo@Cl_GDU>6=E)UqZ>>H'P:dLPBa5peg5_ZMeE$>d16E7qiF*A3CD^-rbY:$-]HUl#)eL0S;`Ye1TOT1dhB]?qeu>&a;3S$g_t*#RP<=#]optBJ1=[l6Sroh*86UXU5[B>%(Y;Jc0:o.dLndX51cJ(iU)D5THh8Qs+`E0]\)]IX-g)L,L"<[H(u"F!;r9;@@Ut>;/QI_9"Iu4I$H5QTP`Ks4N"dmfk'443L95p91"$6Q->Zcl_)(I,$lAEGO%`Q#/b4En*p&0AD]MS(h*2T.P01hh25R_R#jPlp(E_t=>B2LVLi,,(ES'A%V78,3B=U"O*7<0H0GANjE!+hdK$<(ETOXpG-f+h7!LJ@X(^^.oag;=n[)3gU!66?@+YW?[>dXsLjld^9c]1ruk6am@`*04T(3r_M8+o5YnRfGaTf2D(^%:`(eLJut7Zqp!1"\K!g/)bN#FpNtf?cD"ji"js&X'$"iZ$SVNJ$*i:s/"AD<P,U3@1tG-I@(G[u5G.<HRqYOW6j-5,UYqOj8s[LHq6bmL!5GrQ7mC$]'`A^f\S2lb)87_I$b((Nq[M`#eD3)&1#!TjbA7b\VLXO)adjhXTe`JK\X$'d5ld_Tf"O`.CqUZO/ftVcShq=JCL'=1kYtIN5X$?gTrdIncK/m6[ljmTq&T'P-3ciI:V()'J0+,&BZPZUAi@2RGXU@?iCIa8#C"G\0*3%RZ^igXa=*5Bp+<\a/8+@s:'G:E%L.-:tR?"p\ZKKb7pCD)-0mRdU"KK!=#>ThFkZ5@m+[G4^ZS/j:atoJHH<$)U&GQho!qJ[l#+d&e65Q1P11-k$]/Pg$uN,O%=NY7UpVMRq*m%WFBbd,B6.X3T+85fR;'^?1FXP3qZ(DM]%rhDUZR_Y;KE,Bq"fQbcb\e6'Up70kP1ecfYJ7M!$'_@s<'4=f4.g3'T)n0g[pp-I^^*]MJ[2]p1*_8U7`<e5;ALaQg-MNR*<,>hQ^cuai3bMa\YRP0iPSSe9\.r$"F^8[E$poMi4;1=pJOcr$daS$F^g[:SJ*8r:sE?4Q"Xl$XZ-]nK^"7\*n7Qu3_U91h7&tcWser!H^a6^q%OE__YGAccUIHTDMc_@hLh8YF0rk-0f+c70%l48b%j%JY"O:6H*1)'*b5JJC*@jKj/;!@A0Cah(14?S=[9I;"/%dehN>6:A6K9Huo]tK2.]"hn9]:Jul@+V$3H7kq9L5+jAU3E.m9\9kiiIdobD*mN-+s7C0!jdA?<03T!!:%_A,@n27;:i"E[A=1!8&dleA,HYqO*at]rSOI!K9^Ec-ES<S%jO5acTJb!D"4(@Eb2&2a[i`D,P?>p]2(.Z@1r,[o:86hZ,cmNi#>$2M=^bMT0l5#LD4Y;gPCJ7Ru^Ch?6<r/f)1h&8M&PL*+*)'jAgV/aq:,c5]o4C\KnNUZ;dBGp`S=n]<RT\[Wg5VRP#On/esX-][aX4:9b@PDj*\`)2[nMF1g+-nI<N,)cftPA>G_.I)SmoSjF8c^X2mIjS?23@gB<!p7mguCuA[J4NYHrn#&88qorX4?m0H/eA1UdWB$/DT-Sd9d+mZO"$&147ND1T663A7p)OFY:KbY2FU$j3;?"UJ5n!1P%Z.cG*@RbH>C,dmVeE;f:>V8#Agplm7."i,f2"jkFG^;dG9l(masBHt/4=:&$cL7'"WH*MB2<UXHf@)"e\Qfk&S"L^WC(3oG7Iq#2?4?=%t<9,9>('OYqM!iC-*`5AaC[N$((js"h`Y]VfPcWKUOPgPPI\V#6lt@#clcef$od!hC5$+cl/7S#:hG)Vmq-N='"5.U7[BT]:3ho1t?ZZ@WUZ'/4g#KH7oAO[\Mn=-uS3qmAf"AX4$D8Qj?C#&,NQ'9-R^&*Z)BtriY-?R6F),2FUOt#?(j&Dagl^,BA(YhVLGODp4eK5d[*WDHWkbPl$M:_ZMOb?,U-H[;cBBN1erDFR8W]Pe'n8/W;Cs.)L;I8?H/nT.LNn160[rC[L9VRIn"RTPpU.YpIG;1,YQ^rl9^S.J!;cb7EJ/^jVH^Cu`m1lf.L`7N'r&1kA26nQ:lO!rn"I=oi?iSjWXiM9Sa_?@KUHB%S<Y2G$ADGn.7?NHPju6_lVi(?D3,^a0_<TK#47j*+dP+E[Ar:U(Q%\oeP.?mHk?4^k/4ohBOnc!6+6&eRU]5Kl-LZeEM71"(`r9d[-B##<4X*T0V@[n-;:[N)ueD#[TfJ`/kLU[Y[c>j/iTk1C:$\=,k,8I"WGn")LY%%jXrP),7i^//Pq'JjP@hjC"4WMQ`d(%^WD5!?K-DZX&Uf>:pkBCBX.KTWR4FP9DZ8>CY2DV^<>2V5E5P+<FmO5K\0!!8_,OIbRLF\"--*H5N7b\8H%/PfY9Aks313P!*DN[O8J#5eQ$B?SRH5Z8O2hEe;m@S^hSpq3_74kR%CCcV"CW?oPN??9U^pN_&p`(2k8lYp=3JENcI(8L/Th,t\,7SN30U2fuZ`4c^ii27r]KKVn$#WP%P^fr!:lW.R!I+,o&`6D,N#JB'M`YS3d#<85WF=;ah:eK4$RmtOMlX=$T`:F8';d/9ACQN<MjP?%!Gc47P`5J85B%fX)_"+#*n2jVGk"S#Y[4iG3MMEGIp"XE(L?;O$AK--1=a/`<8,?NFI,n$kD<'0E&d)'\RuqldH\?RpiY-1s1#&C10BW$XPJ*T58*/\Kbj>E6I1M8IcoQ@4e.YbbgKI$&#5D0L[-QMBJ*]^s^=QD+cJ<sN,V\u(Y](C9a)^Y-;%?"%%@<G-b.5&i/P[d,K!>Z;/3I!753k*OT!M_^\%(0ujm[QpG4[ClSA*2h'5b8'Is,1.,jCGM6,t;WD!>iDE:bQI2'g/VoD^t>QpB8RcSJJ8knmtBXY:+<U<b.&E2^P3=e8jopPqaUL)Z222Jd+BHh#i`=_VYhrh?V0o`1Q$T5u+[q9V^IjM45:N#A4PI.K?"AXtuX/@3!g+^A>>R(QsC3H&+7`CN3$XUrVK)+K4?$k0]2Xu8]h/T^Pr)7!%ep>4OaI,f?A+$2gBM2>Da!<)6\`fkFQSb"mtED+e9AMh1_eUTCpnM;G3MV8Eh1Es?])i:hiIq.(/X3HWH-:6SgPDe(lK&.XI0ANu!akeD0bL0rDFugr`L9B%5\`8Nnp%9&mh_!SqALT>"1H$LU,<RQ]OcG*FI(7r\H-rBGM"6.(XCQVYh#]W;*LBhWlM:O1kMo%Vcd]Zpaln[O=73eF4?cHSq]Wnpa=.Vq<TpD.S4UFUk2t1O.r[5"DmV[aL5d[5naMbAHI,sn\IMJ,M]m#sHf]SV8'.8s(*`Em[at`<"(lu$c8L![Yj>i`8-gYg.AN[$o*"R@QZE%h'_oVK=-NAbDJLKGg3jX%?B07&%JkM200Fe7RR@e9^.l+t^YZp0rk/1S7e-f;M`9GR'ngWTq:`?1M*]f=MOH)^Wl)A!-j&.emQKh06*L.5jcGpZcrf4lRVE_[1M$V,DjdWP)`VH*^n`ter]nNB76X@%V7!SH8.;s>\4MfEg8O))T]`t7Vn+Z5K"cmopYL;Xj_s(!N;iMCG7QKg)DUG`VhRM[,JfET4gE7,B/KK?.b_,c$[7Vif-f>l]-dt=g_2'8`ORQYi/dl6qh=D"O?>GTYhP^;FC9;05K4+skm]a%[rc?629\T!"f<f'jp%8YCQk`sWJ-K.Ud)jkep3^2#\X6Rn/4$0*1pMP=p-m>jEj<\-AKp6#*-eGF5"Z[!m8p7GJ9U`7Hf\`S/lek-AC)So6G+=J)aGtbt%2\oV31aUJk3F['_c0HW_Ki)+@go0hq;5m.?mkg7^iandJgP)fTlR3Fa6$i2NQA@O/t?L`S3&V#h0j/ZikoO56XN)Yp)Ekib^/+q.tZmi3aX+.A">B-P\or,c[<)W;+[^Yg'W?lje'qY+34T*j9RCOTtDr`\P=>j3D=Q@fhD!.E^-I(hJuMAHQrk](Vr$Y1q(rn#@M"0MHMXAF!?<#Y6D:(+TFPsV%CWNTlN0W$ebr*??Hc0]k51r;eBTi(9d2JH\#d]H,]Fio?)?5pk4r;tLF5Qj+V1`Ts-*oFiMi='3D$1:lMDnM=V8@Ms+ffP[4bRu!GCMIPc/lH`MU124@G$qO22p>gHdd-lL5K;h]hKq9MZ6tJ&jB8Lql6+^_O/+[/1tHZm82<%[DAWZu#L1QEf2np>JI$?:,=4^%L<_Yq8fFpHo:U`bqn#:HkI8.>>NCDqbd1K_?V)2+ed*Lo8r%_"!.>;?H-kBs;P<ZkoC29a:oOqp>hmd0f>ZVc+..KViA$a98R9'T8D_ZIQ4OAe28r,W+>76n)%"0ME+:sUb\RpU%m!IbbO.T:loan/lI-(D=Z!ud8CUK<SpTHb2&6I".,G_Gpo8(-gi+\Ao;<Z,r)sc'5JSQ[15ZUor(+SFLutpgOCJ>;#YSJ.n]2'6VUjII"9j_e4[BrTqM4*>`EOPmoFjhPP'!!A8++_eCHj7\h'WIKBK1Q2>q.PorT6dQg=udn9qcIHpJ!b*)SUSsdRo8,!o)J`(cFrN*MtbQo#cr93Xshd6.Zu'pK<2Z7[i>q1cj@;MGJN-bIne9Q,j*>!IT.1=DV2GGt-M6ln1IAg2.V5A(0Dk\6c*.Z/^.IP=.1&'7Co"lZBGZh!7).Wib").k7cs\TNJ=jHitA*7(ukk"BuCHh$)&\ne_NU96:M`e/K`N)]JHq:'7Rh`#Y7+3BjogRJjaeC_R,+!;]AT/P"ISc2V=:@FZQKGgb@o955W+'qgBQhPq2J:o!g,c>+&Dh/miM)Jp?f?,W5BR\X#\.LN2<gB+Wg?>0/rSB7_$u9]o6?e4^>gdaaOu^tsNJT8-UOF!I:1$6:h5d/8Dc]I9qBRs@\V%W7&\aS?`$RtgVoQROpt(T@0kH7D9$kO^?g-R)&!$=[ZiMf/8\G:9\`dD-he?TUnEHt,TYij[p7GT#9&&foD3^cun=\IIkg"lEW)V@dku`BPr;eKUp+>m.3RBKX_SD;r'DXcK,)Vpd'QPWYJ^+9jk@3c1nh<?lLEiNB+Il!C"=D-Od]D;0!!"%aJEG]T>^4D)!REc7XD.q<(b7=QEq9d5ROQDP7IbVE#N6VWP9]jWc3`NM/fXga?"]s!Y+8TP@FRFnbQJu:::RQo98KQg[$d!lQo#W8mIn#M5gKJRf?p(!h'W"uf6!oaEaV:fN3kY.VLdAUF\?cXo^ea9o6O=RRRWdOmj_@!XBbqe;`^A];7-Jq9NQ:FSY^l"RQ)A-f/@e-dO_S/)4RVFm`En"7\UETEXJatZkK3ZTUE[9U'&m\grE49BM-r*kjo'Bs((0KgD[%0\JkNpK^7<=isi9E]d`=j4".4Jo%qQbr%c[o@d?B%++F,e7D<n,+`Rr",>"5TnJ22_onV#sN.-M*=br?.^lUal4$G?&V\t?*P1\Y8H*4s$L/4?_T'El26;1!M,H+OW-ioDca'o\nY_P3C9;_G@Pg.i4E?eGSn3OhoS8kb@*be38F7(J>;]]D]o(D;f0M%QDaa<jS.c)phmMp*n0\e)?@MusHa7gg<p<UYd38&pFKe5jKK)RWJMM!7085[DeWhkt#YU/Kp8/.\/6!c,:S[:6dnsUIsg_85hF[[@*)%f>R@YUm6hTh.Lm2E7G_`?Sg=S!!bnkHiB4=^=mA&h(W%MnUZ;teU[krL':)fV5F/BUH,KBnJN'kpY#-Qle'BMIYt(1e'DC_h.Us66jHeV[h;Ii4'O;YSU#-"`sq\gF5r/D0Ut#W[CdC2*_a0EnUlH>S')VOF(aPXjP@,R1M,fl&U%DtKa#;4<VfM^rtK52og^!Wj-gG2/bt;KUbRrQ7mcMSf@O3X82^P[j6a2thBd=UqYrNq2Ii"'Nssb*j(&E*8!>5DNd=BYt#4VU@tQWp6'rQ]]Wu!tJh9%C_2-A^Ma;FZRRRYQP)6i68knW0=uuqXUJs;MF_H5\31sU(4rjoO&ap#n!c6lBN0WUZ,,j^$s"7k2W0EQhnr3\r/Q@]?FNkb=J0[8:*"bQ-/mO?US0;.J!%Nc@mPehu`'K-+;i+.jtpk1OHjkL9c;CC(1ce1VdFLA($T4hGSf@NTHm3*&<h9!obCsJ`2PY,C,"WqZ%l>RWs1Is(m'DL2Oh^F%HZD3!.YCIQp;I(NPHVe'lc_./W-OGE?UKQ"$r&,?t>tWN5VlGP+kNZhGlnoM$jQhr@P":fM]7WTE\ko`7On<qO1rD`BPIF7o-Bg#q7QhW<Ck*ruD/a=MXu5CorWm`(fmCrh*Ns$6Am(n01=G;Yka"VW,[F.b4Sl+Ma*c^_-u0R@'8$)j9_Ep5V0_(Wd4$u2JE<T%W["X>/:'^1jQ+eWoQV_c#OGFcY0MXjQ8B1Eh<>DmoqWC=SCI/I<>O[f4\,+f&0T^.O>6d6VX'<Lt`-O\"[&V2"^ji9"&dERYn6NoTai";ZNar])GE(,0>0B1OX2<pY#TNc2_J@:0$H"J26:@b'QN.fe5mJ/^'#u$F\9EG:o!J?M<>2+K==H;G]Xp>al=TX5<m"C#S6lAWuXoktU0B)Te+6hloIR8=kn*bLE>0%E^\[93D^C""YnRJ_XcL1Wc6NR=["2jb6=_7Q:M[)q/]HuOZRVqQ981Bi+hTj#;GFs6SqXYN2*4`Z2e\:@5Ef$5FX2Df)9P=MQM0a(8+$\nBn6d!$8J)O+!MI?=-p7N+].c@nId\-KJQC2S+e:6e4_!>2MECQr)TAK+^qWiJN]/:Z#h1K/XnRcBhfH1ON7sa"]]:9;1(t44+[AuD+2YAY25C++([Rlt5!CAUThP1K`E(\h\G+neAB`9PUIOe;F78U:H$'5f?[:!X,:S]W&#^<d,ff8n_N4C`f[un232'#2TY$lO^50r_oh?r']8;]rDs9/56g6\!m04H#'kaIB]JlItcmbof[SbWo$%js%18J&e>8Ud`-R:m:#kSi+6PpW$'mT^L5DNcBJYD8cak^R1l$AXI4INL0UgT[R$:*I.0EkJ-2<b5goi,_M/+/qCn*c?#9OR(4A1H=h'+eh)Uc85(*Z."E^oR<:W]25/LOu`T@Jnba4#CArDWG0SeU"$C>WTnrCHChV65]+P"2oZRic_bA-6UZ182J\9cem]V376PP&Xl:^a.KX*Was@XBYI_27.&tCE)*6.&@sLn:ob^sVUjI36=)9*,H[!jA0d5'?du7V&eO7<)I$D0o.t&#h^7&r]l:L@N3i4V>dU#N"6CH=kIDjs=1`^%dhMYfgB!I.f60\?Pi&TpM.BeZJ:K@JZ3qO69YbF]XAb3lHP0lp48N\`_Y'6E2fHSe4$R;Ag',C*+^Ij^=`fRa$=7i-F1!FMP`;@`!J,->_+8X\f2D<A$c3Tg5peAD<`)>+F)LED4?hpM:qL,-l^R)ho]U.7DK1Bi/@rekKs*Q3>Tr9#H]P5dO>6if:4pAR"!&&1#^K_`=+$+_U.V[@PJH4"iDWYC66!e.VH.9J7<I`/,LL^d0&4,QM#I=j?FfXf(sU=M,paju#RJq;N80$+F4ZB,3d3^c(hl-<U#HiZ>n"j?`2?$>$/!Z`g3W0t;n!V.:>':8k4X/B^^i_PZS)'-"?NQ]W+^*Nem8I[JMO`>p8R!?$Qpaai^Wa1^N(Pe?5@'1ZDFt2\uNuMk8&'&#Lm5Hg&mZE]#@3!9.N*Y4Nq>E[&IX@lRCcTN6i/fg2ZT3B-8K;.H.I?J7Fb-JELosP.W@FksaKcXjC_Cm/cXt^E[8\[^5_b^A+X?Nh$4,@\hdlPf8p0HS=u\%[d]L]8t1_XC+0p0Tr;%+R"FX7Y5SCpJuc6g/c=7ZR#[`[^*Tl4<,Uf](d>9$(mC'^>@?Lh.!02YuSAe(S?/7R]LRo80TWn,Ze(!$PtF/<X&W5"#EiA4TJrh[.:Nh3-F-&PM4)::LMTi:Q]CIDD;cEd9HCGC(B-GV,4U)8Ss2o)6($O<J.[mY_Ss^eVK@cBP-u*p.U*GmJ>Q21:(di\nekB@V+XW8/$,LXrVuZTj*J?.eX-h]D/Y9OE^3D;U%h1!]XS`daHQnr8SmBQS19U2P*-_IXQXXJUrBMVrrjJ,7YeZ]OJj;Unf8,G4XijCMR]!'9f+WLXsu)!*O0p]%+[7!cj!MLU/QXJU5_lg/ctTErWsCA>`;1>L-q"G0hInNJDH,ph+2DnU`TAmiU[o?j4n/7S:B^H%8N/$=[^:(Yc`ajH9#K2EXds!86I6!K70M1ae&6e$j)BW]b_&!$h=8q4YEVOd_`-qY0FhU]`F&e^Z6'/J/R,?=$t-De!9%[!##4$0uFoTPd$`\l$ndoJ=s3'7;,cn*jm8?5ls".Hp?:PI;gTDK^5F%,GBgUk2[pe3V+j_&0/[k,i6l;?>Q,dbk&t2fsK4d\YX'B*0BlGjtjS+@[h3/0$jdbIJu;9aqpn^f68ArVC)9OJ@E=#O#H;C"m.E3V7CGDDDm/'\o(ds6B<&S&p%&R0b\Rh.!0Jn^dFl_P)#R-CPZ@2/o=u@0:_h89<q;!Cj)fODN`CN-+OF4](/%\`V/+Q_'eo[VQ)J!d[qq]5#P\7S[s=824c/a@s5lo%O"o\P!*Y=3"E^/>lt@(*c+,pN&m6(@^)m-Yc[-e\DV=_)oobbCf+<CXrUk"@t<]?#-L?WBj],N2E&5Rj$q9P:(Kq=u;0c:_M-ek_C&b*)_LuGeV41b"Oo.kU>`MB^P\]FGQ'@%8Uck]tjQd1,`oO-rn%l,7PPJB^ON]`l?"Pnj,(d$q:kdB=9BD/PSo4i,<ILD-L56PEV2mOV*Yp)`))"<L$IZisE("e9R4deas:N1S]pf`Q:#214A&F+8Hf(6<hS>DT1rH3lFSQ*&0M+I&AZ)dmC#8DAW[^L$`%LZk2Fh!1f6Q79_;Wa?J30+Y`ffk^DqLV-WfU=AHi^+\%n5Hj/uEW2Y6JBq\K,@3bpJJ9mQE><6AlhZVt/G&3>CDeaRhq$Xb<iYo,o]OTG,b&POuiu4+`(:8XT\ht]=N.a?r/DWO,K";BmEs@Wmfd>q#^qFO(WV[;QX0K+K3G;D2e22OWs$.?2dWV&Y9XriZ7;e-ZECNjG[dB^dr]em"4@5#i,Jn,2bV8JH<!rsV&[2Mq]:;Y48rTi@:ns]##Lm04'GGup"hqDQ*bd5+R#.]5-&a*t9uk$@qj1eQg!GK231Ls4hutCNiDrFUJM7];Hbd<&%=oX\FS,l.3dG_7Lh>0H?eZVUP;g[\60JY#-"\Gj)iet1dqRtiKTQPm"7BGHX_m;5hSJqA`\1hXOST,6Xf0-rKP/&t7.I_(NRY&Rda2Sq_Km1Ud`sgrMUco(f>>'XjZs`?J3>T4(S[Jr!g?u#/WYf#4.q,ZW:b@**\?@U*hTJ^C#qXM)$pB^C&+@rib@eRUNG2b#[nt[p;#ltA+sO,F$.)%d-/T!,<@%m:QE=t-u8iQ1H&r>>'\I-7T)@TrN?G*@NR`'>DEkmHp]g)8oY'k@\hH#dY*8VF=e16f<8Pb3;pVklbE.lr19c5:^fh^qB`j`Hsh-9C!(jI9Qm>uU^o>IIlHG%;@APdCRgMT9!&$ln%\nGd]alN]f&1r?HVs$=?JH-[hpPE.r5"Rl0+QiP4jOU]/CqkL1/NL*9t1R6:MZnclgA^d;D-ZQ'>@j`P.6R^8rk];prg@2DA%<plE2gc`*$h]+Ab!!@p?=3(%>N8TbRNVPtUZ].DI^eP2Mkc,@PRa5\1#El>c/^ra^?b0%l^h#,a*>E^C.qW=8c_SR][?L@.I>ISL(A4B$XOA]\LV5<8qs7f)_;q%D4+CM"UF6?;i4ScVX^>$)5S'9T;@=J+@\&!\%NuL%G_hSa6',_[%@:93-T^s]YZ0qdV#9nBYfKg?G]jNPBjs,(>q.79e96l<JH"d3ON^kHd)B'!/RJBF=j,BY9AjTfsF+^?cPm<jfUd+gms(*\@=U97V@Rb-:Q<o,Z7QQ"rpmO('Zee\^<PV-1%j$Dic'pX2)]RDYe,WADkC<IY8i^=sK\"`*o()@drU"NAhnGA9@>p?Fp[8W(2Dd8grU54h.k?gd*VrZ]4E\6Ue'es>W'5\.Li0c5\EqtZ%k_J>S/E7b$Q#M1TnJQX$O.jSG4b3AT1a..51XJ9^sG8a,#Ar+^gg"dk@+\?k%^^n%@pn&J,d]a;.F5#mFAQp]`QqlgQO!\qXs0`IJ`^g=")7C^dtY9;o`bMHp2-l@%5K756FDA,`8k5ZTEU3Zuc_/O`1V*VG+OHor<-$?[_TI9+0k]lhU/80X?:gm-O)$,=fVD$`$t<FtLZ1ktcdq('^e>WsL#M(Q@4Y4mAR"Y)@8(,j57)Hko/=JZeNq^g_h(dSKtj>G6sH9gL-Dl$rW_2j5G2F2LZi)eq5^9<Z.I4Aoa%je5%s7Z8/b!u64KT0<X9+uaAm`8Da%(jY^D&.,hAX/7\9R2P)i",Q1/h7G*4MA7X0@R`[u#U?;hN8EZ@U<q\Ro(!pSdDcV1(to/hf`dFinIdU%RsQqj6]rpN:,(*\s4;HXoo,l@@%3;8]QjT_'jR7iFUD94PfH<B:7R\.BbKWCTZ;U!p?p`ul'R'SK$g>>C9fUR"F]P(@EN&cQ^?<Y%3+6bl`\'Ps8G.iMEi7ON!*<'&11Y43_:/[]jUIbltllPE;SK<'mYCc0I>GOXgLSbOt$NA,VHnk,Gh<9)]K`K`aiLdOe88LJ<?(af`ic@2f>.BM$]X(mZruc@<V"i0kA@eZ"(hKR;JT;(adqgfDn2\7`$t95!D/`Ojjb.mrCYk^t>3`$]<R7VZ^?]EY=Ci2?ZJV32/k@8*D(S`$KM@oq+LY_!#&ccTFV`XYD&+J,W;]m8c4$CI;.M.h.?g%<RDg%c;N1BgI%Q_FOgrJ^M)QT6g]U>%LtQAu#ZM3c3`F^ACAuE[lf=0[f\X'55:hb'HbidTc>i7N+1$QmiJuKnYt]8Dh8I?%-KVh`7<UoD&c+Tr7!0q"hkFE_XZT(coK(f^ce[UG">7J[U-W])j`/pN&HTG%dYdYQ1=F3>I0#&sj`"7)0i\]kd(j-bqjY*IbK"G@,_l)_YntaDO9\M+\CL,%(q?hR3C3;n<cqiBEUb=#Zf<6nP!n-&fbg#U9qc#=e1!Q6]<E+.3#+A![#AD=)J95o>GO&4RjO%uf?[EOcq8dF`uNBCBVuAL%P\L"bjdShLeDcn.`PWI6%;=M9%R_hSc]@b7bg\E%O538)s:jQG^,>SjI)9l!9eq447;gP!tdKK1?GOU>Dk(,Hkt>LC2%+)0t+Rtra2\'Q]rlD]3-DLk#8p)&W*kQE-Xm7,r^9fXY?D/7boV10(c,]821N:.55Q"_aK%Zjt.q&6W$FS+eE/R,[!7<!3bs8MuUU:@^X`/##"Npk'*_;VGu^4Oe!/mSgC1iVBg2/Cb[)B)A@3:Y1Y0@C"jY"bBD=^,*_82kGAJ/EKSpH<lsTXtaAKeT*"7/LTT1O""c7W-/fbGc$A_hScok0:4D,:=j/,W8AI2H-$3RFTg:]RB[#e>Q7609h3M-SQYS#R1\S0REA)O;ouQ8kR71@Da5bq!mC<QF=4[BHM>J#-P`>p06n@*!;AKR5;lON832n;$S=;[m.[ScO^#/PgFaOl(I,!bEoiN\B*uA#g%9s@n(cB?@sHL^L>g7dSHbei/Ee/)N*n4H6`Q#,UF="KD(Ga]mBuk3aBn$59DLa^O@1:'BA<?.-eqf-o$h*5Q0%qh77S3Xqr]qLsFj4!4gI_>eYS'%B-'?M=J7N\tDOo?,-X5VjE_d>V'$`";t'^q=5j$+^E6Y0`t9OD/F,_91qN8J@E!Hr!SJaD8hSA)?cK4)R-3?C&%2VLljlLqLgd#6q'QCp=jM)iSib#G;!M`-R0i<#Z1B.Ci+#d!iQ:EN1*2HrDQWnJWQ"j]?88goQ8]f?!Fsd0p7_$"s`r>(1B[YnZ`Qmd_3)'-T&n8b#m:ck^/9,&i=AG#sNG*OC??5A#dJc`7:niT0%6l,_qLi/:jsPI=2];0EAX9?+NFj=dkHicV(J-TE"_Z&Qcbm"!iF*TOPROr%EQq$]+*.ird_aKS7!a731q#l@VqCe:OW^JQ&IAg"Y8VCWM)EWN`T<`cs1rq>U9[@/pTg^t"&B%u-!2M\_jDF%3a25QCQ*NK&qi(t:+bm10mI)&^P0',WCEUa)"$n%q/K+M=h>N'bq,mq];UF<h(2>+7Y#,D;3/"V'0U>.&)[I&c\h![mp:b:fNN0ube#kE1:*J-;Z@K3Xh4RHPP+$&SfD!\FVq!-LOMN9?I/=&Mp/1->!uf3_1OLHm:RM1>Ki?]0f!6t13i5Q\_TaNu4R^dt+KTkhkC:`VBW83H&>fB=h@2K1*A,n,$oT1^4M8[got_(bLj[)pWYrsTeiZ8of&UNZm4ImUX<O!:uZH_cHO'"@)Zp5pI,:^;A9:^E#Hcqm"r@u5^8pO>[;,aDmcA9JU*@mCWF!R(WJ&%K,lldf-EI0G<YSl__LO[*^Rp\.1?BG=EN/=B7a]MQJ'(GCk-3RFdV*uOR!)?nCVn`*,aKTRKLU=M"S1P8_[Mj5eo@R^FtlbEJs^L?1Mo,YXl@'-QB\f-JVh>V,&C!p0(4C)?&+R#:c<&tl0.l=SR5>jkTKH'Z]5@,2(Fk6QV@"XT;eZj!p81#S?]^UO&/u1t`\*YEV#7`Bp1b#p=?09aGImrmp-/^!OVF!)natT!RUEb2!)b)e`/3Fs:O&-<#_K]CL6:QR)[^EMsoRd>W6<q!._ZhM/*cUZ/`@u1dM2?e5JRj:M8kM^O7D^k8)`MY&Xc]-DgqS>g8.SFM)%#$ahu<$#d%F#MjlPU1B$Gos#-mdjnjEgt[R%)"Bd'=:P8!oZgt^[Mk-h]VHH?M+[Ui(*SKMDf/tlLMrrf>&8-:i/qg'-n$[^>LN23sE1:'^%LB4.g(t-Ttq.CYp]dk_=2!W5)(bBY[N69Mg>+82`;NR5!OqpBtp6!q.>=U=UoHSM#WA;uoJDT/>oKqUjPGn_6UN^]?7T'\KOU)6(7Gm<7KTWbIoGOd=PXV7oJ:9p(M)4cA7Ofi960hdE(5/>V!I>IP/",^U3X<Mm>b\d>)7n';!WmKHqA%`MV<]7_6pO#14Wo\O5X:u*+H/]R5bL7_N'oorTKUX.7Zr$nNduYQ:I<NXdlgYA;EM2rWO+5bOc%[?gdoCI['R/?a?l]N[Oafr<jN?,ddgS_K4nI@j?^/T(;`UIej:EGgM.lBU2@=%"="Ki&.fBa&.n%EU_j#@/d3_bl#rl#=tL^n_8rbgc,Ds`9%G2m2"a%'0;"st%mnUFn[@GSQC_.I#?>,'DpYV&d^Ko]Y23?XDmAgT8sZZHk+Z4ed8ik?TgC>iN7.7]W^?Ot9+Sm*("13+C+^fJ;8*B,C!u7V6+90QV\(B0g8`[ISVrIW<,QFcC?\Uk4fUge]s!.[#R[`b=G:iL2BG7I0mcnK?apHNr':[)WC"2W?9XJYOSM`$de6S[*n;I*MiB2cGagju72fu,Lg&X@UO36sC90`_(E3l/0>/:)pk'8?GS##2&Wp&-P$'YhTSk0LUqCm=WK99F76263&(75M<iqZ/<MXXMC2>MK)TC<CX?nraWt3'j>B*]%nh$_d("0tnkbY3d`j83/,-M/r,btdToVh]E4G_-5[&:;[q)Bj*dA%KC[MJ,UH<Q46<V5JeHMJ]39uf^<b!1oP]FfF'P^eeO5l-I2$Rt]?8]S&=$[WE$8Bg@O-rZ7C<QM8BQaOnN)0l\47MUe&TpN/8LfEhqYZ_DtQWi7%bf9ZM="&NZ?K)LO5rtD@6E4(E]O^;U&:1uI1`$BsW)h(`HMC./=r$UkWVo-HnJZ<rDJE%G$=tCr56q8j!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!C:)0rs)S2lfe~>endstream
endobj
689 0 obj
<<
/Contents 1108 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] /XObject <<
/FormXob.dbcd17293d72fd6a84d0d10c901d1d9c 688 0 R
>>
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
690 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceRGB /Filter [ /ASCII85Decode /FlateDecode ] /Height 250 /Length 19990 /SMask 691 0 R 
  /Subtype /Image /Type /XObject /Width 375
>>
stream
Gb"/lG>o:>qT![&n,31[SU6Ckk2n!Lf:0^]0m7'V7#abpRUW#2'GF1l8MilbN1&LmZ779rJcul()^omG"tH:u5S+Jm.FNS3*Tm+?]Z[PI0$?/=!M7W*_jPr9STgZ.Ge^oaH$CAr&-P91"@3S%5nF/b&-P91"@3S%6"J5=:LZ"H-a?D571c8c@9d$Do:XAO#\"5pMN%NpJfoju[+JZ!;.QKHJ,A!X?:>F$ULRG"6bcE-]#[FXdk,f$JfsFgMn:c+!eMVK+G`>-&fH>8,U8XPA.SmK5\,h7am^WQ@ACmd88#`tmZR8,LeLN;9gV05FGC',&72]F^2O3h'BCAn:]YWYEuQ#9g<-#<#$qaF&72]F%7(Q;+s2quJ+Oa`@0l@Sn="32"bPAA=c#gV=^k/fa_N(@M;#Q;;tj0AD?HQQfU5M*RRfqXebSEHe2c.HO"IuW;i/`aYJ8rLV+mF;Q'[i,<E`j@id_%3bd@I?#&/:3_N8:%[Drg+Mp/lJ;i-GF\om>)S"$IB=BAR:j;&FIUlupX$ouPF]i0d3hu<=.q!%895CWP*))GmsldtU+YJ,U[k*@T'rqCpBGMp8fDnYfZai:XQaH7\L!s=lC?Tqr;#S<3g^]0nt8OGg2"qMb;HM$Dcs88(:%&hG'Z"&QGgq7nG;J+7HIHJ`knkaSLfs>>Yq3hRu6XFp)m<Bh]bj3+.4)\8L_!TB0;%f9L?+Qi/VUjANK3!Mcn5$K'i&gK$oH`Vqq>'(SFMl;F$Vgm8)AE_o!%3rN5X2<TZ4]oA@q3VR6&)@;Vnu#&;,R)Uh.peAoj8@ug'+-!X&KI"\`_DN*g7=#:h366R>DS)P*@&;pu0Sn6i<,lo0<9H5>k#9`/,/SUk)!1f</DMS=Di$?@;93E[`1VJqsg\JcnB2+[_"^huEWs\I+\/Za3qB>a?pD@dl5eUg3u#EfQPi`Vl!%GCed[KhHGmH%!@D1JKV=RFX_<R1DO[OJMgPo?V;lDZ#\B6a?a>5'cS,k>G2Ui*7j3=BP@H9.uF.P/omL-jd8=TZ$s67BWe"]mA_YN?D%.*]tTl-o+?j!^u0#o4BsDF>H(HkY*Ypb^5h_RpH/R$kX@jLIc3#-'84"!Kj@[W$j5L"[)l@iPk3tl!aP`f3^pVIf&NAp$:5IahE3#V!g)i.gtDD6q53$'H';nA///Q/XD2$Sb-_Qr>%3c%Qb:u%b&lmA8X/tc0@-Za:OJRG'<<*YFdZ@/)<P@FK]#a-;9d\GOA][1=ErkHmBmL)]K1-1MYDfKgMJ]n)VTSTt@+1",[L26`rgiJSr]f(Sm6YRQ>DYGlr^GJ/J_4qGAW`\7`.YQV_5R5^@X#c^m:XMKBXLFKj@b3X-DgB7OkN4;afV^-Kf&0%*1#!\\_f2Mn!%(q.3DKql_r#+$uMIdtAn2f79EJ#O[+-IQ<^I4l$4jJTnh3pEe/ee+%TZ"Z+DoQcPo)Kf`,C;-J.#La&NOg-^5j>@P8WMltPMSJh!X<!n?bqG*YJQ]O'_u1NK?(n$?"HcicjD(_PlesEt/V>6WB0+.M,1_rV;FRU,SN6;\QD$?^+!*7r3^DCN;S)&Z<U__%2+C1]-M:9.2na2+GfK%p[BGe,-=T.6A_!SG4._@Fm:ZB<jPFjurHI@16t@o<U_]1p6b;I+j[)RZ\s/DGPaGZeHK!HPpsi-e^LX-f'H%$.6>gM&`@Lc/A^8#_BQg&G)5HWJLH>CQY$7!:C^2JdPibLs+6Sk8kF&fEfWspCM^"peXgpbpA.ZZbA;ppVmO%)*lEd?I#M*sGQUI]8F^iS[X,qdXRo2eV.'TRfF%&Q*>BGa;(F#VTX4OIXVk<D:ic<tm!B?K'B?p&-a'7TO-o-U8A/&$7,3+,"\Q,7J1mT$p#*)!6-]!_"<7X[l66W2*e=+7VDoq2WeY:,U2bNE-$$$Rp#o"8Qbt6,.I@]*LM`LqIi-(k1>sme3rA&5P)+Jn1?$#]+FoH/Uh[(a><S!CQRE4mB`2i"]h3)c"FR7bkmt:u\B$QnQ,-uXjmL^[5$m%P+P>=@c*igRV+X2!hb*?\iVNH4RI=8"hT5M=O-o-U8m+f;j.X2-k06_`2gVoX?0E4m]$#%Lha!9">/)F.idMA5_e=egkY"ma`YYd8R8?&f%k!<U99QQu@7P7gf1)D?fhZoGhE4[8[6:(kd*!g"O>[6'b="b,K]Y$@IM5G!"B4kOHA/Z@)qXs0@P9Z$4IJMuk`79L*TZA6&Eb`3aWqG>K2qYcjqXja\(#-H!Y(aUBC$%QqO`@54!84p-NiM+<=i3C>jb#)q)1?ALd1]FmL:=e9Ctc7QAQa'QqsV:PQimNpN#atqPc&m&mL'g`jRkoq(E5RX2f:/t/C\YI@kfAeLl%XBr_oii#O!&6/Nc%sr%"TW.=AeFofD\6'K\iiB?1\/N``;bdW0=sZ+.DV4a-6GJ]MdM8'Zt4J8U$qLVlV@2`FPJhN5gSVl(%I5((D2*D;_O[>>bL1'fP9JVd'9_--1ee[J=Rq1;!R)DL&#31M!]8m\]i%mNE^]rNeAC=ONo-dXr9aFo;&%N71&U8"BXUni5'hB4/k4S)6iG'6SSc,>GPRhHZIb*4>\]690kZH[tL'H&0sEGi@n`g@G(c1DuRdtJ8>S>6;Bd"Xt1pL;hTl!/G+0.*]YC>EKMOni;Y(Q+/SOFc;5hgK_*]QkVHcp!$#bkU_g(G/g$6tD;t3AP@!-sPAT,(lDsQV'[.;.bZICtn4-:sJ/P=+$oN-<0fZ5TAFM3-d`Bm<+I1:;ir]q_tm!.+KD;V^[-6$U:O<2SHf\ho]SS.ZpupT7?icc^m;..S[@TM:df?\!(\bUJ&/\Ems$-AD9i)/E<=MQruO=Z!OC(nQ0R@_lE=Ug"]4Ao[J,o*u&&+4e5_$['+'kf>,Ep[SM+iWulKT6qD&eSQ/T]4Glg*$m.Z\gph?(<E?48cpjV1M:e""pG5?UiNeesF*XFmn"W)t?iFCl?a]bbA?LE,_1jiV;I:p9SqffI"Ufr(P;oOi,q<E)@e0lj&8>pV(7;R`^`Y$\G,CJ9-=R*dO+8W6QeWRMb<pY_QE99Sk8n9^6g!+D1H)UK)!(d0*d=%`%iS._=Lbi^B<S\dpm\t.Nq+_g<[)$nYhf!S]HE(?Er0jJ1pWR9CLC(=6>fqEl:_recb^D[iM4H(bE0%moS<rn3$`h9/Ig@,^B%7GRFurTf]63+&Xe<*K\YA<%]hJUC@Hh<]5j^rE\f=LMD4Uu@aF:cC"cYe+([eCs$A.cpJ"Z^JWp9""5qt^JMo\2eKW@lWijk\Y]t6Xf;YD)lg+44-Ejf!k<UF?I_#?a233r_O3#i#e3F1rma/`W_J?U1(QQRiCG@jBgttK<R@S#7^``:rmAomDqn8pa5:^HXqQXKcUl8dnPHig/PiZ]+aX.)^=\XF<F3MREa+82M-7nQ=rHEB>a(>XG2u#M@pi5$/7q<1,UQUjC2LL4^1l1E5/I_PpV8!56alg5F?1+JYq7!,-EU:lES`Ac!%k6tKo./o$6Td&)Cr<CM]ReS;=Y'54PIdQq`eShDE$3Ul+A0*5aG1sl+KYumP6Z&nTOHc+-'iqK[*BI%@u]c#1._rOURbbJ9-PsCb834kTC9G3W><Cl+d@8i1*CB%gagcTE.7e87Mn2q$>G=d.B]b_b.RO84j8(fBab[n"DLj[du)5Va6uO9i8a9t@7#T7h.<Eti>28/BZuESGX>s'\HOpK9SoDQ?gPA#;#RO7-pF=[rR!ru7lB1froh/j7q]`gX12f8KXuNuO)mps1N.rPG,g'@1'l=.KI.L#Aa`9_)GD15`JQkc:=NR8X+"BW=o]phM2^X&-g';^/J:2B8g71_lu.JFa<-DuGD"Q\VE_X2j\>/h?a4IhEZ_SMTdG"+FPguBUEU`8BVee]!C[2Y>*V11o*!CoC`fV63JgUO:i9M%YD$hM%Y(EWMr8+Z4dV,JOp6t[:]aJuBS#Z4PHB1:erms5XDZs+,7L6*Oh7J>2G%ecWc.>'AoH%%G!q)V]<1Y@HD&>%8?6be5$+cB-]Ye*UH^!d&Z7RJ;s]4%+SIZJM+g=Wj(8]FAt<9tiWTnem+t(s''>u``g-OTgbi$@7V^KK\2*Q<E-CFcLUV.#[Y@&06',+n19IK&Fd?"r`CeYek!O0\J(l"98!lp2\jNTLHhA[4eUm7Sb<2pt_UUFA-c1qUmWB[s7C%P?Hu<5<_h5tbNcUEpV"l:GVHNd(4>)L3jJRI)'jfJl-o)(VWgjJlSZc9N%C9;J`YWX@kCe0O[6d5l5<T)]C"9DZ.l798Dn<-*T+uo=ZjZ\uh*A-_ZMf^(9j29hDN,b1d2oQr^g.>4S/3u<Pd""Bmq\chLlf"d[`T!D+Wo$T#gslIAcnG_-:\-l-[f:LM!J_/BO`dkDmK47B]6&V#sTqY5I'an(Nj>hC.To,1PtLIn90tOcctET\AaJ_d^IN[J@OEj<fjm#aP'hF4a;*SJ;mpD)(Z=:^):e8c=;Ed?NdV]B>W)oDnhE?;VA'GWMuru;^H\9]X`#/Bg2ldZKhTA_]PK/^<BfWK`aR2\Gq^S[1Q39]-G3N8*H#mdWlpu[UU!Hnt\L5!\3#78(NO[8*Q(M\UX,Bg;7?>GKIA9kb%0n,(nO3])%.FeEQp<=%MGAWE^+T^:$;+DUjN.<7V>=7-ZD&0DY=::@=gjn=Z]1a'Ol`Uu[lW661gi`*:`$[]`/8lCMrC4]#D/[ofUBQHC3Ee!*?E(:QQ/<52.*m)\A$_RUaEc@u7TW(e`8S;gm`Gq9UHrT8u4,=ah"F+p:.+SN`03/..gY7EeGd*T"\rfS'\_DP<$i+pp_nk,s#0X"!Q"065'%E=p?XJtMTGtX,+ii::nRA<bV6>i4Sh3;\03G%!Pl(5Z!ptY`BL6KgdL"q1!'1lO^B]fn:hdmf)Eg]9R)nr1h/.`]Z@koWnN0IHm\/U%,*g_7,OT4HpIfl=.d&J66Y/2$3htGWJY59ADBlQdeJZW"FO"P+Q%2p2T;s4u7iqDEF@da'a,E'[arAPB3Ael?0$/IEkAl:bGO$$9fp-E'Ne@0>3;\[No.s#!S=7ruW>IK'm,1G=<$asRW3O@V^8K)n,nY5#a8rqCB6Sep1(0rg69@QR/lkJ7H$Gf5WIas-cK-K=rO\Y2UY`M>Ei8.+VDQpM+`-fpeFSDEK7t[WMTRh39RIH#\Aa[8Tcm#t3E]TeMR^R%)k"Af8`--(P!bR:J^;B+"M8;B?5u;)'K><!"ls^op`u`pA$>S,r1%n,bVU<aX3Q&LrapIZ!0uqePI24L0<ld]#[ae%0&YH2W\7kZr:rpo^?,+*_O6PFiMCfnu[XP2\I>&R=_of(cM[`B5aPgGr5I>rg1a4]O<OKQb>7]@P994jl'YfFVct/]]o*T1h<JM[&r\[Eg16F:H-H"jX2I[]&mb$*=RHMj1:pWVh#;a:@+J1&?>[lP5CImm)fd<GZ2XdaALKDPKX]hUu=cg&hCub?kn-g[_I5Eo$IKh)8E0getU_[Q_h9u#Ck=$C17X=p)A9gOP8g&-Qbd]?MW(0[iG5@&We/jiU%kIS+=F^Qb1:@6Q"u-C_DJLjgZsf@m\#Z4.^Il&_;*)K!nXL01%]eXhrnu-9s$nYsJ@Y$>B,,L6+$/ELT__O@k@f,$7&$Q]rc(\I:.Yiml5uf<60g%Dhcr-rAdK>UMY3e<F68`g"Z!9ZX<"(>eOJ7WXTXLi+uc:u;U=88RhYYHiD@W<b65dZ?M$!CQDdf'ca_?.CgQA%i/F,"]$)M?`ak>[Z+Wpg+(Q-e-KgYXag*.Ohrs6VroP5EAC_Lu)[B2M&;7,T?*%#ZW\-Os/&W4B!a!,kMLACYTC$s:P^C]@rkc+/%XL]jfb%#99W`.ulGVkM5%a\`AL8K*8p7oI(j^SHI.s)5olGj5jbL.Z1Ug-1^NB<Yg@a)<S(M3p-o-V6+E`GU]qAJ7>%(R!ZmYD9SX:#=TuOd'8uQW]gje,C:MhU;Sp+*WfHF%Hb`aRC/1*9U,aRidc+Nr:0jtLR)Daib!:9?S:,^O$!?3f&:U/#_XTV&sOW2o?2b;a=(?A[oE*S,sg$<FR##UuQr&r$m9+Ne!\/,Y(dqp]m&(pt"R0eABQ=q=VUI"7YM>>P.ab,rUJB]fbIpntEo.6GKE+uE;6mBN[RSBAh,q(O)gpkD=HCGpDWi(]sEO1NQYJh@H!h9XUDJE%uf2$Va,Niu"#IB==1UujCl&VN=hMfcTc8.+W@VS4)Y%n7$bjOt]O(\?80p<l,G%MJ)K_q`;&(j1^bZimODol'SJu`d5$!rD^ge0lpA?/4)",[L2.iuY9/t4II'1fq5_PI(+h"A*8AR'/p]D`*$E0JA!F1Y(E9,Z85277QL11[B.&F,&T_kE8P?@uH;MCN_rL$5[E:["Q>O3G$VPF,Pic47P.%f],B82$74F(S-P]bI_4\"mK"\77kpkUR0?A.T]CYN=!Q1,cGT^YmB/S@RWaF%4Xg;srqQ3Y,4PX\cL@"(N$_g*4Fmc(:^n@CiA4ZK;ue"k'+'d??V,Y/h/[9$,\%s$1$OpX8*8o7*"#^ikga:#u(UWK(Iq^:X*6dAsGB<1YHT0&OCDo=f&OM@<rEh!Z(a87j&-\@GEt??>V42f=D7XaAkt\Z<8X6,f*HmjN>sWH?rF0+\8l?0Ds@#1Mrj/?^Bre5nQ6#r0ohB46_-XXh$WjS1">NbEU/&+d7']77V1VU,1.EAi3I25&#5[\C=$DAI-5KXE<PCq9O*]9O327[j#6@s=PI>4X_O<1'Cp?=]^/1J=_#f(=cHV7bO3BqS]#Gp#pN.?>qDc>0=:1c-0`f>qNXGg00iYdqjQij@eOo/\=D]YZOX*HIEj;u:@&XOmQ?TKa_^op#b115JYTb%26K3P^&Gb!#KmoC\:`Ka;?@Cp2uAc?BY&luCAO;)X913^^/9NU(S-h7)*`ic@]o`@C,s]_ebI>(bpajEOX]9RUl\g;N@eTudJI(r>I,i0^@<WA.=P<I:7(+q4/6]]>p3Uc14MBfG-el2ZZ`>JPBp^e>kl=<AspQfF`WG$]0$";D`l-ChiCd?coeTu%[N%TTnP`eD/ERGgVb$<:\qF's<#0r[d@Z9Xg=^25/jKB#,6G*4k0ob3gQZPnUB6Xpc%7q`3o20HU31D@`m^n;2sj)UVFYGAHn>/lki>=SHlHt*F?6@*(Z3G)_OgRf;\@^Us3b]_]9MVWC:B%&<A]#tQ?'=#14d&LGuESi^4%$)U]JUg2nr(6dD^/3adbYGCD*%8arSsI:-psIYXppaYc1bH66Dj1sAV\lupE'B6OkYIb"'-Rd4@n"RH1K;!%bb@]X/T/nI(7tt)*;_MT_nfQ6g6]8F`sprZOn1U1Jcs-)iXV`nlr"B^Tc!sY/SK19)k<9kFsb*%Vi(/L+YpgCSCSBY<O1!=VY':e&S%1fBTj"e;c.D*eCtrW)8phl,u',sNVM+3Q?_$@E]iTIT[tF,KBDupWeGh1P^07U!Y#e;3Joj?Gc=\eJY16[2e8HM2"P%>_opa;VA3,GF3hn:rFh)e&aU&nAt2Tu5e@-nqPl'_oQ5X<SHOAJ1@A;NVjl"hOn-h"$c56C<.X/OkUA#]5?[\s1^=_!_`]S2_l9j2H^$+=bY>A>7Ts\W>)7#;C(2RHM"Q.m=;NKj4sau@94CVaGLiJ%?5V3Q`Oqhap*"G#S<j*XV5[IQgb.IM7X9K]>W,lmOjs6R_uM""2+e/O.PECb#(]C%>2KVXPtm(2<cS.eGd%@$Q)%)ML/<%QS.nt:qIS"jck`%sU<&G\,e"^!e_JX7Xndn]Os*#e<2C4D/e'ne$QFnT!4<E<Kbf%T`iXrdkn4LmLWc]4^Jq?_6bt#bJ`b%!AD;lC",[Lr4_n$So:kF#D=hX(8Ic@/(XT9T2mdNmT:3@fhi<G>]iXEVGVbPh<XpD>dX]54qI=4dRacYhp#&!PFt%mn![W&Pr^:_Ah8iF8K2VXKQ_N9#`XO&%P'@#b/(G-d;'^RCj(1emC?t/m7E5"(*8ftCQVRpRas#NQq6E-S^-Qf_-8"u?(ccrh*O6fC7)C7nId@i,^_BUU&8Q4kLke4ic1G8GqKr7V:'br$>Ib*0&>Uq+GMoY(UMT*DZ!!(3mZ*'uqF5%1(IFib__I[%(Rd^+NQCJ@Tp]0ZB&47`*K;7!9sKPF6cVLHmsI8T@LrEkd"uFHUM:j\'^<0Ppfi-Oj6!j/IUo`'3^ID1KOt4_apr_5PRe5!Lu^[t^BVpt`Q8D+1LZB5Cf.9k\k'u+[X/s8,\8Js!t![8j<N<V*BXglo33!<hU=%V70^"$;X[lS=]O65E,tfF0Eqo7oC*:(R/8gaB:p0W/.TuuSIYU4DW63_NaJ"XT(oi2q1[;!1\#&5Q>06?b)=1IJKC$)U`iKQ[u9XPaf:nB(%))t=C!#j%c6T%Ur=.,8hYqIaI]@m(Cic(G"F!%^.=ok2^gUVAGS"si$X@m:HZ3Zap.**ihdl'3KPtXV-EY/Mp-KZJN]X^,1a9]1ml.Tqoq#&\fO@oP7?s>d:'l-]5OkFZg9-f/=Egt-o.n1rm=(D"mT8'pH56Yp:graj?G'GZcltEDgo!$#H=:@Pr/eb-'E?:%1"+K)NfRd$fi*^8rLo5nQR<"rC/f]+dFrUkt#Da[/2h7o3S"q,_dW9TVq4i+\Zep;pWPD?@Y.$'J3,C(7!K::9r8=LhfgoQW[8oYEm3$J.uZY_:<IhbL`],lV!e#F%5g1))"TjHPL=Q$uq"h6I=GG_Xd!8iqG]uXXen-kL3YR!g2H2<u_*27`n5`BaqNH`<gTBG?abiB?e<(Z&65MkijV,C8/N$B*Sg&7R1JcDnsDAoOfF!,!"d8*?8'DI&,Ec`NEECH[t<a?%#(O9jMG<d/K@i)5S']Fp$9O6c$V*LnkafGqf`7<9@*/&ukDBLE3qLjT+@ke_tN]g\V]V5&kCcEQ,tk!2dN.\1PRe6r)EY3ah:(fM_.J+SIZJ_CQBF4rSNC>2+PVleHB(VA(Efnn\qcNqOP-fcj1rOX'a\%K,_J&<".n`^N?Y:NIhTaKu.m*F(_kO%u6]Tj"9/<`g\(ciU`pR0fT2N:a:'r:_c&Sh4%n`::AY),!kZ[9UU@SK1o,X7cl]aA3"e6]qf7'!s\B:W'l`3`!E+]j;q0b7%7/-KVn:E!8+4>)B`a3f,bq4EWlKI2SJ@O9kmAaeCaS+/HV]b,`Km$S."Sf'2_A,L4h[s*u^=R1pE_AD2L2e6QrHUB=tG+G6n+=9NNp8q1-EreJ&AWqDH]\E'U!HbfUb(r7ti1"];W;.QIA0t:G'E01&%rlcGOCK_SgQ!Q#Db9EL/Q03i$5jp+E6)UJ5m'p3[:Yg0rmTlae<gZ<rCtbtW^0J!07H6F54NQH;[P(63qU8()R<Z0t8EukT';5qb+\Q!%Ri\Hu`'C_BNSjPC;om&bh\[B=+ul0PMA"^H#TEuG3P(D$QM*^?Ma04bltUoDZ!CH7W:$rt21H)"!Jq%!kp8h"1D[?DF(<[Q6oK%Y^T(33bH.ns-7h0'Dr-ob,a<J#K`/cYR">JcUXOb@.1097D9HogW/4Z4(QsiuQ%H"e4K)DOjW0I9eP.f+'<X7^[kL&Ub.O.6U[rDPq&56BUm8u=#bF`>?$r$KV^aUrio1ge(:(5@3hTDmk]W,"9S,8&$Cr49Go>$AHH6R=:/l8D(O<-jH.$_<!5p7D*<pX.dYYjiW:FoaS3JNVO:=_/'cT`#l>-86Z;;Y.0;SNEjiBkEXO/84E.$6Gqh8V-3\t%7"@W,Kjg%NpBCf]ZmYkfmbS;"JA%W"AGSHRS5R=+n^%2+?&,'/FQ)$/J[r6%84bRli=pP-j`.745lqk#4*(eUN3[0bhfG+#=6\Vig1N&nLgO!1=$tOD785SH:au-p_WRn-JM/8etFo\<HUlL#[#eH_tEf?ULB.,TnYk:eN/22T8"uZ8<#nKS>*h229rGbq3Tlq9_SH87Hltb;09CnAue>brVf.bA-r;@&1??#)DK=j/k7CFQ1gS=ne.H%f*UH\j58OO:fbDI#Y<YP"fB$g8#1P@'+L_aTZN57+Z%fFHSW(gg@2.4C6W.QsMopJ76g>*,2fpb#il3J9@KP&5`k-kKY6]-Kqf>V3X=.ucO'8;,jH?nF.jQ0&*JBg]B+EV/VQW!b_pI]T%0KhS7:m5CO;K[a88`k6TOBfTcF5U).@&"YDd]_n.SML/o#d[QH`h/r##Hp-gIA3Y1]O^s'i_!^$GV9`cFHc326R`O[SWEJr5_R/`Or]Ijlr(-,K_QCPYTY.&Yi5c(2HI4f=P(C\K9uCIcZPBqqT_OY+$o01=^+OB&,i>.U*C.GQ!AeoO?=_PlR=-7,ScDt,SL#GP.SF"k6=:rBFhip+/t"o(VI9OX'+@ZAYAnZ(Ws-ri"qE@XHNGVL5V1^VsgIua-"lf1@A:Cpt6B<+@#*an`"XKR9g\UXG@W-N60]Z'H*D3dB]W<=^NVKi88<>;$C,!Y#,',m@6D,$-V'Q\:85E`6@7R"9foJmjS-S#1pOd*.(iU`#6ct:fa,o<_YVU\`.oM6(Mm@OThcrf`C0uMj5d?r.(;gYm/o]P.[:j8\P&_;ILS2A:1bMm?MYj[UArJ^!@q5CQZZNdOJN-<f]"/LaBurm`C_\QiQ=M8l$/Po;fJcNd5%#6T[1S1*$\,6Au=mOMh#dN3mLU4uL6KSk;I0-].iOi;\6<pO),N?VN(9._U);lK89A%$7G&[MLB<^RL-V2XMj3&F'PnK76ZIP4HbE3##7lh[koR#Zll_(-#nTS]K1GApUUG?S5kAl.c0Q/XdK?O?ZmQ@r:7:&BO4+YV[##9`h-#[eUs^Gr99uCn\U`E"dC\p7kA8<\!FSKu)Ht9;,+EC_^N\_gir[OWYTU##Rl:O]f!a&d^'!LW?Zp-^YF@SkF:MCU!Y5%ei;eHOHDV,Z\2a$83%.%XF=[#JK\dcIBrOT2R5Mf@KEQ5Sa:[aLtsS?Im?J>Wf?Rrf"4lDT3V,RCptJ06c;k0hsRI8Y5Uh@N-.b;H_K./`uV`\?Mm0]OlkA'Nl97/InmQML#ZQF"SZSjpu=tTZD4#aDU4Ue>\VN;;&Dn]9CoSAA--H9'/5l&^I51J,=4,oQmeQIV3-c?gkNM%BF+%jF+Bm&.1/[*3$KR'P[J*-T8I>jY`Jf0S$b`q,jk[>Z##qhl0a[>[?*#K>`M/=4^%g"![1SO`#r0[P(Hf3YGstqq&![hOrZF*omJs%XLo]D*0haS;(d<_<-@QA[r-=h,Uk*Pr1/g;A1Bme6Q+U((ellYA\+%o/:m@G5jQ#F>E?TRuuLcLp$";7V.\cLY\C*_dmh]@4&'o<%X&=?_4:MCdA<._h0/^OZ;XuD6<[!]n$LZBE)D8]4kT1PpW'"Y8IXp)$fW/e:R7<aT_3N^W\i-0]c@VI#ZbMK\WlL@Rj+o>%G2k1aaE-#c2B$)b@OZY<#psi-ijuBIiVX\-eZEqI,a&'Ub!"DL,oKqROLfa@]WSif=Z]HE3Or)`-2VPa)2YBPK@c!$mB-q2PFKIumt>SJnfJ`HmYtT$[o6-tif!PR.ALk..l^Y%p(A()^i;ads#[8"dqF(j6,%PNA[gnKGN.8FJ!r'mr9_`snbMDW6,2YU;+JJfSm")*d"1GT_.q0@^]-lPe*;lRk=EH^Q0(;@?([fYpIJocg/*:dVnqI'GPVJ)G2dqLT.a1lerEqI68g(c]C-aE/PN;ePC+^QYc_^r+B*iX/T9T;^kY9o.<JaG'L/,]HOdl4gdt\90:3Ub<5)T+^cgh;qsZZKXYN3m%ErUqAH-'Ao?#'H(&9>?V3D'$K^6+U6j9*5+6cHaD<>qO?`,NGq(0qi-XOS"Xoaa>Wj+KK]cHId]aUWYr(p-?u?h%3a_->Zi:gr:tTl%4M-2o3Ps2/,GQ"3Z]\)Z@[>([d;l(b#P)IAT<9!$CU\aH>aAj-nWB&1=Xi5%&5ql=9#-Z^Ba"e2dOm=a\N+U[en*21Wc2ZL*D8;"cA8?YblJ-]Lb&XKk`!4(KO'?dfp3[FLu.3d:R]B&GoYNjp=oL`H.:SBj;/ZH>5Aj=.*P466u<]oZVtn]/m/bg,g]<Z@Z%jbBinI-s8hgZC9T/"+@H(!o4/`hl&*3?=f:/a%^/f`hr:EcRg-T2`Md&ciCF]+Ru0"((4qG3\r0>o"jKT-E5M(i[p#@ZZVHKhE=qafpctrlKZD?>c0)150bUj`f*Jn2^VghMFa7GL9X)fZ[IOe:-=#hq*5iu7M+$7Oc^11`9=8t>h=<4j%)dQ>1*>=M'h)nI01jQ9OVtb=eB6o17rGnoMn+f>dDgo<STfs\ECV+Y*K9,B[s9q%1V1<,[m#oJsZk%N-p/E^-oA.;mkrWq8V8i;0g>HH9_Tk3scBEq%@2_&.C=1Ks9,e];3lAGrp3F&/&9[Ri!J;d[@,@Jr@j+BQenP08=Rd:h8VhfbpU=@<Cj[P-T_3[:cOMF128ujHI+q`N`7a]bP-L?M4_%Isok4])%-hbQQo;AY&,@DN/YbaAEduk6a"/h@Y6KLtUG!a"MbYZO*DF7Je?d@J2%Aa!<3U+k=4C85j/]dd`jka0Ndc^GQUQ]U28.idcu_lA+<9I,`83"9chpi.$_(PJ2L)`J#P-(7U,=_$oPff3F+VW?7DL-0Cc2[BG1.I%ae<7)knO!\&f0jCKstgY!JI:,22RF3d36S8*%8AIXLZ865O%gqO!WQaZF$CW]..-Pgfj9G*]TY%iS5UJ5-4DN#DUnOr!/PKX7\Cp,8pB/46RpmsMbWdbDtb9r/VR9V\M;\SK'gDV#k1K-j.BA\?BiM-sJ>2:KB[1N$[oBr"Xp=7YEPH62Tl($BoA@*:-/W,LO)2#OmLi!dn.de0f8G&`ROT97Pa",[0*WGSKfd/"5;l.+%m7>Y;I*U7\1H\(gS:[PAGN/ikHU;,;le@)S+.Ug&#^/b=\ENuZbej?',CqEa?CVb1(F)*W@9Kc0):!`[MBGBK^%CL9,6,5DD[^Tf*<B<q]'+4V)IoG<(<I%M6r2.Q&q!69<Ri/&S)SS`)D;:`JtEY@hRC<_,Fo5n77KKR7E-muY.=B9HVp4b*_(E[M9^^6`*oNbggN]F,1AoQfc&4infeJ)Rc].;cWalf.GlEo?9<0(C&b&rdUd^C5=O90f!f13&olj]FHU^&5to_:*md?5Ac&*0-N<'YN4hJN-f[#D87_UNZV<V>ao3MucU`W,Ucm4T_DQ,qM+fEl0<EMlS@A69+nm'Qq<3SU0ctI*7UJOTou%PuiDF-1roSjRV"0Zs*q&[-]McQn5KJX.rK/?\d"TU%rqhu/Bd@gTN#aC$2<"AWG6I&c/,r0X1/6ol4#T#Q+=;jPc5;s@7h?nId#tXK-o-A4%nYmUB7q.m8]k<a4X;Jk)s.$Y@McS$X3lj&1tf8(dNdbG+eS)3m-O\C%YqXBZ\1Zh?\rD&.b/Gc15NoBaL!,iGJj6r(e1K0cZdt;PP!44+i`NB@UNb,Uo9*`N@4\'PJl;FK`c,3/JmhfZsEls5EpYka<27N,1D9O\J<=IL5LGu^(Qc<9%(UTKG]XGW>"?me9)snJVi*nV/V-P^_>Jh?t[r)(P8"bMG+uKHi8[Un<1,_BuN7Bj>qS8[5gj7\OqYO'\c2LklEl%A.E1+:DT9%ht#K:#<Rc(///u?1/MN8OGeR:P/q1D9U4%a.YR;%L[QLR=4b;DBqsSpZ\j*aKJeU!qo,f<5?;S92Ch5K_acWtZuC2U*M.t,4A]SBO:+7=1sHm*L"aZsHs/FAm;jQ3c\f6q$b3?%M*@U#68fVLNs"`VkGo)Z#>iHe;.o7b/>V<W,1D:VT/[-D!?InPPdg1Q.J`(9_A\I+ieD6nOV2104#;aD3_<iqUbtE"Be/VL(9q=RUp$"X/_49BfPID!-GjfuoXVq5j`8ntCK03_F]Lr02k:Dl0ioHcm1'LiGSHRSj6_!gH/*m81u;6BR*nOXEU!lCRH!!q%#TqL,>_q)$BU'Am^][JjRI$aW"Tapk+B0[+q^6SC/*l&UMl)3lpMC86'5jpNa.Jb&PP+3F%s:N<+QX&WGoT^k;.;:KTCU'DcrM?Us22fBbNDRF%EV_k4C,:D]u6LfmAD.8T$I"i#DtnOELY^9Ui8Qrg`>&b`'8Mi[mQ/2Y]Do`Gsho`;J1C&4(+:MG0LYJ=_nLFZ!sqFoZ^mnfPK5dX"q;88E`"@i5;%3SkA4"tu6Cf+qGr0XL+@:X/$.,2Qg'A;,4ALs29k1c)4$&/g!B@i7aJOGAb!d`?]WEM]Scp6`Sm`\0jM8U6?D;pr/s592XLA1DB[G$U#mHuC3"HN?RT15O#9<Ri,s8oAl/eBpPHfJR9"ho7\)C6mZ'.NMAI`Oqh]p,5QS&>Yk+Z"H1iO.FNO*YFBm[KaUp)f`FBQR&c%P/q1#<9f8JM(9&&*4m/M+SNf%,,9Y9iI1W]X&b8SUs?j!\Hp$\s->1?G95of\W[`Xk`DK"jjdU/jruT):-GiKbXW6A@6o+Z'TpehWDC,A)%t]/N-f_44i?GP&G2?GN:`l?9"Po:;^Y+F<cR4PV,Is&>"t5n,NNEJHk\NLD-m<0m"=sTUJk-M+sXL7g2Cr>qYGpnO-Jo^#mYs[WiZs-`-[GP+*%*#pr6hk9Mmc:])RDI,doY-`:!JjPRtWh%7Bk@8E[ef+sYKa>;GKM%hu&$[0%HRSoMH`N+r.0]Ioc<EW=k\[&D)>"4,"M(4m7=3FVE'Uf2g",n#7C#q(%5BSp!!Br^mI^Jmk?;_G-3Sfo1/1)#Jt#X[&)QeTQ#C5WThO:FN+M+kr2p]Ze"<;f&bKXer/=oO/aaFp)@"*m5c=8Bl2O7;a)4';9F&Pf>)J<T_n+)1'85S/9MY/ogBLq]IJU+gu,'q(/Z!_2iU)>C3HbliJbF+^hg-K9o<Y^qp^;_r*nlkT;pdA>SZ>W8V>jOA<W,_L1G/83/XMKUI)BCEiUlNnGd+YfrB&"0-C]Kp)J.,;1V<J.6F_T>O8,?k>6iQH4r,LS#+O_G:\qj^hdY*0n@r]j[uNmJk@kM7QT$&Y;FPUin+$/:oWq8LV8F^;SY3#X'4"E&<e,7YVn(:D+s+c*ftO_G:L1'>$Zg5-7J%DO>@8N/h2CjEQG"Io)t?b_BL,_&j7jXSeIEcq>78GLjLYZ?rcXXd`adNLo=Bb#cEFHc:<a@Itb>5[D-&!Gn"`ATJs6p?(426a0^<k;k4@P;!2jLT4&Mh.(\.kB5M^(Wo3[bC0<KHP+3MG/(.'U^fp+/X$@I$qGr4ij_(X/AbNs8?UJj8gPE7L>M>h^qsFS6%06=/b-aDC*kRIkSRHb]DT9K#lHN<p49$OVJm+A1DB[FEU#U8Iru0$g$*)e3WIi#OeT2mR;>GRd9Xe,c.ZX6'<HP4S>4:8XEIbHs"AdEsFjD$iLO5N=ATN&382o6mf[M)J\e#^GoF4#^igTCDOBmn^m;e,4>8ToOfO=;l)lR7Z&[1oS%1$T\tlTZ,aO@JI1GnZb,ES6"`H"ChP;MaI/&31(VfkTHZbXj'H3'9aZ98=aYhsO9CZq:B,M;h$WRW46\CCe!fER>)\&407')XNQNa4Sg/m'[G3u_@OHcKT8k'M!AQU!lAo]Jkn<FA2HbP##3@3!4H^>XC[8T0hY#[]TtbY%\NidEi?&R;Zh/LPnM:%aA])2Ue)(GZ3Tq;(iuO77H#_fLUTH1gMSbd+Ee'e8^)M@&2$-Ao"J&V<=f;,)Wj^4.1:LSLPnZ]$dND*DTOWf%RBX%glmkCE7+`JiK90`<.b6sa8o^nSi+c[Jj#N`))<.r.Tb$7k_1FHB4;L\0LYc'HI$F:n,"T>=@u-(6:i\\Q:G_!m)Ii.%L#pjo+6R@9bYgJf;.5"l5e@Z;9nO/+4_ojAggW`C`BL`GaM!-2UkCa#7gj3)OEO7:&=J@(_BcR6%bWn-I,!H2hf-.6?(m^uVM-N.kiGW?9&ttNG,QK=%T6'i=og&sW'cY&0K-E9_O;brWPF5e.[V4WKii:UK!\H;L<)L$/5G;QVMK#-CZ;LbFYB/NJn#=u1`G'0/@8VZ*eag'YME_YKDlkG\5_8EkQs7Jnh&N,OBu&:i]Ip,F?DU=a@)j@B6)g;g&@WH"VDQq\p+2!7%Lnr:f^l?4YJ@LM%%/=N!X'N_^2T)TJq!?]>X7O"8QNY:)=u*G!-@faIJ8616H9>\_IS2[EISL-aYOTja)9Af)m8l*k\&>,;PsL\PQ&WZ=gHMbC#_ei-[A(i%-Z%:6lq/Z^&c@dRiX>,',uVW0$mPf^dG,b*KXe[4`-bd+NO!HMoQDOu78t2\LF5?N$gdP0Sa#B*_shC3aDgj^rfkSF<4;_o425@Mq'9)')e'p347hSl/\54VtO&*RFggQhB(!UfNA[gBd"1?[riPVRZ!@/QZDb0]V-3HgG\pTF&sAKaVdt*hI=Ec7A?NSVH_9L\K`iC=NAi)2o]/#9/PZr^XSW9PAH4-25Um8"iFO`BCQuI+*C(8S"\X#Ek;b_22Y9qmoY]d\T@?%r%sn<@rb1o60oE\]5IS:.\H0b"M6W]5iK_p$?':K+XpNcnRrN;jWt2gs[&t/M%YBCa7RUIRc;Y9A3UG_bpgb`Jsj2o!m&Q`[^\FoQ785/S6ieR@<(4=+VY"a1N3H6ft`6l#ke=,9-h.S&4/&"@:8-Q+BUXb*R/&0Y#k6aob&ijSBr/3;lCT_M<E+>\[4Tml:#P@3J?VYn6i3EI!$`f+ZX<:(GW,jsu.n0dW;Y?Fq-\-YZXei:`P>&ni1H>V<r8aG[]I.t\G0o3a)2iL:-O@#(&l19Up1Qk)Fb0">s!f4Z.Jq_@-RWs/6>1DK0DYTj\,T4kYtB?0k#ri!Gjq/5HL:!Wqo3mG=(_"J)E/NDcbpYQ(^5L(]0iVoCPCk-*?r"'"9mHg"P&`De,gIbul.QLgo%"$uOd_<,=8;mMW?B'(i)\M\;R$=C7K)UG.6U=V7>#?DppA>+Dme!l&mNoUe2["o(f+1.*aa)tO>Z\5TO&%QY_ZGE4er,KL8L=7ibW=:`TE$&`S?kj<pTE,$W"*<mD8$u?lk7`E(c[P#SI]7;^WVW;8bl!6TVN/AT2c=0%FC]Gk+7$'i?F*%/Is6lXfs")HVq+X_%p6.&YuaA/!4P`.I>=O*&1?A2k6)ABuEYsoArII>W5;2;TSeAISNa"6gs7t4,OHr]W'Ncm?o*j[>'ng\:'!E53*lHT<qhC+QZpM5s!V'Zh;`^:*^CHZXMVVP$-F0A@BsnX13X??\sL.h4$Dr<<<Xk*8.q9:<4IW&q=c0@UgfJr#.BR/(`P(XA`L&!\$ao]%D7Sls4%e2a!ojRI-hj2O03T!>*1c3e5:r3dtAFm,-lo`3Lc2c/$,UEF$bGiCMm>*;_Mhr)BpbJfSlsH':B)3HngA&K0keVB7'WF0e4WgC<<<U@K3n.BBIc)Bpe)[#)U)d])F1,'1V0B)-J,PK_!<V:8e.4h0-mQS@^qR-b8G,Iq7Po2hai52KZH5uhc-9jKmoRG(+X%r`$L,%TR-ZW-p?jXNK,gtc!!@\b7PZ%*<,18gFf>2mo"SH#NuLreXu?/tW1n8NAto*;"&cJ.\6WKECYqf@p-a705$6R,*gCiWa[SHt!p7(Q*o7?Gea#8!::m)K8>]ug(ob%7@dPKn<3hu/PTFs3qY#V.I&,9)lgOm)X!afcpE/'g^=;([JCe"L9C;Bj5(ojO.\X@85r7L'Km;p>,1X@?`\>`76/cWm.('%fAaQ[Rf[9FJIokc)5Y=dLP\)V'&Jp[41Aa6oh[d;lm&<*hp;A_j1Q;Be[m(Qi,>CD!AKdG@<hW2q20HQd*+Ijl\AUaj-\3gq&pH9rCp%Ao0"[H[frr;oJ2lEl[UP=/="?@"#r/GG$RP`V\mk&*Hr`!Ga6A0TK[e/O+,0TVP0d(-MSWKK;4ff;&=Pr1nD=n/8,n!@7^`X71a/iJP[9jPGD:43]WiS1oaJ/\?^>!b+Tk[40boqt8lWlmuV7)_pKab)=1g#a)@i`98t)hK2cFs/Wf]308?3\%gF-bV0U8g>Q<\peinXh6D^g,1!J4niSBRc;AWLlBdd'H%%Y%IHJm.]Vh,`?DX^**O\^+[YNd4k<nboSI%07V(e<AMB0#96U*N(R<Sd=4S46<`hs;4QognSrl,@Js]<F&=K:GbL=#iC=ONq7$*#b$=VQ%2p.E^\('"g]W]u->ND1'aKR@M+Qh*)7##NTQMaP[.J`'J11V&L+>nmeg5(D)8DDNE6q5s01b=.p/#AcNT-8$_(,]X(@W-=3_556`a)#-6JfpB-?:<oc47X.C3]a&2BD9d,\pEJ;qbF-pTJ1#GpU%gLkhH>35oFQ"6BJXO]nd)RjS8/_!''_&PRTjP=huEH,%j[a5"VB@ns[MP1>CK?+G_>N(Qn6!hKlsI)Pk(m9gbh!4c_Bt>1GqB6*-uL7)l[,nUsW`be%l]b<78WrUc&noGgCNjSj5<H(L#^71c9&BFU)L8e6R-9GEnLL'E_RU!]V&6JVD-,RU$P9?M7sVM6<$@XD9SAG"2j0MuA:CFQR&0i7KjeT@U@g<=456!=NjMi?/u0e9b<:dRA9T.(ck$n_*?&4CEW^El7WrA`,Wreec)n_"l*Nj+):#_KE=m6tR2hp6P"E[)bq-EjU-@r,O'Jfq1Sr!.ZW(F(_j;smP*80RiFAt6V*OENn$R)0'-C?l(#a,%fQVW[#Z0DN+6[]gH3OOg76/B/pE?&p-Q1I^9XNB.<Mdn5?<#\$0TOiTM,7hLlOXOpt:nJ$Qtnt@(\bh+dS,MBn%h"1&-a`5u[X^i/u+L\*eM9H7Gb:Pd$6kDb(Zm1\N]Z^UL#!pr`m7:boAhKh!+@s,>*Jr"nn8qJDcet$gZ3N[Wet=%?%"]Vh&JQ)c6!>!;)$E6/'bhMg6!>!;)$E6/'bhMg6!>!;)$E6/'bhMg6!BO3'H)>V<X=;!8D6[H9Lk[Db0qg]%C6=cg*TUrGSqH41%K]:H!81^@2:"^gZ3&`04VmN7\4ND:TJ^sbTc+^Rlmh4ASdaQaRbDPBbc\`=bJnSPG_EnN"&,c"@3S%5nF/b&4E,J?ihOu^B)G+\X=hkPtmKBo!D-S6mg""*XUL<Ac_I-*%9QAMt/\uSlQG6CR[Ggialqn\OcbkAG%nN<&:nh?*a@%#gId'Ejh'ra8]fjIU2NGOr!YR<ngV<DkpkXYP1hsXXr!%](F>'egbP.lu._E##/k(DbM*QrT3WkXcaH0n.j[TV=^n<s0g[^/fU]_$o@[$nab$E,N"Y(I[,<PdaqO`s#+FtQt7-4mIQ(haI[<_jDWJ>D/ErgF1%l^Xl>iG6a]-J^9KT'd&au74.FjWQdb)O=cDn>[Vc$K$sKKk5n8Y6Iq`r-9)k'FXYO?iMn`Wr(reN+rNtNj4tkM;Bf]&Sae6)Y3qhmP;<to^=]QD6ku<C?p.K4%P:X&bT&pnI9ZI.('0H-R)`1G&<RMfXXj[64ooY)2]\]"13=ReCQcQY8a;D0VhbO%f`Z(r-p,>\&[cY:Mq\s-"qF2D!S)j7Vq+bLdC^i2P.__=n,mW2Yp/e51Tg9pjAsc>N6"B9ZNEO8"H5O3B<e$DjYtDHZajV`-gX`*-qUt4R(uP7I:n.A@/OTD@FC)'Yhaj>>ajr.k=s\7E=u8qQP!'9'I],rS0s`Rq/(Lo^%dtT;X(6"54KXdWD<;b6A#)6sds66Yr\i$?i0S0IX-W=#>,u1LQoqL6\S^`Z0]%nqf[DO4dJ4^RhaRQ>40;Mg2,'TBakX>uAXI!q>Q#Tpi2J*_S,%AQnoRX-A8@PpXcg53mFj8mSG'54/=QGGoj<B]j1EC].bP^e:TJ#D)]E<1FNcZ67a`g>k=_,7<O+JUSlWtg[LQf7oML?*V2%gW_/,[k.bP^e:TJ#D)]E<1oNt,g/bHAl:9.o@QoqL6\SZ#Ih9`XG\[Sg+]?&GNfbu25X(6)e)J1r#?btY,=s[h!jCsn'D*u4p"J$@VH!.MS>o4naX(6)e)J06HmFV>n<j`=QjCsn'D*u5-``%V*CSPET'e`Y+jCo>p[^Ml<p-bM@,#>7a\JcejWsH#=%1TW_npDI'>/e\80R6hjOKEA5(kNk9Jfk>N+:*QA#_F0)Jfk>N+:*QA#_F1roD]k=/I_~>endstream
endobj
691 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceGray /Decode [ 0 1 ] /Filter [ /ASCII85Decode /FlateDecode ] /Height 250 /Length 2989 
  /Subtype /Image /Type /XObject /Width 375
>>
stream
Gb"/lI;DpF*QNZ=[hl9FXPD2^<_<tVZk*rdV$Vqj5g"0SJr*>=7qdY+(f@Mr%>plVFU<tV5Wdg+L5AZ[)%@fj/7`fRp=>C0YRVV3$iNG*r*u-$mbE.n?I!hBms-PK3F?t*IM1@%F2*-Pcf_srF4sumM@`)[+bUDi!rY<=S6RAj?aR2a&6\]uqd&E;XptO3-1n\:e^$Xmb9D@iFTg),>qKTX\1Ok3feS]dEca<C#Jl^ECS^f#ldgWmrZRE]c\[(XZDm)8iZVS;n[T+($\B6LCm>H,mJ$:$)-pp%dH!FJ=%4htV/<Z!%(agX_PTIL=0?iKmNRdkp;n`K/bRR8[@=t/rIthegK)CuO'3&rlBc_%<sZ4'5]Mo`K.]!oTQUUj%Y<=W:ceepLHt5<W#YrI6_JT.e..&`+](6'C55(A&?$TN[6q04O1-Kj&"c$Jd+4eA/i:8GBof_N]i6:X27E3(FJ7rQo-0B@ijSP).;EMYJ3iPUA*lip>8ppTgn$q$*ofB:EuRTh[9qFT`3(eT;77kB,%DO&Hd^*g>O"jt:GRa34m@_l:*0eK4ingo>_56.&?$TN[6pU1#h0?8g*'9S"DW]Wm1?3:!jtCgFpQS-J_D8D3s9;R@+.<8i?'G><3DgG/i:8GBeLAT3N(#!X!aSK9eR1sRCB)o<_l$uRU.t]QZ`jXXI_iI*okW(^Nm7I<_m1OP/l4_L[#\rO*Rn"A.j70n'6('2cd)QA/Lg0$/`3qpPrKAaY\BMJjA]7W#YrI6_JT.e..&`+](6'C55(A&?$TN[6pU1#h0?8g*'9S"DW]Wm1>Lf@9g1^1s2sT/m;g)AQK`#P;/'&/'P83(#+p77bJO==L<rU]>l>3_K_1tNNt'nMcQ68fbMLqX%^FO,m`!1J_D8D3s9;R5j],]*<NW9TQUUj%Y<=W:ceepLHt5<W#YrI6_JT.G3rM[[L!bP16,Z;m:2pF\S.7:*#G$ko@hkX?k0Sfqk@),:\#@!G/p=W4PDqfWEm#IQ!op2\S.7Bm+V2_q;(3A\7h.App^HXg*'9S"DW]Wm1?3:!jtCgFpQS-J_D8D3s9;R5j],]*<NW9TQUUj%RJd>`7:&FUMN`cl:IjMrX,,&S!Z[ESZ=-+-@p?K-^fT')$ik%>Wp1cb4[*`Sn&a'/jZ.R#h0?8g*'9S"DW]Wm1?3:!jtCgFpQS-J_D8D3s9;R5j],]*<NW9kXGB:O'7uu\s0/LH[=.)8:%k3W8.H1[)X*kW8.HeB`I7Pk0!+8R4)lInsEaj&!m.7m2*/$B_RnNmprGjiC1a'C@0\7P'q_(]M"+8%A;:$D'X.B\TE$E;7lSlE<u]S6_JT.e..&`+](6'C55(A&?$TN[6pU1#h0?8g*'9S"DW]Wm1?3:6:1(ggHV[3FqZ.L*pgDF:S`s'%?O,-H%#TD]MZ<(,gnlS:1W5XkSDp:4=63a\P_atnn9r^0/=(OC!Z^!=J*Y_C,\Dp)ornp3gL/])h<uB&?$TN[6pU1#h0?8g*'9S"DW]Wm1?3:!jtCgFpQS-J_D8D3s=0h]:(A79Tq+*$(iE'\TGC4IOVGoen$+SMHmE-n`7;Y]*DT?V5Cfs8fn[07BY:R&4-ZM-\*g7"8uE@qOp"AF9d);RXSfMoF"<#:O03dBC<9$1GSjlcJNA,C'WrKVU_<pXZ;22D;;Er1SR,2<$HJeEbB1ZU4LEnGTd[#r9MRiG:Siknj4V^JT']9Q.9O?q_RYg+f'<a'd(%8kFENn@o7ID.0rk$'.GN%]R>rDU+B76pQoF#St>Vd8aFF<gu=FMM"S&n<iEoa=g?289d2Cm4&X+GBqa,E;\5han[G)>Zp*$AplS%?87_)W%lUMQ%(DA<K<-lij#>hpFW$#H&sC-NVj*Ga:srAso0;$h<r6D$=f8FRlr+Im@+O6(gpZ(N:>N.$[^^[VkY;O:OmK8iEBhO!T+#$^7`&Fi].`J>$&%WA\Jq8)o3/t^mDno/Mj1eFjD=\E\!`Bkd$T4g_GmW8\I<n4X0qKYMTO2U:Mbr+DOKj?O<o%tce>ICGAa!*lh*,Qc_srXkp?_m.`'hXns;jl5k]&\kT<E?4o5qH>tQ75YOX=jfDXZ@,5Id80.5Fu[Y4ST=J=k"nseYCHARM(rUcsBbM%Db:WQfe>7/+_.@C2qZgWq=#ZK+up+^r&VYjh!<M9BKGD`a?;UN!1Bu1XRfW\"eOFYP]R+.dWP`]l+8@EG`,1`0hp-%_?p:fUoQe6#G--SsV)o!m28u;_44VWu(eWQ?(QWPQ1UGW9Z,t#iI&hCSlW]-35@[E3b7e?c5=^EdWP0RCVT8S.,BF%Ouhu)\qbmUY5XMNY+#Obfe1lt&@T0Y*1Yl<4upFjj`Eq+VMaJj7T>J!q:1+-#p9(lNqYERN0A&>;(h<<jcdSKWoaQ4-0r1SsFnaS+^/n6Z5GZnbPgoK#)lr*9MeP@L[oPb,?XNB0Ph"j@'pBc<RnY37n+YFs_9/%WNcWfRhgWJmDrUK))cH_Q[et^NDk^?M&gGAe]5D+2XR#@^t(7AaI#ES_*m%)ktrTpA>?Qq8o\D2=BMHkWRgW_\):\Z`%5DAbuX?BOl9ltgmFb,>:a9iYQn7LtuI=Bq,a8_B>+Q:WhrY0N>Z<77[/ir`,Q2\$0-u(`Ijn1pjDL6'3p"uTgNRrNKn7N;^$F<6W^A2++HY*LKq=/@EI.^3LA*<egGlEQ9bCi*4pf!P3OsdfL-EkWgk)2*\mb)%9_(Vp[e;`L[CJ4LtTqCge&:Y%.7S8hFk$V*J[=q,KG?XlZ;1f#Oo@^^N^L#AbpbR^jKr%b:PDSn4?++EqZXad<+$+f*=;)!j#4\UqPU^a;eMeleY*#"tjHb4k')i=!:LP\PVIo^7)7/kkkp>bI>,e.`B+TP"9;s[._2LU>O:f#:h#Air5N0p2rY1YrAPN;TGKi=]6`4E\5N0p2rY1YrAI?GLCKt7.iQiYG'UDX.:5YD224j;M&:Y$[WA6dG+bUCnaSu_L""7r,7f~>endstream
endobj
692 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceRGB /Filter [ /ASCII85Decode /FlateDecode ] /Height 255 /Length 15896 /SMask 693 0 R 
  /Subtype /Image /Type /XObject /Width 389
>>
stream
Gb"/l#uhVZ^Ai9"HfprDhE**qM>t6cDVg@G'"pb;'i`[R1f:$qW4>u>@\P1f9oN9l7;uZI7DK?k<0Uqo;*iko=^2OAfb$M9'Egfhp2-1bqZ#7r3-=m'0MM3lr'%"gVn9OOIoS?`?[gPSr@:2G"@3S%5nF/b&-P91"@3S%5nF/b&-P9u@E=NRit2D3"MFH^CRWhD?@YX_\dA^p#Q`'[Jfn4uaq94J=ouhYJfn6KcH22N/:R6T;*KR;$]I+`H^adH$kdYWNaPgc='*RU1/6:()2,eMK2Dk`:X^'+F*(0;i;XL+&L'=kl<rsm\e]UP0$9<RC4Zk7E:!6_gd\$?WDo*Im[PW`eq%0@jTn0K#`cS>A-EP!f6a;0-01L&H$Zs38:N!B-qAY`;GuNCmn[kKH$TAZb:e9+;+]`ncql);-ePZ2[<6V7<D,K;?I?<ga!23O3FteU]Yd\o3h;j.c@,u^Z0On/7p#CiPYdD8k3CKtT7?i#]r`nIl3??@89Ab9n]97/PjII:-5B\EBfa?Fl6/Z(T0m?VrRpS/PELs/lMFRYNn?0I2p\$Vf>u$Hm+AT+c^u:;Cm_W<oqY0CTI/pfl*G!HHLJQAgtgf.94.=P5Q61B"pP9.Ou$b1`/1\4rjoA>n\Kh_6"(N\=u:U"ljl;T@*=ifSCThd4\(MP3GmKWeZ2d#EYK9)2IXH*',-R*55F9mZY)[$WG":A.Om2225O)unDM-mET?i^U;7/Y;&>lip2?(dSiUq(-RD1FU@*stU9lX:URsKRp\ht?.n=bkGtUoh<]S"\MC\r8"b@B7g\(74+@deSS:L"ORl;9))E'K35(ES0mC1uM97Ha%V\4gh<8u_XhlWiU@-95VUCe_?^bsm#g4g(X>$>+P0Fd.&/@^.!8&s]4PA/9en_s`>mWs,&r:\l`KI'-mnaXXAB4bbm"t8Ys,=_snlNd_D7hjr`En$WG+&,pGoZ6K7-L!]^.])l;9595b73%/6d'%5[*3gqD/0$j$psuQODqqi']-'U>T0@sgZY.U-b7ob%?!SHV'P,WPhgYH>BP8eULET1D=8;-gcYhUPaY4_T*;nW:hpL1rDJliDjQ,CGS2h8<X\ki_JS.E]jN,ZnDr\is+G8U_e^W*Id*G7dTH$fs>>nj);1arTnDA<'Z!.n8`3jbZqK6Z2Pp9V7Xf_9hopmjLMS6\daAI)&2<fBBLX+\^BbNj]fK"iW*C2"l@b:iE>/#AE^"k81QBmhU*V/bZ'PnF83<FC4VKa7-+c@-ik+tQZPU#,6F\7Q9ITLVr//9Nq9lddal+Pn*]+Y7LQ<qh7b38`a;3':nQ^>V!S%KGj"Uc(oOeYR90$ThB$[`SS?GY^'ZEfXaF8,+YC"&s,BD!`E0Nj%7^qC><`D`[0V$ic[R(u-uA*(juMW>%F^OH.=rq<h"W$kt6B.u-ojf#;4*#qW,9W<:T(S0""2-8?GGT4`%j\a4uDLj/qHEAQCbi(s73JrZM0f1^D2E!HL1J:A6;^+_[\WmW@11S<4,9nH0<jm$/,'(/u@Ici'#+oPHL_6:TE+L>9Pan9Ac9(KF'(Xd=K,D:eU\^nLdMh[!NnRP)UO;RW`9o:S/<07/>A)^1KT2Wh5DAJH@=(n:IOhTK&(76LI_8h$WuM_j.O;d&**rT<?SFa3G3mkTl!!:,qDn8F;X,,C`e-W97AQ]4`7^84gR!EWWWUg<Ia[ITcI)C>aWWE^LAt]bDo3;U/k5Ohhk!D:XY'ZKekhA0@,\tVi6fqY*5WBc3VMleF$IflA:3!`r=GCq&@(V,2g8$rcmJAeRn-Qeqs_N?@m,fA3UMCR$%(\"=#R!X(V]"p2$L2p.Ct+[bL(tL'9)%oaiVqPN=^g-g"<'5WZk4,'$n,<IA-8i;W<lR8EFrO;I_#;&g]a`Aef<nTSe-uM,^c2Bc#"@_MZ27?6*A68@_[;eg8U_LCP=ST<F#;!mqVPE9maW:E9?UWUBS(:dK2i(1dZb?>G>7gbE]OqeaW&4hUC!6&XOHh:,=CroAkY1<Scn8fT,Tp5T\)6Jof>K.E2K>i!G?W%s\rG<NW_nlcX87X#p(Z:b?c$jJ:e't[(D0n4G2,IYM=?gjp4PTrRhd&XG'd7b#g:sW3e.XR#IThT?>+1oD]%_W6KZe!FQL5q#Rf'9(%,SM8`(""Pc3nr.a.DFmLmi<QtK8tpS8LGt#6gTSidSu7%0fG83o_>khZO:LU5.UHFOgiG7:Lb%[;cAgXZ&^X"R3H]:oB.^OeQ?BhmiAA2PTrRhd&!uP5*,WfA.6U:W@*M=2KGB=PtBf<geC0`PKur@HYC;:+0.bQ%mb5/G<:q0i_7W8T0/`rqZ0!:5n@;on!17d5rmqorl.$g1M9Hg>oi)O35)u;]Y>3Vn,NCUrgqP^gtge7I!c-I*F=@[ahOb&.n[BG2o]0!+?;NQ\52K88#[Q5$@p`MEZ/rnJGB]A9:@o1^5`%+4J,?)S$n'iNS#$:Yc::!\t^88NQUdOfN;<\VPQ#>M='sjCgQ3o?18cfBb8B`VLK*k3r9dDM!E\XBL(?H+LUPT"hV3i*@tJ/)/5O4N3UE9#%!#tNnR3K8U0,RnrJ]36<52iLlH$,*RV'_J58%Ko]Xi+=-"4TB'.=*Xf\^VJV!;b))Z.C>RGYJR(^33PUTN4!Wl,h5&FnD"r7..b:d('>0+n[<hR<k\RWYiqYSgme21[T$r^)'W)uS]#irdp_hScO7VusXgt\:3e]NB"5qAW!Y[M*Sp#1ZJ)B'Onr]BcoA[b'X<,UO'e_Jr-jN*I*,Qt'fil-hLjH:f^-;9fB(/i"RE2V48<!s'AkRa[g@q0"m6Y^CP(G&Yg<It`-4$/r"QB`t%6D$MT:f%`!;i]c\J.@NoLlfBQ[`_NPI1Ip@leRhUGqI_@IoLZeTN0FU+(FX#*I$;CnQbq1J.+o9/_XmrD>9CR$$u@?Mcn@Ee97=m0BfV[79NKKDlK8bF9Q>3h@Ym6UOW0MJ"o@J_3`m-f9c.%NhDcGZST;N*DpAEp?ct+U\XNEdrVHta,\R)YKkG=L'HpG=h+8(n%TC=#q"m)[8\X;$qnI',PX<P*n%ggdPFL@3ML"<77KauP)u"`XfP[3"u^LCF.k1%3T;Kt'3ku-)&*CcTuk[NmY7fM^Y[8]%Q4q4&jXuU"!i!;VG6]>@%+`m,P^Uj'!GQN_RQn[b7Sl@q@+oRFm'$%Nk"4\;)oB/X<OB[/(o]\Q<o8*RU`WJrtSN>aq5R%`]GAbEWdEtS[37l^>6DF':'V$If,Si^38nte>ZC*?T_;7mFnt0o@@,ad;'H5pQ:adfS(t9rG(hOro\c3<`0#4PVXO/,<@m^TE"g:]-_>SK!.)B*'aAj_kg"mi*0!'b0d=q[pT<Pb92#5!IdRK@Np4]kT3rgGREjA<rd7#C^<"+`Pof<k264<GPJoQc5!iknqI,(5Q1bT>Net.LM4(8<Bm9'1ktWXiVf*idT#B4M3Rh':h=^Eja#&F_=QD-r<V8YG'$iHpdA'NNej2F_3]c!JaX_/'+%<l]&-<d(!=\AU9D=@`<u06N^,X]S/f?gQo*2/"m<bq@0<Bjn@aR(E,!r^!O\FRB+DVgC=Oe[ZI[mh%Y[2<VGEgZHHHh*2lIHr+#^k.ieq.)Ll^Ih0FNLD:-PTQ,600YQQt]6W7]"C&*43!f73`8e-c++p6E$hNr55?1U8?fpGfb+/uo*+kfcc`/,%I5L22:+pmC-m.#^_G$n+V^1`5\;.$^QQoB(1F_<'claH.QF<E1/!i9em3"Ht]hIL"=q>)j(74q(@)fRPKfLJH#)GW=W7^sn,1IQ5Ot_$]B:GS-Tn;#-uc-87hob4V6B^.FR3Oc,.@:I"d\)u&dVqtGU?GL";K+2ON/-YkEBQCk6qfW`3._1B65-nn%qh?maget=r;/QtRBS0sBkb0e*dC3Fdl&EglaNeX+6G5`KUZ__?gfG";]1%qNQ=4VgBoDPu9AW+GA0+:uChKM(UduIu\'=cV0:la1A2VsQ/3=6*#P/!:</OuHo+;aP/KeFl,8):Y[iB&?8D\bAIr1)008(2J]^uQ!>P)?h[bEa_f&ZQ1F:T-A]Lq1&VF:P\'gRGcQW^Ml9S"!gr#_g+J@*a[CGREjA=u:6Y7-J^e$PFq=.iWjo`iX'U*cs7RL4:N1cWf(qC%-'&q!mD8QdntoP)-)mWt-."HG4]BgfbARad40/a1-WmOma)nKn&c<`7N2-QEQ<S]e4cik/>MKY&A=+En?&bSPbCO1K(1d`/R\D"qG;Mm:6tI'nJWtpR9Tc7Y3^9EpP7&MNj<hCNMdmo3c<E.X4-iF3hG9g`O6^i^liP?Stdf-qAn*QpZEH6N;AN#;B#,cORStn4(nH107DjSMW.rmY-f[1F^.#0SZs=hID6ZVkM%U5,V_<_ZSAmR=R/$Zo"9)a0$"o#BJ<8:l[Ajp;B#oe+,AIMQ,D7:Q5O#P.rQl[FK;#2M-rPE@VbI5PlW\.b^Z`4c2]-6+u^VN;FB46u`@>7R;_or[CWt=[f,#C\n`#-q=Qk7g'iZEHXKE.!!M3mEkMOhB#QnfJ]_rRi*TfLPZj0m>8tBopIMaDm!#\c;`t[\Sa@5iU2eJ:lZ*_NsI]<,b<Gel#-H^:sWs>M^uD_mG=W[0sZ:%@f,<*SYOH2"5^MIA>`;Mf&.I+F>ua,Di]e$XUqH%!s%Eg62HCV@k[En,s1q]V!:-XrUYI&NYYOel7r8SboJ%<8*pT-jh*iu?1Bo%\2@@=BYR%_&'>K9oFZYoSlA%YAThO?Z<u&d3H^l"dTB?!aEdFPCVQ?r9WMB?CafUR,6[6U!f]A>p@Z*q,t4V-fgj>EMbe?u:J6#&"Oj`Q)+XM%+-3'7nVr"<3uV'(1%rC?3bh-E>>WM8.HYA2't?_A=WE'fY,uSbd-S<0k&s;Fq4O'.TH*J2`]MTfKG]'H6'Q/LG?K3j<Sj_8GK4iJE_$s*7Go(1Ppc*#5CV!c3SJ[ihob/J.OR2]O[Y4QKQ+f?*.^V%Ca(kt6'5q.QABtXq7<FC+6iY!nk4=)B:j@nEd(0#F%pe"9Qo3VZtmkX/Z'`@c&%qcXXA%[*3m>)7gLKTb>DSbf><FQ31G8\&Nh.uOcPX8TD=_%.5NU#pakVb(u(>#*8uiu!o9+drkNbK#UfP14n+8&9W",MQ?(<c9Bo/8Gnu/e0m/:UjdcgO&u89:-]_7?*0_[C0]!DY7eO%,Ib1ZuLtqIPkP='i(OeNNkSc?<D."P79$JDh'li8b3gUN.*e[[/NAH?PWT[4smmpCINXuCENkOcePg7X*l1ie+>J$K1Y'\Ss7OFn]rbs[\H2sF'6udm:aCJ)hSq!>&qUkJ@PSMJ@5N#P%LgjY!+&Z&ON-D)6GXmQP.ZV4&(<kB<]9E1)ZMUheU^h=\Y16:JJ*`!N8.M5$c^KhV3Vso1!l6bb\5B?qQ>$^.9\,HOOaJ%ldrkVEIVjhkGXqUc.V#Y+>G2h/SL(O&k]GqUO,*+OEf.rk)k##C]-FVZqL3>AA%"6O#'LM^.;\7qX8>?Vn1@.H(C9+n9AhngOoD&sfF)"U*<2@/eDjj`BrE/>3M\?pd\>Gs!NR0n`1sb2m0_g$qeUc9IKOM@pa>S]='LI<<K<;*7EX_jqqRl4LW\fGR2fp:]Ha4RqE=P@WsR"e_LGQll9\Z'9YiKUE3)E+>ZY_c1ATta+8rOHZg]>4N&s?c=[R;%IZM2./sIUQ]KgbAY>6NM\g4Rg]e=:RT,BV09#-[s`j5TseQI-[,PKr-7<6>6_6IFlO`&-35kG-qFo@LKM4!Z0#8&Oe?E0a6FniD$6ZIfrF).q[RHQji^Le&Us5dIFPh\>EXLm8X0]_HFUIXrP>'s9g5raGc#,;[J?9c`W$)Ch$6A:PBPFa,3B=Y2Qfe_(L=/XeC:1TqUGk[l[*@KSegMJmXI1u.1J[^2ST!tHCob.6NC[-Kp7q/_?7R]Lm#RcSPqB=;$ipd=p1K!f<=n_H'6Z5?3lQ2oI;[\)5O"YlC4)">>huu?`r6Wg<0Tba`cCo<"KHN<@fj2`X8p9A[f[S;*kL,kr"$]M.;Du`KbU]Y`,*b]1as)]O&l=T"7/^BeO]nKjNSCpn3?%ZZWKjH0U[m<ONiZsS?ES8ZJoZMerSu&'Y3-Y&'g+\6=@kYn*OV1(@!-8X37569Z)aZufu-&Dhg;3j=B/W/jTn0K5srVla/\kCk:Vt.Qe9#<]d1dT9<*o,O3-F:a%8_M_lP%K\KX'E>#:4jUp!<8bSNFZ2cK#u<p!5PMI%WDmcAVipT!$38*3dT;c)UDF5KPrL\qS8i"qC+);X"t0/('AjTn0Kb+fn].KoU3lCm]Y1u$Ws[b_7\%kE?n4u$uWQf/4^j)g;]:q!6jUg9W5+\5rHpkD\9_o>Y<OK/4"&p4"1H$0^]_qDgY*.73V2AB+Kb,>/pqJRTZ;[[uKqK?M[GG8m&"-b#5kn>^BW&m=cG->q^;UWrd4Qhm.?%J$*gH5G?K6o&ed%X@`UA\g'nHiMJTH#+GT89bGQD1O3Wh`1!<]NjiP)G`*a.(&mF"Y^?(pX^\83&(g#gtg%NF_M88`1-%9<Af&R6/D[=J6WrE]h,p\l!X'\,,=q-q=Qk4"7)+)an8]7IK5NC@<.Q4j#Z>O-'qodHmOZhaMsKY#2Bq*$Ij+8>XhjB-*Zn3Z_Q>I3djo02['cmb_]Kki.ork+(^QGM@#iNGY-u2m8*E"g67l_M^`]=[tb<6BGM%LfUhZ=jHW/5Mq#L2"37WnhDon0qRSndIOpr3(43B(+p&'\h8G;I=&ZC[FRcCNY&!&I(ga#7oSr9=Hq=%Hkc(t,l^GIp!k:(U?oec$"#cB!p'\RPk")]jVlr7^cis)8f!+5RXB#DmIK!tGKY_D7AOu.Qppi]aq94R,BO$qp(2T,7RFtL_I/B.Ipr5$YLLZh$$`e&J=ml*LdIPGaR9'O@2h3;/rs38C#GmeRC'[sr..T'T#a237@#;tNY"T%2tg0+[42ZWafE\hf>o>cL]"[s860Gqi:YPX:l^XR94pcHL."`'KhsGh5E$fnNc^H(mr$hM?HL$O#@\&XaX&;.drS/UI3ppBB>Es%6eA4sj%N/VTH#,-PaWf=o=9.&g:k(kk:?@H5a'g7dCsD;;JYISgEIL!"".;lNBZ"(KAIWR/].H)GB>(*?_AA^K9R2lmdM@0Qg!I16.oal`NW^\Qcc,r"%DD`W?%3JA2#2Le<*MH-^"#DW*!dfO[s&\%TbQYb@$rgpXrhkNP^UkKrsm<5aZ]FqO#/,aq:@sU9(q,qP_W72NCL>X?`"T>VjSR+u6'JI4>t;<b0W0DAK7TK*YfFLra:jU-lV#$KVOj1Q@[LchG9A\ot+rP#g_+@^_tUUUEZM[s'UugEl5/"am[+EK^CQ*/"SO=lWb1QCo3@RNgISfY'jkM\R8!a^gV/`io*pG^nU8hk+5=LsPo,?MKg2c;h(dLN'PR#Y.f.op#.2T9L&3.]n>k>0u(\nktpl,H>[cYAC@h<<)0_n?5$jr4,XH*H^d#7nRB.7-TA"5',r7U&<FP)0Ef7-[(!u>]m!IZY`_/.W[gq';+f)4i`ufR[a,AZ'VUWRW2=%=q;8@P9WM"`+`)*K7r(nU,JI3'?C-LQAFY^5hZ68RiOG3R%N"jh=ESW<*)U54ru^*IeeFYKgCj?Oggq=P"7=a5%!f*/">#H@IG\<YFupZC?*H3au/0^4gq5q#(.S`Rl5uH)I]N*S,?C`g*(jeOck(CGjbo8)cA+FpGL(^;c]d+L,f0l"KgZG\12*UM9)Kc[_OKo_=2:R<=NfXe.Y[dYP4(,!m2,'$_?[gSn<AI2um-P*VK-Ho)eUt3hiD5Sd;df*5:sh'1r+%(/Y.U&Yek"YBqQc%W?ETBrND*hB<\:EZY/=g)o?Ciu0utT@C6`9[2UP_Iii[?9pS<FIUjm/g3i1IjI]_;OGG_*>F27M16KUY0jsFeC'>SY8;g2Q.EAL:iV-taq:B&gc.R`%&aV3>KhI.c1,_6A<)/'g:e0*CZ^C6UR>gtkh+@VN'0>a_k#bjqjqrk>W5ms9k0h9+ZbRlNOXuoU.)8+$=eqYW)n!R@fn1;H\;4hAPN8-*$al+denXg#2Y)M/pVR%Um5o;TgaV8jTs7BmWqg#;gaSbOPK-O?Q?a>lelo/4HQA:8MEk#ON%lu+41?B7u4;lQ'*BPaN8-aC##E[MM>P?&SH#G@cTIi1e^(lH""e2(,=YpdM>Z>&7$SH>Wu>[,&BX<7bU8DB^T9hMscG;29N&HjfNu&^HjkHF;")!4?apDNJN6*",&#uH1mAZ,6u]Q$k@3I/$a.fGMAauh_Ef(kH1:ZY&E!\YS"6U7J$pq.uj0&aq:A34MFP#7X%UK*is:`\+$j,_(kR?)XCr?IuSi7b^@[4"AG5'EQ6d,Eu0N_=r+Y"Y<#J;=sM0U3C7hNF%aWhiM;,'[Z>9gXeE446#FFs*m%@S,tOjLe64dr3C7hKk67)cFOc6>@,dA<lM%Tr#O"[Zh;UG$Qpn@qPTrTj#['ZO:i!4B+6f#5IXL,7H'd^%Fgg[u/Jt`EU:dX/p^/4FJT?G-(_%4uIL(f.KC`Kl_[pdHiZ?-_8u*-p`38gG,B3%3JUhcoBJiZo8NfGSVdE@jVtSKpA9NGO/']fIDJ#^AcYB<\9OAY7YG/&n^q4/3;iAr_=:,2Y>#:4jXbLV2`ipJi5\eqce=fn#)SPULQeiatqasAV[!*1>epqdoBJk6s.1(mc9!Z`0ap^MFd<aQHkg[cnAW5]4S7:hpZ97dRm[X0>%@XF_dQ^Qg&FDn9,u3olcjeeKCIDlKNc>]7+7>JK0<t#U-u1@IY^VCs5rh9=(OCqjX8mRM^/[;D-H\N2,Mlp:9cd!WcK:]5[XO%$5rh9=&TJaMA3fkd+!jF":[#G!WMRM6+u2fZ/&hXk@oo/qRPf4E$!U%jc(H%"g5,[?lT\P7OYY0-OW>ep^Et%-UI059$!ThdrLb,R>"$nhdeJd^LV;-1F%\fK)EJdoX.PHW$/?Jj?Jf'rh-++8=SD7'_qaP4[*#a5=4U%SQs/+]iADdi"j.FO/JKN'E/Mpo,8%\QcLsthRi(J,ZI@Zp]pc)eU'?9RB8n^&Of@PB-qAoAZ8=&6[CdL0;Tj>JGjtd`An/\Ib>\+5h<dW)7$,^O59KGM,e>8t>3WHUMWE!]b]ZRiVAk&a!FFlDa9dli6b!Kj?jGh-qhC6N`a'2,C5TT`lq5uCmUr+i;*N2RioIKk-.bES!!+E^SF-r$53M/Y7s[qd'=**E'nO,c)*bR2Yme"\2TbY`qu`$*Hl5uRiEM=%B4oAr)5%u6"&^R.DF#oT7%10'jMUDJEFeOMe0@FGO[pck_j=PsZRBZ=rT(c%`@#R3='J'[n1$q#AnjrH)<VJM3g@At+p.9g^?^g+R9?^KgD[$+qn)l#Km%"cQ0W#>D%Q@gl<ZIcHf$dXZ#I*>1^&;KUe$Ej3uSf4h5:nLN11,6n6qB)e47b+ac;fIllOPgqrY>8Xu#cYAYa#F0,f.s+*VJao_jVYNcFMl8(OtTmj%Z6YICet*?KAA]ToU;F>$TFT)ua#euB5XSm5M$l,h&diB(Wl3-o8/Il\hQi-/aapFI!HM;S2!dQ-Z*M%I@RD`L^;n![NUdA9["F:<.>nXRMHU@ZR,pHJSPVQ&D(55&@O8aIkViPjc>r$P5.RrIu`9k!@IBHCLK*N94,,@*Xa8^;`YCu6AG6.?OPOJEL5&^ptr10IUM<Fp75cN+=om..nso!#KpoYHFjoY]4P59;g+#2TRA7",76RV`;(&Q"K![3:`2;67SM8iajSf[e`a3d,YLcW;c\=t]eQ^6$/8aq:@+ibU%q9&.=0n7]g=:`J$9K+j;*641fK(fV=d=qhlR&p(2I>"V4UAl\!lgA>>.C=1rCjTn]o8Ok3]$K"NZDqpPCnVG3^No+koMec#&0WU"6&$+Ap&-V)#l(+7eP's#o:0f<Zk"Mn!p+fX=h[!CbG\#4\/,=t[$5mPje.kn(ZO*@?G*06tY_i;NI&;XeJS7+n7nE(gRn.fg7>^*QFlMojW8G[dhIZV.(:V2%UfB*1SGr!uU(:&E(j!]+pi\mS[<,!ABu8J-&T1F*OC!aPkBMdgP%Z!r09aN/qkoM1*r3=C=iTHIfl^5UksYQ.alUY#R@8"(U:m3>+j-b)mLl/jUR?/P:_(O0MQ4MU3H1gVI;3RiXHARk]Z]o<2E_efhM=pYEeGj:j<iRWGN(`ZlgZ.n$S%B_PdJrk<b.f:J)2PKA9$DMm)Ug**$=W3n$BQ;:M$.ZSpB*Ch/.5mB)2h.`f<M_2ZqGF:lZ*)mRIhD\&hKg;D5LY&9pT@Bj56)K&?f)SfKT[0codFhYMsa`mRBR"j.Fo6+Vm)rIpc5!KI`O87cl(P40cj3C3J'A*km%o1Z)uX/g0B#;<#Eg`i&?V(u<N'i>R-UHuhhe&:?rl:$%GaCOAoTrpK-m7cCAZtT;iknF"C?@Hj=oD-Um2GkdNbrf#D).]B[%2SMd?epERHJXo9Q',)Wi]`'R47k;Y\rMOIfCmEmka"3saA)Iele"W>c]8OK`m$O[nG/1c_lP%e@gY'H,XgNT3>rTrV30U66dEoO@_dR8m2OpT>&0X6QU(?uL/d7u5CSBan%PEDn4`Z7.oec]jV;=cARXRUq+E@o3lh);:.n*TVAk9R'duS`%EQVm_nD:[;*pf1,DV8i!lKcj6Ko!d&Wp:'OcY>u9k/?900"-U]i2eX5\X`m`tpq2EFD=VI5)7L5`dTpNc^X9.:$C,(J9KTlO,3=U=2q:rLb[=V,mTc+c5UPpE*a<.F7eQn6$FfP;,M8mSqt5Y"2;;:V-5kf(H?70dSOs6rO/a'Y`LM\-PCM#g/8>e#b+o6F[DFFqCk'M>\"N#pOX%A*=R6p'b(@34me8+5e&#Gk$=="G3Q_PTua[5o^X*Q&[q#.oJeOp!^RdV^.Igi1I!=X8r&pAMP.54\(\UILQ5(aP1D)L$>'N:;,h0^cFOGG5:NiMNlW5e@X&pAlN>P<b:DUccN65_abRV@6cj$4mGXHq*c0Me<>cKf/J_KK@JsE#.D2cf1^D%g7>)]#T@o%.HU/G)&](BeGR7gQM\QhClA)Amk2=KL1hQk,99-$+eEa^.8P:82'[0k&%8=CY=H2%YP5RfOA:^GDr!Y>V^#Qm(YO6ig+cZ>4\)l%L?M,@mg7"jk4=#gJ+cZ@IkH@K[\7t@mJ%V<U3TRqFGu[o.2C"tn*u>\3&YU_JU&FcDf(m;RSE@FoOI6KNuN&S1.4c$3RT4r1Pl!6jMGq\`5QB6cRdCH/rNuceBntQY@O$nV*bPLpsoYD>6qR>&N`og))`m5?$%o%2h_`haF93:7bNd#!E78Abk#T?g;K.g/rA'O?g[&F'gd!N?KHtk?>tmC/\B"/b#&s`S#?LC*aNDh(VV:S&Xb0W?1b(e=r[!.>Tj<H7W]=F->SKD+I&XME'JrcATVK",<Pj,\s]`>9[g"G.K+NidkYrje1^gcR]%E^$l$G;M!Z5AA?C'oXlTDhe=6-A6'+,_c?JUm>'FXXGXb8,<dAlraXip,@DQK(b;1ThFO&L9PK3$KY,k_&O>_](0tbYk'(OpC`-LdtTgSXVTpk64:sX8dJZ0T4rH6,g;iI[MmlTqnn2>N@YJ#=\k:Kra*mn!_P9Yh'.,%^dduDXt7qHBfQeP'phcUC'jPgME&5=Wq]5h;glTsiQo":VL-Ok`BhrWT'WuC(ub*-;XJE`\4S6\teU-#]g[RKT.64guk8WMF5O-2Mlo(ea"aO.Pp>r'9!P"Z0[.60/tl`<8<:p8a5Ehdh?_`,%tg=n[CQ?q=?[Z@A%C1ugEW,A`?Cp'Sc[9jo^G_4h+Jm+*mK]iqob>DX/BM,Xfk_^@nGhhu7(nD"DH_7giACR'M>\aNYj9JCC2d,rlX[YKDf?9PrZ6>$!_r#!!?0I"_7;nqB:oqh.+Y;5M'UAtUMV[gna0M8sBtF4FV7YWREH-_e^P-I'lX]bWAk0>$bW:/!kD\Vr.,]P>:gm1&;-<Ickkpls!Lnie6@a*P#$U>kWRdmfWU5k<4VUI"TN#keijW"8='+3*3J$pr-@^,T$FiQu2ODk8L06ruAE"eEaC#&18.EqNmOPTTFpk$9IX%2!79Pba-d;/'-`BD!ekl+$j@H7@)=KY9B&Lnm]&GWQA?o.N]H]A3;LHk5)(_F#%@#-JC5#^Wq98cW8[!N;(F?9Udm[6]q.2tBj!FQWl<K^L/IYcQ5L=ZOH8.TgN=7^ANWr*V!$s9/Y&GAThnFkVrt[US(/gXnBW:A<\*Yb!pVqaT6RN8>QuU/))0d#;St.XY3KVN+BbU0qffOdE#!k'Pb0ba$aiK;fjOaV//,!8h>@(Qk>43%W&!FR)gg:Reqo*FGQ[[](nCp.ac[)2?eiA2oNq8iOi,(1&pQl=*DZ5)>MbZ0sF37hI6U]#R!p+)\'OR],+..Ot+dRq.gtKU?1VKKkTrH,_gs6reBO:mlEV&Ehc7:$YTE=4g5koe">Ws:$mHc&QRI$:8?U/msAfP[TCd")O5AXQ.Dt:eh8\7C5>WE'U&;"pZ&Ep$N'KfX]TC3:ojI,<?gY$.\mor<]jGWQ,&O[Kb8#d6.NpQ`q3uAn*nARa.+-Y6[X/.RcF*m)jY#d"<NN[+pdgNSiU8OY(op+YXaqkE_JOF@/e/n=1VqmFr7p"E!jtY;EONa]<o>gZ/C^[rd]3h,?4a^I%EcI)9)h9'b%a%Y@W%EJk&<YGROP4pYhpYjU5-so:[#JK>"'9j7I^QL<]k_F+Hg5p>VAk%.3WR<"n$Fsbd\8suU]0G5UtLM_hI*I'XgU?1\KlP/hBkRNrdo1?46\q7=qpljSPdqa#4o%9E?+:4YE*%/k%f]E80`otTH*WV<'go=rdU$,kM:EXjN#0>+poff91@a=\HgS?pFLMsX,%mE!m6W\3h#::?:jWIq<VZ6.FVS+8u9tEcF1<m\r*ABiqh[$kLjo0c*d&MW,Jlk<.,?HVa3?&-LW_#Z2`?+,L@`'IZ"$Ed+],[=>*#DDaVgjXeQq+BqVm?U)0IBEBq9\hjo@"6!eh83N14!q"6jAmMY9#ET]42A!tB_jIGb`pUg(U;IjcX_NTY3WXQOmN?B^Gs)M'U9:k#-8,;^Lip\ifIbK@b#=+;A)bPVL8tG=5J?jeMC.HV3W1gkjW/M-gC<7V$C>nF>C+B0RATO]QO7@sX%?55aOZ$&HiV-<T&qV55cuV4)GNb3b^8ui3PnLi]&c3a$&k+t:Ed`k.O3uFRVkI8T_lP%[9/p5d5nIRWkd)7cgPGHW58P9M81@GH-$<Rn7_pn/=8,Q<;a'45?rD//q_V!qS5YtepLh7QAr^jJ0GZtL5bI.o^*B32ag$(e:X,SX&4^Qo+IC\8!i`"sVLfS3(\M'LB5;:<AFtoGmD1e4ed"JPV$OEQ)EUkp%N?/ELlTr/HkNi,BaohAaTj8@nX)9F,pt%'NZJ3<Z_(l+oUe,'_Mf6bPol2k#rAuY%krGiK(&iFE^[FgJ*])9H&.H;E^VQ7FP!#9#":"t,0sUKfEs)rbL(kq,[iVW8Xr/MlhEAnG<A4PpW"%k-eFa`)?0Xk'2>`m\jbd53-NKt5#s4s.^t?ZLh[2L=]6S*Cc@4BF;<p$r%bQr(rP+m66[aH`_hV(pD6@ugV5T3qWeYM]16[qOADV]XFk6@81.X;be9.KfHPq:"lF@=G(CKjPC,+1/#XX^oFf\o[_3HXD\3rA`A6$2OND%)\XoH_Nld=VHkCr9#-W'c(*>sY1e#+l0QcO*IN+='61!GRojs#@];3#cEq'f6'1A-r4Jkd[Qp0p81lHDjk'lG>4sopf*ku%['n][7Llh*R7nNo^065Q:^V-D&Ah$.$L#n2P7m2_2[97ifmI,n_+1ckbbBMdf><<jC4#l&9E_U[>S::6Xk&K:*^@^f."@30C-TPYn/F(b[;O\Z&StYQ[4hf0dYc=O7o!um"7"!H4mJQoleju8Y>g<aDZin,)W%W3K-!E_5.n;?43GM;aI`/c,UJ*!:Vo[*6XJESkIV$FdD%Vd?ppp]^BFF`4f$m.gjJXJXEfDjQ3=fFE\,b!bJGTAO^!cM4Tkt4@mXZM7K0ID>=<_VUqQb2"HUX2W7F.G?.CJfq,_(`U_cJt%C5gB9(hONAILROe,D[,/:NH+*EP?PH)i(o+!3'D(D8@<cpjDG]E?fXuV/n!NNGfKj%qc0B7HfpT[C3N@Kq4/tc4%gB.\?dkMa%aM$DqNe`#e?lXJg(![Ftn<oG;q=,=Urkg1BJbGko0eI&7KAZl-QDUOq2$@io3Y4&5(@%tYodU%`T72K%n-s%1bCp_l>JBKQ&97s/Zkei0Zh-Z0+p=rt)!8beJE_=M*(k*GGTCCLjY;%*4G8%!3AZ\)jC$sC(sI-LA[hlhrFpY46UCm/\-2*^-/L'WC0"auOY"@7,JPTp;sZilU<"@9BtPTp;sZilU<"@9BtPTp;sZilU<"@9BtPTp;sZioc_UL"$q+pao%BNf?(N*n4MZKol'%b]:R7]C2srtM>;i2B"IR^JuYNDeFFb)r856<h$49.q6\Z7V:c4Yqc"FN]tV2G.ObK3XEJ"@3S%5mB,kl%(&]#6tGW(d^E_+E'mQMaFk1#k`&_aG2(;/K>To%O\AFaQKFRHpC?/Fp[t-daX&+"(NI.8:Lhu^p:%AE.03_F95qP#Wrap1WLQkr3_Hh"8QgN,Ek>Z3&";q9@o;E,N#+gpBBY;GT$dV-5`AYH4BCdI84#5f(&KC&KDXf)H,O(&oosG)iVeN`W]/HLtnf9H\2i5S;gF5/^=_ZXK0;OgQjN8QDSI1Sd0u_e8C)58JF"=h%b>u9+Okk&[4bJYI<LDWWg\q`Q+oUE_Z6[YI<(!q67j+9O;QJrWe0%pb9WGe@hp\`4hb<+8"Yn:tKqgDG,s66+JSekGo@c%&:Me61)*?bNO^54pD4h/M.hWm#lcW95f'7CY$^t.=a"X=QuS423.1o%:M;ZnGfoH#$\_M$mJZ_)"_R!ZQr>sdl?nm@inTeg\Yl(i9""F`J5VuVKoHn^k\`u>6?f3f]T*P&E=/;0Z7[`?#nlRdl,iAd(S96QVh?;j/p))[(fmp1rR[0>6D.,14lo,M':/RS>WUW_mum9osB_1\6p:fQUG'V25I/Ng<s&,I5F>o,ER<\B?:2JK@[p-)5<e_")keXg?R4Mr9f*(KXQ!F<j.5paHoktWNNDN&ia)f\2oUT*c:.WUX7T-D5h,<*lb$9cQ[Zr4!Sd0A]"*h%&DF"BhL)uKsh2'94^JoZ!cY!Xf,8fm=`kOMRnKMC`)B@/\Ps7g)@IQeI9Q4G&O]_*-h.`!ClBGcVENE;7ZLKBhL)uKsh2'CZ's.O*4lcF'#cPcpB^]_!VHEC-1,^fFZcb/R'\D@[tM!`/+iOdl,i1@X!X>)QoF8oWh>-CZ)X#1W21!IkKo\<:1*16V0M`mga^Rkc6;KC_YSA\1Q5>Z$2I<E$5+PSLE_-7>K6UhDYdY%G[7aL,a5kq<I5P/YOhg_sS_UV;I8!>6D@2RNZiG7NE=YOe,mCm_[X/S=S5:*c:.iUX7T-D5h,<d96$q(fjV:Sp&!7&9btEh1E*-^/8Q:;Zh[DXR6/Tl3(ta[@Rp5*Q9FZ[e.1/BPZP7<&<$jZe3l2\Mpku-+uTj[[IW7iHf320,oVR#&[(F6\9H7[_ZXPP3-tt=652&V(KAs'\XJ8/_(:&pT3dg?0='\N-ro[BM6)ZKsh2'9/T('G(mBPQQBNN6X0EC.'tjN>H/PRZ7E9nG%6e]'\XH6NC$hO\##N:+hL&K@CMSE")Vc-&DGPa>H/PRZ7E:%7]RCiK=8/-&DGPa>H/PRZ7E9hG%9WXd?aJC6<h$49/T('G(g_&)Ad'[$Ord]h6NlG+X+Ha3t\dWH>-#*)hk^WASBEt&WMlhf1T=ofdO5(.78_jM\$"W&-P91"@3S%5nF/b&-P91"@3S%5nF/b&-P;+QN%I!!]%I~>endstream
endobj
693 0 obj
<<
/BitsPerComponent 8 /ColorSpace /DeviceGray /Decode [ 0 1 ] /Filter [ /ASCII85Decode /FlateDecode ] /Height 255 /Length 3515 
  /Subtype /Image /Type /XObject /Width 389
>>
stream
Gb"/kH#-J\*lid)]iQ6h8tjV;'e!Wb=[l4=bHM^L8l5eta<H<=%EP9L"Y>`h#Y#S\!4#?c(<\lDa>UhABF0P:?h'CH'El>e6^10$AgT=%5O+d9MEoqnc98YLF8Nk&5DednoufA1gX!LdlS"#!z!.`+X?U,mI$OKg/!"u:Q872EC0E;_&!!s'a"9q*m"!E-qOMCie?iVH+!"p+K#n2=e#!`4lU_9,frUS)flL\45d"RY^'+Ac1">*.j1jY$gY-g?^6%e_Vkq\8%?.ba/5'lqP#TC)i&i=&F+fVtpgZ$uF25d7"J!&Ur'!u$kTiU-1Zo4,&T-8\Il?p4P\SYdu:t8SG`fNiL3]3,b-\IAM6U0]rN?^^o;@1@ge`,n]C%P(B`Hs'0]/W@.JQ+t^?S2M7K6e:K'm-=s.n(6Z'-ucA%r2T("9q*m"!E-qOMCie?iVH+!"p+K#n2=e#!`4l+FsQT^]6o5!$j5u&f:TT%"JHb5QV$1JH:kJ!(^Jt,VVKo24ir:^R>W=>#9*rDcc"<EPi.j3`'^RT0&D'<-Lm[JT>Q(\h'SX_]V5Mb,t4"9aR6M2RLIo)WfOpS<!68g`#'V>aTHh_Q3q&ep*X5j(\caJe%:S`W/P;!$j5u&f:TT%"JHb5QV$1JH:kJ!(^Jt,VT32(]XjNJ-6'A!WsQr!Kb(s872EC0E;_&!!s'a"9q*m!u+r!pB?2YJljm:,7:RCil0%D=Kl$T$E`hd`pM?=TFln/GbX%=KiR1+U!O]RZuHjieTd'%[)S<uqo$o)Z"gom'O'O2@(uDf<TEbGcl,^7-]-GW2-qAL=CV=V0E;_&!!s'a"9q*m"!E-qOMCie?iVH+!"p+K#n2=e#!`4l+FsQT^]6o5!$j5u&f:TT%"JHb5QV$1JH<oqnQ7YT+3L_U=>aD,b,t29VHG"`XmoLN?6@=lnQ7YT+3L_U3$%6N\MYG/`p6"&2'/g<lN7Z5%"JHb5QV$1JH:kJ!(^Jt,VT32(]XjNJ-6'A!WsQr!Kb(s872EC0E;_&!!s'a"9q*m"!E-qOMCie@":RF2SF,'b&T%8Xq?Ajm(R-1P^p0I258H_]t_>X*>8"<d$5W!]-'<Q$^PQrTe$$2>,08""r8cALI,)9aY]_2n`Gm7YZq\G?.kDW;4H;E(+e'm6<A?<grgN2@DQuDi*hTGOMCie?iVH+!"p+K#n2=e#!`4l+FsQT^]6o5!$j5u&f:TT%"JHb5QV$1JH:kJ!(^Jt,VT32(]XjNJ-6')\&MpoEd]@F`aci*I42SE@te<=.(@3+_/arP\&MpoEd]@F`oD0:&*;Ae/6K%cjjnZ-=KW/sX>'\f(]XjNJ-6'A!WsQr!Kb(s872EC0E;_&!!s'a"9q*m"!E-qOMCie?iVH+TQ1\5#0Ls:@#I@)>=RLLjgNsHP_ATUW)U%H/>I-`b.[Hg:K+6<R:RLl609nc0JOa`DAdk$WVe7HJ3sbB8<j*'*:Xl3/Amj;BV/EegO?V9=193jX74;ZU6^3f<Ec]N:,ld#hTjhuK4a6$/@$4-aGi?nEUq2\04rqh5Pig%j4.s$<Ec]N:,o(?8SJ'Cfs'=7o=NA+p@<4_Ncq7!/)/,h.K<Lt312nW@5?.$TW^-4H`9iI01$toX\c=G:,p/Xcb;)fZ3O%J!$Y?K<3rc\I%5j7WRU%\oWW7CF,#phG?;o/&K)Zfm"nEXn(/PW^ntZ4^LHS&(7D[BnrdM$DRD&pEX^XiKMrZ"*Db1i,e3L=`g#t\">\kW"^0gWS)Z>SB3j=BIp(JL9Opn+q,m/=oqUC&LRAg#:JB3pPMNiPKIo]Q1S-YN9,?QH+cj9HOVqjaOd8,AB[tV<-"gRl2GX0"Uc[NHs4hN'%1qEpFJeiNl10e"hV;Y4.*\P,e7%J/?1%6H/0jhrn*`*7TS[pn:#Arsr(/ZK'R+)Loi.cUjtp(9nuq*K,UJqJQO<"(YEG-_og&D*T>a!!EkcZIqVHKa\eC+or3#0d9CBJ&4r@jtH#8r]`dT>b;S6[6Pl$\VV#&8&FglH-7o\L1`QMIX1>P:#[u@beW\j<oC!$,4P*?s/Ce^1[>YUa37]`TZE67?[`5-Ct\eEBZ;ppFGr8RL/>8_*#cZlG8&,,$??%9;[F[V`n@fjnCV#I:lS/l4/HPph+?4dHe[="&B?h40+,UM=i-[a%s)-=K>Y64#Ta[:-g%IM-$8@B0A&2f]d7parsOf67Vf3/kd2FC?jI2+E%jYB=b7>HpLSM7frc)DO/Qg&a,NNAXH-Mb$UjO1SddZR6Z7jKC=>oNBq3%T-FmgX>H(t$D46oe:0iK0#)46MNcRRb$*CVTo?R))bJ/sA0BI[mKJ<:T_R:o*8,8fp;UUr/RfhWE(M9d\,^A2Eh9:!'7)84kd3fGdW:L[=4M?5e82GqOrBXcFY&-TjIQP<L)<p"1eS<H9+S2h/JXE=n.+VG(OWJW8i>gC,;^TCe"7k'Z:1.D&Z@&$@dgn"mnCFj6hIA7O#QW@,Sim2[oPS4oj,,]ECI$mXlr4IqlFOlpCZnMH_D=C`I@#1gl01e[c7P8a,KhFHeO^=t0Ha,UF1%&RQmlb:D4RqGPBTpMc`S67)$.3EiLNr:Y3S1,OONICcP$ulA<b8)q.`o`QmgmQ/uqYjhcER?LSHg!B6V_:t4@eGR)Z]%=`ki[B'XV9=LNk(jAU,O9g)3(B(Rn];J+8Z^!K_b*`65^T;dT?"f=/bqr&&aB?$i4F!qT!bKkeES9nE8B^NS>U9kMf\\#)uI!`MrKqCs^*V6n/$4+RYDMn%SP['(10?je8OHinKRpD/?""j5O#V9+INjj,OPAfZDf9XZa]V#'NQ3")HV9c$Nf;pKQFd@7jE6D&F.fdT:J`7HSc5/;uf-d-QJI9;jhS;\BGX0A&BQ]Vm,/n5Du_V<Q1530h4@s*1YVGj'#i](*5!`k1D<N9d!HpJB-,@k"e[A1u+#C5(d,?6b\SE@QA_pJ2c*Cu1.(4S<7?4*_bdrO2?PH-]@cf.AH>:WoJV[j5_?<*RA]WUuJR_S#'R)b&p+MaPG<6BD+#;>fBoPC=?<937=TB24uiZUTU'/l&7HjNs3di^2K#VZp`W,(I5h-D%N`HqGDTp8>>hC0HZ9To=n.kpuSd(856]2Ti9!-]T(6(*1qU]Ua,b1[]:af8j)tb==&Bi`,bHrcQCr1B/1jnmhA<*sY91ZQK3m=+0$aCVTXacBe'=F_+gJ8n5tS[kp=:05D4t_b4ieanPd#nRC[#o<3BS4TuG?\2]bfP07a"V`GTS*"MMP]<'?:*CBOl5"$>f(L=I_=Gp"q`MrKp>[^:3M?>r::XR/gk6;\0R?Ps[pV5UgNn9S:E@QA_Wsn?^?=SZ7al<`Mdr9g.QE)Ul#pPURE@QA_Wsn?^BYTm'0;7;Co^lJ7)&K4!=0fuaQ"'VaH?-p.YGIf3&^%UCQ+iD]#'PgSo=%cMW_UkeqD0a!V6=EpJK87q5CE"RNnSA]>b"DnaXRBSVd%:=='`tY30h4@<<dV?i`s6&)&K4!=0fuazz*aAUSKK;b)~>endstream
endobj
694 0 obj
<<
/Contents 1109 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] /XObject <<
/FormXob.07d784879f56f2518a9854af4885a8b0 692 0 R /FormXob.16921e2991332acfab095a6a44d4411a 690 0 R
>>
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
695 0 obj
<<
/Contents 1110 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
696 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 581 0 R /XYZ 50.01575 451.2394 0 ] /Rect [ 40.01575 708.6394 121.7257 720.6394 ] /Subtype /Link /Type /Annot
>>
endobj
697 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 582 0 R /XYZ 50.01575 407.2394 0 ] /Rect [ 40.01575 690.6394 120.6157 702.6394 ] /Subtype /Link /Type /Annot
>>
endobj
698 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 578 0 R /XYZ 40.01575 127.8394 0 ] /Rect [ 40.01575 672.6394 112.8357 684.6394 ] /Subtype /Link /Type /Annot
>>
endobj
699 0 obj
<<
/Annots [ 696 0 R 697 0 R 698 0 R ] /Contents 1111 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 960 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
700 0 obj
<<
/Outlines 702 0 R /PageLabels 1112 0 R /PageMode /UseNone /Pages 960 0 R /Type /Catalog
>>
endobj
701 0 obj
<<
/Author () /CreationDate (D:20211025010248+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20211025010248+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False
>>
endobj
702 0 obj
<<
/Count 300 /First 703 0 R /Last 959 0 R /Type /Outlines
>>
endobj
703 0 obj
<<
/Count 255 /Dest [ 534 0 R /XYZ 40.01575 787.0394 0 ] /First 704 0 R /Last 958 0 R /Next 959 0 R /Parent 702 0 R 
  /Title (Welcome to pyg!)
>>
endobj
704 0 obj
<<
/Dest [ 534 0 R /XYZ 40.01575 747.0394 0 ] /Next 705 0 R /Parent 703 0 R /Title (README)
>>
endobj
705 0 obj
<<
/Count 81 /Dest [ 534 0 R /XYZ 40.01575 591.8394 0 ] /First 706 0 R /Last 779 0 R /Next 787 0 R /Parent 703 0 R 
  /Prev 704 0 R /Title (pyg.base)
>>
endobj
706 0 obj
<<
/Count 7 /Dest [ 534 0 R /XYZ 40.01575 556.6394 0 ] /First 707 0 R /Last 713 0 R /Next 714 0 R /Parent 705 0 R 
  /Title (extensions to dict)
>>
endobj
707 0 obj
<<
/Dest [ 534 0 R /XYZ 40.01575 523.8394 0 ] /Next 708 0 R /Parent 706 0 R /Title (dictattr)
>>
endobj
708 0 obj
<<
/Dest [ 536 0 R /XYZ 40.01575 455.4394 0 ] /Next 709 0 R /Parent 706 0 R /Prev 707 0 R /Title (ulist)
>>
endobj
709 0 obj
<<
/Dest [ 537 0 R /XYZ 40.01575 787.0394 0 ] /Next 710 0 R /Parent 706 0 R /Prev 708 0 R /Title (Dict)
>>
endobj
710 0 obj
<<
/Dest [ 537 0 R /XYZ 40.01575 158.6394 0 ] /Next 711 0 R /Parent 706 0 R /Prev 709 0 R /Title (dictable)
>>
endobj
711 0 obj
<<
/Dest [ 545 0 R /XYZ 40.01575 669.2394 0 ] /Next 712 0 R /Parent 706 0 R /Prev 710 0 R /Title (perdictable)
>>
endobj
712 0 obj
<<
/Dest [ 546 0 R /XYZ 40.01575 581.6394 0 ] /Next 713 0 R /Parent 706 0 R /Prev 711 0 R /Title (join)
>>
endobj
713 0 obj
<<
/Dest [ 547 0 R /XYZ 40.01575 300.4394 0 ] /Parent 706 0 R /Prev 712 0 R /Title (named_dict)
>>
endobj
714 0 obj
<<
/Count 7 /Dest [ 549 0 R /XYZ 40.01575 711.0394 0 ] /First 715 0 R /Last 721 0 R /Next 722 0 R /Parent 705 0 R 
  /Prev 706 0 R /Title (decorators)
>>
endobj
715 0 obj
<<
/Dest [ 549 0 R /XYZ 40.01575 678.2394 0 ] /Next 716 0 R /Parent 714 0 R /Title (wrapper)
>>
endobj
716 0 obj
<<
/Dest [ 550 0 R /XYZ 40.01575 318.4394 0 ] /Next 717 0 R /Parent 714 0 R /Prev 715 0 R /Title (timer)
>>
endobj
717 0 obj
<<
/Dest [ 551 0 R /XYZ 40.01575 740.2394 0 ] /Next 718 0 R /Parent 714 0 R /Prev 716 0 R /Title (try_value)
>>
endobj
718 0 obj
<<
/Dest [ 551 0 R /XYZ 40.01575 460.0394 0 ] /Next 719 0 R /Parent 714 0 R /Prev 717 0 R /Title (try_back)
>>
endobj
719 0 obj
<<
/Dest [ 551 0 R /XYZ 40.01575 341.8394 0 ] /Next 720 0 R /Parent 714 0 R /Prev 718 0 R /Title (loops)
>>
endobj
720 0 obj
<<
/Dest [ 552 0 R /XYZ 40.01575 665.4394 0 ] /Next 721 0 R /Parent 714 0 R /Prev 719 0 R /Title (loop)
>>
endobj
721 0 obj
<<
/Dest [ 552 0 R /XYZ 40.01575 581.0394 0 ] /Parent 714 0 R /Prev 720 0 R /Title (kwargs_support)
>>
endobj
722 0 obj
<<
/Count 5 /Dest [ 552 0 R /XYZ 40.01575 412.0394 0 ] /First 723 0 R /Last 727 0 R /Next 728 0 R /Parent 705 0 R 
  /Prev 714 0 R /Title (graphs & cells)
>>
endobj
723 0 obj
<<
/Dest [ 552 0 R /XYZ 40.01575 379.2394 0 ] /Next 724 0 R /Parent 722 0 R /Title (cell)
>>
endobj
724 0 obj
<<
/Dest [ 554 0 R /XYZ 40.01575 256.4394 0 ] /Next 725 0 R /Parent 722 0 R /Prev 723 0 R /Title (cell_go)
>>
endobj
725 0 obj
<<
/Dest [ 555 0 R /XYZ 40.01575 680.4394 0 ] /Next 726 0 R /Parent 722 0 R /Prev 724 0 R /Title (cell_item)
>>
endobj
726 0 obj
<<
/Dest [ 555 0 R /XYZ 40.01575 395.4394 0 ] /Next 727 0 R /Parent 722 0 R /Prev 725 0 R /Title (cell_func)
>>
endobj
727 0 obj
<<
/Dest [ 556 0 R /XYZ 40.01575 498.4394 0 ] /Parent 722 0 R /Prev 726 0 R /Title (cell_clear)
>>
endobj
728 0 obj
<<
/Count 7 /Dest [ 556 0 R /XYZ 40.01575 209.4394 0 ] /First 729 0 R /Last 735 0 R /Next 736 0 R /Parent 705 0 R 
  /Prev 722 0 R /Title (encode and decode/save and load)
>>
endobj
729 0 obj
<<
/Dest [ 556 0 R /XYZ 40.01575 176.6394 0 ] /Next 730 0 R /Parent 728 0 R /Title (encode)
>>
endobj
730 0 obj
<<
/Dest [ 557 0 R /XYZ 40.01575 422.4394 0 ] /Next 731 0 R /Parent 728 0 R /Prev 729 0 R /Title (decode)
>>
endobj
731 0 obj
<<
/Dest [ 557 0 R /XYZ 40.01575 106.4394 0 ] /Next 732 0 R /Parent 728 0 R /Prev 730 0 R /Title (pd_to_parquet)
>>
endobj
732 0 obj
<<
/Dest [ 558 0 R /XYZ 40.01575 480.4394 0 ] /Next 733 0 R /Parent 728 0 R /Prev 731 0 R /Title (pd_read_parquet)
>>
endobj
733 0 obj
<<
/Dest [ 558 0 R /XYZ 40.01575 117.4394 0 ] /Next 734 0 R /Parent 728 0 R /Prev 732 0 R /Title (parquet_encode)
>>
endobj
734 0 obj
<<
/Dest [ 559 0 R /XYZ 40.01575 641.4394 0 ] /Next 735 0 R /Parent 728 0 R /Prev 733 0 R /Title (csv_encode)
>>
endobj
735 0 obj
<<
/Dest [ 559 0 R /XYZ 40.01575 457.4394 0 ] /Parent 728 0 R /Prev 734 0 R /Title (convertors to bytes)
>>
endobj
736 0 obj
<<
/Count 9 /Dest [ 559 0 R /XYZ 40.01575 277.0394 0 ] /First 737 0 R /Last 745 0 R /Next 746 0 R /Parent 705 0 R 
  /Prev 728 0 R /Title (dates and calendar)
>>
endobj
737 0 obj
<<
/Dest [ 559 0 R /XYZ 40.01575 244.2394 0 ] /Next 738 0 R /Parent 736 0 R /Title (dt)
>>
endobj
738 0 obj
<<
/Dest [ 560 0 R /XYZ 40.01575 211.0394 0 ] /Next 739 0 R /Parent 736 0 R /Prev 737 0 R /Title (ymd)
>>
endobj
739 0 obj
<<
/Dest [ 560 0 R /XYZ 40.01575 132.6394 0 ] /Next 740 0 R /Parent 736 0 R /Prev 738 0 R /Title (dt_bump)
>>
endobj
740 0 obj
<<
/Dest [ 561 0 R /XYZ 40.01575 728.2394 0 ] /Next 741 0 R /Parent 736 0 R /Prev 739 0 R /Title (drange)
>>
endobj
741 0 obj
<<
/Dest [ 561 0 R /XYZ 40.01575 331.4394 0 ] /Next 742 0 R /Parent 736 0 R /Prev 740 0 R /Title (date_range)
>>
endobj
742 0 obj
<<
/Dest [ 561 0 R /XYZ 40.01575 277.0394 0 ] /Next 743 0 R /Parent 736 0 R /Prev 741 0 R /Title (Calendar)
>>
endobj
743 0 obj
<<
/Dest [ 564 0 R /XYZ 40.01575 489.0394 0 ] /Next 744 0 R /Parent 736 0 R /Prev 742 0 R /Title (calendar)
>>
endobj
744 0 obj
<<
/Dest [ 564 0 R /XYZ 40.01575 398.6394 0 ] /Next 745 0 R /Parent 736 0 R /Prev 743 0 R /Title (as_time)
>>
endobj
745 0 obj
<<
/Dest [ 564 0 R /XYZ 40.01575 91.43937 0 ] /Parent 736 0 R /Prev 744 0 R /Title (clock)
>>
endobj
746 0 obj
<<
/Count 8 /Dest [ 565 0 R /XYZ 40.01575 445.4394 0 ] /First 747 0 R /Last 754 0 R /Next 755 0 R /Parent 705 0 R 
  /Prev 736 0 R /Title (text manipulation)
>>
endobj
747 0 obj
<<
/Dest [ 565 0 R /XYZ 40.01575 412.6394 0 ] /Next 748 0 R /Parent 746 0 R /Title (lower)
>>
endobj
748 0 obj
<<
/Dest [ 565 0 R /XYZ 40.01575 251.4394 0 ] /Next 749 0 R /Parent 746 0 R /Prev 747 0 R /Title (upper)
>>
endobj
749 0 obj
<<
/Dest [ 565 0 R /XYZ 40.01575 90.23937 0 ] /Next 750 0 R /Parent 746 0 R /Prev 748 0 R /Title (proper)
>>
endobj
750 0 obj
<<
/Dest [ 566 0 R /XYZ 40.01575 652.2394 0 ] /Next 751 0 R /Parent 746 0 R /Prev 749 0 R /Title (capitalize)
>>
endobj
751 0 obj
<<
/Dest [ 566 0 R /XYZ 40.01575 491.0394 0 ] /Next 752 0 R /Parent 746 0 R /Prev 750 0 R /Title (strip)
>>
endobj
752 0 obj
<<
/Dest [ 566 0 R /XYZ 40.01575 329.8394 0 ] /Next 753 0 R /Parent 746 0 R /Prev 751 0 R /Title (split)
>>
endobj
753 0 obj
<<
/Dest [ 568 0 R /XYZ 40.01575 668.2394 0 ] /Next 754 0 R /Parent 746 0 R /Prev 752 0 R /Title (replace)
>>
endobj
754 0 obj
<<
/Dest [ 568 0 R /XYZ 40.01575 538.0394 0 ] /Parent 746 0 R /Prev 753 0 R /Title (common_prefix)
>>
endobj
755 0 obj
<<
/Count 2 /Dest [ 568 0 R /XYZ 40.01575 303.8394 0 ] /First 756 0 R /Last 757 0 R /Next 758 0 R /Parent 705 0 R 
  /Prev 746 0 R /Title (files & directory)
>>
endobj
756 0 obj
<<
/Dest [ 568 0 R /XYZ 40.01575 271.0394 0 ] /Next 757 0 R /Parent 755 0 R /Title (mkdir)
>>
endobj
757 0 obj
<<
/Dest [ 568 0 R /XYZ 40.01575 204.6394 0 ] /Parent 755 0 R /Prev 756 0 R /Title (read_csv)
>>
endobj
758 0 obj
<<
/Count 8 /Dest [ 568 0 R /XYZ 40.01575 114.2394 0 ] /First 759 0 R /Last 766 0 R /Next 767 0 R /Parent 705 0 R 
  /Prev 755 0 R /Title (tree manipulation)
>>
endobj
759 0 obj
<<
/Dest [ 569 0 R /XYZ 40.01575 787.0394 0 ] /Next 760 0 R /Parent 758 0 R /Title (tree_keys)
>>
endobj
760 0 obj
<<
/Dest [ 569 0 R /XYZ 40.01575 627.8394 0 ] /Next 761 0 R /Parent 758 0 R /Prev 759 0 R /Title (tree_values)
>>
endobj
761 0 obj
<<
/Dest [ 569 0 R /XYZ 40.01575 468.6394 0 ] /Next 762 0 R /Parent 758 0 R /Prev 760 0 R /Title (tree_items)
>>
endobj
762 0 obj
<<
/Dest [ 570 0 R /XYZ 40.01575 557.4394 0 ] /Next 763 0 R /Parent 758 0 R /Prev 761 0 R /Title (tree_update)
>>
endobj
763 0 obj
<<
/Dest [ 571 0 R /XYZ 40.01575 756.0394 0 ] /Next 764 0 R /Parent 758 0 R /Prev 762 0 R /Title (tree_setitem)
>>
endobj
764 0 obj
<<
/Dest [ 571 0 R /XYZ 40.01575 282.0394 0 ] /Next 765 0 R /Parent 758 0 R /Prev 763 0 R /Title (tree_repr)
>>
endobj
765 0 obj
<<
/Dest [ 572 0 R /XYZ 40.01575 496.2394 0 ] /Next 766 0 R /Parent 758 0 R /Prev 764 0 R /Title (items_to_tree)
>>
endobj
766 0 obj
<<
/Dest [ 573 0 R /XYZ 40.01575 523.2394 0 ] /Parent 758 0 R /Prev 765 0 R /Title (tree_to_table)
>>
endobj
767 0 obj
<<
/Count 5 /Dest [ 574 0 R /XYZ 40.01575 787.0394 0 ] /First 768 0 R /Last 772 0 R /Next 773 0 R /Parent 705 0 R 
  /Prev 758 0 R /Title (list functions)
>>
endobj
768 0 obj
<<
/Dest [ 574 0 R /XYZ 40.01575 754.2394 0 ] /Next 769 0 R /Parent 767 0 R /Title (as_list)
>>
endobj
769 0 obj
<<
/Dest [ 574 0 R /XYZ 40.01575 354.4394 0 ] /Next 770 0 R /Parent 767 0 R /Prev 768 0 R /Title (as_tuple)
>>
endobj
770 0 obj
<<
/Dest [ 575 0 R /XYZ 40.01575 674.0394 0 ] /Next 771 0 R /Parent 767 0 R /Prev 769 0 R /Title (first)
>>
endobj
771 0 obj
<<
/Dest [ 575 0 R /XYZ 40.01575 531.8394 0 ] /Next 772 0 R /Parent 767 0 R /Prev 770 0 R /Title (last)
>>
endobj
772 0 obj
<<
/Dest [ 575 0 R /XYZ 40.01575 389.6394 0 ] /Parent 767 0 R /Prev 771 0 R /Title (unique)
>>
endobj
773 0 obj
<<
/Count 5 /Dest [ 575 0 R /XYZ 40.01575 223.4394 0 ] /First 774 0 R /Last 778 0 R /Next 779 0 R /Parent 705 0 R 
  /Prev 767 0 R /Title (Comparing and Sorting)
>>
endobj
774 0 obj
<<
/Dest [ 575 0 R /XYZ 40.01575 190.6394 0 ] /Next 775 0 R /Parent 773 0 R /Title (cmp)
>>
endobj
775 0 obj
<<
/Dest [ 576 0 R /XYZ 40.01575 592.2394 0 ] /Next 776 0 R /Parent 773 0 R /Prev 774 0 R /Title (Cmp)
>>
endobj
776 0 obj
<<
/Dest [ 576 0 R /XYZ 40.01575 435.2394 0 ] /Next 777 0 R /Parent 773 0 R /Prev 775 0 R /Title (sort)
>>
endobj
777 0 obj
<<
/Dest [ 576 0 R /XYZ 40.01575 189.0394 0 ] /Next 778 0 R /Parent 773 0 R /Prev 776 0 R /Title (eq)
>>
endobj
778 0 obj
<<
/Dest [ 578 0 R /XYZ 40.01575 291.4394 0 ] /Parent 773 0 R /Prev 777 0 R /Title (in)
>>
endobj
779 0 obj
<<
/Count 7 /Dest [ 578 0 R /XYZ 40.01575 158.2394 0 ] /First 780 0 R /Last 786 0 R /Parent 705 0 R /Prev 773 0 R 
  /Title (bits and pieces)
>>
endobj
780 0 obj
<<
/Dest [ 578 0 R /XYZ 40.01575 125.4394 0 ] /Next 781 0 R /Parent 779 0 R /Title (type functions)
>>
endobj
781 0 obj
<<
/Dest [ 579 0 R /XYZ 40.01575 249.0394 0 ] /Next 782 0 R /Parent 779 0 R /Prev 780 0 R /Title (zipper)
>>
endobj
782 0 obj
<<
/Dest [ 580 0 R /XYZ 40.01575 635.2394 0 ] /Next 783 0 R /Parent 779 0 R /Prev 781 0 R /Title (reducer)
>>
endobj
783 0 obj
<<
/Dest [ 580 0 R /XYZ 40.01575 289.4394 0 ] /Next 784 0 R /Parent 779 0 R /Prev 782 0 R /Title (reducing)
>>
endobj
784 0 obj
<<
/Dest [ 581 0 R /XYZ 40.01575 787.0394 0 ] /Next 785 0 R /Parent 779 0 R /Prev 783 0 R /Title (logger and get_logger)
>>
endobj
785 0 obj
<<
/Dest [ 581 0 R /XYZ 40.01575 499.6394 0 ] /Next 786 0 R /Parent 779 0 R /Prev 784 0 R /Title (access functions)
>>
endobj
786 0 obj
<<
/Dest [ 582 0 R /XYZ 40.01575 455.6394 0 ] /Parent 779 0 R /Prev 785 0 R /Title (inspection)
>>
endobj
787 0 obj
<<
/Count 16 /Dest [ 587 0 R /XYZ 40.01575 744.0394 0 ] /First 788 0 R /Last 798 0 R /Next 804 0 R /Parent 703 0 R 
  /Prev 705 0 R /Title (pyg.mongo)
>>
endobj
788 0 obj
<<
/Count 1 /Dest [ 587 0 R /XYZ 40.01575 576.8394 0 ] /First 789 0 R /Last 789 0 R /Next 790 0 R /Parent 787 0 R 
  /Title (Query generator)
>>
endobj
789 0 obj
<<
/Dest [ 587 0 R /XYZ 40.01575 526.0394 0 ] /Parent 788 0 R /Title (q and Q)
>>
endobj
790 0 obj
<<
/Count 4 /Dest [ 588 0 R /XYZ 40.01575 787.0394 0 ] /First 791 0 R /Last 794 0 R /Next 795 0 R /Parent 787 0 R 
  /Prev 788 0 R /Title (Tables in Mongo)
>>
endobj
791 0 obj
<<
/Dest [ 588 0 R /XYZ 40.01575 754.2394 0 ] /Next 792 0 R /Parent 790 0 R /Title (mongo_cursor)
>>
endobj
792 0 obj
<<
/Dest [ 592 0 R /XYZ 40.01575 704.0394 0 ] /Next 793 0 R /Parent 790 0 R /Prev 791 0 R /Title (mongo_reader)
>>
endobj
793 0 obj
<<
/Dest [ 595 0 R /XYZ 40.01575 744.0394 0 ] /Next 794 0 R /Parent 790 0 R /Prev 792 0 R /Title (mongo_pk_reader)
>>
endobj
794 0 obj
<<
/Dest [ 595 0 R /XYZ 40.01575 290.6394 0 ] /Parent 790 0 R /Prev 793 0 R /Title (mongo_pk_cursor)
>>
endobj
795 0 obj
<<
/Count 2 /Dest [ 595 0 R /XYZ 40.01575 203.2394 0 ] /First 796 0 R /Last 797 0 R /Next 798 0 R /Parent 787 0 R 
  /Prev 790 0 R /Title (encoding docs before saving to mongo)
>>
endobj
796 0 obj
<<
/Dest [ 595 0 R /XYZ 40.01575 128.4394 0 ] /Next 797 0 R /Parent 795 0 R /Title (parquet_write)
>>
endobj
797 0 obj
<<
/Dest [ 596 0 R /XYZ 40.01575 699.0394 0 ] /Parent 795 0 R /Prev 796 0 R /Title (csv_write)
>>
endobj
798 0 obj
<<
/Count 5 /Dest [ 596 0 R /XYZ 40.01575 548.6394 0 ] /First 799 0 R /Last 803 0 R /Parent 787 0 R /Prev 795 0 R 
  /Title (cells in Mongo)
>>
endobj
799 0 obj
<<
/Dest [ 596 0 R /XYZ 40.01575 497.8394 0 ] /Next 800 0 R /Parent 798 0 R /Title (db_cell)
>>
endobj
800 0 obj
<<
/Dest [ 598 0 R /XYZ 40.01575 310.4394 0 ] /Next 801 0 R /Parent 798 0 R /Prev 799 0 R /Title (periodic_cell)
>>
endobj
801 0 obj
<<
/Dest [ 599 0 R /XYZ 40.01575 577.4394 0 ] /Next 802 0 R /Parent 798 0 R /Prev 800 0 R /Title (get_cell)
>>
endobj
802 0 obj
<<
/Dest [ 599 0 R /XYZ 40.01575 547.0394 0 ] /Next 803 0 R /Parent 798 0 R /Prev 801 0 R /Title (db_save)
>>
endobj
803 0 obj
<<
/Dest [ 599 0 R /XYZ 40.01575 340.8394 0 ] /Parent 798 0 R /Prev 802 0 R /Title (db_load)
>>
endobj
804 0 obj
<<
/Count 62 /Dest [ 599 0 R /XYZ 40.01575 191.4394 0 ] /First 805 0 R /Last 861 0 R /Next 867 0 R /Parent 703 0 R 
  /Prev 787 0 R /Title (pyg.timeseries)
>>
endobj
805 0 obj
<<
/Count 16 /Dest [ 600 0 R /XYZ 40.01575 486.0394 0 ] /First 806 0 R /Last 821 0 R /Next 822 0 R /Parent 804 0 R 
  /Title (simple functions)
>>
endobj
806 0 obj
<<
/Dest [ 600 0 R /XYZ 40.01575 453.2394 0 ] /Next 807 0 R /Parent 805 0 R /Title (diff)
>>
endobj
807 0 obj
<<
/Dest [ 600 0 R /XYZ 40.01575 106.2394 0 ] /Next 808 0 R /Parent 805 0 R /Prev 806 0 R /Title (shift)
>>
endobj
808 0 obj
<<
/Dest [ 601 0 R /XYZ 40.01575 328.8394 0 ] /Next 809 0 R /Parent 805 0 R /Prev 807 0 R /Title (ratio)
>>
endobj
809 0 obj
<<
/Dest [ 602 0 R /XYZ 40.01575 787.0394 0 ] /Next 810 0 R /Parent 805 0 R /Prev 808 0 R /Title (ts_count)
>>
endobj
810 0 obj
<<
/Dest [ 602 0 R /XYZ 40.01575 483.2394 0 ] /Next 811 0 R /Parent 805 0 R /Prev 809 0 R /Title (ts_sum)
>>
endobj
811 0 obj
<<
/Dest [ 603 0 R /XYZ 40.01575 728.2394 0 ] /Next 812 0 R /Parent 805 0 R /Prev 810 0 R /Title (ts_mean)
>>
endobj
812 0 obj
<<
/Dest [ 603 0 R /XYZ 40.01575 261.4394 0 ] /Next 813 0 R /Parent 805 0 R /Prev 811 0 R /Title (ts_rms)
>>
endobj
813 0 obj
<<
/Dest [ 604 0 R /XYZ 40.01575 512.8394 0 ] /Next 814 0 R /Parent 805 0 R /Prev 812 0 R /Title (ts_std)
>>
endobj
814 0 obj
<<
/Dest [ 604 0 R /XYZ 40.01575 194.2394 0 ] /Next 815 0 R /Parent 805 0 R /Prev 813 0 R /Title (ts_skew)
>>
endobj
815 0 obj
<<
/Dest [ 605 0 R /XYZ 40.01575 388.6394 0 ] /Next 816 0 R /Parent 805 0 R /Prev 814 0 R /Title (ts_min)
>>
endobj
816 0 obj
<<
/Dest [ 605 0 R /XYZ 40.01575 334.2394 0 ] /Next 817 0 R /Parent 805 0 R /Prev 815 0 R /Title (ts_max)
>>
endobj
817 0 obj
<<
/Dest [ 605 0 R /XYZ 40.01575 279.8394 0 ] /Next 818 0 R /Parent 805 0 R /Prev 816 0 R /Title (ts_median)
>>
endobj
818 0 obj
<<
/Dest [ 605 0 R /XYZ 40.01575 225.4394 0 ] /Next 819 0 R /Parent 805 0 R /Prev 817 0 R /Title (fnna)
>>
endobj
819 0 obj
<<
/Dest [ 605 0 R /XYZ 40.01575 74.23937 0 ] /Next 820 0 R /Parent 805 0 R /Prev 818 0 R /Title (v2na/na2v)
>>
endobj
820 0 obj
<<
/Dest [ 606 0 R /XYZ 40.01575 332.4394 0 ] /Next 821 0 R /Parent 805 0 R /Prev 819 0 R /Title (ffill/bfill)
>>
endobj
821 0 obj
<<
/Dest [ 607 0 R /XYZ 40.01575 611.4394 0 ] /Parent 805 0 R /Prev 820 0 R /Title (nona)
>>
endobj
822 0 obj
<<
/Count 11 /Dest [ 607 0 R /XYZ 40.01575 345.4394 0 ] /First 823 0 R /Last 833 0 R /Next 834 0 R /Parent 804 0 R 
  /Prev 805 0 R /Title (expanding window functions)
>>
endobj
823 0 obj
<<
/Dest [ 607 0 R /XYZ 40.01575 312.6394 0 ] /Next 824 0 R /Parent 822 0 R /Title (expanding_mean)
>>
endobj
824 0 obj
<<
/Dest [ 608 0 R /XYZ 40.01575 279.0394 0 ] /Next 825 0 R /Parent 822 0 R /Prev 823 0 R /Title (expanding_rms)
>>
endobj
825 0 obj
<<
/Dest [ 609 0 R /XYZ 40.01575 279.0394 0 ] /Next 826 0 R /Parent 822 0 R /Prev 824 0 R /Title (expanding_std)
>>
endobj
826 0 obj
<<
/Dest [ 610 0 R /XYZ 40.01575 246.0394 0 ] /Next 827 0 R /Parent 822 0 R /Prev 825 0 R /Title (expanding_sum)
>>
endobj
827 0 obj
<<
/Dest [ 611 0 R /XYZ 40.01575 215.0394 0 ] /Next 828 0 R /Parent 822 0 R /Prev 826 0 R /Title (expanding_skew)
>>
endobj
828 0 obj
<<
/Dest [ 612 0 R /XYZ 40.01575 471.6394 0 ] /Next 829 0 R /Parent 822 0 R /Prev 827 0 R /Title (expanding_min)
>>
endobj
829 0 obj
<<
/Dest [ 613 0 R /XYZ 40.01575 428.6394 0 ] /Next 830 0 R /Parent 822 0 R /Prev 828 0 R /Title (expanding_max)
>>
endobj
830 0 obj
<<
/Dest [ 614 0 R /XYZ 40.01575 389.8394 0 ] /Next 831 0 R /Parent 822 0 R /Prev 829 0 R /Title (expanding_median)
>>
endobj
831 0 obj
<<
/Dest [ 615 0 R /XYZ 40.01575 509.6394 0 ] /Next 832 0 R /Parent 822 0 R /Prev 830 0 R /Title (expanding_rank)
>>
endobj
832 0 obj
<<
/Dest [ 615 0 R /XYZ 40.01575 188.6394 0 ] /Next 833 0 R /Parent 822 0 R /Prev 831 0 R /Title (cumsum)
>>
endobj
833 0 obj
<<
/Dest [ 616 0 R /XYZ 40.01575 153.0394 0 ] /Parent 822 0 R /Prev 832 0 R /Title (cumprod)
>>
endobj
834 0 obj
<<
/Count 10 /Dest [ 617 0 R /XYZ 40.01575 116.0394 0 ] /First 835 0 R /Last 844 0 R /Next 845 0 R /Parent 804 0 R 
  /Prev 822 0 R /Title (rolling window functions)
>>
endobj
835 0 obj
<<
/Dest [ 617 0 R /XYZ 40.01575 83.23937 0 ] /Next 836 0 R /Parent 834 0 R /Title (rolling_mean)
>>
endobj
836 0 obj
<<
/Dest [ 619 0 R /XYZ 40.01575 696.2394 0 ] /Next 837 0 R /Parent 834 0 R /Prev 835 0 R /Title (rolling_rms)
>>
endobj
837 0 obj
<<
/Dest [ 620 0 R /XYZ 40.01575 609.4394 0 ] /Next 838 0 R /Parent 834 0 R /Prev 836 0 R /Title (rolling_std)
>>
endobj
838 0 obj
<<
/Dest [ 621 0 R /XYZ 40.01575 504.6394 0 ] /Next 839 0 R /Parent 834 0 R /Prev 837 0 R /Title (rolling_sum)
>>
endobj
839 0 obj
<<
/Dest [ 622 0 R /XYZ 40.01575 372.8394 0 ] /Next 840 0 R /Parent 834 0 R /Prev 838 0 R /Title (rolling_skew)
>>
endobj
840 0 obj
<<
/Dest [ 623 0 R /XYZ 40.01575 368.8394 0 ] /Next 841 0 R /Parent 834 0 R /Prev 839 0 R /Title (rolling_min)
>>
endobj
841 0 obj
<<
/Dest [ 624 0 R /XYZ 40.01575 416.8394 0 ] /Next 842 0 R /Parent 834 0 R /Prev 840 0 R /Title (rolling_max)
>>
endobj
842 0 obj
<<
/Dest [ 625 0 R /XYZ 40.01575 479.6394 0 ] /Next 843 0 R /Parent 834 0 R /Prev 841 0 R /Title (rolling_median)
>>
endobj
843 0 obj
<<
/Dest [ 626 0 R /XYZ 40.01575 536.6394 0 ] /Next 844 0 R /Parent 834 0 R /Prev 842 0 R /Title (rolling_quantile)
>>
endobj
844 0 obj
<<
/Dest [ 627 0 R /XYZ 40.01575 787.0394 0 ] /Parent 834 0 R /Prev 843 0 R /Title (rolling_rank)
>>
endobj
845 0 obj
<<
/Count 10 /Dest [ 627 0 R /XYZ 40.01575 289.2394 0 ] /First 846 0 R /Last 855 0 R /Next 856 0 R /Parent 804 0 R 
  /Prev 834 0 R /Title (exponentially weighted moving functions)
>>
endobj
846 0 obj
<<
/Dest [ 627 0 R /XYZ 40.01575 256.4394 0 ] /Next 847 0 R /Parent 845 0 R /Title (ewma)
>>
endobj
847 0 obj
<<
/Dest [ 629 0 R /XYZ 40.01575 675.2394 0 ] /Next 848 0 R /Parent 845 0 R /Prev 846 0 R /Title (ewmrms)
>>
endobj
848 0 obj
<<
/Dest [ 630 0 R /XYZ 40.01575 375.8394 0 ] /Next 849 0 R /Parent 845 0 R /Prev 847 0 R /Title (ewmstd)
>>
endobj
849 0 obj
<<
/Dest [ 631 0 R /XYZ 40.01575 196.2394 0 ] /Next 850 0 R /Parent 845 0 R /Prev 848 0 R /Title (ewmskew)
>>
endobj
850 0 obj
<<
/Dest [ 633 0 R /XYZ 40.01575 687.2394 0 ] /Next 851 0 R /Parent 845 0 R /Prev 849 0 R /Title (ewmvar)
>>
endobj
851 0 obj
<<
/Dest [ 635 0 R /XYZ 40.01575 495.6394 0 ] /Next 852 0 R /Parent 845 0 R /Prev 850 0 R /Title (ewmcor)
>>
endobj
852 0 obj
<<
/Dest [ 636 0 R /XYZ 40.01575 452.8394 0 ] /Next 853 0 R /Parent 845 0 R /Prev 851 0 R /Title (ewmcorr)
>>
endobj
853 0 obj
<<
/Dest [ 637 0 R /XYZ 40.01575 114.4394 0 ] /Next 854 0 R /Parent 845 0 R /Prev 852 0 R /Title (ewmLR)
>>
endobj
854 0 obj
<<
/Dest [ 642 0 R /XYZ 40.01575 596.4394 0 ] /Next 855 0 R /Parent 845 0 R /Prev 853 0 R /Title (ewmGLM)
>>
endobj
855 0 obj
<<
/Dest [ 643 0 R /XYZ 40.01575 662.4394 0 ] /Parent 845 0 R /Prev 854 0 R /Title (ewmxo)
>>
endobj
856 0 obj
<<
/Count 4 /Dest [ 643 0 R /XYZ 40.01575 369.4394 0 ] /First 857 0 R /Last 860 0 R /Next 861 0 R /Parent 804 0 R 
  /Prev 845 0 R /Title (functions exposing their state)
>>
endobj
857 0 obj
<<
/Dest [ 643 0 R /XYZ 40.01575 336.6394 0 ] /Next 858 0 R /Parent 856 0 R /Title (simple functions)
>>
endobj
858 0 obj
<<
/Dest [ 644 0 R /XYZ 40.01575 669.0394 0 ] /Next 859 0 R /Parent 856 0 R /Prev 857 0 R /Title (expanding window functions)
>>
endobj
859 0 obj
<<
/Dest [ 644 0 R /XYZ 40.01575 266.6394 0 ] /Next 860 0 R /Parent 856 0 R /Prev 858 0 R /Title (rolling window functions)
>>
endobj
860 0 obj
<<
/Dest [ 645 0 R /XYZ 40.01575 585.0394 0 ] /Parent 856 0 R /Prev 859 0 R /Title (exponentially weighted moving functions)
>>
endobj
861 0 obj
<<
/Count 5 /Dest [ 645 0 R /XYZ 40.01575 110.6394 0 ] /First 862 0 R /Last 866 0 R /Parent 804 0 R /Prev 856 0 R 
  /Title (Index handling)
>>
endobj
862 0 obj
<<
/Dest [ 645 0 R /XYZ 40.01575 77.83937 0 ] /Next 863 0 R /Parent 861 0 R /Title (df_fillna)
>>
endobj
863 0 obj
<<
/Dest [ 646 0 R /XYZ 40.01575 127.0394 0 ] /Next 864 0 R /Parent 861 0 R /Prev 862 0 R /Title (df_index)
>>
endobj
864 0 obj
<<
/Dest [ 647 0 R /XYZ 40.01575 561.2394 0 ] /Next 865 0 R /Parent 861 0 R /Prev 863 0 R /Title (df_reindex)
>>
endobj
865 0 obj
<<
/Dest [ 647 0 R /XYZ 40.01575 145.2394 0 ] /Next 866 0 R /Parent 861 0 R /Prev 864 0 R /Title (presync)
>>
endobj
866 0 obj
<<
/Dest [ 649 0 R /XYZ 40.01575 300.4394 0 ] /Parent 861 0 R /Prev 865 0 R /Title (add/sub/mul/div/pow operators)
>>
endobj
867 0 obj
<<
/Dest [ 649 0 R /XYZ 40.01575 114.0394 0 ] /Next 868 0 R /Parent 703 0 R /Prev 804 0 R /Title (Tutorials)
>>
endobj
868 0 obj
<<
/Count 7 /Dest [ 652 0 R /XYZ 40.01575 787.0394 0 ] /First 869 0 R /Last 875 0 R /Next 876 0 R /Parent 703 0 R 
  /Prev 867 0 R /Title (pyg.base.Dict)
>>
endobj
869 0 obj
<<
/Dest [ 652 0 R /XYZ 40.01575 721.8394 0 ] /Next 870 0 R /Parent 868 0 R /Title (initialization)
>>
endobj
870 0 obj
<<
/Dest [ 652 0 R /XYZ 40.01575 571.8394 0 ] /Next 871 0 R /Parent 868 0 R /Prev 869 0 R /Title (members access)
>>
endobj
871 0 obj
<<
/Dest [ 652 0 R /XYZ 40.01575 308.2394 0 ] /Next 872 0 R /Parent 868 0 R /Prev 870 0 R /Title (adding)
>>
endobj
872 0 obj
<<
/Dest [ 652 0 R /XYZ 40.01575 137.0394 0 ] /Next 873 0 R /Parent 868 0 R /Prev 871 0 R /Title (subtracting)
>>
endobj
873 0 obj
<<
/Dest [ 653 0 R /XYZ 40.01575 740.2394 0 ] /Next 874 0 R /Parent 868 0 R /Prev 872 0 R /Title (modifying the keys: rename)
>>
endobj
874 0 obj
<<
/Dest [ 653 0 R /XYZ 40.01575 602.2394 0 ] /Next 875 0 R /Parent 868 0 R /Prev 873 0 R /Title (modifying the values: do)
>>
endobj
875 0 obj
<<
/Dest [ 653 0 R /XYZ 40.01575 491.0394 0 ] /Parent 868 0 R /Prev 874 0 R /Title (Dict can store a calculation flow)
>>
endobj
876 0 obj
<<
/Count 25 /Dest [ 654 0 R /XYZ 40.01575 787.0394 0 ] /First 877 0 R /Last 881 0 R /Next 902 0 R /Parent 703 0 R 
  /Prev 868 0 R /Title (pyg.base.dictable)
>>
endobj
877 0 obj
<<
/Dest [ 654 0 R /XYZ 40.01575 571.8394 0 ] /Next 878 0 R /Parent 876 0 R /Title (Motivation: dictable as an organiser of research flow)
>>
endobj
878 0 obj
<<
/Count 2 /Dest [ 655 0 R /XYZ 40.01575 787.0394 0 ] /First 879 0 R /Last 880 0 R /Next 881 0 R /Parent 876 0 R 
  /Prev 877 0 R /Title (Same code, in dictable)
>>
endobj
879 0 obj
<<
/Dest [ 655 0 R /XYZ 40.01575 513.8394 0 ] /Next 880 0 R /Parent 878 0 R /Title (Oh, no, we have a bad symbol, how do we remove it?)
>>
endobj
880 0 obj
<<
/Dest [ 655 0 R /XYZ 40.01575 458.6394 0 ] /Parent 878 0 R /Prev 879 0 R /Title (Now if we want to calculate something per symbol and window\203)
>>
endobj
881 0 obj
<<
/Count 20 /Dest [ 655 0 R /XYZ 40.01575 263.0394 0 ] /First 882 0 R /Last 901 0 R /Parent 876 0 R /Prev 878 0 R 
  /Title (dictable functionality)
>>
endobj
882 0 obj
<<
/Dest [ 655 0 R /XYZ 40.01575 230.2394 0 ] /Next 883 0 R /Parent 881 0 R /Title (construction)
>>
endobj
883 0 obj
<<
/Dest [ 656 0 R /XYZ 40.01575 725.4394 0 ] /Next 884 0 R /Parent 881 0 R /Prev 882 0 R /Title (row access)
>>
endobj
884 0 obj
<<
/Dest [ 656 0 R /XYZ 40.01575 604.6394 0 ] /Next 885 0 R /Parent 881 0 R /Prev 883 0 R /Title (column access)
>>
endobj
885 0 obj
<<
/Dest [ 656 0 R /XYZ 40.01575 469.0394 0 ] /Next 886 0 R /Parent 881 0 R /Prev 884 0 R /Title (d is a dict so supports the usual keys\(\), values\(\) and items\(\):)
>>
endobj
886 0 obj
<<
/Dest [ 656 0 R /XYZ 40.01575 363.0394 0 ] /Next 887 0 R /Parent 881 0 R /Prev 885 0 R /Title (column and row access are commutative)
>>
endobj
887 0 obj
<<
/Dest [ 656 0 R /XYZ 40.01575 259.8394 0 ] /Next 888 0 R /Parent 881 0 R /Prev 886 0 R /Title (adding records)
>>
endobj
888 0 obj
<<
/Dest [ 656 0 R /XYZ 40.01575 97.43937 0 ] /Next 889 0 R /Parent 881 0 R /Prev 887 0 R /Title (adding/modifying columns)
>>
endobj
889 0 obj
<<
/Dest [ 657 0 R /XYZ 40.01575 635.8394 0 ] /Next 890 0 R /Parent 881 0 R /Prev 888 0 R /Title (do)
>>
endobj
890 0 obj
<<
/Dest [ 657 0 R /XYZ 40.01575 568.6394 0 ] /Next 891 0 R /Parent 881 0 R /Prev 889 0 R /Title (removing columns)
>>
endobj
891 0 obj
<<
/Dest [ 657 0 R /XYZ 40.01575 513.4394 0 ] /Next 892 0 R /Parent 881 0 R /Prev 890 0 R /Title (removing rows)
>>
endobj
892 0 obj
<<
/Dest [ 657 0 R /XYZ 40.01575 351.0394 0 ] /Next 893 0 R /Parent 881 0 R /Prev 891 0 R /Title (sort)
>>
endobj
893 0 obj
<<
/Dest [ 657 0 R /XYZ 40.01575 269.0394 0 ] /Next 894 0 R /Parent 881 0 R /Prev 892 0 R /Title (listby\(keys\))
>>
endobj
894 0 obj
<<
/Dest [ 657 0 R /XYZ 40.01575 112.2394 0 ] /Next 895 0 R /Parent 881 0 R /Prev 893 0 R /Title (unlist)
>>
endobj
895 0 obj
<<
/Dest [ 658 0 R /XYZ 40.01575 787.0394 0 ] /Next 896 0 R /Parent 881 0 R /Prev 894 0 R /Title (groupby\(keys\) and ungroup)
>>
endobj
896 0 obj
<<
/Dest [ 658 0 R /XYZ 40.01575 654.2394 0 ] /Next 897 0 R /Parent 881 0 R /Prev 895 0 R /Title (inner join)
>>
endobj
897 0 obj
<<
/Dest [ 658 0 R /XYZ 40.01575 315.4394 0 ] /Next 898 0 R /Parent 881 0 R /Prev 896 0 R /Title (inner join \(with other columns that match names\))
>>
endobj
898 0 obj
<<
/Dest [ 658 0 R /XYZ 40.01575 197.4394 0 ] /Next 899 0 R /Parent 881 0 R /Prev 897 0 R /Title (cross join)
>>
endobj
899 0 obj
<<
/Dest [ 659 0 R /XYZ 40.01575 787.0394 0 ] /Next 900 0 R /Parent 881 0 R /Prev 898 0 R /Title (xor \(versus left and right join\))
>>
endobj
900 0 obj
<<
/Dest [ 659 0 R /XYZ 40.01575 453.4394 0 ] /Next 901 0 R /Parent 881 0 R /Prev 899 0 R /Title (pivot)
>>
endobj
901 0 obj
<<
/Dest [ 659 0 R /XYZ 40.01575 335.4394 0 ] /Parent 881 0 R /Prev 900 0 R /Title (a few observations:)
>>
endobj
902 0 obj
<<
/Count 15 /Dest [ 659 0 R /XYZ 40.01575 193.4394 0 ] /First 903 0 R /Last 917 0 R /Next 918 0 R /Parent 703 0 R 
  /Prev 876 0 R /Title (pyg.mongo)
>>
endobj
903 0 obj
<<
/Dest [ 662 0 R /XYZ 40.01575 687.0394 0 ] /Next 904 0 R /Parent 902 0 R /Title (q)
>>
endobj
904 0 obj
<<
/Count 11 /Dest [ 662 0 R /XYZ 40.01575 121.8394 0 ] /First 905 0 R /Last 915 0 R /Next 916 0 R /Parent 902 0 R 
  /Prev 903 0 R /Title (mongo_cursor)
>>
endobj
905 0 obj
<<
/Dest [ 663 0 R /XYZ 40.01575 741.0394 0 ] /Next 906 0 R /Parent 904 0 R /Title (general objects insertion into documents)
>>
endobj
906 0 obj
<<
/Dest [ 663 0 R /XYZ 40.01575 189.0394 0 ] /Next 907 0 R /Parent 904 0 R /Prev 905 0 R /Title (document reading)
>>
endobj
907 0 obj
<<
/Dest [ 666 0 R /XYZ 40.01575 681.0394 0 ] /Next 908 0 R /Parent 904 0 R /Prev 906 0 R /Title (document writing to files)
>>
endobj
908 0 obj
<<
/Dest [ 666 0 R /XYZ 40.01575 293.4394 0 ] /Next 909 0 R /Parent 904 0 R /Prev 907 0 R /Title (document access)
>>
endobj
909 0 obj
<<
/Dest [ 666 0 R /XYZ 40.01575 202.2394 0 ] /Next 910 0 R /Parent 904 0 R /Prev 908 0 R /Title (filters)
>>
endobj
910 0 obj
<<
/Dest [ 667 0 R /XYZ 40.01575 728.2394 0 ] /Next 911 0 R /Parent 904 0 R /Prev 909 0 R /Title (iteration)
>>
endobj
911 0 obj
<<
/Dest [ 667 0 R /XYZ 40.01575 607.4394 0 ] /Next 912 0 R /Parent 904 0 R /Prev 910 0 R /Title (sorting)
>>
endobj
912 0 obj
<<
/Dest [ 667 0 R /XYZ 40.01575 552.2394 0 ] /Next 913 0 R /Parent 904 0 R /Prev 911 0 R /Title (getitem of a specfic document)
>>
endobj
913 0 obj
<<
/Dest [ 667 0 R /XYZ 40.01575 497.0394 0 ] /Next 914 0 R /Parent 904 0 R /Prev 912 0 R /Title (column access)
>>
endobj
914 0 obj
<<
/Dest [ 667 0 R /XYZ 40.01575 376.2394 0 ] /Next 915 0 R /Parent 904 0 R /Prev 913 0 R /Title (add/remove columns)
>>
endobj
915 0 obj
<<
/Dest [ 667 0 R /XYZ 40.01575 231.4394 0 ] /Parent 904 0 R /Prev 914 0 R /Title (add/remove records)
>>
endobj
916 0 obj
<<
/Dest [ 668 0 R /XYZ 40.01575 740.2394 0 ] /Next 917 0 R /Parent 902 0 R /Prev 904 0 R /Title (mongo_pk_table)
>>
endobj
917 0 obj
<<
/Dest [ 668 0 R /XYZ 40.01575 227.8394 0 ] /Parent 902 0 R /Prev 916 0 R /Title (mongo_reader and mongo_pk_reader)
>>
endobj
918 0 obj
<<
/Count 13 /Dest [ 669 0 R /XYZ 40.01575 725.4394 0 ] /First 919 0 R /Last 931 0 R /Next 932 0 R /Parent 703 0 R 
  /Prev 902 0 R /Title (pyg.base.cell)
>>
endobj
919 0 obj
<<
/Dest [ 669 0 R /XYZ 40.01575 582.2394 0 ] /Next 920 0 R /Parent 918 0 R /Title (Cell 101)
>>
endobj
920 0 obj
<<
/Count 1 /Dest [ 669 0 R /XYZ 40.01575 301.0394 0 ] /First 921 0 R /Last 921 0 R /Next 922 0 R /Parent 918 0 R 
  /Prev 919 0 R /Title (Workflow without saving to the database)
>>
endobj
921 0 obj
<<
/Dest [ 670 0 R /XYZ 40.01575 569.4394 0 ] /Parent 920 0 R /Title (some more functions to calculate the profits & loss as well as the signal/noise ratio)
>>
endobj
922 0 obj
<<
/Count 4 /Dest [ 670 0 R /XYZ 40.01575 332.2394 0 ] /First 923 0 R /Last 926 0 R /Next 927 0 R /Parent 918 0 R 
  /Prev 920 0 R /Title (Workflow while saving to MongoDB)
>>
endobj
923 0 obj
<<
/Dest [ 670 0 R /XYZ 40.01575 299.4394 0 ] /Next 924 0 R /Parent 922 0 R /Title (Table creation)
>>
endobj
924 0 obj
<<
/Dest [ 670 0 R /XYZ 40.01575 181.4394 0 ] /Next 925 0 R /Parent 922 0 R /Prev 923 0 R /Title (Any code differences?)
>>
endobj
925 0 obj
<<
/Dest [ 671 0 R /XYZ 40.01575 740.2394 0 ] /Next 926 0 R /Parent 922 0 R /Prev 924 0 R /Title (Accessing the data in MongoDB)
>>
endobj
926 0 obj
<<
/Dest [ 671 0 R /XYZ 40.01575 529.8394 0 ] /Parent 922 0 R /Prev 925 0 R /Title (Calculating the forecasts & saving them)
>>
endobj
927 0 obj
<<
/Dest [ 671 0 R /XYZ 40.01575 343.4394 0 ] /Next 928 0 R /Parent 918 0 R /Prev 922 0 R /Title (Accessing & running the graph once the graph has been created)
>>
endobj
928 0 obj
<<
/Dest [ 671 0 R /XYZ 40.01575 199.0394 0 ] /Next 929 0 R /Parent 918 0 R /Prev 927 0 R /Title (Point-in-time, cache and persistency)
>>
endobj
929 0 obj
<<
/Dest [ 672 0 R /XYZ 40.01575 99.83937 0 ] /Next 930 0 R /Parent 918 0 R /Prev 928 0 R /Title (Comparison of the two workflows)
>>
endobj
930 0 obj
<<
/Dest [ 673 0 R /XYZ 40.01575 627.0394 0 ] /Next 931 0 R /Parent 918 0 R /Prev 929 0 R /Title (To save or not to save?)
>>
endobj
931 0 obj
<<
/Dest [ 673 0 R /XYZ 40.01575 138.2394 0 ] /Parent 918 0 R /Prev 930 0 R /Title (Behind the scene: cell_func)
>>
endobj
932 0 obj
<<
/Count 10 /Dest [ 674 0 R /XYZ 40.01575 307.4394 0 ] /First 933 0 R /Last 942 0 R /Next 943 0 R /Parent 703 0 R 
  /Prev 918 0 R /Title (pyg.base.join)
>>
endobj
933 0 obj
<<
/Count 4 /Dest [ 674 0 R /XYZ 40.01575 230.2394 0 ] /First 934 0 R /Last 937 0 R /Next 938 0 R /Parent 932 0 R 
  /Title (Join)
>>
endobj
934 0 obj
<<
/Dest [ 674 0 R /XYZ 40.01575 197.4394 0 ] /Next 935 0 R /Parent 933 0 R /Title (Example: Using join function to transfer money to a bank)
>>
endobj
935 0 obj
<<
/Dest [ 675 0 R /XYZ 40.01575 787.0394 0 ] /Next 936 0 R /Parent 933 0 R /Prev 934 0 R /Title (Simple join: inner join between tables)
>>
endobj
936 0 obj
<<
/Dest [ 675 0 R /XYZ 40.01575 695.8394 0 ] /Next 937 0 R /Parent 933 0 R /Prev 935 0 R /Title (Defaults for fields we want to left-join on\203)
>>
endobj
937 0 obj
<<
/Dest [ 675 0 R /XYZ 40.01575 479.0394 0 ] /Parent 933 0 R /Prev 936 0 R /Title (Renaming & calculating fields)
>>
endobj
938 0 obj
<<
/Count 3 /Dest [ 675 0 R /XYZ 40.01575 363.8394 0 ] /First 939 0 R /Last 941 0 R /Next 942 0 R /Parent 932 0 R 
  /Prev 933 0 R /Title (Perdictable)
>>
endobj
939 0 obj
<<
/Dest [ 676 0 R /XYZ 40.01575 692.2394 0 ] /Next 940 0 R /Parent 938 0 R /Title (perdictable and caching)
>>
endobj
940 0 obj
<<
/Dest [ 676 0 R /XYZ 40.01575 577.0394 0 ] /Next 941 0 R /Parent 938 0 R /Prev 939 0 R /Title (perdictable with the cell framework)
>>
endobj
941 0 obj
<<
/Dest [ 676 0 R /XYZ 40.01575 403.0394 0 ] /Parent 938 0 R /Prev 940 0 R /Title (perdictable API)
>>
endobj
942 0 obj
<<
/Dest [ 677 0 R /XYZ 40.01575 689.4394 0 ] /Parent 932 0 R /Prev 938 0 R /Title (Conclusions)
>>
endobj
943 0 obj
<<
/Count 7 /Dest [ 677 0 R /XYZ 40.01575 602.6394 0 ] /First 944 0 R /Last 949 0 R /Next 951 0 R /Parent 703 0 R 
  /Prev 932 0 R /Title (pyg.timeseries)
>>
endobj
944 0 obj
<<
/Count 1 /Dest [ 677 0 R /XYZ 40.01575 159.4394 0 ] /First 945 0 R /Last 945 0 R /Next 946 0 R /Parent 943 0 R 
  /Title (Agreement between pyg.timeseries and pandas)
>>
endobj
945 0 obj
<<
/Dest [ 678 0 R /XYZ 40.01575 455.8394 0 ] /Parent 944 0 R /Title (Quick performance comparison)
>>
endobj
946 0 obj
<<
/Dest [ 678 0 R /XYZ 40.01575 244.6394 0 ] /Next 947 0 R /Parent 943 0 R /Prev 944 0 R /Title (pyg and numpy arrays)
>>
endobj
947 0 obj
<<
/Dest [ 679 0 R /XYZ 40.01575 581.4394 0 ] /Next 948 0 R /Parent 943 0 R /Prev 946 0 R /Title (pandas treatment of nan)
>>
endobj
948 0 obj
<<
/Dest [ 679 0 R /XYZ 40.01575 366.2394 0 ] /Next 949 0 R /Parent 943 0 R /Prev 947 0 R /Title (pyg.timeseries treatment of nans)
>>
endobj
949 0 obj
<<
/Count 1 /Dest [ 679 0 R /XYZ 40.01575 257.8394 0 ] /First 950 0 R /Last 950 0 R /Parent 943 0 R /Prev 948 0 R 
  /Title (Using pyg.timeseries to manage state)
>>
endobj
950 0 obj
<<
/Dest [ 680 0 R /XYZ 40.01575 374.6394 0 ] /Parent 949 0 R /Title (Example: creating a function exposing its state)
>>
endobj
951 0 obj
<<
/Count 3 /Dest [ 681 0 R /XYZ 40.01575 135.4394 0 ] /First 952 0 R /Last 953 0 R /Next 955 0 R /Parent 703 0 R 
  /Prev 943 0 R /Title (pyg.timeseries decorators)
>>
endobj
952 0 obj
<<
/Dest [ 682 0 R /XYZ 40.01575 494.6394 0 ] /Next 953 0 R /Parent 951 0 R /Title (loop)
>>
endobj
953 0 obj
<<
/Count 1 /Dest [ 682 0 R /XYZ 40.01575 152.6394 0 ] /First 954 0 R /Last 954 0 R /Parent 951 0 R /Prev 952 0 R 
  /Title (presync: manage indexing and date stamps)
>>
endobj
954 0 obj
<<
/Dest [ 683 0 R /XYZ 40.01575 558.2394 0 ] /Parent 953 0 R /Title (presync and numpy arrays)
>>
endobj
955 0 obj
<<
/Count 2 /Dest [ 687 0 R /XYZ 40.01575 740.2394 0 ] /First 956 0 R /Last 957 0 R /Next 958 0 R /Parent 703 0 R 
  /Prev 951 0 R /Title (pyg.timeseries.ewma)
>>
endobj
956 0 obj
<<
/Dest [ 689 0 R /XYZ 40.01575 429.2705 0 ] /Next 957 0 R /Parent 955 0 R /Title (What happens if the clock does not move at all?)
>>
endobj
957 0 obj
<<
/Dest [ 695 0 R /XYZ 40.01575 787.0394 0 ] /Parent 955 0 R /Prev 956 0 R /Title (What are valid time parameters?)
>>
endobj
958 0 obj
<<
/Dest [ 695 0 R /XYZ 40.01575 633.4394 0 ] /Parent 703 0 R /Prev 955 0 R /Title (Indices and tables)
>>
endobj
959 0 obj
<<
/Dest [ 699 0 R /XYZ 40.01575 799.0394 0 ] /Parent 702 0 R /Prev 703 0 R /Title (Python Module Index)
>>
endobj
960 0 obj
<<
/Count 151 /Kids [ 4 0 R 5 0 R 86 0 R 172 0 R 257 0 R 342 0 R 427 0 R 512 0 R 527 0 R 528 0 R 
  534 0 R 535 0 R 536 0 R 537 0 R 538 0 R 539 0 R 540 0 R 541 0 R 542 0 R 543 0 R 
  544 0 R 545 0 R 546 0 R 547 0 R 548 0 R 549 0 R 550 0 R 551 0 R 552 0 R 553 0 R 
  554 0 R 555 0 R 556 0 R 557 0 R 558 0 R 559 0 R 560 0 R 561 0 R 562 0 R 563 0 R 
  564 0 R 565 0 R 566 0 R 568 0 R 569 0 R 570 0 R 571 0 R 572 0 R 573 0 R 574 0 R 
  575 0 R 576 0 R 578 0 R 579 0 R 580 0 R 581 0 R 582 0 R 583 0 R 584 0 R 587 0 R 
  588 0 R 589 0 R 590 0 R 591 0 R 592 0 R 593 0 R 594 0 R 595 0 R 596 0 R 597 0 R 
  598 0 R 599 0 R 600 0 R 601 0 R 602 0 R 603 0 R 604 0 R 605 0 R 606 0 R 607 0 R 
  608 0 R 609 0 R 610 0 R 611 0 R 612 0 R 613 0 R 614 0 R 615 0 R 616 0 R 617 0 R 
  618 0 R 619 0 R 620 0 R 621 0 R 622 0 R 623 0 R 624 0 R 625 0 R 626 0 R 627 0 R 
  628 0 R 629 0 R 630 0 R 631 0 R 632 0 R 633 0 R 635 0 R 636 0 R 637 0 R 639 0 R 
  642 0 R 643 0 R 644 0 R 645 0 R 646 0 R 647 0 R 648 0 R 649 0 R 652 0 R 653 0 R 
  654 0 R 655 0 R 656 0 R 657 0 R 658 0 R 659 0 R 662 0 R 663 0 R 666 0 R 667 0 R 
  668 0 R 669 0 R 670 0 R 671 0 R 672 0 R 673 0 R 674 0 R 675 0 R 676 0 R 677 0 R 
  678 0 R 679 0 R 680 0 R 681 0 R 682 0 R 683 0 R 687 0 R 689 0 R 694 0 R 695 0 R 
  699 0 R ] /Type /Pages
>>
endobj
961 0 obj
<<
/Length 872
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 164.832 0 Td (Pyg documentation) Tj T* -164.832 0 Td ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 24 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 3 Tm /F2 15 Tf 18 TL 230.9445 0 Td (version) Tj T* -230.9445 0 Td ET
Q
Q
q
1 0 0 1 40.01575 650 cm
Q
q
1 0 0 1 40.01575 629.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F2 12 Tf 14.4 TL 233.28 0 Td (Yoav Git) Tj T* -233.28 0 Td ET
Q
Q
q
1 0 0 1 40.01575 544.5606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F1 12 Tf 14.4 TL 211.26 0 Td (October 25, 2021) Tj T* -211.26 0 Td ET
Q
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
 
endstream
endobj
962 0 obj
<<
/Length 75
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
963 0 obj
<<
/Length 8859
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 49.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (README) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (extensions to dict) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dictattr) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ulist) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (3) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dict) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dictable) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (perdictable) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (join) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (13) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (named_dict) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (decorators) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (16) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (wrapper) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (16) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (timer) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (try_value) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (try_back) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (loops) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (loop) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (kwargs_support) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (graphs & cells) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cell) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cell_go) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (21) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cell_item) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cell_func) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cell_clear) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (encode and decode/save and load) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (encode) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (decode) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (24) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pd_to_parquet) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (24) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pd_read_parquet) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (25) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (parquet_encode) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (25) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (csv_encode) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (26) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (convertors to bytes) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (26) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dates and calendar) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (26) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dt) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (26) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ymd) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (27) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dt_bump) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (27) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (drange) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (28) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (date_range) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (28) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Calendar) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (28) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
Q
 
endstream
endobj
964 0 obj
<<
/Length 9088
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 43.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 741 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (calendar) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 741 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (31) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 723 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (as_time) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 723 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (31) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (clock) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (31) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (text manipulation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (32) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (lower) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (32) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (upper) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (32) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (proper) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (32) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (capitalize) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (33) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (strip) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (33) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (split) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (33) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (replace) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (34) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (common_prefix) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (34) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (files & directory) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (34) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mkdir) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (34) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (read_csv) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (34) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree manipulation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (34) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_keys) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (35) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_values) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (35) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_items) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (35) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_update) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (36) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_setitem) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (37) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_repr) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (37) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (items_to_tree) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (38) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tree_to_table) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (39) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (list functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (40) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (as_list) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (40) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (as_tuple) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (40) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (first) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (41) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (last) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (41) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (unique) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (41) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Comparing and Sorting) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (41) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cmp) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (41) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Cmp) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (42) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sort) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (42) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (eq) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (42) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (in) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (43) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (bits and pieces) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (43) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (type functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (43) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (zipper) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (44) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (reducer) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (45) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (reducing) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (45) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (logger and get_logger) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (46) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
Q
 
endstream
endobj
965 0 obj
<<
/Length 9162
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 43.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 741 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (access functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 741 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (46) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 723 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (inspection) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 723 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (47) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (50) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Query generator) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (50) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (q and Q) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (50) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Tables in Mongo) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (51) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_cursor) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (51) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_reader) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (55) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_pk_reader) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (58) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_pk_cursor) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (58) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (encoding docs before saving to mongo) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (58) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (parquet_write) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (58) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (csv_write) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (59) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cells in Mongo) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (59) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (db_cell) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (59) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (periodic_cell) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (61) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (get_cell) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (62) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (db_save) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (62) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (db_load) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (62) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (62) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (simple functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (63) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (diff) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (63) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (shift) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (63) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ratio) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (64) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_count) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (65) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_sum) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (65) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_mean) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (66) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_rms) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (66) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_std) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (67) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_skew) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (67) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_min) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (68) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_max) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (68) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ts_median) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (68) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (fnna) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (68) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (v2na/na2v) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (68) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ffill/bfill) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (69) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (nona) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (70) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding window functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (70) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_mean) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (70) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_rms) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (71) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_std) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (72) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_sum) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (73) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
Q
 
endstream
endobj
966 0 obj
<<
/Length 9284
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 43.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 741 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_skew) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 741 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (74) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 723 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_min) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 723 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (75) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_max) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (76) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_median) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (77) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding_rank) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (78) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cumsum) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (78) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cumprod) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (79) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling window functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (80) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_mean) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (80) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_rms) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (82) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_std) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (83) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_sum) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (84) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_skew) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (85) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_min) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (86) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_max) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (87) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_median) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (88) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_quantile) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (89) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling_rank) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (90) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (exponentially weighted moving functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (90) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewma) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (90) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmrms) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (92) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmstd) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (93) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmskew) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (94) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmvar) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (96) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmcor) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (97) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmcorr) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (98) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmLR) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (99) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmGLM) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (101) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ewmxo) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (102) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (functions exposing their state) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (102) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (simple functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (102) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (expanding window functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (103) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (rolling window functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (103) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (exponentially weighted moving functions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (104) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Index handling) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (104) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (df_fillna) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (104) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (df_index) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (105) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (df_reindex) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (106) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (presync) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (106) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (add/sub/mul/div/pow operators) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (108) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Tutorials) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (108) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base.Dict) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (109) Tj T* -55.32 0 Td ET
Q
Q
q
Q
Q
Q
 
endstream
endobj
967 0 obj
<<
/Length 9630
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 43.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 741 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (initialization) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 741 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (109) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 723 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (members access) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 723 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (109) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (adding) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (109) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (subtracting) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (109) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (modifying the keys: rename) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (110) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (modifying the values: do) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (110) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dict can store a calculation flow) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (110) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (111) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Motivation: dictable as an organiser of research flow) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (111) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Same code, in dictable) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (112) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Oh, no, we have a bad symbol, how do we remove it?) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (112) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Now if we want to calculate something per symbol and window\205) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (112) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (dictable functionality) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (112) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (construction) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (112) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (row access) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (113) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (column access) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (113) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (d is a dict so supports the usual keys\(\), values\(\) and items\(\):) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (113) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (column and row access are commutative) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (113) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (adding records) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (113) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (adding/modifying columns) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (113) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (do) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (114) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (removing columns) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (114) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (removing rows) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (114) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 60 2 Tm /F1 10 Tf 12 TL (sort) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (114) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (listby\(keys\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (114) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (unlist) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (114) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (groupby\(keys\) and ungroup) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (115) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (inner join) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (115) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (inner join \(with other columns that match names\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (115) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (cross join) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (115) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (xor \(versus left and right join\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (116) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pivot) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (116) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (a few observations:) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (116) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (116) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (q) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (117) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_cursor) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (117) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (general objects insertion into documents) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (118) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (document reading) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (118) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (document writing to files) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (119) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (document access) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (119) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (filters) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (119) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (iteration) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (120) Tj T* -55.32 0 Td ET
Q
Q
q
Q
Q
Q
 
endstream
endobj
968 0 obj
<<
/Length 9895
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 43.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 741 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (sorting) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 741 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (120) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 723 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (getitem of a specfic document) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 723 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (120) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 60 2 Tm /F1 10 Tf 12 TL (column access) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (120) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (add/remove columns) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (120) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (add/remove records) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (120) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_pk_table) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (121) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (mongo_reader and mongo_pk_reader) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (121) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (122) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Cell 101) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (122) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Workflow without saving to the database) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (122) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (some more functions to calculate the profits & loss as well as the signal/noise ratio) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (123) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Workflow while saving to MongoDB) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (123) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Table creation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (123) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Any code differences?) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (123) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Accessing the data in MongoDB) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (124) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Calculating the forecasts & saving them) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (124) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Accessing & running the graph once the graph has been created) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (124) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Point-in-time, cache and persistency) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (124) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Comparison of the two workflows) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (125) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (To save or not to save?) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (126) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Behind the scene: cell_func) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (126) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base.join) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (127) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Join) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (127) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Example: Using join function to transfer money to a bank) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (127) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Simple join: inner join between tables) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (128) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Defaults for fields we want to left-join on\205) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (128) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Renaming & calculating fields) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (128) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Perdictable) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (128) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (perdictable and caching) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (129) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (perdictable with the cell framework) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (129) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (perdictable API) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (129) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Conclusions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (130) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (130) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Agreement between pyg.timeseries and pandas) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (130) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Quick performance comparison) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (131) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg and numpy arrays) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (131) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pandas treatment of nan) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (132) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.timeseries treatment of nans) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (132) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Using pyg.timeseries to manage state) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (132) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Example: creating a function exposing its state) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (133) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.timeseries decorators) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (134) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 40 2 Tm /F1 10 Tf 12 TL (loop) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (135) Tj T* -55.32 0 Td ET
Q
Q
q
Q
Q
Q
 
endstream
endobj
969 0 obj
<<
/Length 1805
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 673.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (presync: manage indexing and date stamps) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (135) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (presync and numpy arrays) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (136) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.timeseries.ewma) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (137) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (What happens if the clock does not move at all?) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (138) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (What are valid time parameters?) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (140) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Indices and tables) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.32 0 Td (140) Tj T* -55.32 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Python Module Index) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 55.32 0 Td (141) Tj T* -55.32 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 673.0394 cm
Q
q
1 0 0 1 40.01575 673.0394 cm
Q
 
endstream
endobj
970 0 obj
<<
/Length 75
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
971 0 obj
<<
/Length 7502
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (README) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 715.8394 cm
Q
q
1 0 0 1 40.01575 715.8394 cm
Q
q
1 0 0 1 40.01575 703.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you examine data by multiple dimensions, you need pyg.base.dictable.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 697.8394 cm
Q
q
1 0 0 1 40.01575 685.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you use MongoDB, you need pyg.mongo.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 679.8394 cm
Q
q
1 0 0 1 40.01575 667.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you use pandas for timeseries analysis, you should consider using pyg.timeseries.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 667.8394 cm
Q
q
1 0 0 1 40.01575 625.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.058206 Tw (pyg is both succinct and powerful and makes your code almost boilerplate free and easy to maintain. As an example,) Tj T* 0 Tw 1.050742 Tw (I estimate that Man AHL, a leading quant hedge fund, relies on about 50 coders to replicate the functionality and) Tj T* 0 Tw (maintain boilerplate code that pyg would make redundant.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 607.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Below is autodoc created by sphinx followed by tutorials created in jupyter notebooks.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 572.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.base) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 539.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (extensions to dict) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 509.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (dictattr) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.4394 cm
Q
q
1 0 0 1 40.01575 479.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._dictattr.) Tj /F6 10 Tf (dictattr) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 463.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (A simple dict with extended member manipulation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 424.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (access using d.key) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (access multiple elements using d[key1, key2]) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 418.4394 cm
Q
q
1 0 0 1 50.01575 403.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (members access) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 324.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert isinstance\(d, dict\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.a == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert d['a','b'] == [1,2]) Tj T* (>) Tj (>) Tj (>) Tj ( assert d[['a','b']] == dictattr\(a = 1, b = 2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 304.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In addition, it has extended key selection/subsetting) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 298.6394 cm
Q
q
1 0 0 1 50.01575 283.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (subsetting) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 240.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d - 'a' == dictattr\(b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d ) Tj (&) Tj ( ['b', 'c', 'not in keys'] == dictattr\(b = 2, c = 3\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 220.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dictattr supports not in-place \221update\222:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 214.8394 cm
Q
q
1 0 0 1 50.01575 199.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (updating via adding another dict) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 169.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2\) + dict\(b = 'replacing old value', c = 'new key'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d == dictattr\(a = 1, b = 'replacing old value', c = 'new key'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 155.0394 cm
Q
q
1 0 0 1 50.01575 137.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (copy) Tj /F2 10 Tf ( \(\) ) Tj /F7 10 Tf 12 TL (\256) Tj /F2 10 Tf 12 TL ( ) Tj /F1 10 Tf (a shallow copy of D) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 131.0394 cm
Q
q
1 0 0 1 50.01575 113.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (keys) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 89.03937 cm
q
BT 1 0 0 1 0 14 Tm 1.773381 Tw 12 TL /F1 10 Tf 0 0 0 rg (dictattr returns an actual list rather than a generator. Further, this recognises that the keys are necessarily) Tj T* 0 Tw (unique so it returns a ulist which is also a set) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 83.03937 cm
Q
q
1 0 0 1 60.01575 68.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
 
endstream
endobj
972 0 obj
<<
/Length 8164
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (ulist) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of keys of dictattr.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 754.0394 cm
Q
q
1 0 0 1 60.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 684.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.keys\(\) == ulist\(['a', 'b']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.keys\(\) ) Tj (&) Tj ( ['a', 'c', 'd'] == ['a']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 670.2394 cm
Q
q
1 0 0 1 50.01575 652.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (relabel) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (relabels) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 640.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (easy relabel/rename of keys) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 634.2394 cm
Q
q
1 0 0 1 60.01575 619.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 603.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (args : ) Tj /F4 10 Tf (str or callable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 564.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a string ending/starting with _ will trigger a prefix/suffix to all keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (callable function will be applied to the keys to update them) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 548.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (relabels : ) Tj /F4 10 Tf (strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 533.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (individual relabeling of keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 527.2394 cm
Q
q
1 0 0 1 60.01575 512.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 496.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictattr) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 481.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (new dict with renamed keys.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 475.2394 cm
Q
q
1 0 0 1 60.01575 460.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (suffix/prefix) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 405.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.relabel\('x_'\) == dictattr\(x_a = 1, x_b = 2, x_c = 3\) # prefixing) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.relabel\('_x'\) == dictattr\(a_x = 1, b_x = 2, c_x = 3\) # suffixing) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 391.4394 cm
Q
q
1 0 0 1 60.01575 376.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (callable) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 357.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert d.rename\(upper\) == dictattr\(A = 1, B = 2, C = 3\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 343.6394 cm
Q
q
1 0 0 1 60.01575 328.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (individual relabelling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 297.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert d.rename\(a = 'A'\) == dictattr\(A = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.rename\(['A', 'B', 'C']\) == d.relabel\(upper\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 283.8394 cm
Q
q
1 0 0 1 50.01575 265.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (rename) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (relabels) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 253.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Identical to relabel. See relabel for full docs) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 247.8394 cm
Q
q
1 0 0 1 50.01575 229.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (values) Tj /F2 10 Tf ( \(\) ) Tj /F7 10 Tf 12 TL (\256) Tj /F2 10 Tf 12 TL ( ) Tj /F1 10 Tf (an object providing a view on D's values) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 223.8394 cm
Q
q
1 0 0 1 40.01575 211.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dictattr.dictattr.) Tj /F6 10 Tf (__add__) Tj /F1 10 Tf ( \() Tj (self) Tj (, other) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 199.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (dictattr uses add as a copy + update. Similar to the latest python ) Tj 1 0 0 rg (|) Tj 0 0 0 rg (=) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 193.8394 cm
Q
q
1 0 0 1 50.01575 178.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 136.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d + dict\(b = 3, c = 5\) == dictattr\(a = 1, b = 3, c = 5\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 122.0394 cm
Q
q
1 0 0 1 50.01575 107.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 91.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (other: dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a dict used to update current dict.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 70.03937 cm
Q
q
1 0 0 1 40.01575 58.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dictattr.dictattr.) Tj /F6 10 Tf (__sub__) Tj /F1 10 Tf ( \() Tj (self) Tj (, key) Tj (, copy) Tj (=) Tj (True) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
 
endstream
endobj
973 0 obj
<<
/Length 7165
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (deletes an item but does not throw an exception if not there dictattr uses subtraction to remove key\(s\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 769.0394 cm
Q
q
1 0 0 1 50.01575 754.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 742.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (updated dictattr) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 736.0394 cm
Q
q
1 0 0 1 50.01575 721.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 630.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d - ['b','c'] == dictattr\(a = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d - 'c' == dictattr\(a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d - 'key not there' == d) Tj T* (>) Tj (>) Tj (>) Tj ( #commutative) Tj T* (>) Tj (>) Tj (>) Tj ( assert \(d - 'c'\).keys\(\) == d.keys\(\) - 'c') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 616.2394 cm
Q
q
1 0 0 1 40.01575 604.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dictattr.dictattr.) Tj /F6 10 Tf (__and__) Tj /F1 10 Tf ( \() Tj (self) Tj (, other) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 592.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (dictattr uses & as a set operator for key filtering) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 586.2394 cm
Q
q
1 0 0 1 50.01575 571.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 559.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (updated dictattr) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 553.2394 cm
Q
q
1 0 0 1 50.01575 538.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 471.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictattr\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d ) Tj (&) Tj ( ['a', 'b', 'not_there'] == dictattr\(a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( #commutative) Tj T* (>) Tj (>) Tj (>) Tj ( assert \(d ) Tj (&) Tj ( ['a', 'b', 'x']\).keys\(\) == d.keys\(\) ) Tj (&) Tj ( ['a', 'b', 'x']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 441.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ulist) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 423.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The dictattr.keys\(\) method returns a ulist: a list with unique elements:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.0394 cm
Q
q
1 0 0 1 40.01575 399.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._ulist.) Tj /F6 10 Tf (ulist) Tj /F1 10 Tf ( \() Tj (*) Tj (args) Tj (, unique) Tj (=) Tj (False) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 387.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A list whose members are unique. It has +/- operations overloaded while also supporting set opeations &) Tj (/|) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 381.0394 cm
Q
q
1 0 0 1 50.01575 366.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 347.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) == list\([1,3,2]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 333.2394 cm
Q
q
1 0 0 1 50.01575 318.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (addition adds element\(s\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 275.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) + 4  == list\([1,3,2,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) + [4,1] == list\([1,3,2,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) + [4,1,5] == list\([1,3,2,4,5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 261.4394 cm
Q
q
1 0 0 1 50.01575 246.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (subtraction removes element\(s\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 215.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) - 1 == [3,2]) Tj T* (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) - [1,3,4] == [2]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 201.6394 cm
Q
q
1 0 0 1 50.01575 186.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (set operations) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 155.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) ) Tj (&) Tj ( 1 == [1]) Tj T* (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) ) Tj (&) Tj ( [1,3,4] == [1,3]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 105.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) | 1 == [1,3,2]) Tj T* (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) | 4 == [1,3,2,4]) Tj T* (>) Tj (>) Tj (>) Tj ( assert ulist\([1,3,2,1]\) | [1,3,4] == [1,3,2,4]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 91.03937 cm
Q
q
1 0 0 1 50.01575 73.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (copy) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 61.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Return a shallow copy of the list.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
 
endstream
endobj
974 0 obj
<<
/Length 7200
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Dict) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 760.6394 cm
Q
q
1 0 0 1 40.01575 742.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._dict.) Tj /F6 10 Tf (Dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 730.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Dict extends dictattr to allow access to ) Tj /F4 10 Tf (functions) Tj /F1 10 Tf ( of members) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 724.6394 cm
Q
q
1 0 0 1 50.01575 709.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 654.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = Dict\(a = 1, b=2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d[lambda a, b: a+b] == 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert d['a','b', lambda a,b: a+b] == [1,2,3]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 634.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Dict is also callable where the key-value is used to add/update current members) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 628.8394 cm
Q
q
1 0 0 1 50.01575 613.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 559.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = Dict\(a = 1, b=2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d\(c = 3\) == Dict\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d\(c = lambda a,b: a+b\) == Dict\(a = 1, b = 2, c = 3\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 520.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert d\(c = 3\) == Dict\(a = 1, b = 2\) + Dict\(c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert Dict\(a = 1\)\(b = lambda a: a+1\)\(c = lambda a,b: a+b\) == Dict\(a = 1,b = 2,c = 3\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 506.2394 cm
Q
q
1 0 0 1 50.01575 488.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (do) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (function) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (*) Tj (keys) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 476.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (applies a function\(s\) on multiple keys at the same time) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 470.2394 cm
Q
q
1 0 0 1 60.01575 455.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 439.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable or list of callables) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 424.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function to be applied per column) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 408.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (keys : ) Tj /F4 10 Tf (string/list of strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 393.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of columns to be applied. If missing, applied to all columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 387.2394 cm
Q
q
1 0 0 1 60.01575 372.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 360.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (res : Dict) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 354.2394 cm
Q
q
1 0 0 1 60.01575 339.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 296.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = Dict\(name = 'adam', surname = 'atkins'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.do\(proper\) == Dict\(name = 'Adam', surname = 'Atkins'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 282.4394 cm
Q
q
1 0 0 1 60.01575 267.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (using another key in the calculation) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 212.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = Dict\(a = 1, b = 5, denominator = 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = d.do\(lambda value, denominator: value/denominator, 'a', 'b'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d == Dict\(a = 0.1, b = 0.5, denominator = 10\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 198.6394 cm
Q
q
1 0 0 1 40.01575 186.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.Dict.) Tj /F6 10 Tf (__call__) Tj /F1 10 Tf ( \() Tj (self) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 174.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Call self as a function.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 144.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (dictable) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 132.2394 cm
Q
q
1 0 0 1 40.01575 114.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._dictable.) Tj /F6 10 Tf (dictable) Tj /F1 10 Tf ( \() Tj (data) Tj (=) Tj (None) Tj (, columns) Tj (=) Tj (None) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 108.2394 cm
Q
q
1 0 0 1 50.01575 81.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL 37.47937 0 Td (What is) Tj T* -11.67 0 Td (dictable?:) Tj T* -25.80937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 57.23937 cm
q
BT 1 0 0 1 0 14 Tm .749743 Tw 12 TL /F1 10 Tf 0 0 0 rg (dictable is a table, a collection of iterable records. It is also a dict with each key being a column. Why not use a) Tj T* 0 Tw (pandas.DataFrame? pd.DataFrame leads a dual life:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
 
endstream
endobj
975 0 obj
<<
/Length 8788
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (by day an index-based optimized numpy array supporting e.g. timeseries analytics etc.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.081619 Tw (by night, a table with keys supporting filtering, aggregating, pivoting on keys as well as inner/outer joining) Tj T* 0 Tw (on keys.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 739.0394 cm
Q
q
1 0 0 1 50.01575 691.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .087058 Tw (dictable only tries to do the latter. dictable should be thought of as a \221container for complicated objects\222 rather than) Tj T* 0 Tw 2.068864 Tw (just an array of primitive floats. In general, each cell may contain timeseries, yield_curves, machine-learning) Tj T* 0 Tw 1.472594 Tw (experiments etc. The interface is very succinct and allows the user to concentrate on logic of the calculations) Tj T* 0 Tw (rather than boilerplate.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 679.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dictable supports quite a flexible construction:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 673.0394 cm
Q
q
1 0 0 1 50.01575 658.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (construction using records) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 615.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 526 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\([dict\(name = 'alan', surname = 'atkins', age = 39, country = 'UK'\), ) Tj T* (>) Tj (>) Tj (>) Tj (               dict\(name = 'barbara', surname = 'brown', age = 29, country = 'UK'\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 601.2394 cm
Q
q
1 0 0 1 50.01575 586.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (construction using columns and constants) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 567.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 553.4394 cm
Q
q
1 0 0 1 50.01575 538.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (construction using pandas.DataFrame) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 483.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 688 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( original = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* (>) Tj (>) Tj (>) Tj ( df_from_dictable = pd.DataFrame\(original\)) Tj T* (>) Tj (>) Tj (>) Tj ( dictable_from_df = dictable\(df_from_dictable\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert original == dictable_from_df) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 469.6394 cm
Q
q
1 0 0 1 50.01575 454.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (construction rows and columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 435.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 778 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\([['alan', 'atkins', 39, 'UK'], ['barbara', 'brown', 29, 'UK']], columns = ['name', 'surname', 'age', 'country']\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 421.8394 cm
Q
q
1 0 0 1 50.01575 406.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 34.68937 0 Td (Access:) Tj T* -34.68937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (column access) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 340.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 574 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert d.keys\(\) ==  ['name', 'surname', 'age', 'country']) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.name == ['alan', 'barbara']) Tj T* (>) Tj (>) Tj (>) Tj ( assert d['name'] == ['alan', 'barbara']) Tj T* (>) Tj (>) Tj (>) Tj ( assert d['name', 'surname'] == [\('alan', 'atkins'\), \('barbara', 'brown'\)]) Tj T* (>) Tj (>) Tj (>) Tj ( assert d[lambda name, surname: '%s %s'%\(name, surname\)] == ['alan atkins', 'barbara brown']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 326.0394 cm
Q
q
1 0 0 1 50.01575 311.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 34.68937 0 Td (Access:) Tj T* -34.68937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (row access & iteration) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 268.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 616 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert d[0] == {'name': 'alan', 'surname': 'atkins', 'age': 39, 'country': 'UK'}) Tj T* (>) Tj (>) Tj (>) Tj ( assert [row for row in d] == [{'name': 'alan', 'surname': 'atkins', 'age': 39, 'country': 'UK'},) Tj T* (>) Tj (>) Tj (>) Tj (                               {'name': 'barbara', 'surname': 'brown', 'age': 29, 'country': 'UK'}]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 248.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Note that members access is commutative:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 205.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 556 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert d.name[0] == d[0].name == 'alan') Tj T* (>) Tj (>) Tj (>) Tj ( d[lambda name, surname: name + surname][0] == d[0][lambda name, surname: name + surname]) Tj T* (>) Tj (>) Tj (>) Tj ( assert sum\([row for row in d], dictable\(\)\) == d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 191.4394 cm
Q
q
1 0 0 1 50.01575 176.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adding records) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 97.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 772 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = d + {'name': 'charlie', 'surname': 'chocolate', 'age': 49} # can add a record directly) Tj T* (>) Tj (>) Tj (>) Tj ( assert d[-1] == {'name': 'charlie', 'surname': 'chocolate', 'age': 49, 'country': None}) Tj T* (>) Tj (>) Tj (>) Tj ( d += dictable\(name = ['dana', 'ender'], surname = ['deutch', 'esterhase'], age = [10, 20], country = ['Germany', 'Hungary']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.name == ['alan', 'barbara', 'charlie', 'dana', 'ender']) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(dictable.concat\([d,d]\)\) == len\(d\) * 2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 83.63937 cm
Q
q
1 0 0 1 50.01575 68.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adding columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
 
endstream
endobj
976 0 obj
<<
/Length 7992
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 768.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 681.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ### all of the below are ways of adding columns ####) Tj T* (>) Tj (>) Tj (>) Tj ( d.gender == ['m', 'f']) Tj T* (>) Tj (>) Tj (>) Tj ( d = d\(gender = ['m', 'f']\)) Tj T* (>) Tj (>) Tj (>) Tj ( d['gender'] == ['m', 'f']) Tj T* (>) Tj (>) Tj (>) Tj ( d2 = dictable\(gender = ['m', 'f'], profession = ['astronaut', 'barber']\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = d\(**d2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 667.4394 cm
Q
q
1 0 0 1 50.01575 652.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adding derived columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 597.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = d\(full_name = lambda name, surname: proper\('%s %s'%\(name, surname\)\)\) ) Tj T* (>) Tj (>) Tj (>) Tj ( d['full_name'] = d[lambda name, surname: proper\('%s %s'%\(name, surname\)\)]) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.full_name == ['Alan Atkins', 'Barbara Brown']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 583.6394 cm
Q
q
1 0 0 1 50.01575 568.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dropping columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 513.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* (>) Tj (>) Tj (>) Tj ( del d.country # in place) Tj T* (>) Tj (>) Tj (>) Tj ( del d['age'] # in place) Tj T* (>) Tj (>) Tj (>) Tj ( assert \(d - 'name'\)[0] ==  {'surname': 'atkins'} and d[0] == {'name': 'alan', 'surname': 'atkins'}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 499.8394 cm
Q
q
1 0 0 1 50.01575 484.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (row selection, inc/exc) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 406.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['alan', 'barbara'], surname = ['atkins', 'brown'], age = [39, 29], country = 'UK'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(d.exc\(name = 'alan'\)\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(d.exc\(lambda age: age) Tj (<) Tj (30\)\) == 1 # can filter on *functions* of members, not just members.) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(name = 'alan'\).surname == ['atkins']) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(lambda age: age) Tj (<) Tj (30\).name == ['barbara']) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.exc\(lambda age: age) Tj (<) Tj (30\).name == ['alan']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 386.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable supports:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 293.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 80 Tm  T* ET
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sort) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (group-by/ungroup) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list-by/ unlist) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pivot/unpivot) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (inner join, outer join and xor) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 281.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Full details are below.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 275.0394 cm
Q
q
1 0 0 1 50.01575 257.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (classmethod ) Tj /F6 10 Tf (concat) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (others) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 245.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (adds together multiple dictables. equivalent to sum\(others, self\) but a little faster) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 239.0394 cm
Q
q
1 0 0 1 60.01575 224.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 208.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (others : ) Tj /F4 10 Tf (dictables) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 193.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (records to be added to current table) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 187.0394 cm
Q
q
1 0 0 1 60.01575 172.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 156.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (merged : ) Tj /F4 10 Tf (dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 141.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sum of all records) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 135.0394 cm
Q
q
1 0 0 1 60.01575 120.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 65.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d1 = dictable\(a = [1,2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( d2 = dictable\(a = [4,5,6]\)) Tj T* (>) Tj (>) Tj (>) Tj ( d3 = dictable\(a = [7,8,9]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
 
endstream
endobj
977 0 obj
<<
/Length 7911
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dictable.concat\(d1,d2,d3\) == dictable\(a = range\(1,10\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dictable.concat\([d1,d2,d3]\) == dictable\(a = range\(1,10\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 724.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (do) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (function) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (*) Tj (keys) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 712.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (applies a function\(s\) on multiple keys at the same time) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 706.2394 cm
Q
q
1 0 0 1 60.01575 691.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 675.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable or list of callables) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 660.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function to be applied per column) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 644.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (keys : ) Tj /F4 10 Tf (string/list of strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 629.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of columns to be applied. If missing, applied to all columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 623.2394 cm
Q
q
1 0 0 1 60.01575 608.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 596.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (res : dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 590.2394 cm
Q
q
1 0 0 1 60.01575 575.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 532.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(name = ['adam', 'barbara', 'chris'], surname = ['atkins', 'brown', 'cohen']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.do\(proper\) == dictable\(name = ['Adam', 'Barbara', 'Chris'], surname = ['Atkins', 'Brown', 'Cohen']\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 518.4394 cm
Q
q
1 0 0 1 60.01575 503.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (using another column in the calculation) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 448.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(a = [1,2,3,4], b = [5,6,9,8], denominator = [10,20,30,40]\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = d.do\(lambda value, denominator: value/denominator, 'a', 'b'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d == dictable\(a = 0.1, b = [0.5,0.3,0.3,0.2], denominator = [10,20,30,40]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 434.6394 cm
Q
q
1 0 0 1 50.01575 416.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (exc) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (functions) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (filters) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 404.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (performs a filter on what rows to exclude) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 398.6394 cm
Q
q
1 0 0 1 60.01575 383.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 367.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (functions : ) Tj /F4 10 Tf (callables or a dict) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 352.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filters based on functions of each row) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 336.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (filters : ) Tj /F4 10 Tf (value or list of values) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 321.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filters per each column) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 315.6394 cm
Q
q
1 0 0 1 60.01575 300.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 284.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 269.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (table with rows that satisfy all conditions excluded.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 263.6394 cm
Q
q
1 0 0 1 60.01575 248.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filtering on keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 181.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(x = [1,2,3,np.nan], y = [0,4,3,5]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.exc\(x = np.nan\) == dictable\(x = [1,2,3], y = [0,4,3]\)         ) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.exc\(x = 1\) == dictable\(x = [2,3,np.nan], y = [4,3,5]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.exc\(x = [1,2]\) == dictable\(x = [1,2], y = [0,4]\) ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 167.8394 cm
Q
q
1 0 0 1 60.01575 152.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filtering on callables) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 110.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(x = [1,2,3,np.nan], y = [0,4,3,5]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.exc\(lambda x,y: x) Tj (>) Tj (y\) == dictable\(x = 1, y = 0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 96.03937 cm
Q
q
1 0 0 1 50.01575 78.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (get) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (key) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (default) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 66.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Return the value for key if key is in the dictionary, else default.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 60.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
 
endstream
endobj
978 0 obj
<<
/Length 8161
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (groupby) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (by) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (grp) Tj (=) Tj ('grp') Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Similar to pandas groupby but returns a dictable of dictables with a new column \221grp\222) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 757.0394 cm
Q
q
1 0 0 1 60.01575 742.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 687.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = dictable\(a = [1,2,3,4], b= [1,0,1,0]\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = x.groupby\('b'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert res.keys\(\) == ['b', 'grp']) Tj T* (>) Tj (>) Tj (>) Tj ( assert is_dictable\(res[0].grp\) and res[0].grp.keys\(\) == ['a']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 673.2394 cm
Q
q
1 0 0 1 60.01575 658.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 646.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (by : str or list of strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 640.2394 cm
Q
q
1 0 0 1 60.01575 628.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (gr.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 628.2394 cm
Q
q
1 0 0 1 60.01575 612.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (grp : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 597.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The name of the column for the dictables per each key. The default is \221grp\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 591.2394 cm
Q
q
1 0 0 1 60.01575 576.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 560.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 545.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A dictable containing the original keys and a dictable per unique key.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 539.2394 cm
Q
q
1 0 0 1 50.01575 521.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (inc) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (functions) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (filters) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 509.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (performs a filter on what rows to include) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 503.2394 cm
Q
q
1 0 0 1 60.01575 488.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 472.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (functions : ) Tj /F4 10 Tf (callables or a dict) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 457.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filters based on functions of each row) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 441.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (filters : ) Tj /F4 10 Tf (value or list of values) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 426.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filters per each column) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 420.2394 cm
Q
q
1 0 0 1 60.01575 405.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 389.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 374.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (table with rows that satisfy all conditions.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 368.2394 cm
Q
q
1 0 0 1 60.01575 353.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filtering on keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 286.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(x = [1,2,3,np.nan], y = [0,4,3,5]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(x = np.nan\) == dictable\(x = np.nan, y = 5\)            ) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(x = 1\) == dictable\(x = 1, y = 0\)            ) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(x = [1,2]\) == dictable\(x = [1,2], y = [0,4]\) ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 272.4394 cm
Q
q
1 0 0 1 60.01575 257.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filtering on regex) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 202.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import re) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(text = ['once', 'upon', 'a', 'time', 'in', 'the', 'west', 1, 2, 3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(text = re.compile\('o'\)\) == dictable\(text = ['once', 'upon']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.exc\(text = re.compile\('e'\)\) == dictable\(text = ['upon', 'a', 'in', 1, 2, 3]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 188.6394 cm
Q
q
1 0 0 1 60.01575 173.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filtering on callables) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 130.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( d = dictable\(x = [1,2,3,np.nan], y = [0,4,3,5]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.inc\(lambda x,y: x) Tj (>) Tj (y\) == dictable\(x = 1, y = 0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 116.8394 cm
Q
q
1 0 0 1 50.01575 98.83937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (join) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (other) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (lcols) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (rcols) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (mode) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 86.83937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Performs either an inner join or a cross join between two dictables) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 80.83937 cm
Q
q
1 0 0 1 60.01575 65.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (inner join) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
 
endstream
endobj
979 0 obj
<<
/Length 6997
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 732.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( x = dictable\(a = ['a','b','c','a']\) ) Tj T* (>) Tj (>) Tj (>) Tj ( y = dictable\(a = ['a','y','z']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert x.join\(y\) == dictable\(a = ['a', 'a']\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 718.2394 cm
Q
q
1 0 0 1 60.01575 703.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (outer join) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 648.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 508 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( x = dictable\(a = ['a','b']\) ) Tj T* (>) Tj (>) Tj (>) Tj ( y = dictable\(b = ['x','y']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert x.join\(y\) == dictable\(a = ['a', 'a', 'b', 'b'], b = ['x', 'y', 'x', 'y']\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 634.4394 cm
Q
q
1 0 0 1 50.01575 616.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (pivot) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (x) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (y) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (z) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (agg) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 604.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (pivot table functionality.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 598.4394 cm
Q
q
1 0 0 1 60.01575 583.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 567.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (x : ) Tj /F4 10 Tf (str/list of str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 552.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (unique keys per each row) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 536.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (y : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 521.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (unique key per each column) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 505.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (z : ) Tj /F4 10 Tf (str/callable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 490.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A column in the table or an evaluated quantity per each row) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 474.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (agg : ) Tj /F4 10 Tf (None/callable or list of callables, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 447.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .544004 Tw (Each \(x,y\) cell can potentially contain multiple z values. so if agg = None, a list is returned If you want the) Tj T* 0 Tw (data aggregated in any way, then supply an aggregating function\(s\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 441.4394 cm
Q
q
1 0 0 1 60.01575 426.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 414.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A dictable which is a pivot table of the original data) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 408.4394 cm
Q
q
1 0 0 1 60.01575 393.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 338.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( timetable_as_list = dictable\(x = [1,2,3]\) * dictable\(y = [1,2,3]\) ) Tj T* (>) Tj (>) Tj (>) Tj ( timetable = timetable_as_list.xyz\('x','y',lambda x, y: x * y\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert timetable = dictable\(x = [1,2,3], \)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 324.6394 cm
Q
q
1 0 0 1 60.01575 309.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 266.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( self = dictable\(x = [1,2,3]\) * dictable\(y = [1,2,3]\) ) Tj T* (>) Tj (>) Tj (>) Tj ( x = 'x'; y = 'y'; z = lambda x, y: x * y) Tj T* (>) Tj (>) Tj (>) Tj ( self.exc\(lambda x, y: x+y==5\).xyz\(x,y,z, len\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 252.8394 cm
Q
q
1 0 0 1 50.01575 234.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (sort) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (by) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 222.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Sorts the table either using a key, list of keys or functions of members) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 216.8394 cm
Q
q
1 0 0 1 60.01575 201.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 135.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 502 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( self = dictable\(a = [_ for _ in 'abracadabra'], b=range\(11\), c = range\(0,33,3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( self.d = list\(np.array\(self.c\) % 11\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = self.sort\('a', 'd'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert list\(res.c\) == list\(range\(11\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 72.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 616 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(a = ['a', 1, 'c', 0, 'b', 2]\).sort\('a'\)        ) Tj T* (>) Tj (>) Tj (>) Tj ( res = d.sort\('a','c'\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\(res\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert ''.join\(res.a\) == 'aaaaabbcdrr' and list\(res.c\) == [0,4,8,9,10] + [2,3] + [1] + [7] + [5,6]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
 
endstream
endobj
980 0 obj
<<
/Length 7324
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = d.sort\(lambda b: b*3 % 11\) ## sorting again by c but using a function) Tj T* (>) Tj (>) Tj (>) Tj ( assert list\(d.c\) == list\(range\(11\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 724.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (ungroup) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (grp) Tj (=) Tj ('grp') Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 712.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Undoes groupby) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 706.2394 cm
Q
q
1 0 0 1 60.01575 691.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 660.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = dictable\(a = [1,2,3,4], b= [1,0,1,0]\)) Tj T* (>) Tj (>) Tj (>) Tj ( self = x.groupby\('b'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 646.4394 cm
Q
q
1 0 0 1 60.01575 631.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 615.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (grp : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 600.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (column name where dictables are. The default is \221grp\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 594.4394 cm
Q
q
1 0 0 1 60.01575 579.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 567.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dictable.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 561.4394 cm
Q
q
1 0 0 1 50.01575 543.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (unlist) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 531.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (undoes listby\205) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 525.4394 cm
Q
q
1 0 0 1 60.01575 510.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 479.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = dictable\(a = [1,2,3,4], b= [1,0,1,0]\)) Tj T* (>) Tj (>) Tj (>) Tj ( x.listby\('b'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 459.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dictable[2 x 2] b|a 0|[2, 4] 1|[1, 3]) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 440.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert x.listby\('b'\).unlist\(\).sort\('a'\) == x) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 426.8394 cm
Q
q
1 0 0 1 60.01575 411.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 395.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 380.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a dictable where all rows with list in them have been \221expanded\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 374.8394 cm
Q
q
1 0 0 1 50.01575 356.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (unpivot) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (x) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (y) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (z) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 344.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (undoes self.xyz / self.pivot) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 338.8394 cm
Q
q
1 0 0 1 60.01575 323.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 257.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 820 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( orig = \(dictable\(x = [1,2,3,4]\) * dict\(y = [1,2,3,4,5]\)\)\(z = lambda x, y: x*y\)) Tj T* (>) Tj (>) Tj (>) Tj ( pivot = orig.xyz\('x', 'y', 'z', last\)) Tj T* (>) Tj (>) Tj (>) Tj ( unpivot = pivot.unpivot\('x','y','z'\).do\(int, 'y'\) # the conversion to column names mean y is now string... so we convert back to int) Tj T* (>) Tj (>) Tj (>) Tj ( assert orig == unpivot) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 243.0394 cm
Q
q
1 0 0 1 60.01575 228.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 212.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (x : ) Tj /F4 10 Tf (str/list of strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 197.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of keys in the pivot table.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 181.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (y : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 166.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name of the columns that wil be used for the values that are currently column headers.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 150.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (z : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 135.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name of the column that describes the data currently within the pivot table.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 129.0394 cm
Q
q
1 0 0 1 60.01575 114.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 102.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 96.03937 cm
Q
q
1 0 0 1 50.01575 78.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (update) Tj /F2 10 Tf ( \() Tj /F6 10 Tf ([) Tj /F2 10 Tf (, ) Tj /F5 10 Tf (E) Tj /F6 10 Tf (]) Tj /F2 10 Tf (, ) Tj /F5 10 Tf (**F) Tj /F2 10 Tf (\) ) Tj /F7 10 Tf 12 TL (\256) Tj /F2 10 Tf 12 TL ( ) Tj /F1 10 Tf (None. Update D from dict/iterable E and F.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
 
endstream
endobj
981 0 obj
<<
/Length 8245
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 763.0394 cm
q
BT 1 0 0 1 0 14 Tm .878564 Tw 12 TL /F1 10 Tf 0 0 0 rg (If E is present and has a .keys\(\) method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys\(\)) Tj T* 0 Tw (method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k]) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 739.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (xor) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (other) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (lcols) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (rcols) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (mode) Tj (=) Tj ('l') Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 715.0394 cm
q
BT 1 0 0 1 0 14 Tm .836265 Tw 12 TL /F1 10 Tf 0 0 0 rg (returns what is in lhs but NOT in rhs \(or vice versa if mode = \221r\222\). Together with inner joining, can be used as) Tj T* 0 Tw (left/right join) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 709.0394 cm
Q
q
1 0 0 1 60.01575 694.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 627.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 898 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( self = dictable\(a = [1,2,3,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( other = dictable\(a = [1,2,3,5]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert self.xor\(other\) == dictable\(a = 4\) # this is in lhs but not in rhs) Tj T* (>) Tj (>) Tj (>) Tj ( assert self.xor\(other, lcols = lambda a: a * 2, rcols = 'a'\) == dictable\(a = [2,3,4]\) # fit can be done using formulae rather than actual columns) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 595.2394 cm
q
BT 1 0 0 1 0 14 Tm -0.01623 Tw 12 TL /F1 10 Tf 0 0 0 rg (The XOR functionality can be performed using quotient \(divide\): >) Tj (>) Tj (> assert lhs/rhs == dictable\(a = 4\) >) Tj (>) Tj (> assert) Tj T* 0 Tw (rhs/lhs == dictable\(a = 5\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 564.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( rhs = dictable\(a = [1,2], b = [3,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( left_join_can_be_done_simply_as = lhs * rhs + lhs/rhs) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 550.4394 cm
Q
q
1 0 0 1 60.01575 535.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 519.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (other : ) Tj /F4 10 Tf (dictable \(or something that can be turned to one\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 504.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (what we exclude with.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 488.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (lcols : ) Tj /F4 10 Tf (str/list of strs, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 473.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the left columns/formulae on which we match. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 457.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (rcols : ) Tj /F4 10 Tf (str/list of strs, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 442.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the right columns/formulae on which we match. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 426.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (mode : ) Tj /F4 10 Tf (string, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 411.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When set to \221r\222, performs xor the other way. The default is \221l\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 405.4394 cm
Q
q
1 0 0 1 60.01575 390.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 374.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 359.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a dictable containing what is in self but not in ther other dictable.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 353.4394 cm
Q
q
1 0 0 1 50.01575 335.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (xyz) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (x) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (y) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (z) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (agg) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 323.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (pivot table functionality.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 317.4394 cm
Q
q
1 0 0 1 60.01575 302.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 286.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (x : ) Tj /F4 10 Tf (str/list of str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 271.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (unique keys per each row) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 255.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (y : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 240.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (unique key per each column) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 224.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (z : ) Tj /F4 10 Tf (str/callable) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 209.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A column in the table or an evaluated quantity per each row) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 193.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (agg : ) Tj /F4 10 Tf (None/callable or list of callables, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 166.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .544004 Tw (Each \(x,y\) cell can potentially contain multiple z values. so if agg = None, a list is returned If you want the) Tj T* 0 Tw (data aggregated in any way, then supply an aggregating function\(s\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 160.4394 cm
Q
q
1 0 0 1 60.01575 145.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 133.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A dictable which is a pivot table of the original data) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 127.4394 cm
Q
q
1 0 0 1 60.01575 112.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 57.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( timetable_as_list = dictable\(x = [1,2,3]\) * dictable\(y = [1,2,3]\) ) Tj T* (>) Tj (>) Tj (>) Tj ( timetable = timetable_as_list.xyz\('x','y',lambda x, y: x * y\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert timetable = dictable\(x = [1,2,3], \)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (11) Tj T* ET
Q
Q
 
endstream
endobj
982 0 obj
<<
/Length 7446
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 781.0394 cm
Q
q
1 0 0 1 60.01575 766.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 723.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( self = dictable\(x = [1,2,3]\) * dictable\(y = [1,2,3]\) ) Tj T* (>) Tj (>) Tj (>) Tj ( x = 'x'; y = 'y'; z = lambda x, y: x * y) Tj T* (>) Tj (>) Tj (>) Tj ( self.exc\(lambda x, y: x+y==5\).xyz\(x,y,z, len\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 709.2394 cm
Q
q
1 0 0 1 40.01575 697.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dictable.dictable.) Tj /F6 10 Tf (__call__) Tj /F1 10 Tf ( \() Tj (self) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 685.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Call self as a function.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 654.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (perdictable) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 642.8394 cm
Q
q
1 0 0 1 40.01575 630.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._perdictable.) Tj /F6 10 Tf (perdictable) Tj /F1 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 618.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A decorator that makes a function works per dictable and not just on original value) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.8394 cm
Q
q
1 0 0 1 50.01575 597.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 567.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a, b: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( p = perdictable\(f, on = ['key']\)     ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 547.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The new modified function p now works the same on old values:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 541.0394 cm
Q
q
1 0 0 1 50.01575 526.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Paramaters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 510.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 495.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A function) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 479.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (on: str/list of str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 464.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (perform join based on these keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 448.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (renames: dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This tells us which column to grab from which table) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 417.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (defaults: dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 402.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If a default is provided for a parameter, we will perform a left join, substituting missing values with the defaults) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 386.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (if_none: bool, list of keys) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 371.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If historic data is None while the row has expired, should we force a recalculation? if True, will be done.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 355.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (output_is_input: bool, list of keys) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 328.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .861205 Tw (Some functions want their own outut to be presented to them. If you see to True, if cached values exist for) Tj T* 0 Tw (these columns, these are provided to the function) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 312.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (include_inputs:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 297.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When we return the outputs, do you want the inputs to be included as well in the dictable.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 281.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (col: str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 266.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the name of the variable output.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 260.0394 cm
Q
q
1 0 0 1 50.01575 245.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 190.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 658 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a, b: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( p = perdictable\(f, include_inputs = True\)     ) Tj T* (>) Tj (>) Tj (>) Tj ( assert p\(a = 1, b = 2\) == 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert p\(a = dictable\(a = [1,2,3]\), b = 3\) == dictable\(a = [1,2,3], b = 3, expiry = None, data = [4,5,6]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 170.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (# some parameters are constant, some are tables\205) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 151.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 730 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert p\(a = 1, b = dictable\(key = ['a','b','c'], b = [1,2,3]\)\) == dictable\(key  = ['a', 'b', 'c'], data = [2,3,4]\)  ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 131.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (# multiple tables\205 some unkeyed) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 112.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 940 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert p\(a = dictable\(a = [1,2]\), b = dictable\(key = ['a','b','c'], b = [1,2,3]\)\) == dictable\(key  = ['a','a', 'b', 'b', 'c','c'], data = [2,3,3,4,4,5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 92.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (# multiple tables\205 all keyed) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (12) Tj T* ET
Q
Q
 
endstream
endobj
983 0 obj
<<
/Length 7474
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = dictable\(key = ['x', 'y'], data = [1,2]\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = dictable\(key = ['y', 'z'], data = [3,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert p\(a = a, b = b\) == dictable\(key  = ['y'], data = [5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 730.2394 cm
Q
q
1 0 0 1 50.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (existing data provided using data and expiry) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 648.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 706 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = dictable\(key = ['x', 'y', 'z'], data = [1,2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = dictable\(key = ['x', 'y', 'z'], data = [1,3,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( data = dictable\(key = ['x', 'y'], data = ['we calculated this before', 'we calculated before but hasnt expired']\)) Tj T* (>) Tj (>) Tj (>) Tj ( expiry = dictable\(key = ['x', 'y'], data = [dt\(2000,1,1\), dt\(3000,1,1\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( inputs = dict\(a = a, b = b\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 597.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( res = p\(a = a, b = b, data = data, expiry = expiry\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert res.find_data\(key = 'x'\).data == 'we calculated this before') Tj T* (>) Tj (>) Tj (>) Tj ( assert res.find_data\(key = 'y'\).data == 5  # although calculated before, we recalculate as its expiry is in the future) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 567.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (join) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 555.2394 cm
Q
q
1 0 0 1 40.01575 543.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._perdictable.) Tj /F6 10 Tf (join) Tj /F1 10 Tf ( \() Tj (inputs) Tj (, on) Tj (=) Tj (None) Tj (, renames) Tj (=) Tj (None) Tj (, defaults) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 531.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Suppose we have a function which is defined on simple numbers) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 525.2394 cm
Q
q
1 0 0 1 50.01575 510.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 479.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( profit = lambda amount, price: amount  * price    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 459.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The amounts sold are available in one table and prices in another) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 453.4394 cm
Q
q
1 0 0 1 50.01575 438.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 395.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( amounts = dictable\(product = ['apple', 'orange', 'pear'], amount = [1,2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( prices = dictable\(product = ['apple', 'orange', 'pear', 'banana'], price = [4,5,6,8]\)) Tj T* (>) Tj (>) Tj (>) Tj ( join\(dict\(amount = amounts, price = prices\), on = 'product'\)\(profit = profit\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 320.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( dictable[3 x 4]) Tj T* (>) Tj (>) Tj (>) Tj ( product|amount|price|profit) Tj T* (>) Tj (>) Tj (>) Tj ( apple  |1     |4    |4     ) Tj T* (>) Tj (>) Tj (>) Tj ( orange |2     |5    |10    ) Tj T* (>) Tj (>) Tj (>) Tj ( pear   |3     |6    |18    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 306.8394 cm
Q
q
1 0 0 1 50.01575 291.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 275.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (inputs : ) Tj /F4 10 Tf (dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 260.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a dict of input parameters, some of them may be dictables.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 244.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (on : ) Tj /F4 10 Tf (str/list of str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 229.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (when we have dictables) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 213.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (renames : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 186.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .670273 Tw (remapping. if the datasets contain multiple columns, you can say renames = dict\(price = \221price_in_dollar\222\) to) Tj T* 0 Tw (tell the algo, this is the column to use The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 170.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (defaults : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 143.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.609116 Tw (Normally, an inner join is performed. However, if there is a default value/formula for when e.g. a price is) Tj T* 0 Tw (missing, use this. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 137.8394 cm
Q
q
1 0 0 1 50.01575 122.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 106.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dictable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a dictable of an inner join.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 85.83937 cm
Q
q
1 0 0 1 50.01575 70.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (how column mapping is done) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (13) Tj T* ET
Q
Q
 
endstream
endobj
984 0 obj
<<
/Length 8267
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( on = 'a') Tj T* (>) Tj (>) Tj (>) Tj ( ## if there is only one column apart from keys, then it is selected:) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 717.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = dictable\(a = [1,2], data = [2,3]\)\), on = on\) == dictable\(a = [1,2], x = [2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = dictable\(a = [1,2], random_name = [2,3]\)\), on = on\) == dictable\(a = [1,2], x = [2,3]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 678.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 640 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ## if there are multiple columns, if variable name is there, we use it:) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = dictable\(a = [1,2], z = [2,3], x = [4,5]\)\), on\) == dictable\(a = [1,2], x = [4,5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 639.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 658 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ## if there are multiple columns, and 'data' is one of the columns, we use it:) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = dictable\(a = [1,2], z = [2,3], data = [4,5]\)\), on\) == dictable\(a = [1,2], x = [4,5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 625.8394 cm
Q
q
1 0 0 1 50.01575 610.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (how column mapping is done with rename) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 568.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 838 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(KeyError\):) Tj T* (>) Tj (>) Tj (>) Tj (     join\(dict\(x = dictable\(a = [1,2], b = [2,3], c = [4,5]\)\), on = 'a'\) ## pick b or c?) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = dictable\(a = [1,2], b = [2,3], c = [4,5]\)\), on = 'a', renames = dict\(x = 'c'\)\) == dictable\(a = [1,2,], x = [4, 5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 554.0394 cm
Q
q
1 0 0 1 50.01575 539.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (joins with partial columns in some tables) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 460.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( on = ['a', 'b', 'c']) Tj T* (>) Tj (>) Tj (>) Tj ( a = dictable\(a = [1,2,3,4], x = [1,2,3,4]\) ## only column a here) Tj T* (>) Tj (>) Tj (>) Tj ( b = dictable\(b = [1,2,3,4], y = [1,2,3,4]\) ## only column b here) Tj T* (>) Tj (>) Tj (>) Tj ( c = dictable\(a = [1,2,3,4], b = [1,2,3,4], c = [1,2,3,4], z = [1,2,3,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( j = join\(dict\(x = a, y = b, z = c\), on = ['a', 'b', 'c']\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(j\) == 4 and sorted\(j.keys\(\)\) == ['a', 'b', 'c', 'x', 'y', 'z']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 446.2394 cm
Q
q
1 0 0 1 50.01575 431.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (join with defaults) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 407.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .000205 Tw (If no defaults are provided, we need all variables to be present. However, if we specify defaults, we left-join on that) Tj T* 0 Tw (variable and insert the default value) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 316.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 838 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = dictable\(a = [1,2,4], x = [1,2,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = dictable\(a = [1,2,3], x = [5,6,7]\)) Tj T* (>) Tj (>) Tj (>) Tj ( on = 'a') Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = x, y = y\), on = on\) == dictable\(a = [1,2,], x = [1,2], y = [5,6]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = x, y = y\), on = 'a', defaults = dict\(x = None\)\) == dictable\(a = [1,2,3], x = [1,2,None], y = [5,6,7]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = x, y = y\), on = 'a', defaults = dict\(y = 0\)\) == dictable\(a = [1,2,4], x = [1,2,4], y = [5,6,0]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert join\(dict\(x = x, y = y\), on = 'a', defaults = dict\(x = None, y = 0\)\) == dictable\(a = [1,2,3,4], x = [1,2,None,4], y = [5,6,7,0]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 286.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (named_dict) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 274.0394 cm
Q
q
1 0 0 1 40.01575 250.0394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._named_dict.) Tj /F6 10 Tf (named_dict) Tj /F1 10 Tf ( \() Tj (name) Tj (, keys) Tj (, defaults) Tj (=) Tj ({}) Tj (, types) Tj (=) Tj ({}) Tj (, casts) Tj (=) Tj ({}) Tj (, basedict) Tj (=) Tj ('pyg.base.dictattr') Tj (,) Tj T* (debug) Tj (=) Tj (False) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 238.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This forms a base for all classes. It is similar to named_tuple but:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 232.0394 cm
Q
q
1 0 0 1 50.01575 232.0394 cm
Q
q
1 0 0 1 50.01575 220.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports additional features such as casting/type checking.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 214.0394 cm
Q
q
1 0 0 1 50.01575 202.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (support default values) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 202.0394 cm
Q
q
1 0 0 1 50.01575 178.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.720671 Tw (The resulting class is a dict so can be stored in MongoDB, sent to json or be used to construct a pd.Series) Tj T* 0 Tw (automatically.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 172.0394 cm
Q
q
1 0 0 1 50.01575 157.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Simple construction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 102.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( Customer = named_dict\('Customer', ['name', 'date', 'balance']\)) Tj T* (>) Tj (>) Tj (>) Tj ( james = Customer\('james', 'today', 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert james['balance'] == 10) Tj T* (>) Tj (>) Tj (>) Tj ( assert james.date == 'today') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 88.23937 cm
Q
q
1 0 0 1 50.01575 73.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How named_dict works with json/pandas/other named_dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (14) Tj T* ET
Q
Q
 
endstream
endobj
985 0 obj
<<
/Length 7473
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 720.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( class Customer\(named_dict\('Customer', ['name', 'date', 'balance']\)\):) Tj T* (>) Tj (>) Tj (>) Tj (     def add_to_balance\(self, value\):) Tj T* (>) Tj (>) Tj (>) Tj (         res = self.copy\(\)) Tj T* (>) Tj (>) Tj (>) Tj (         res.balance += value) Tj T* (>) Tj (>) Tj (>) Tj (         return res) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 633.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( james = Customer\('james', 'date', 10\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert james.add_to_balance\(10\).balance == 20) Tj T* (>) Tj (>) Tj (>) Tj ( import json) Tj T* (>) Tj (>) Tj (>) Tj ( assert pd.Series\(james\).date == 'date') Tj T* (>) Tj (>) Tj (>) Tj ( assert dict\(james\) == {'name': 'james', 'date': 'date', 'balance': 10}) Tj T* (>) Tj (>) Tj (>) Tj ( assert json.dumps\(james\) == '{"name": "james", "date": "date", "balance": 10}') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 582.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( class VIP\(named_dict\('VIP', ['name', 'date']\)\):) Tj T* (>) Tj (>) Tj (>) Tj (     def some_method\(self\):) Tj T* (>) Tj (>) Tj (>) Tj (         return 'inheritence between classes works as long as members can share') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 531.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 586 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( vip = VIP\(james\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert vip.name == 'james' ## members moved seemlessly) Tj T* (>) Tj (>) Tj (>) Tj ( assert vip.some_method\(\) == 'inheritence between classes works as long as members can share' ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 517.8394 cm
Q
q
1 0 0 1 50.01575 502.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Adding defaults) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 460.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 580 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( Customer = named_dict\('Customer', ['name', 'date', 'balance'], defaults = dict\(balance = 0\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( james = Customer\('james', 'today'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert james['balance'] == 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 446.0394 cm
Q
q
1 0 0 1 50.01575 431.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (types checking) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 376.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 832 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import datetime) Tj T* (>) Tj (>) Tj (>) Tj ( Customer = named_dict\('Customer', ['name', 'date', 'balance'], defaults = dict\(balance = 0\), types = dict\(date = 'datetime.datetime'\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( james = Customer\('james', datetime.datetime.now\(\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert james['balance'] == 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 362.2394 cm
Q
q
1 0 0 1 50.01575 347.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (casting) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 304.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1030 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( Customer = named_dict\('Customer', ['name', 'date', 'balance'], defaults = dict\(balance = 0\), types = dict\(date = 'datetime.datetime'\), casts = dict\(balance = 'float'\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( james = Customer\('james', datetime.datetime.now\(\), balance = '10.3'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert james['balance'] == 10.3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 290.4394 cm
Q
q
1 0 0 1 50.01575 275.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 259.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (name : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 244.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name of new class.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 228.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (keys : ) Tj /F4 10 Tf (list) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 213.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of keys that the class must have as members.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 197.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (defaults : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 182.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (default values for the keys. The default is {}.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 166.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (types : ) Tj /F4 10 Tf (type or callable, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 151.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A test to be applied for keys either as a callable or as a type. The default is {}.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 135.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (casts : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 120.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function. The default is {}.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 104.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (basedict : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 89.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name of the dict class to inherit from. The default is \221dict\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 73.43937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (debug : ) Tj /F4 10 Tf (bool, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 58.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (output the construction text if set to True. The default is False.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (15) Tj T* ET
Q
Q
 
endstream
endobj
986 0 obj
<<
/Length 6643
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (ValueError) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (DESCRIPTION.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 754.0394 cm
Q
q
1 0 0 1 50.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 727.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (result : new class that inherits from a dict) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 694.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (decorators) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 663.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (wrapper) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 651.8394 cm
Q
q
1 0 0 1 40.01575 633.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._decorators.) Tj /F6 10 Tf (wrapper) Tj /F1 10 Tf ( \() Tj (function) Tj (=) Tj (None) Tj (, *) Tj (args) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 585.8394 cm
q
BT 1 0 0 1 0 38 Tm .469689 Tw 12 TL /F1 10 Tf 0 0 0 rg (A base class for all decorators. It is similar to functools.wraps but better. See below why wrapt cannot be used\205) Tj T* 0 Tw .887705 Tw (You basically need to define the wrapped method and everything else is handled for you. - You can then use it) Tj T* 0 Tw .209006 Tw (either directly to decorate functions - Or use it to create parameterized decorators - the __name__, __wrapped__,) Tj T* 0 Tw (__doc__ and the getargspec will all be taken care of.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 579.8394 cm
Q
q
1 0 0 1 50.01575 564.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 522.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 634 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( class and_add\(wrapper\):) Tj T* (>) Tj (>) Tj (>) Tj (     def wrapped\(self, *args, **kwargs\):) Tj T* (>) Tj (>) Tj (>) Tj (         return self.function\(*args, **kwargs\) + self.add ## note that we are assuming self.add exists) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 471.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( @and_add\(add = 3\) ## create a decorator and decorate the function) Tj T* (>) Tj (>) Tj (>) Tj ( def f\(a,b\):) Tj T* (>) Tj (>) Tj (>) Tj (     return a+b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 432.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert f.add == 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert f\(1,2\) == 6) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 412.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Alternatively you can also use it this directly:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 357.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( def f\(a,b\):) Tj T* (>) Tj (>) Tj (>) Tj (     return a+b) Tj T* (>) Tj (>) Tj (>) Tj ( ) Tj T* (>) Tj (>) Tj (>) Tj ( assert and_add\(f, add = 3\)\(1,2\) == 6) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 343.6394 cm
Q
q
1 0 0 1 50.01575 328.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Explicit parameter construction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 316.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can make the init more explict, also adding defaults for the parameters:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 249.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( class and_add_version_2\(wrapper\):) Tj T* (>) Tj (>) Tj (>) Tj (     def __init__\(self, function = None, add = 3\):) Tj T* (>) Tj (>) Tj (>) Tj (         super\(and_add, self\).__init__\(function = function, add = add\)) Tj T* (>) Tj (>) Tj (>) Tj (     def wrapped\(self, *args, **kwargs\):) Tj T* (>) Tj (>) Tj (>) Tj (         return self.function\(*args, **kwargs\) + self.add) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 187.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( @and_add_version_2) Tj T* (>) Tj (>) Tj (>) Tj ( def f\(a,b\):) Tj T* (>) Tj (>) Tj (>) Tj (     return a+b) Tj T* (>) Tj (>) Tj (>) Tj ( assert f\(1,2\) == 6) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 173.0394 cm
Q
q
1 0 0 1 50.01575 158.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (No recursion) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 146.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The decorator is designed to have a single instance of a specific wrapper) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 115.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a, b: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( assert and_add\(and_add\(f\)\) == and_add\(f\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 95.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This holds even for multiple levels of wrapping:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 64.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = try_none\(and_add\(f\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = try_none\(and_add\(x\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
 
endstream
endobj
987 0 obj
<<
/Length 6818
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert x == y        ) Tj T* (>) Tj (>) Tj (>) Tj ( assert x\(1, 'no can add'\) is None        ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 727.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (wrapper vs wrapt) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 703.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .279631 Tw (wrapt \(wrapt.readthedocs.io\) is an awesome wrapping tool. If you have static library functions, none is better. The) Tj T* 0 Tw (problem we face is that wrapt is too good in pretending the wrapped up object is the same as original function:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 624.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import wrapt    ) Tj T* (>) Tj (>) Tj (>) Tj ( def add_value\(value\):) Tj T* (>) Tj (>) Tj (>) Tj (     @wrapt.decorator) Tj T* (>) Tj (>) Tj (>) Tj (     def wrapper\(wrapped, instance, args, kwargs\):) Tj T* (>) Tj (>) Tj (>) Tj (         return wrapped\(*args, **kwargs\) + value) Tj T* (>) Tj (>) Tj (>) Tj (     return wrapper) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 585.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( def f\(x,y\):) Tj T* (>) Tj (>) Tj (>) Tj (     return x*y) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 534.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( add_three = add_value\(value = 3\)\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( add_four = add_value\(value = 4\)\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert add_four\(3,4\) == 16 and add_three\(3,4\) == 15) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 496.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ## but here is the problem:) Tj T* (>) Tj (>) Tj (>) Tj ( assert encode\(add_three\) == encode\(add_four\) == encode\(f\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 464.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.194205 Tw (So if we ever encode the function and send it across json/Mongo, the wrapping is lost and the user when she) Tj T* 0 Tw (receives it cannot use it) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 421.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( class add_value\(wrapper\):) Tj T* (>) Tj (>) Tj (>) Tj (     def wrapped\(self, *args, **kwargs\):) Tj T* (>) Tj (>) Tj (>) Tj (         return self.function\(*args, **kwargs\) + self.value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 334.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 640 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( add_three = add_value\(value = 3\)\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( add_four = add_value\(value = 4\)\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( encode\(add_three\)) Tj T* (>) Tj (>) Tj (>) Tj ( {'value': 3, 'function': '{"py/function": "__main__.f"}', '_obj': '{"py/type": "__main__.add_value"}'}) Tj T* (>) Tj (>) Tj (>) Tj ( encode\(add_three\)) Tj T* (>) Tj (>) Tj (>) Tj ( {'value': 4, 'function': '{"py/function": "__main__.f"}', '_obj': '{"py/type": "__main__.add_value"}'}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 304.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (timer) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 292.0394 cm
Q
q
1 0 0 1 40.01575 274.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._decorators.) Tj /F6 10 Tf (timer) Tj /F1 10 Tf ( \() Tj (function) Tj (, n) Tj (=) Tj (1) Tj (, time) Tj (=) Tj (False) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 250.0394 cm
q
BT 1 0 0 1 0 14 Tm .557814 Tw 12 TL /F1 10 Tf 0 0 0 rg (timer is similar to timeit but rather than execution of a Python statement, timer wraps a function to make it log its) Tj T* 0 Tw (evaluation time before returning output) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 244.0394 cm
Q
q
1 0 0 1 50.01575 229.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 213.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (function: callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 198.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The function to be wraooed) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 182.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 167.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Number of times the function is to be evaluated. Default is 1) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 151.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (time: bool, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 136.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If set to True, function will return the TIME it took to evaluate rather than the original function output.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 130.0394 cm
Q
q
1 0 0 1 50.01575 115.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import datetime) Tj T* (>) Tj (>) Tj (>) Tj ( f = lambda a, b: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( evaluate_100 = timer\(f, n = 100, time = True\)\(1,2\)) Tj T* (>) Tj (>) Tj (>) Tj ( evaluate_10000 = timer\(f, n = 10000, time = True\)\(1,2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (17) Tj T* ET
Q
Q
 
endstream
endobj
988 0 obj
<<
/Length 6752
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert evaluate_10000) Tj (>) Tj ( evaluate_100) Tj T* (>) Tj (>) Tj (>) Tj ( assert isinstance\(evaluation_time, datetime.timedelta\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 725.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (try_value) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 713.8394 cm
Q
q
1 0 0 1 40.01575 701.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._decorators.) Tj /F6 10 Tf (try_value) Tj /F1 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 689.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (wraps a function to try an evaluation. If an exception is thrown, returns a cached argument) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 683.8394 cm
Q
q
1 0 0 1 50.01575 668.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 652.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (function callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 637.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The function we want to decorate) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 621.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (value:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 606.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If the function fails, it will return value instead. Default is None) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 590.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (verbose: bool) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 575.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If set to True, the logger will warn with the error message.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 551.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.116136 Tw (There are various convenience functions with specific values try_zero, try_false, try_true, try_nan and try_none will) Tj T* 0 Tw (all return specific values if function fails.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 545.8394 cm
Q
q
1 0 0 1 50.01575 530.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 476.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( f = lambda a: a[0]) Tj T* (>) Tj (>) Tj (>) Tj ( assert try_none\(f\)\(4\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( assert try_none\(f, 'failed'\)\(4\) == 'failed') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 445.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (try_back) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 433.6394 cm
Q
q
1 0 0 1 40.01575 421.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._decorators.) Tj /F6 10 Tf (try_back) Tj /F1 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 409.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (wraps a function to try an evaluation. If an exception is thrown, returns first argument) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 403.6394 cm
Q
q
1 0 0 1 50.01575 388.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 357.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a: a[0]) Tj T* (>) Tj (>) Tj (>) Tj ( assert try_back\(f\)\('hello'\) == 'h' and try_back\(f\)\(5\) == 5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 327.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (loops) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 315.4394 cm
Q
q
1 0 0 1 40.01575 297.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._loop.) Tj /F6 10 Tf (loops) Tj /F1 10 Tf ( \() Tj (function) Tj (=) Tj (None) Tj (, types) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 285.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (converts a function to loop over the arguments, depending on the type of the first argument) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 279.4394 cm
Q
q
1 0 0 1 50.01575 264.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 221.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( @loop\(dict, list, pd.DataFrame, pd.Series\)) Tj T* (>) Tj (>) Tj (>) Tj ( def f\(a,b\):) Tj T* (>) Tj (>) Tj (>) Tj (     return a+b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 170.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert f\(1,2\) == 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert f\([1,2,3],2\) == [3,4,5]) Tj T* (>) Tj (>) Tj (>) Tj ( assert f\([1,2,3], [4,5,6]\) == [5,7,9]    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 132.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert f\(dict\(x=1,y=2\), 3\) == dict\(x = 4, y = 5\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert f\(dict\(x=1,y=2\), dict\(x = 3, y = 4\)\) == dict\(x = 4, y = 6\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 81.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = pd.Series\(dict\(x=1,y=2\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = dict\(x=3,y=4\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert np.all\(f\(a,b\) == pd.Series\(dict\(x=4,y=6\)\)\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (18) Tj T* ET
Q
Q
 
endstream
endobj
989 0 obj
<<
/Length 7911
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 732.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = pd.DataFrame\(dict\(x=[1,1],y=[2,2]\)\); a.index = [5,10]) Tj T* (>) Tj (>) Tj (>) Tj ( b = dict\(x=3,y=4\)) Tj T* (>) Tj (>) Tj (>) Tj ( res =  f\(a,b\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert np.all\(res == pd.DataFrame\(dict\(x=[4,4],y=[6,6]\), index = [5,10]\)\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 681.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = pd.DataFrame\(dict\(x=[1,1],y=[2,2]\)\); a.index = [5,10]) Tj T* (>) Tj (>) Tj (>) Tj ( res =  f\(a,[3,4]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert np.all\( res == pd.DataFrame\(dict\(x=[4,4],y=[6,6]\), index = [5,10]\)\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 651.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (loop) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 639.0394 cm
Q
q
1 0 0 1 40.01575 627.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._loop.) Tj /F6 10 Tf (loop) Tj /F1 10 Tf ( \() Tj (*) Tj (types) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 615.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns an instance of loops\(types = types\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 597.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loop_all is an instance of loops that loops over dict, list, tuple, np.ndarray and pandas.DataFrame/Series) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 566.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (kwargs_support) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 554.6394 cm
Q
q
1 0 0 1 40.01575 542.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._decorators.) Tj /F6 10 Tf (kwargs_support) Tj /F1 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 530.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Extends a function to support ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (kwargs inputs) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 524.6394 cm
Q
q
1 0 0 1 50.01575 509.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 454.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( @kwargs_support) Tj T* (>) Tj (>) Tj (>) Tj ( def f\(a,b\):) Tj T* (>) Tj (>) Tj (>) Tj (     return a+b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 428.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert f\(1,2, what_is_this = 3, not_used = 4, ignore_this_too = 5\) == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 395.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (graphs & cells) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 364.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cell) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 352.8394 cm
Q
q
1 0 0 1 40.01575 334.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._cell.) Tj /F6 10 Tf (cell) Tj /F1 10 Tf ( \() Tj (function) Tj (=) Tj (None) Tj (, output) Tj (=) Tj (None) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 322.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (cell is a Dict that can be though of as a node in a calculation graph. The nearest parallel is actually an Excel cell:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 316.8394 cm
Q
q
1 0 0 1 50.01575 316.8394 cm
Q
q
1 0 0 1 50.01575 304.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell contains both its function and its output. cell.output defines the keys where the output is supposed to be) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 298.8394 cm
Q
q
1 0 0 1 50.01575 286.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell contains reference to all the function outputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 280.8394 cm
Q
q
1 0 0 1 50.01575 268.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell contains its locations and the means to manage its own persistency) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 268.8394 cm
Q
q
1 0 0 1 50.01575 262.8394 cm
Q
q
1 0 0 1 50.01575 247.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 241.8394 cm
Q
q
1 0 0 1 50.01575 241.8394 cm
Q
q
1 0 0 1 50.01575 229.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function is the function to be called) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 223.8394 cm
Q
q
1 0 0 1 50.01575 211.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (** kwargs are the function named key value args. NOTE: NO SUPPORT for ) Tj 1 0 0 rg (*) Tj 0 0 0 rg (args nor ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (kwargs in function) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 205.8394 cm
Q
q
1 0 0 1 50.01575 193.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (output: where should the function output go?) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 193.8394 cm
Q
q
1 0 0 1 50.01575 187.8394 cm
Q
q
1 0 0 1 50.01575 172.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (simple construction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 106.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( c = cell\(lambda a, b: a+b, a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.a == 1) Tj T* (>) Tj (>) Tj (>) Tj ( c = c.go\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.output == ['data'] and c.data == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 92.03937 cm
Q
q
1 0 0 1 50.01575 77.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (make output go to \221value\222 key) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (19) Tj T* ET
Q
Q
 
endstream
endobj
990 0 obj
<<
/Length 7640
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda a, b: a+b, a = 1, b = 2, output = 'value'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.go\(\).value == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 727.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multiple outputs by function) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 672.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a, b: dict\(sum = a+b, prod = a*b\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = cell\(f, a = 1, b = 2, output  = ['sum', 'prod']\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = c.go\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.sum == 3 and c.prod == 2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 658.4394 cm
Q
q
1 0 0 1 50.01575 643.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.59937 0 Td (Methods:) Tj T* -28.59937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 637.4394 cm
Q
q
1 0 0 1 50.01575 637.4394 cm
Q
q
1 0 0 1 50.01575 625.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.run\(\) returns bool if cell needs to be run) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 619.4394 cm
Q
q
1 0 0 1 50.01575 607.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.go\(\) calculates the cell and returns the function with cell.output keys now populated.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 601.4394 cm
Q
q
1 0 0 1 50.01575 589.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.load\(\)/cell.save\(\) interface for self load/save persistence) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 589.4394 cm
Q
q
1 0 0 1 50.01575 583.4394 cm
Q
q
1 0 0 1 50.01575 565.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (copy) Tj /F2 10 Tf ( \(\) ) Tj /F7 10 Tf 12 TL (\256) Tj /F2 10 Tf 12 TL ( ) Tj /F1 10 Tf (a shallow copy of D) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 559.4394 cm
Q
q
1 0 0 1 50.01575 541.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (go) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (go) Tj (=) Tj (1) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (mode) Tj (=) Tj (0) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 517.4394 cm
q
BT 1 0 0 1 0 14 Tm .424004 Tw 12 TL /F1 10 Tf 0 0 0 rg (calculates the cell \(if needed\). By default, will then run cell.save\(\) to save the cell. If you don\222t want to save the) Tj T* 0 Tw (output \(perhaps you want to check it first\), use cell._go\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 511.4394 cm
Q
q
1 0 0 1 60.01575 496.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 480.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (go : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 429.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .663052 Tw (a parameter that forces calculation. The default is 0. go = 0: calculate cell only if cell.run\(\) is True go = 1:) Tj T* 0 Tw -0.011439 Tw (calculate THIS cell regardless. calculate the parents only if their cell.run\(\) is True go = 2: calculate THIS cell) Tj T* 0 Tw .576506 Tw (and PARENTS cell regardless, calculate grandparents if cell.run\(\) is True etc. go = -1: calculate the entire) Tj T* 0 Tw (tree again.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 413.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (kwargs : ) Tj /F4 10 Tf (parameters) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 398.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can actually allocate the variables to the function at runtime) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 374.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.126095 Tw (Note that by default, cell.go\(\) will default to go = 1 and force a calculation on cell while cell\(\) is lazy and will) Tj T* 0 Tw (default to assuming go = 0) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 368.4394 cm
Q
q
1 0 0 1 60.01575 353.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 337.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 322.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the cell, calculated) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 316.4394 cm
Q
q
1 0 0 1 60.01575 301.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (different values of go) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 222.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( f = lambda x=None,y=None: max\([dt\(x\), dt\(y\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = cell\(f\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = cell\(f, x = a\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = cell\(f, x = b\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = cell\(f, x = c\)\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 147.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( e = d.go\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( e0 = d.go\(0\)) Tj T* (>) Tj (>) Tj (>) Tj ( e1 = d.go\(1\)) Tj T* (>) Tj (>) Tj (>) Tj ( e2 = d.go\(2\)) Tj T* (>) Tj (>) Tj (>) Tj ( e_1 = d.go\(-1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 73.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 508 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert not d.run\(\) and e.data == d.data ) Tj T* (>) Tj (>) Tj (>) Tj ( assert e0.data == d.data ) Tj T* (>) Tj (>) Tj (>) Tj ( assert e1.data ) Tj (>) Tj ( d.data and e1.x.data == d.x.data) Tj T* (>) Tj (>) Tj (>) Tj ( assert e2.data ) Tj (>) Tj ( d.data and e2.x.data ) Tj (>) Tj ( d.x.data and e2.x.x.data == d.x.x.data) Tj T* (>) Tj (>) Tj (>) Tj ( assert e_1.data ) Tj (>) Tj ( d.data and e_1.x.data ) Tj (>) Tj ( d.x.data and e_1.x.x.data ) Tj (>) Tj ( d.x.x.data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 59.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (20) Tj T* ET
Q
Q
 
endstream
endobj
991 0 obj
<<
/Length 7412
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adding parameters on the run) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 729.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda a, b: a+b\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = c\(a = 1, b =2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.data == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 715.2394 cm
Q
q
1 0 0 1 50.01575 697.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (load) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (mode) Tj (=) Tj (0) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 673.2394 cm
q
BT 1 0 0 1 0 14 Tm .681339 Tw 12 TL /F1 10 Tf 0 0 0 rg (Loads the cell from the database based on primary keys of cell perhaps. Not implemented for simple cell. see) Tj T* 0 Tw (db_cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 667.2394 cm
Q
q
1 0 0 1 60.01575 652.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 636.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 621.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (self, updated with values from database.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 615.2394 cm
Q
q
1 0 0 1 50.01575 597.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (register) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (inputs) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 585.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (registers the cell so that it calculates when the inputs of the cells are calculated) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 569.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (inputs : ) Tj /F4 10 Tf (strs) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 554.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 538.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 523.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (self.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 517.2394 cm
Q
q
1 0 0 1 50.01575 499.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (run) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 475.2394 cm
q
BT 1 0 0 1 0 14 Tm -0.053138 Tw 12 TL /F1 10 Tf 0 0 0 rg (checks if the cell needs calculation. This depends on the nature of the cell. By default \(for cell and db_cell\), if the) Tj T* 0 Tw (cell is already calculated so that cell._output exists, then returns False. otherwise True) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 459.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (bool) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 444.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (run cell?) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 438.2394 cm
Q
q
1 0 0 1 60.01575 423.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 368.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda x: x+1, x = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.run\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = c\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.data == 2 and not c.run\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 354.4394 cm
Q
q
1 0 0 1 50.01575 336.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (save) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 324.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Saves the cell for persistency. Not implemented for simple cell. see db_cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 318.4394 cm
Q
q
1 0 0 1 60.01575 303.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 287.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 272.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (self, saved.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 242.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cell_go) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 230.0394 cm
Q
q
1 0 0 1 40.01575 218.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._cell.) Tj /F6 10 Tf (cell_go) Tj /F1 10 Tf ( \() Tj (value) Tj (, go) Tj (=) Tj (0) Tj (, mode) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 206.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell_go makes a cell run \(using cell.go\(go\)\) and returns the calculated cell. If value is not a cell, value is returned.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 200.0394 cm
Q
q
1 0 0 1 50.01575 185.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 169.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (cell) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 154.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The cell \(or anything else\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 138.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (go : ) Tj /F4 10 Tf (int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 111.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm -0.049805 Tw 12 TL /F1 10 Tf 0 0 0 rg (same inputs as per cell.go\(go\). 0: run if cell.run\(\) is True 1: run this cell regardless, run parent cells only if they) Tj T* 0 Tw (need to calculate too n: run this cell & its nth parents regardless.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 105.0394 cm
Q
q
1 0 0 1 50.01575 90.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 78.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The calculated cell) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 72.03937 cm
Q
q
1 0 0 1 50.01575 57.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (calling non-cells) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (21) Tj T* ET
Q
Q
 
endstream
endobj
992 0 obj
<<
/Length 7581
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert cell_go\(1\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_go\(dict\(a=1,b=2\)\) == dict\(a=1,b=2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 727.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (calling cells) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 696.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda a, b: a+b, a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_go\(c\) == c\(data = 3\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 666.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cell_item) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 654.0394 cm
Q
q
1 0 0 1 40.01575 642.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._cell.) Tj /F6 10 Tf (cell_item) Tj /F1 10 Tf ( \() Tj (value) Tj (, key) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 630.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns an item from a cell \(if not cell, returns back the value\). If no key is provided, will return the output of the cell) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 624.0394 cm
Q
q
1 0 0 1 50.01575 609.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 593.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (cell or object or list of cells/objects) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 578.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 562.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (key : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 535.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .090742 Tw (The key within cell we are interested in. Note that key is treated as GUIDANCE only. Our strong preference is) Tj T* 0 Tw (to return valid output from cell_output\(cell\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 529.0394 cm
Q
q
1 0 0 1 50.01575 514.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (non cells) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 483.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert cell_item\(1\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_item\(dict\(a=1,b=2\)\) == dict\(a=1,b=2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 469.2394 cm
Q
q
1 0 0 1 50.01575 454.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cells, simple) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 411.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda a, b: a+b, a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_item\(c\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_item\(c.go\(\)\) == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 381.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cell_func) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 369.0394 cm
Q
q
1 0 0 1 40.01575 357.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._cell.) Tj /F6 10 Tf (cell_func) Tj /F1 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 333.0394 cm
q
BT 1 0 0 1 0 14 Tm -0.049359 Tw 12 TL /F1 10 Tf 0 0 0 rg (cell_func is a wrapper and wraps a function to act on cells rather than just on values When called, it will returns not) Tj T* 0 Tw (just the function, but also args, kwargs used to call it.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 317.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (In order to present the itemized value in the cell, inputs for the function that are cells will:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 260.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 44 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (be loaded \(from the persistency layer\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (called and calculated) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (itemized: i.e. cell_item\(input\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 254.0394 cm
Q
q
1 0 0 1 50.01575 239.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 160.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = cell\(lambda x: x**2, x  = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = cell\(lambda y: y**3, y  = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( function = lambda a, b: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( self = cell_func\(function\)) Tj T* (>) Tj (>) Tj (>) Tj ( result, args, kwargs = self\(a,b\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 109.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert result == 8 + 9) Tj T* (>) Tj (>) Tj (>) Tj ( assert kwargs['a'].data == 3 ** 2) Tj T* (>) Tj (>) Tj (>) Tj ( assert kwargs['b'].data == 2 ** 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 95.43937 cm
Q
q
1 0 0 1 50.01575 80.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 64.43937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22) Tj T* ET
Q
Q
 
endstream
endobj
993 0 obj
<<
/Length 7037
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The function to be wrapped) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 756.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (relabels : ) Tj /F4 10 Tf (dict or None) Tj T* ET
Q
Q
q
1 0 0 1 4.637795 686.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56.8 Tm  T* ET
q
1 0 0 1 20 54.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Allows a redirect of variable names. For example:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 580 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import * ) Tj T* (>) Tj (>) Tj (>) Tj ( a = cell\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( f = cell_func\(lambda x: x+1, relabels = dict\(x = 'c'\)\) ## please use key 'c' to grab x value) Tj T* (>) Tj (>) Tj (>) Tj ( assert f\(a\)[0] == 4) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 670.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (unloaded: list or str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 643.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .430186 Tw (By defaults, if a cell is in the inputs, it will be loaded \(cell.load\(\)\) prior to being presented to the function If an) Tj T* 0 Tw (arg is in unloaded, it will not be loaded) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 627.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (uncalled: list or str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 600.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .001482 Tw (By defaults, if a cell is in the inputs, it will be called \(cell.call\(\)\) prior to being presented to the function If an arg) Tj T* 0 Tw (is in uncalled, it will not be called) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 584.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (unitemized: list or str) Tj T* ET
Q
Q
q
1 0 0 1 -70.3622 514.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56.8 Tm  T* ET
q
1 0 0 1 20 54.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (By defaults, if a cell is in the inputs, once run, we itemize and grab its data If an arg is in unitemized, it will be presented \221as is\222 :Example:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 730 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import * ) Tj T* (>) Tj (>) Tj (>) Tj ( x = cell\(passthru, data = 'this is the value presented'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_func\(lambda x: len\(x\)\)\(x\)[0] == len\('this is the value presented'\) ## function run on item  in x) Tj T* (>) Tj (>) Tj (>) Tj ( assert cell_func\(lambda x: len\(x\), unitemized = 'x'\)\(x\)[0] == len\(x\)           ## function run on x as-is, unitemized) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 484.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cell_clear) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 472.0394 cm
Q
q
1 0 0 1 40.01575 460.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._cell.) Tj /F6 10 Tf (cell_clear) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 436.0394 cm
q
BT 1 0 0 1 0 14 Tm .177913 Tw 12 TL /F1 10 Tf 0 0 0 rg (cell_clear clears a cell of its output so that it contains only the essentil stuff to do its calculations. This will be used) Tj T* 0 Tw (when we save the cell or we want to recalculate it.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 430.0394 cm
Q
q
1 0 0 1 50.01575 415.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 336.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *    ) Tj T* (>) Tj (>) Tj (>) Tj ( a = cell\(add_, a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = cell\(add_, a = 2, b = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = cell\(add_, a = a, b = b\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.data == 8    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.a.data == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 285.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( bare = cell_clear\(c\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert 'data' not in bare and 'data' not in bare.a) Tj T* (>) Tj (>) Tj (>) Tj ( assert bare\(\) == c) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 271.4394 cm
Q
q
1 0 0 1 50.01575 256.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 240.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (value: obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 225.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell \(or list/dict of\) to be cleared of output) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 192.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (encode and decode/save and load) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 162.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (encode) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 150.2394 cm
Q
q
1 0 0 1 40.01575 138.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._encode.) Tj /F6 10 Tf (encode) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 114.2394 cm
q
BT 1 0 0 1 0 14 Tm .679672 Tw 12 TL /F1 10 Tf 0 0 0 rg (encode/decode are performed prior to sending to mongodb or after retrieval from db. The idea is to make object) Tj T* 0 Tw (embedding in Mongo transparent to the user.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 108.2394 cm
Q
q
1 0 0 1 50.01575 108.2394 cm
Q
q
1 0 0 1 50.01575 84.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .1173 Tw (We use jsonpickle package to embed general objects. These are encoded as strings and can be decoded as) Tj T* 0 Tw (long as the original library exists when decoding.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 78.23937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (23) Tj T* ET
Q
Q
 
endstream
endobj
994 0 obj
<<
/Length 7492
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 763.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.931007 Tw 12 TL /F1 10 Tf 0 0 0 rg (pandas.DataFrame are encoded to bytes using pickle while numpy arrays are encoded using the faster) Tj T* 0 Tw (array.tobytes\(\) with arrays\222 shape & type exposed and searchable.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 742.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 603.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1102 138 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( value = Dict\(a=1,b=2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert encode\(value\) == {'a': 1, 'b': 2, '_obj': '{"py/type": "pyg.base._dict.Dict"}'}) Tj T* (>) Tj (>) Tj (>) Tj ( assert decode\({'a': 1, 'b': 2, '_obj': '{"py/type": "pyg.base._dict.Dict"}'}\) == Dict\(a = 1, b=2\)) Tj T* (>) Tj (>) Tj (>) Tj ( value = dictable\(a=[1,2,3], b = 4\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert encode\(value\) == {'a': [1, 2, 3], 'b': [4, 4, 4], '_obj': '{"py/type": "pyg.base._dictable.dictable"}'}) Tj T* (>) Tj (>) Tj (>) Tj ( assert decode\(encode\(value\)\) == value) Tj T* (>) Tj (>) Tj (>) Tj ( assert encode\(np.array\([1,2]\)\) ==  {'data': bytes,) Tj T* (>) Tj (>) Tj (>) Tj (                                     'shape': \(2,\),) Tj T* (>) Tj (>) Tj (>) Tj (                                     'dtype': '{"py/reduce": [{"py/type": "numpy.dtype"}, {"py/tuple": ["i4", false, true]}, {"py/tuple": [3, ") Tj (<) Tj (", null, null, null, -1, -1, 0]}]}',) Tj T* (>) Tj (>) Tj (>) Tj (                                     '_obj': '{"py/function": "pyg.base._encode.bson2np"}'}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 589.2394 cm
Q
q
1 0 0 1 50.01575 574.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (functions and objects) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 531.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( assert encode\(ewma\) == '{"py/function": "pyg.timeseries._ewm.ewma"}') Tj T* (>) Tj (>) Tj (>) Tj ( assert encode\(Calendar\) == '{"py/type": "pyg.base._drange.Calendar"}') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 517.4394 cm
Q
q
1 0 0 1 50.01575 502.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 486.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 471.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (An object to be encoded) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 465.4394 cm
Q
q
1 0 0 1 50.01575 450.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 438.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A pre-json object) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 408.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (decode) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 396.0394 cm
Q
q
1 0 0 1 40.01575 384.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._encode.) Tj /F6 10 Tf (decode) Tj /F1 10 Tf ( \() Tj (value) Tj (, date) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 372.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (decodes a string or an object dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 366.0394 cm
Q
q
1 0 0 1 50.01575 351.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 335.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (str or dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 320.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (usually a json) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 304.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (date : ) Tj /F4 10 Tf (None, bool or a regex expression, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 289.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (date format to be decoded) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 283.0394 cm
Q
q
1 0 0 1 50.01575 268.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 252.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 237.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the json decoded.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 231.0394 cm
Q
q
1 0 0 1 50.01575 216.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 173.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( class temp\(dict\):) Tj T* (>) Tj (>) Tj (>) Tj (    pass) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 122.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( orig = temp\(a = 1, b = dt\(0\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( encoded = encode\(orig\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(decode\(encoded\), orig\) # type matching too...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 92.03937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (pd_to_parquet) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 80.03937 cm
Q
q
1 0 0 1 40.01575 68.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._parquet.) Tj /F6 10 Tf (pd_to_parquet) Tj /F1 10 Tf ( \() Tj (value) Tj (, path) Tj (, compression) Tj (=) Tj ('GZIP') Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 56.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a small utility to save df to parquet, extending both pd.Series and non-string columns) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (24) Tj T* ET
Q
Q
 
endstream
endobj
995 0 obj
<<
/Length 6479
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 729.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( import pandas as pd) Tj T* (>) Tj (>) Tj (>) Tj ( import pytest) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 690.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df = pd.DataFrame\([[1,2],[3,4]], drange\(-1\), columns = [0, dt\(0\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( s = pd.Series\([1,2,3], drange\(-2\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 651.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(ValueError\): ## must have string column names) Tj T* (        df.to_parquet\('c:/temp/test.parquet'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 612.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(AttributeError\): ## pd.Series has no to_parquet) Tj T* (        s.to_parquet\('c:/temp/test.parquet'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 574.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df_path = pd_to_parquet\(df, 'c:/temp/df.parquet'\)) Tj T* (>) Tj (>) Tj (>) Tj ( series_path = pd_to_parquet\(s, 'c:/temp/series.parquet'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 535.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df2 = pd_read_parquet\(df_path\)) Tj T* (>) Tj (>) Tj (>) Tj ( s2 = pd_read_parquet\(series_path\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 496.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(df, df2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(s, s2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 466.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (pd_read_parquet) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 454.0394 cm
Q
q
1 0 0 1 40.01575 442.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._parquet.) Tj /F6 10 Tf (pd_read_parquet) Tj /F1 10 Tf ( \() Tj (path) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 430.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a small utility to read df/series from parquet, extending both pd.Series and non-string columns) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 424.0394 cm
Q
q
1 0 0 1 50.01575 409.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 366.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( import pandas as pd) Tj T* (>) Tj (>) Tj (>) Tj ( import pytest) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 327.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df = pd.DataFrame\([[1,2],[3,4]], drange\(-1\), columns = [0, dt\(0\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( s = pd.Series\([1,2,3], drange\(-2\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 288.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(ValueError\): ## must have string column names) Tj T* (        df.to_parquet\('c:/temp/test.parquet'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 249.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(AttributeError\): ## pd.Series has no to_parquet) Tj T* (        s.to_parquet\('c:/temp/test.parquet'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 211.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df_path = pd_to_parquet\(df, 'c:/temp/df.parquet'\)) Tj T* (>) Tj (>) Tj (>) Tj ( series_path = pd_to_parquet\(s, 'c:/temp/series.parquet'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 172.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df2 = pd_read_parquet\(df_path\)) Tj T* (>) Tj (>) Tj (>) Tj ( s2 = pd_read_parquet\(series_path\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 133.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(df, df2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(s, s2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 103.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (parquet_encode) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 91.03937 cm
Q
q
1 0 0 1 40.01575 79.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.mongo._encoders.) Tj /F6 10 Tf (parquet_encode) Tj /F1 10 Tf ( \() Tj (value) Tj (, path) Tj (, compression) Tj (=) Tj ('GZIP') Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 67.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (encodes a single DataFrame or a document containing dataframes into a an abject that can be decoded) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (25) Tj T* ET
Q
Q
 
endstream
endobj
996 0 obj
<<
/Length 7157
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 696.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1168 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *     ) Tj T* (>) Tj (>) Tj (>) Tj ( path = 'c:/temp') Tj T* (>) Tj (>) Tj (>) Tj ( value = dict\(key = 'a', n = np.random.normal\(0,1, 10\), data = dictable\(a = [pd.Series\([1,2,3]\), pd.Series\([4,5,6]\)], b = [1,2]\), other = dict\(df = pd.DataFrame\(dict\(a=[1,2,3], b= [4,5,6]\)\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( encoded = parquet_encode\(value, path\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert encoded['n']['file'] == 'c:/temp/n.npy') Tj T* (>) Tj (>) Tj (>) Tj ( assert encoded['data'].a[0]['path'] == 'c:/temp/data/a/0.parquet') Tj T* (>) Tj (>) Tj (>) Tj ( assert encoded['other']['df']['path'] == 'c:/temp/other/df.parquet') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 657.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( decoded = decode\(encoded\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(decoded, value\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 627.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (csv_encode) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 615.0394 cm
Q
q
1 0 0 1 40.01575 603.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.mongo._encoders.) Tj /F6 10 Tf (csv_encode) Tj /F1 10 Tf ( \() Tj (value) Tj (, path) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 579.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.176123 Tw 12 TL /F1 10 Tf 0 0 0 rg (encodes a single DataFrame or a document containing dataframes into a an abject that can be decoded while) Tj T* 0 Tw (saving dataframes into csv) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 512.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 982 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( path = 'c:/temp') Tj T* (>) Tj (>) Tj (>) Tj ( value = dict\(key = 'a', data = dictable\(a = [pd.Series\([1,2,3]\), pd.Series\([4,5,6]\)], b = [1,2]\), other = dict\(df = pd.DataFrame\(dict\(a=[1,2,3], b= [4,5,6]\)\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( encoded = csv_encode\(value, path\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert encoded['data'].a[0]['path'] == 'c:/temp/data/a/0.csv') Tj T* (>) Tj (>) Tj (>) Tj ( assert encoded['other']['df']['path'] == 'c:/temp/other/df.csv') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 473.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( decoded = decode\(encoded\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(decoded, value\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 443.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (convertors to bytes) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 431.0394 cm
Q
q
1 0 0 1 40.01575 419.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._encode.) Tj /F6 10 Tf (pd2bson) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 407.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (converts a value \(usually a pandas.DataFrame/Series\) to bytes using pickle) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 401.0394 cm
Q
q
1 0 0 1 40.01575 389.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._encode.) Tj /F6 10 Tf (np2bson) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 365.0394 cm
q
BT 1 0 0 1 0 14 Tm 2.714947 Tw 12 TL /F1 10 Tf 0 0 0 rg (converts a numpy array to bytes using value.tobytes\(\). This is much faster than pickle but does not save) Tj T* 0 Tw (shape/type info which we save separately.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 359.0394 cm
Q
q
1 0 0 1 40.01575 347.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._encode.) Tj /F6 10 Tf (bson2np) Tj /F1 10 Tf ( \() Tj (data) Tj (, dtype) Tj (, shape) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 335.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (converts a byte with dtype and shape information into a numpy array.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 329.0394 cm
Q
q
1 0 0 1 40.01575 317.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._encode.) Tj /F6 10 Tf (bson2pd) Tj /F1 10 Tf ( \() Tj (data) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 293.0394 cm
q
BT 1 0 0 1 0 14 Tm .861205 Tw 12 TL /F1 10 Tf 0 0 0 rg (converts a pickled object back to an object. We insist that new object has .shape to ensure we did not unpickle) Tj T* 0 Tw (gibberish.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 260.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (dates and calendar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 229.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (dt) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 217.8394 cm
Q
q
1 0 0 1 40.01575 205.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dates.) Tj /F6 10 Tf (dt) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (*args) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (dialect='uk') Tj /F1 10 Tf (, ) Tj /F5 10 Tf (none=) Tj (<) Tj (built-in method now of type object) Tj (>) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 193.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A more generic constructor for datetime.datetime.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 187.8394 cm
Q
q
1 0 0 1 50.01575 172.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Simple construction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 70.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 508 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dt\(2000,1 ,1\) == datetime.datetime\(2000, 1, 1, 0, 0\) # name of month) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,'jan',1\) == datetime.datetime\(2000, 1, 1, 0, 0\) # name of month) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,'f',1\) == datetime.datetime\(2000, 1, 1, 0, 0\) # future month code) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\('01-02-2002'\) == datetime.datetime\(2002, 2, 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\('01-02-2002', dialect = 'US'\) == datetime.datetime\(2002, 1, 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\('01 March 2002'\) == datetime.datetime\(2002, 3, 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\('01 March 2002', dialect = 'US'\) == datetime.datetime\(2002, 3, 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\('01 March 2002 10:20:30'\) == datetime.datetime\(2002, 3, 1, 10, 20, 30\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (26) Tj T* ET
Q
Q
 
endstream
endobj
997 0 obj
<<
/Length 7877
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dt\(20020301\) == datetime.datetime\(2002, 3, 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(37316\) == datetime.datetime\(2002, 3, 1\) # excel date) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(730180\) == datetime.datetime\(2000,3,1\) # ordinal for 1/3/2000) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,3,1\).timestamp\(\) == 951868800.0) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(951868800.0\) == datetime.datetime\(2000,3,1\) # utc timestamp) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(np.datetime64\(dt\(2000,3,1\)\)\) == dt\(2000,3,1\) ## numpy.datetime64 object) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 621.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dt\(2000\) == datetime.datetime\(2000,1,1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,3\) == datetime.datetime\(2000,3,1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,3, 1\) == datetime.datetime\(2000,3,1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,3, 1, 10,20,30\) == datetime.datetime\(2000,3,1,10,20,30\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,'march', 1\) == datetime.datetime\(2000,3,1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,'h', 1\) == datetime.datetime\(2000,3,1\) # future codes) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 607.4394 cm
Q
q
1 0 0 1 50.01575 592.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (date as offset from today) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 525.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( today = dt\(0\); ) Tj T* (>) Tj (>) Tj (>) Tj ( import datetime) Tj T* (>) Tj (>) Tj (>) Tj ( day = datetime.timedelta\(1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(-3\) == today - 3 * day) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\('-10b'\) == today - 14 * day) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 511.6394 cm
Q
q
1 0 0 1 50.01575 496.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (datetime arithmetic:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 484.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dt has an interesting logic in implementing datetime arithmentic:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 478.6394 cm
Q
q
1 0 0 1 50.01575 442.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (day and month parameters can be negative or bigger than the days of month) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dt\(\) will roll back/forward from the date which is valid) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 442.6394 cm
Q
q
1 0 0 1 50.01575 411.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 550 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dt\(2000,4,1\) == datetime.datetime\(2000, 4, 1, 0, 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,4,0\) == datetime.datetime\(2000, 3, 31, 0, 0\) # a day before dt\(2000,4,1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 391.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (and rolling back months:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 361.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 562 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dt\(2000,0,1\) == datetime.datetime\(1999, 12, 1, 0, 0\) # a month before dt\(2000,1,1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert dt\(2000,13,1\) == datetime.datetime\(2001, 1, 1, 0, 0\) # a month after dt\(2000,12,1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 341.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This may feel unnatural at first, but does allow for much nicer code, e.g.: [dt\(2000,i,1\) for i in range\(-10,10\)]) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 335.0394 cm
Q
q
1 0 0 1 50.01575 320.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 304.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (args : ) Tj /F4 10 Tf (str, int or dates) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 289.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (argument to be converted into dates) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 273.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (dialect : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 258.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (parsing of 01/02/2020 is it 1st Feb or 2nd Jan? The default is \221uk\222, i.e. dd/mm/yyyy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 242.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (none : ) Tj /F4 10 Tf (callable, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 227.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What is dt\(\)? The default is datetime.datetime.now\(\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 196.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ymd) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 184.6394 cm
Q
q
1 0 0 1 40.01575 172.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dates.) Tj /F6 10 Tf (ymd) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (*args) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (dialect='uk') Tj /F1 10 Tf (, ) Tj /F5 10 Tf (none=) Tj (<) Tj (built-in method now of type object) Tj (>) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 160.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (just like dt\(\) but always returns date only \(year/month/date\) without fractions. see dt\(\) for full documentation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 148.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (datetime.datetime) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 118.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (dt_bump) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 106.2394 cm
Q
q
1 0 0 1 40.01575 94.23937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dates.) Tj /F6 10 Tf (dt_bump) Tj /F1 10 Tf ( \() Tj (t) Tj (, *) Tj (bumps) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 88.23937 cm
Q
q
1 0 0 1 50.01575 73.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (27) Tj T* ET
Q
Q
 
endstream
endobj
998 0 obj
<<
/Length 8202
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( t  = pd.Series\([1,2,3], drange\(dt\(2000,1,1\),2\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(dt_bump\(t, 1\), pd.Series\([1,2,3], drange\(dt\(2000,1,2\),2\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 713.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (drange) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 701.8394 cm
Q
q
1 0 0 1 40.01575 689.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._drange.) Tj /F6 10 Tf (drange) Tj /F1 10 Tf ( \() Tj (t0) Tj (=) Tj (None) Tj (, t1) Tj (=) Tj (None) Tj (, bump) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 677.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A quick and happy wrapper for dateutil.rrule) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 671.8394 cm
Q
q
1 0 0 1 50.01575 656.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 602.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 592 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( drange\(2000, 10, 1\) # 10 days starting from dt\(2000,1,1\)) Tj T* (>) Tj (>) Tj (>) Tj ( drange\(2000, '10b', '1b'\) # weekdays between dt\(2000,1,1\) and dt\(2000,1,17\)) Tj T* (>) Tj (>) Tj (>) Tj ( drange\('-10b', 0, '1b'\) # business days since 10 bdays ago) Tj T* (>) Tj (>) Tj (>) Tj ( drange\('-10b', '10b', '1w'\) # starting 10b days ago, to 10b from now, counting in weekly jumps) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 588.0394 cm
Q
q
1 0 0 1 50.01575 573.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 557.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (t0 : ) Tj /F4 10 Tf (date, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 542.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (start date. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 526.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (t1 : ) Tj /F4 10 Tf (date, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 511.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (end date. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 495.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (bump : ) Tj /F4 10 Tf (timedelta, int, string, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 480.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bump period. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 474.0394 cm
Q
q
1 0 0 1 50.01575 459.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 447.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of dates) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 441.0394 cm
Q
q
1 0 0 1 50.01575 426.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 395.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t0 = 2000; t1 = 1999) Tj T* (>) Tj (>) Tj (>) Tj ( bump = '-1b') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 381.2394 cm
Q
q
1 0 0 1 50.01575 366.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 347.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t0 = dt\(2020\); t1 = dt\(2021\); bump = datetime.timedelta\(hours = 4\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 317.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (date_range) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 305.0394 cm
Q
q
1 0 0 1 40.01575 293.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._drange.) Tj /F6 10 Tf (date_range) Tj /F1 10 Tf ( \() Tj (t0) Tj (=) Tj (None) Tj (, t1) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 262.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Calendar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 250.6394 cm
Q
q
1 0 0 1 40.01575 232.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._drange.) Tj /F6 10 Tf (Calendar) Tj /F1 10 Tf ( \() Tj (key) Tj (=) Tj (None) Tj (, holidays) Tj (=) Tj (None) Tj (, weekend) Tj (=) Tj (None) Tj (, t0) Tj (=) Tj (None) Tj (, t1) Tj (=) Tj (None) Tj (, adj) Tj (=) Tj ('m') Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 216.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Calendar is) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 159.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 44 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a dict) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (containing holiday dates) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (implementing business day arithmetic) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 147.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Calendar is restricted to operate between cal.t0 and cal.t1 which default to TMIN = 1900 and TMAX = 2300) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 131.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Calendar does this by having two key members:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 92.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dt2int: a mapping from all business dates to their integer \221clock\222) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (int2dt: a mapping from integer value to the date) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 68.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .307205 Tw (Since Calendar is an \221expensive\222 memory wise, we assign a key to the calendar and the Calendar is stored in the) Tj T* 0 Tw (singleton calendars under this key) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 62.63937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (28) Tj T* ET
Q
Q
 
endstream
endobj
999 0 obj
<<
/Length 6304
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 405.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 616 366 re B*
Q
q
BT 1 0 0 1 0 350 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( holidays = dictable\([[1,'2012-01-02','New Year Day',],) Tj T* (                        [2,'2012-01-16','Martin Luther King Jr. Day',],) Tj T* (                        [3,'2012-02-20','Presidents Day \(Washingtons Birthday\)',],) Tj T* (                        [4,'2012-05-28','Memorial Day',],) Tj T* (                        [5,'2012-07-04','Independence Day',],) Tj T* (                        [6,'2012-09-03','Labor Day',],) Tj T* (                        [7,'2012-10-08','Columbus Day',],) Tj T* (                        [8,'2012-11-12','Veterans Day',],) Tj T* (                        [9,'2012-11-22','Thanksgiving Day',],) Tj T* (                        [10,'2012-12-25','Christmas Day',],) Tj T* (                        [11,'2013-01-01','New Year Day',],) Tj T* (                        [12,'2013-01-21','Martin Luther King Jr. Day',],) Tj T* (                        [13,'2013-02-18','Presidents Day \(Washingtons Birthday\)',],) Tj T* (                        [14,'2013-05-27','Memorial Day',],) Tj T* (                        [15,'2013-07-04','Independence Day',],) Tj T* (                        [16,'2013-09-02','Labor Day',],) Tj T* (                        [17,'2013-10-14','Columbus Day',],) Tj T* (                        [18,'2013-11-11','Veterans Day',],) Tj T* (                        [19,'2013-11-28','Thanksgiving Day',],) Tj T* (                        [20,'2013-12-25','Christmas Day',],) Tj T* (                        [21,'2014-01-01','New Year Day',],) Tj T* (                        [22,'2014-01-20','Martin Luther King Jr. Day',],) Tj T* (                        [23,'2014-02-17','Presidents Day \(Washingtons Birthday\)',],) Tj T* (                        [24,'2014-05-26','Memorial Day',],) Tj T* (                        [25,'2014-07-04','Independence Day',],) Tj T* (                        [26,'2014-09-01','Labor Day',],) Tj T* (                        [27,'2014-10-13','Columbus Day',],) Tj T* (                        [28,'2014-11-11','Veterans Day',],) Tj T* (                        [29,'2014-11-27','Thanksgiving Day',],], ['i', 'date', 'name']\).do\(dt, 'date'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 366.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cal = calendar\('US', holidays.date, t0 = 2012, t1 = 2015\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert not cal.is_bday\(dt\(2013,9,2\)\)        # Labor day) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 327.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cached_calendar = calendar\('US'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert not cached_calendar.is_bday\(dt\(2013,9,2\)\)   # Labor day) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 288.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1030 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert cal.adjust\(dt\(2013,9,2\)\) == dt\(2013,9,3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert cal.drange\(dt\(2013,9,0\), dt\(2013,9,7\), '1b'\) == [dt\(2013,8,30\), dt\(2013,9,3\), dt\(2013,9,4\), dt\(2013,9,5\), dt\(2013,9,6\),] ## skipped labour day and weekend prior) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 262.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert cal.bdays\(dt\(2013,9,0\), dt\(2013,9,7\)\) == 5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 248.0394 cm
Q
q
1 0 0 1 50.01575 230.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (add) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (date) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (days) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (adj) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 206.0394 cm
q
BT 1 0 0 1 0 14 Tm .245783 Tw 12 TL /F1 10 Tf 0 0 0 rg (adjustes the start date to a business day. Then add business days on top. add will initiate self._populate unless) Tj T* 0 Tw (we are bumping date by exactly one day) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 190.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (date : ) Tj /F4 10 Tf (datetime) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 175.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (start date.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 159.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (days : ) Tj /F4 10 Tf (int) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 144.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (days to bump.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 128.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (adj : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 113.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adjusting method for date if it isn\222t a business day to start with.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 97.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (datetime) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 82.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bumped date.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 76.03937 cm
Q
q
1 0 0 1 50.01575 58.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (adjust) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (date) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (adj) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (29) Tj T* ET
Q
Q
 
endstream
endobj
1000 0 obj
<<
/Length 8096
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (adjust a non-business day to prev/following bussiness date) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 769.0394 cm
Q
q
1 0 0 1 60.01575 754.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 742.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (date : datetime. adj : None or p/f/m) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 736.0394 cm
Q
q
1 0 0 1 60.01575 724.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adjustment convention: \221prev/following/modified following\222) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 724.0394 cm
Q
q
1 0 0 1 60.01575 718.0394 cm
Q
q
1 0 0 1 60.01575 703.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 687.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (dateime) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 672.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nearby business day) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 666.0394 cm
Q
q
1 0 0 1 50.01575 648.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (dt_bump) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (t) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (bump) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (adj) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 636.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (adds a bump to a date) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 630.0394 cm
Q
q
1 0 0 1 60.01575 615.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 599.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (t : ) Tj /F4 10 Tf (datetime) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 584.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (date to bump.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 568.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (bump : ) Tj /F4 10 Tf (int, str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 553.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bump e.g. \221-1y\222 or \2211b\222 or 3) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 537.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (adj : ) Tj /F4 10 Tf (adjustement type) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 522.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 516.0394 cm
Q
q
1 0 0 1 60.01575 501.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 485.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (datetime) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 470.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bumped date.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 464.0394 cm
Q
q
1 0 0 1 50.01575 446.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (is_trading) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (date) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (day_start) Tj (=) Tj (0) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (day_end) Tj (=) Tj (235959) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 434.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (calculates if we are within a trading session) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 428.0394 cm
Q
q
1 0 0 1 60.01575 413.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 397.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (date : ) Tj /F4 10 Tf (datetime, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 382.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the time & date we want to check. The default is None \(i.e. now\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 376.0394 cm
Q
q
1 0 0 1 60.01575 361.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 345.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (bool:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 330.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (are we within a trading session) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 324.0394 cm
Q
q
1 0 0 1 50.01575 306.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (trade_date) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (date) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (adj) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (day_start) Tj (=) Tj (0) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (day_end) Tj (=) Tj (235959) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 282.0394 cm
q
BT 1 0 0 1 0 14 Tm .507569 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is very similar for adjust, but it also takes into account the time of the day. if day_start = 0 and day_end =) Tj T* 0 Tw (23:59:59 then this is exactly adjust.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 276.0394 cm
Q
q
1 0 0 1 60.01575 261.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 245.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (date : ) Tj /F4 10 Tf (datetime, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 230.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (date \(with time\). The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 214.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (adj : ) Tj /F4 10 Tf (f/p, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 199.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If date isn\222t within trading day, which direction to adjust to? The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 193.0394 cm
Q
q
1 0 0 1 60.01575 178.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 159.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import datetime) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 84.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 610 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( uk = calendar\('UK', day_start = 8, day_end = 17\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(dt\(2021,2,9,5\), 'f'\) == dt\(2021, 2, 9\)  # Tuesday morning rolls into Tuesday) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(dt\(2021,2,9,5\), 'p'\) == dt\(2021, 2, 8\)  # Tuesday morning back into Monday) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(dt\(2021,2,7,5\), 'f'\) == dt\(2021, 2, 8\)  # Sunday rolls into Monday) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(dt\(2021,2,7,5\), 'p'\) == dt\(2021, 2, 5\)  # Sunday rolls back to Friday) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (30) Tj T* ET
Q
Q
 
endstream
endobj
1001 0 obj
<<
/Length 7358
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 732.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(date = dt\(2021,2,9,23\), adj = 'f'\) == dt\(2021, 2, 10\)  # Tuesday eve rolls into Wed) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(date = dt\(2021,2,9,23\), adj = 'p'\) == dt\(2021, 2, 9\)  # Tuesday eve back into Tuesday) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(date = dt\(2021,2,7,23\), adj = 'f'\) == dt\(2021, 2, 8\)  # Sunday rolls into Monday) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(date = dt\(2021,2,7,23\), adj = 'p'\) == dt\(2021, 2, 5\)  # Sunday rolls back to Friday) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 693.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 598 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(date = dt\(2021,2,9,12\), adj = 'f'\) == dt\(2021, 2, 9\)  # Tuesday is Tuesday) Tj T* (>) Tj (>) Tj (>) Tj ( assert uk.trade_date\(date = dt\(2021,2,9,12\), adj = 'p'\) == dt\(2021, 2, 9\)  # Tuesday is Tuesday) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 618.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( au = calendar\('AU', day_start = 2230, day_end = 1300\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(dt\(2021,2,9,5\), 'f'\) == dt\(2021, 2, 9\)  # Tuesday morning in session) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(dt\(2021,2,9,5\), 'p'\) == dt\(2021, 2, 9\)  # Tuesday morning in session) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(dt\(2021,2,7,5\), 'f'\) == dt\(2021, 2, 8\)  # Sunday rolls into Monday) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(dt\(2021,2,7,5\), 'p'\) == dt\(2021, 2, 5\)  # Sunday rolls back to Friday) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 543.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 694 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,9,23\), adj = 'f'\) == dt\(2021, 2, 10\)  # Tuesday eve rolls into Wed) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,9,23\), adj = 'p'\) == dt\(2021, 2, 10\)  # Already in Wed) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,7,23\), adj = 'f'\) == dt\(2021, 2, 8\)  # Sunday rolls into Monday) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,7,23\), adj = 'p'\) == dt\(2021, 2, 8\)  # Already on Monday) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,5,23\), adj = 'f'\) == dt\(2021, 2, 8\)  # Friday afternoon rolls into Monday) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 505.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,9,14\), adj = 'f'\) == dt\(2021, 2, 10\)  # Tuesday is over, roll to Wed) Tj T* (>) Tj (>) Tj (>) Tj ( assert au.trade_date\(date = dt\(2021,2,9,14\), adj = 'p'\) == dt\(2021, 2, 9\)  # roll back to Tues) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 474.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (calendar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 462.6394 cm
Q
q
1 0 0 1 40.01575 450.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._drange.) Tj /F6 10 Tf (calendar) Tj /F1 10 Tf ( \() Tj (key) Tj (=) Tj (None) Tj (, holidays) Tj (=) Tj (None) Tj (, weekend) Tj (=) Tj (None) Tj (, t0) Tj (=) Tj (None) Tj (, t1) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 414.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.108795 Tw (A function to returns either an existing calendar or construct a new one. - calendar\(\221US\222\) will return a US calendar if) Tj T* 0 Tw 1.261606 Tw (that is already cached - calendar\(\221US\222, us_holiday_dates\) will construct a calendar with holiday dates and then) Tj T* 0 Tw (cache it) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 384.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (as_time) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 372.2394 cm
Q
q
1 0 0 1 40.01575 360.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._drange.) Tj /F6 10 Tf (as_time) Tj /F1 10 Tf ( \() Tj (t) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 348.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (parses t into a datetime.time object) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 342.2394 cm
Q
q
1 0 0 1 50.01575 327.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 200.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 126 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert as_time\('10:30:40'\) == datetime.time\(10, 30, 40\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\('103040'\) == datetime.time\(10, 30, 40\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\('10:30'\) == datetime.time\(10, 30\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\('1030'\) == datetime.time\(10, 30\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\('05'\) == datetime.time\(5\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\(103040\) == datetime.time\(10, 30, 40\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\(13040\) == datetime.time\(1, 30, 40\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\(130\) == datetime.time\(1, 30\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\(datetime.time\(1, 30\)\) == datetime.time\(1, 30\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_time\(datetime.datetime\(2000, 1, 1, 1, 30\)\) == datetime.time\(1, 30\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 186.4394 cm
Q
q
1 0 0 1 50.01575 171.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 155.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (t : ) Tj /F4 10 Tf (str/int/datetime.time/datetime.datetime) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 140.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (time of day) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 134.4394 cm
Q
q
1 0 0 1 50.01575 119.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 107.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (datetime.time) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 77.03937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (clock) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (31) Tj T* ET
Q
Q
 
endstream
endobj
1002 0 obj
<<
/Length 8129
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._drange.) Tj /F6 10 Tf (clock) Tj /F1 10 Tf ( \() Tj (ts) Tj (, time) Tj (=) Tj (None) Tj (, t) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns a vector marking the passage of time.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 742.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 730.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts : timeseries time : None, a string or a Calendar, or already a timeseries of times) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 724.0394 cm
Q
q
1 0 0 1 50.01575 676.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .346385 Tw (None: Will increment by 1 every non-nan observation \221i\222 : increment by 1 every date in index \(nan or not\) \221b\222 :) Tj T* 0 Tw 2.312623 Tw (weekdays distance \221d\222 : day-distance \(ignore intraday stamp\) \221f\222 : fraction-of-day-distance \(do not ignore) Tj T* 0 Tw -0.074708 Tw (intraday stamp\) \221m\222 : month-distance \221q\222 : quarter-distance \221y\222 : year-distance calendar: uses the business-days) Tj T* 0 Tw (distance between any two dates) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 676.0394 cm
Q
q
1 0 0 1 50.01575 664.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (t: starting time in the past.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 658.0394 cm
Q
q
1 0 0 1 50.01575 643.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 627.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (an array) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an increasing array of time such that distance between points match the above.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 606.0394 cm
Q
q
1 0 0 1 50.01575 591.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 512.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 904 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(pd.Series\(np.arange\(10\), drange\(2000, 9\)\)\), np.arange\(1,11\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(pd.Series\(np.arange\(10\), drange\(2000, 9\)\), t = 5\), np.arange\(6,16\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(pd.Series\(np.arange\(10\), drange\(2000, 9\)\), 'i'\), np.arange\(1,11\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(pd.Series\(np.arange\(10\), drange\(2000, 9\)\), 'b'\), np.array\([26090, 26090, 26090, 26091, 26092, 26093, 26094, 26095, 26095, 26095]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(pd.Series\(np.arange\(10\), drange\(2000, '9b', '1b'\)\), 'b'\), np.arange\(26090, 26100\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 461.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(np.arange\(10\)\), np.arange\(1,11\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(pd.Series\(np.arange\(10\)\), t = 5\), np.arange\(6,16\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(clock\(np.arange\(10\), 'i'\), np.arange\(1,11\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 428.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (text manipulation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 398.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (lower) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 386.2394 cm
Q
q
1 0 0 1 40.01575 374.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (lower) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 358.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (equivalent to txt.lower\(\) but:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 319.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (does not throw on non-string) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports lists/dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 313.2394 cm
Q
q
1 0 0 1 50.01575 298.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 267.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert lower\(['The Brown Fox',1]\) == ['the brown fox',1]) Tj T* (>) Tj (>) Tj (>) Tj ( assert lower\(dict\(a = 'The Brown Fox', b = 3.0\)\) ==  {'a': 'the brown fox', 'b': 3.0}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 237.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (upper) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 225.0394 cm
Q
q
1 0 0 1 40.01575 213.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (upper) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 197.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (equivalent to txt.upper\(\) but:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 158.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (does not throw on non-string) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports lists/dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 152.0394 cm
Q
q
1 0 0 1 50.01575 137.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 106.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert upper\(['The Brown Fox',1]\) == ['THE BROWN FOX',1]) Tj T* (>) Tj (>) Tj (>) Tj ( assert upper\(dict\(a = 'The Brown Fox', b = 3.0\)\) ==  {'a': 'THE BROWN FOX', 'b': 3.0}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 75.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (proper) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 63.83937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (32) Tj T* ET
Q
Q
 
endstream
endobj
1003 0 obj
<<
/Length 8849
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (proper) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 759.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (equivalent to Excel\222s PROPER\(txt\) but:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 720.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (does not throw on non-string) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports lists/dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 714.0394 cm
Q
q
1 0 0 1 50.01575 699.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 668.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 544 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert proper\(['THE BROWN FOX',1]\) == ['The Brown Fox',1]) Tj T* (>) Tj (>) Tj (>) Tj ( assert proper\(dict\(a = 'THE BROWN FOX', b = 3.0\)\) ==  {'a': 'The Brown Fox', 'b': 3.0}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 637.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (capitalize) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 625.8394 cm
Q
q
1 0 0 1 40.01575 613.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (capitalize) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 597.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (equivalent to text.capitalize\(\) but:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 558.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (does not throw on non-string) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports lists/dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 552.8394 cm
Q
q
1 0 0 1 50.01575 537.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 507.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 622 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert capitalize\('alan howard'\) == 'Alan howard' # use proper to get Alan Howard) Tj T* (>) Tj (>) Tj (>) Tj ( assert capitalize\(['alan howard', 'donald trump']\) == ['Alan howard', 'Donald trump'] # use proper?) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 476.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (strip) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 464.6394 cm
Q
q
1 0 0 1 40.01575 452.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (strip) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 436.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (equivalent to txt.strip\(\) but:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 397.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (does not throw on non-string) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports lists/dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 391.6394 cm
Q
q
1 0 0 1 50.01575 376.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 345.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 670 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert strip\([' whatever you say  ','  whatever you do..   ']\) == ['whatever you say', 'whatever you do..']) Tj T* (>) Tj (>) Tj (>) Tj ( assert strip\(dict\(a = ' whatever you say  ', b = 3.0\)\) ==  {'a': 'whatever you say', 'b': 3.0}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 315.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (split) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 303.4394 cm
Q
q
1 0 0 1 40.01575 291.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (split) Tj /F1 10 Tf ( \() Tj (text) Tj (, sep) Tj (=) Tj (' ') Tj (, dedup) Tj (=) Tj (False) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 275.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (equivalent to txt.split\(sep\) but supporsts:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 218.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 44 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (does not throw on non-string) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (removal of multiple seps) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ensuring there is a unique single separator) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 212.4394 cm
Q
q
1 0 0 1 50.01575 197.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 181.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (text : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 166.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (text to be stipped.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 150.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (sep : ) Tj /F4 10 Tf (str, list of str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 135.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (text used to strip. The default is \221 \221.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 119.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (dedup : ) Tj /F4 10 Tf (bool, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 104.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If True, will remove duplicated instances of seps. The default is False.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 98.43937 cm
Q
q
1 0 0 1 50.01575 83.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 67.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (str) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (33) Tj T* ET
Q
Q
 
endstream
endobj
1004 0 obj
<<
/Length 7385
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (splitted text) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 766.0394 cm
Q
q
1 0 0 1 50.01575 751.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 684.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 682 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( text = '   The quick... brown .. fox... '    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert split\(text\) == ['', '', '', 'The', 'quick...', 'brown', '..', 'fox...', '']) Tj T* (>) Tj (>) Tj (>) Tj ( assert split\(text, [' ', '.'], True\) == ['The', 'quick', 'brown', 'fox']) Tj T* (>) Tj (>) Tj (>) Tj ( text = dict\(a = 'Can split this', b = '..and split this too'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert split\(text, [' ', '.'], True\) == {'a': ['Can', 'split', 'this'], 'b': ['and', 'split', 'this', 'too']}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 653.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (replace) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 641.8394 cm
Q
q
1 0 0 1 40.01575 629.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (replace) Tj /F1 10 Tf ( \() Tj (text) Tj (, old) Tj (, new) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 617.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A souped up version of text.replace\(old, new\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 611.8394 cm
Q
q
1 0 0 1 50.01575 596.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (replace continues to replace until no-more is found) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 554.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 862 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert replace\('this    has lots  of   double    spaces', ' '*2, ' '\) == 'this has lots of double spaces') Tj T* (>) Tj (>) Tj (>) Tj ( assert replace\('this, sentence? has! too, many, punctuations!', list\(',?!.'\)\) == 'this sentence has too many punctuations') Tj T* (>) Tj (>) Tj (>) Tj ( assert replace\(dict\(a = 1, b = [' text within a list ', 'and within a dict']\), ' '\) == {'a': 1, 'b': ['textwithinalist', 'andwithinadict']}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 523.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (common_prefix) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.6394 cm
Q
q
1 0 0 1 40.01575 499.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._txt.) Tj /F6 10 Tf (common_prefix) Tj /F1 10 Tf ( \() Tj (*) Tj (values) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 493.6394 cm
Q
q
1 0 0 1 50.01575 478.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 462.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (values : ) Tj /F4 10 Tf (list of iterables) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 447.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (values for which we want to find common prefix) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 441.6394 cm
Q
q
1 0 0 1 50.01575 426.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 410.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (iterable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 395.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the common prefix.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 389.6394 cm
Q
q
1 0 0 1 50.01575 374.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 319.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert common_prefix\(['abra', 'abba', 'abacus']\) == 'ab') Tj T* (>) Tj (>) Tj (>) Tj ( assert common_prefix\('abra', 'abba', 'abacus'\) == 'ab') Tj T* (>) Tj (>) Tj (>) Tj ( assert common_prefix\(\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( assert common_prefix\([1,2,3,4], [1,2,3,5,8]\) == [1,2,3]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 287.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (files & directory) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 256.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (mkdir) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 244.6394 cm
Q
q
1 0 0 1 40.01575 232.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._file.) Tj /F6 10 Tf (mkdir) Tj /F1 10 Tf ( \() Tj (path) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 220.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (makes a new directory if not exists. It works if path is a filename too.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 190.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (read_csv) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 178.2394 cm
Q
q
1 0 0 1 40.01575 166.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._file.) Tj /F6 10 Tf (read_csv) Tj /F1 10 Tf ( \() Tj (path) Tj (, errors) Tj (=) Tj ('replace') Tj (, **) Tj (fmt) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 130.2394 cm
q
BT 1 0 0 1 0 26 Tm .446205 Tw 12 TL /F1 10 Tf 0 0 0 rg (A light-weight csv reader, no conversion is done, nor do we insist equal number of columns per row. - by default,) Tj T* 0 Tw .48494 Tw (encoding error \(unicode characters\) are replaced. - fmt parameters are parameters for the csv.reader object, see) Tj T* 0 Tw 0 0 .501961 rg (https://docs.python.org/3/library/csv.html) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 97.43937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (tree manipulation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 67.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .316265 Tw (Trees are dicts of dicts. just like an item in a dict is \(key, value\), tree items are just longer tuples: \(key1, key2, key3,) Tj T* 0 Tw (value\) We deliberately avoid creating a tree class so that the functionality is available on ordinary tree-like structures.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (34) Tj T* ET
Q
Q
 
endstream
endobj
1005 0 obj
<<
/Length 7325
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_keys) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 760.6394 cm
Q
q
1 0 0 1 40.01575 748.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.) Tj /F6 10 Tf (tree_keys) Tj /F1 10 Tf ( \() Tj (tree) Tj (, types) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 736.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns the keys \(branches\) of a tree as a list of of tuples) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 730.6394 cm
Q
q
1 0 0 1 50.01575 715.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 684.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tree = dict\(a = 1, b = dict\(c = 2, d = 3, e = dict\(f = 4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree_keys\(tree\) == [\('a',\), \('b', 'c'\), \('b', 'd'\), \('b', 'e', 'f'\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 670.8394 cm
Q
q
1 0 0 1 50.01575 655.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 643.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tree : tree \(dict of dicts\) types : types of dicts, optional) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 613.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_values) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 601.4394 cm
Q
q
1 0 0 1 40.01575 589.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.) Tj /F6 10 Tf (tree_values) Tj /F1 10 Tf ( \() Tj (tree) Tj (, types) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 577.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns the values \(leaf\) of a tree \(a collection of tuples\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 571.4394 cm
Q
q
1 0 0 1 50.01575 556.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 525.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tree = dict\(a = 1, b = dict\(c = 2, d = 3, e = dict\(f = 4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree_values\(tree\) == [1,2,3,4]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 511.6394 cm
Q
q
1 0 0 1 50.01575 496.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 484.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tree : tree \(dict of dicts\) types : types of dicts, optional) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 454.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_items) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 442.2394 cm
Q
q
1 0 0 1 40.01575 430.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.) Tj /F6 10 Tf (tree_items) Tj /F1 10 Tf ( \() Tj (tree) Tj (, types) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 418.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (An extension of dict.items\(\), returning a list of tuples but of varying length, each a branch of a tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 412.2394 cm
Q
q
1 0 0 1 50.01575 397.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 381.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (tree : ) Tj /F4 10 Tf (dict of dicts) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 366.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a tree of data.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 350.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (types : ) Tj /F4 10 Tf (dict or a list of dict-types, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 335.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The types that we consider as \221branches\222 of the tree. Default is \(dict, Dict, dictattr\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 329.2394 cm
Q
q
1 0 0 1 50.01575 314.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 298.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (a list of tuples) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 283.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (these are an extension of dict.items\(\) and are of varying length) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 277.2394 cm
Q
q
1 0 0 1 50.01575 262.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 159.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( school = dict\(pupils = dict\(id1 = dict\(name = 'james', surname = 'maxwell', gender = 'm'\),) Tj T* (                      id2 = dict\(name = 'adam', surname = 'smith', gender = 'm'\),) Tj T* (                      id3 = dict\(name = 'michell', surname = 'obama', gender = 'f'\),) Tj T* (                      \),) Tj T* (        teachers = dict\(math = dict\(name = 'albert', surname = 'einstein', grade = 3\),) Tj T* (                        english = dict\(name = 'william', surname = 'shakespeare', grade = 3\),) Tj T* (                        physics = dict\(name = 'richard', surname = 'feyman', grade = 4\)) Tj T* (                        \)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 120.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( items = tree_items\(school\)) Tj T* (>) Tj (>) Tj (>) Tj ( items ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 57.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( [\('pupils', 'id1', 'name', 'james'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id1', 'surname', 'maxwell'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id1', 'gender', 'm'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id2', 'name', 'adam'\),) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (35) Tj T* ET
Q
Q
 
endstream
endobj
1006 0 obj
<<
/Length 6891
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 612.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 174 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj (  \('pupils', 'id2', 'surname', 'smith'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id2', 'gender', 'm'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id3', 'name', 'michell'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id3', 'surname', 'obama'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('pupils', 'id3', 'gender', 'f'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'math', 'name', 'albert'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'math', 'surname', 'einstein'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'math', 'grade', 3\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'english', 'name', 'william'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'english', 'surname', 'shakespeare'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'english', 'grade', 3\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'physics', 'name', 'richard'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'physics', 'surname', 'feyman'\),) Tj T* (>) Tj (>) Tj (>) Tj (  \('teachers', 'physics', 'grade', 4\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 592.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (#To reverse this, we call:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 573.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert items_to_tree\(items\) == school) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 543.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_update) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 531.0394 cm
Q
q
1 0 0 1 40.01575 507.0394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.) Tj /F6 10 Tf (tree_update) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (tree) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (update) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (types=\() Tj (<) Tj (class 'dict') Tj (>) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (<) Tj (class) Tj T* ('pyg.base._dict.Dict') Tj (>) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (<) Tj (class 'pyg.base._dictattr.dictattr') Tj (>) Tj (\)) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (ignore=None) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 495.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to dict.update\(\) except: not in-place and also updates further down the tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 489.0394 cm
Q
q
1 0 0 1 50.01575 474.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 431.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ranking = dict\(cambridge = dict\(trinity = 1, stjohns = 2, christ = 3\), ) Tj T* (            oxford = dict\(trinity = 1, jesus = 2, magdalene = 3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ranking = dict\(oxford = dict\(wolfson = 3, magdalene = 4\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 404.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( print\(tree_repr\(tree_update\(ranking, new_ranking\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 341.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cambridge:) Tj T* (>) Tj (>) Tj (>) Tj (     {'trinity': 1, 'stjohns': 2, 'christ': 3}) Tj T* (>) Tj (>) Tj (>) Tj ( oxford:) Tj T* (>) Tj (>) Tj (>) Tj (     {'trinity': 1, 'jesus': 2, 'magdalene': 4, 'wolfson': 3}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 321.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Note how values for magdalene in Oxford were overwritten even though they are further down the tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 315.6394 cm
Q
q
1 0 0 1 50.01575 300.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (using ignore) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 221.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 544 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( update = dict\(a = None, b = np.nan, c = 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( tree = dict\(a = 1, b = 2, c = 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree_update\(tree, update\) == update) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree_update\(tree, update, ignore = [None]\) == dict\(a = 1, b = np.nan, c = 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree_update\(tree, update, ignore = [None, np.nan]\) == dict\(a = 1, b = 2, c = 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree_update\(tree, update, ignore = [None, np.nan, 0]\) == tree) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 207.8394 cm
Q
q
1 0 0 1 50.01575 192.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 176.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (tree : ) Tj /F4 10 Tf (tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 161.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (existing tree.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 145.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (update : ) Tj /F4 10 Tf (tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 130.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (new information.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 114.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (types : ) Tj /F4 10 Tf (types, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 99.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (see tree_items. The default is \(dict, Dict, dictattr\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 93.83937 cm
Q
q
1 0 0 1 50.01575 78.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 62.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (tree) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (36) Tj T* ET
Q
Q
 
endstream
endobj
1007 0 obj
<<
/Length 6995
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (updated tree.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 741.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_setitem) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 729.6394 cm
Q
q
1 0 0 1 40.01575 717.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.) Tj /F6 10 Tf (tree_setitem) Tj /F1 10 Tf ( \() Tj (tree) Tj (, key) Tj (, value) Tj (, ignore) Tj (=) Tj (None) Tj (, types) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 705.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (sets an item of a tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 699.6394 cm
Q
q
1 0 0 1 50.01575 684.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 672.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tree : tree \(dicts of dict\) key : a dot-separated string or a tuple of values) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 666.6394 cm
Q
q
1 0 0 1 50.01575 654.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the branch to hang value on) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 654.6394 cm
Q
q
1 0 0 1 50.01575 638.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (object) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 623.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the leaf at the end of the branch) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 607.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (ignore : ) Tj /F4 10 Tf (None or list, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 592.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (what values of leaf will be ignored and not overwrite existing data. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 576.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (types : ) Tj /F4 10 Tf (types, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 561.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (As we go down the tree, when do we stop and say: what we have is a leaf already?) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 555.6394 cm
Q
q
1 0 0 1 50.01575 540.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 437.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tree = dict\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( tree_setitem\(tree, 'a', 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree == dict\(a = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( tree_setitem\(tree, 'b.c', 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree == {'a': 1, 'b': {'c': 2}}) Tj T* (>) Tj (>) Tj (>) Tj ( tree_setitem\(tree, \('b','c','d'\), 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( tree_setitem\(tree, \('b','c','e'\), 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree == {'a': 1, 'b': {'c': {'d': 2, 'e': 3}}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 423.8394 cm
Q
q
1 0 0 1 50.01575 408.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (types) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 318.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 652 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( tree = dict\(mycell = cell\(lambda a, b: a * b, b = 2, a = cell\(lambda x: x**2, x = cell\(lambda y: y*3\)\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( # We are missing y....) Tj T* (>) Tj (>) Tj (>) Tj ( tree_setitem\(tree, 'mycell.a.x.y', 3, types = \(dict,cell\)\) ## drill into cell) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree['mycell'].a.x.y == 3) Tj T* (>) Tj (>) Tj (>) Tj ( tree_setitem\(tree, 'mycell.a.x.y', 1\) ## stop when you hit cell) Tj T* (>) Tj (>) Tj (>) Tj ( assert tree['mycell'].a.x == dict\(y = 1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 298.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_repr) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 255.6394 cm
Q
q
1 0 0 1 40.01575 243.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._tree_repr.) Tj /F6 10 Tf (tree_repr) Tj /F1 10 Tf ( \() Tj (value) Tj (, offset) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 231.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a cleaner representation of a tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 225.6394 cm
Q
q
1 0 0 1 50.01575 210.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 107.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( school = dict\(pupils = dict\(id1 = dict\(name = 'james', surname = 'maxwell', gender = 'm'\),) Tj T* (>) Tj (>) Tj (>) Tj (                   id2 = dict\(name = 'adam', surname = 'smith', gender = 'm'\),) Tj T* (>) Tj (>) Tj (>) Tj (                   id3 = dict\(name = 'michell', surname = 'obama', gender = 'f'\),) Tj T* (>) Tj (>) Tj (>) Tj (                   \),) Tj T* (>) Tj (>) Tj (>) Tj (     teachers = dict\(math = dict\(name = 'albert', surname = 'einstein', grade = 3\),) Tj T* (>) Tj (>) Tj (>) Tj (                     english = dict\(name = 'william', surname = 'shakespeare', grade = 3\),) Tj T* (>) Tj (>) Tj (>) Tj (                     physics = dict\(name = 'richard', surname = 'feyman', grade = 4\)) Tj T* (>) Tj (>) Tj (>) Tj (                     \)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 57.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( print\(tree_repr\(school, 4\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( pupils:) Tj T* (>) Tj (>) Tj (>) Tj (     id1:) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (37) Tj T* ET
Q
Q
 
endstream
endobj
1008 0 obj
<<
/Length 5942
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 636.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 150 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj (         {'name': 'james', 'surname': 'maxwell', 'gender': 'm'}) Tj T* (>) Tj (>) Tj (>) Tj (     id2:) Tj T* (>) Tj (>) Tj (>) Tj (         {'name': 'adam', 'surname': 'smith', 'gender': 'm'}) Tj T* (>) Tj (>) Tj (>) Tj (     id3:) Tj T* (>) Tj (>) Tj (>) Tj (         {'name': 'michell', 'surname': 'obama', 'gender': 'f'}) Tj T* (>) Tj (>) Tj (>) Tj ( teachers:) Tj T* (>) Tj (>) Tj (>) Tj (     math:) Tj T* (>) Tj (>) Tj (>) Tj (         {'name': 'albert', 'surname': 'einstein', 'grade': 3}) Tj T* (>) Tj (>) Tj (>) Tj (     english:) Tj T* (>) Tj (>) Tj (>) Tj (         {'name': 'william', 'surname': 'shakespeare', 'grade': 3}) Tj T* (>) Tj (>) Tj (>) Tj (     physics:) Tj T* (>) Tj (>) Tj (>) Tj (         {'name': 'richard', 'surname': 'feyman', 'grade': 4}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 622.2394 cm
Q
q
1 0 0 1 50.01575 607.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 595.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (value : a tree) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 579.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (offset : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 564.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (offset from the left for printing. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 558.2394 cm
Q
q
1 0 0 1 50.01575 543.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 527.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (string) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 512.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a tree-like string representation of a dict-of-dicts.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 481.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (items_to_tree) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 469.8394 cm
Q
q
1 0 0 1 40.01575 457.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._dict.) Tj /F6 10 Tf (items_to_tree) Tj /F1 10 Tf ( \() Tj (items) Tj (, tree) Tj (=) Tj (None) Tj (, raise_if_duplicate) Tj (=) Tj (True) Tj (, ignore) Tj (=) Tj (None) Tj (, types) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.8394 cm
q
BT 1 0 0 1 0 14 Tm .554952 Tw 12 TL /F1 10 Tf 0 0 0 rg (converts ) Tj /F2 10 Tf (items) Tj /F1 10 Tf ( to branches of a tree. If an original ) Tj /F2 10 Tf (tree) Tj /F1 10 Tf ( is provided, hang the additional branches on the existing) Tj T* 0 Tw (tree If ) Tj /F2 10 Tf (ignore) Tj /F1 10 Tf ( is provided as a list of values, will not overwrite branches with last value \(the leaf\) in these values) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 427.8394 cm
Q
q
1 0 0 1 50.01575 412.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 334.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( items = [\('cambridge', 'smith', 'economics',\),) Tj T* (         \('cambridge', 'keynes', 'economics'\), ) Tj T* (         \('cambridge', 'lyons',  'maths'\),) Tj T* (         \('cambridge', 'maxwell', 'maths'\),) Tj T* (         \('oxford', 'penrose', 'maths'\),) Tj T* (         ]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 295.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tree = items_to_tree\(items\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\(tree_repr\(tree\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 148.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 138 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cambridge:) Tj T* (>) Tj (>) Tj (>) Tj (     smith:) Tj T* (>) Tj (>) Tj (>) Tj (         economics) Tj T* (>) Tj (>) Tj (>) Tj (     keynes:) Tj T* (>) Tj (>) Tj (>) Tj (         economics) Tj T* (>) Tj (>) Tj (>) Tj (     lyons:) Tj T* (>) Tj (>) Tj (>) Tj (         maths) Tj T* (>) Tj (>) Tj (>) Tj (     maxwell:) Tj T* (>) Tj (>) Tj (>) Tj (         maths) Tj T* (>) Tj (>) Tj (>) Tj ( oxford:) Tj T* (>) Tj (>) Tj (>) Tj (     {'penrose': 'maths'}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 128.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can add to tree:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 122.4394 cm
Q
q
1 0 0 1 50.01575 107.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 91.43937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (items : ) Tj /F4 10 Tf (list of tuples,) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (items are just like dict items, only longer,) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.43937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (tree : ) Tj /F4 10 Tf (tree, optional) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (38) Tj T* ET
Q
Q
 
endstream
endobj
1009 0 obj
<<
/Length 7478
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a pre-existing tree of trees. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 756.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (raise_if_duplicate : ) Tj /F4 10 Tf (TYPE, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 741.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (DESCRIPTION. The default is True.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 725.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (ignore : ) Tj /F4 10 Tf (list, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 710.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of values that when over-writing an existing tree, should ignore. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 704.0394 cm
Q
q
1 0 0 1 50.01575 689.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (using ignore) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 634.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tree = dict\(a = 1, b = 'keep_old_value'\)) Tj T* (>) Tj (>) Tj (>) Tj ( update = dict\(a = 'valid_new_value', b = None, c = None\)) Tj T* (>) Tj (>) Tj (>) Tj ( tree_update\(tree, update, ignore = [None]\)) Tj T* (>) Tj (>) Tj (>) Tj ( {'a': valid_new_value, 'b': 'keep_old_value', 'c': None}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 620.2394 cm
Q
q
1 0 0 1 50.01575 620.2394 cm
Q
q
1 0 0 1 50.01575 608.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a is over-ridden as the new value is valid) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 602.2394 cm
Q
q
1 0 0 1 50.01575 590.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (b is not over-ridden since the update b = None is considereed invalid) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 584.2394 cm
Q
q
1 0 0 1 50.01575 572.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (c is added as it did not exist before, even though c = None is invalid value) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 572.2394 cm
Q
q
1 0 0 1 50.01575 566.2394 cm
Q
q
1 0 0 1 50.01575 551.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 539.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tree : dict of dicts) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 508.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (tree_to_table) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 496.8394 cm
Q
q
1 0 0 1 40.01575 484.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._tree.) Tj /F6 10 Tf (tree_to_table) Tj /F1 10 Tf ( \() Tj (tree) Tj (, pattern) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 472.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The best way to understand is to give an example:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 466.8394 cm
Q
q
1 0 0 1 50.01575 451.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 349.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 586 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( school = dict\(pupils = dict\(id1 = dict\(name = 'james', surname = 'maxwell', gender = 'm'\),) Tj T* (                          id2 = dict\(name = 'adam', surname = 'smith', gender = 'm'\),) Tj T* (                          id3 = dict\(name = 'michell', surname = 'obama', gender = 'f'\),) Tj T* (                          \),) Tj T* (            teachers = dict\(math = dict\(name = 'albert', surname = 'einstein', grade = 3\),) Tj T* (                            english = dict\(name = 'william', surname = 'shakespeare', grade = 3\),) Tj T* (                            physics = dict\(name = 'richard', surname = 'feyman', grade = 4\)) Tj T* (                            \)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 329.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Suppose we wanted to identify all male students:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 298.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( res = tree_to_table\(school, 'pupils/%id/gender/m'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert res == [dict\(id = 'id1'\), dict\(id = 'id2'\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 278.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (or grades:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 223.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( res = tree_to_table\(school, 'teachers/%subject/grade/%grade'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert res == [{'grade': 3, 'subject': 'math'},) Tj T* (                     {'grade': 3, 'subject': 'english'},) Tj T* (                     {'grade': 4, 'subject': 'physics'}]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 209.4394 cm
Q
q
1 0 0 1 50.01575 194.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 178.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (tree : ) Tj /F4 10 Tf (tree \(dict of dicts\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 163.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tree is a yaml-like structure) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 147.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (pattern : ) Tj /F4 10 Tf (string) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 132.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The pattern whose instances we wish to find in tree) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 126.4394 cm
Q
q
1 0 0 1 50.01575 111.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 99.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of dicts) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (39) Tj T* ET
Q
Q
 
endstream
endobj
1010 0 obj
<<
/Length 6916
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (list functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 739.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (as_list) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.8394 cm
Q
q
1 0 0 1 40.01575 715.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._as_list.) Tj /F6 10 Tf (as_list) Tj /F1 10 Tf ( \() Tj (value) Tj (, none) Tj (=) Tj (False) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 703.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns a list of the original object.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 697.8394 cm
Q
q
1 0 0 1 50.01575 682.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 604.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert as_list\(None\) == []) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_list\(4\) == [4]) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_list\(\(1,2,\)\) == [1,2]) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_list\([1,2,]\) == [1,2]) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(as_list\(np.array\([1,2,]\)\) , [np.array\([1,2,]\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_list\(dict\(a = 1\)\) == [dict\(a=1\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 584.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In practice, this function is has an incredible useful usage:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 578.0394 cm
Q
q
1 0 0 1 50.01575 563.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (using as_list to give flexibility on ) Tj 1 0 0 rg (*) Tj 0 0 0 rg (args) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 520.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( def my_sum\(*values\):) Tj T* (>) Tj (>) Tj (>) Tj (     values = as_list\(values\)) Tj T* (>) Tj (>) Tj (>) Tj (     return sum\(values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 481.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert my_sum\(1,2,3\) == 6    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert my_sum\([1,2,3]\) == 6 ## This is nice... wasn't possible before) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 467.4394 cm
Q
q
1 0 0 1 50.01575 452.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 440.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (value : anything none : bool optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 434.4394 cm
Q
q
1 0 0 1 50.01575 422.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Shall I return None as a value? The default is False and we return [], if True, returns [None]) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 422.4394 cm
Q
q
1 0 0 1 50.01575 416.4394 cm
Q
q
1 0 0 1 50.01575 401.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 385.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (list) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 370.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a list of original objects.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 340.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (as_tuple) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 328.0394 cm
Q
q
1 0 0 1 40.01575 316.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._as_list.) Tj /F6 10 Tf (as_tuple) Tj /F1 10 Tf ( \() Tj (value) Tj (, none) Tj (=) Tj (False) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 304.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns a tuple of the original object.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 298.0394 cm
Q
q
1 0 0 1 50.01575 283.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 204.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert as_tuple\(None\) == \(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_tuple\(4\) == \(4,\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_tuple\(\(1,2,\)\) == \(1,2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_tuple\([1,2,]\) == \(1,2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(as_tuple\(np.array\([1,2,]\)\) , \(np.array\([1,2,]\),\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert as_tuple\(dict\(a = 1\)\) == \(dict\(a=1\),\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 184.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In practice, this function is has an incredible useful usage:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 178.2394 cm
Q
q
1 0 0 1 50.01575 163.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (using as_list to give flexibility on ) Tj 1 0 0 rg (*) Tj 0 0 0 rg (args) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 120.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( def my_sum\(*values\):) Tj T* (>) Tj (>) Tj (>) Tj (     values = as_tuple\(values\)) Tj T* (>) Tj (>) Tj (>) Tj (     return sum\(values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 81.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert my_sum\(1,2,3\) == 6    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert my_sum\([1,2,3]\) == 6 ## This is nice... wasn't possible before) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 67.63937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (40) Tj T* ET
Q
Q
 
endstream
endobj
1011 0 obj
<<
/Length 6673
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (value : anything none : bool optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 754.0394 cm
Q
q
1 0 0 1 50.01575 742.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Shall I return None as a value? The default is False and we return [], if True, returns [None]) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 742.0394 cm
Q
q
1 0 0 1 50.01575 736.0394 cm
Q
q
1 0 0 1 50.01575 721.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 705.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (tuple) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 690.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a tuple of original objects.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 659.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (first) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 647.6394 cm
Q
q
1 0 0 1 40.01575 635.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._as_list.) Tj /F6 10 Tf (first) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 623.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns the first value in a list \(None if empty list\) or the original if value not a list) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 617.6394 cm
Q
q
1 0 0 1 50.01575 602.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 547.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert first\(5\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert first\([5,5]\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert first\([]\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( assert first\([1,2]\) == 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 517.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (last) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 505.4394 cm
Q
q
1 0 0 1 40.01575 493.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._as_list.) Tj /F6 10 Tf (last) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 481.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns the last value in a list \(None if empty list\) or the original if value not a list) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.4394 cm
Q
q
1 0 0 1 50.01575 460.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 405.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert last\(5\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert last\([5,5]\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert last\([]\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( assert last\([1,2]\) == 2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 375.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (unique) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 363.2394 cm
Q
q
1 0 0 1 40.01575 351.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._as_list.) Tj /F6 10 Tf (unique) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 327.2394 cm
q
BT 1 0 0 1 0 14 Tm .052004 Tw 12 TL /F1 10 Tf 0 0 0 rg (returns the asserted unique value in a list \(None if empty list\) or the original if value not a list. Throws an exception) Tj T* 0 Tw (if list non-unique) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 321.2394 cm
Q
q
1 0 0 1 50.01575 306.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 239.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert unique\(5\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert unique\([5,5]\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert unique\([]\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( with pytest.raises\(ValueError\):) Tj T* (>) Tj (>) Tj (>) Tj (     unique\([1,2]\)  ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 206.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Comparing and Sorting) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 176.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cmp) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 164.2394 cm
Q
q
1 0 0 1 40.01575 152.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._sort.) Tj /F6 10 Tf (cmp) Tj /F1 10 Tf ( \() Tj (x) Tj (, y) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 128.2394 cm
q
BT 1 0 0 1 0 14 Tm .744273 Tw 12 TL /F1 10 Tf 0 0 0 rg (Implements lexcompare while allowing for comparison of different types. First compares by type, then by length,) Tj T* 0 Tw (then by keys and finally on values) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 122.2394 cm
Q
q
1 0 0 1 50.01575 107.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 91.23937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (x : ) Tj /F4 10 Tf (obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1st object to be compared.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.23937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (y : ) Tj /F4 10 Tf (obj) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (41) Tj T* ET
Q
Q
 
endstream
endobj
1012 0 obj
<<
/Length 6887
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2nd object to be compared.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 766.0394 cm
Q
q
1 0 0 1 50.01575 751.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 735.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 720.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns -1 if x) Tj (<) Tj (y else 1 if x) Tj (>) Tj (y else 0) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 714.0394 cm
Q
q
1 0 0 1 50.01575 699.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 608.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 520 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert cmp\('2', 2\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert cmp\(np.int64\(2\), 2\) == 0) Tj T* (>) Tj (>) Tj (>) Tj ( assert cmp\(None, 2.0\) == -1 # None is smallest) Tj T* (>) Tj (>) Tj (>) Tj ( assert cmp\([1,2,3], [4,5]\) == 1 # [1,2,3] is longer) Tj T* (>) Tj (>) Tj (>) Tj ( assert cmp\([1,2,3], [1,2,0]\) == 1 # lexical sorting ) Tj T* (>) Tj (>) Tj (>) Tj ( assert cmp\(dict\(a = 1, b = 2\), dict\(a = 1, c = 2\)\) == -1 # lexical sorting on keys) Tj T* (>) Tj (>) Tj (>) Tj ( assert cmp\(dict\(a = 1, b = 2\), dict\(b = 2, a = 1\)\) == 0 # order does not matter) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 577.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Cmp) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 565.8394 cm
Q
q
1 0 0 1 40.01575 553.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._sort.) Tj /F6 10 Tf (Cmp) Tj /F1 10 Tf ( \() Tj (x) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 541.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (class wrapper of cmp, allowing us to compare objects of different types) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 535.8394 cm
Q
q
1 0 0 1 50.01575 520.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 490.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(TypeError\):) Tj T* (>) Tj (>) Tj (>) Tj (     sorted\([1,2,3,None]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 451.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # but this is fine:) Tj T* (>) Tj (>) Tj (>) Tj ( assert sorted\([1,3,2,None], key = Cmp\) == [None, 1, 2, 3]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 420.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (sort) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 408.8394 cm
Q
q
1 0 0 1 40.01575 396.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._sort.) Tj /F6 10 Tf (sort) Tj /F1 10 Tf ( \() Tj (iterable) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 384.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (implements sorting allowing for comparing of not-same-type objects) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 378.8394 cm
Q
q
1 0 0 1 50.01575 363.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 347.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (iterable : ) Tj /F4 10 Tf (iterable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 332.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (values to be sorted) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 326.8394 cm
Q
q
1 0 0 1 50.01575 311.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 295.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (list) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 280.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sorted list.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 274.8394 cm
Q
q
1 0 0 1 50.01575 259.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 205.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( with pytest.raises\(TypeError\):) Tj T* (>) Tj (>) Tj (>) Tj (     sorted\([1,2,3,None]\)) Tj T* (>) Tj (>) Tj (>) Tj ( # but this is fine:) Tj T* (>) Tj (>) Tj (>) Tj ( sort\([1,3,2,None]\) == [None, 1, 2, 3]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 174.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (eq) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 162.6394 cm
Q
q
1 0 0 1 40.01575 150.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._eq.) Tj /F6 10 Tf (eq) Tj /F1 10 Tf ( \() Tj (x) Tj (, y) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 138.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A better nan-handling equality comparison. Here is the problem:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 107.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( assert not np.nan == np.nan  ## What?) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 87.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The nan issue extends to np.arrays\205) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 69.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert list\(np.array\([np.nan,2]\) == np.array\([np.nan,2]\)\) == [False, True]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (42) Tj T* ET
Q
Q
 
endstream
endobj
1013 0 obj
<<
/Length 6439
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (but not to lists\205) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert [np.nan] == [np.nan]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 736.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (But wait, if the lists are derived from np.arrays, then no equality\205) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 717.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert not list\(np.array\([np.nan]\)\) == list\(np.array\([np.nan]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 697.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The other issue is inheritance:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 630.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 520 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( class FunnyDict\(dict\):) Tj T* (>) Tj (>) Tj (>) Tj (    def __getitem__\(self, key\):) Tj T* (>) Tj (>) Tj (>) Tj (        return 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert dict\(a = 1\) == FunnyDict\(a=1\) ## equality seems to ignore any type mismatch) Tj T* (>) Tj (>) Tj (>) Tj ( assert not dict\(a = 1\)['a'] == FunnyDict\(a = 1\)['a'] ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 610.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are also issues with partial) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 543.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from functools import partial) Tj T* (>) Tj (>) Tj (>) Tj ( f = lambda a: a + 1    ) Tj T* (>) Tj (>) Tj (>) Tj ( x = partial\(f, a = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = partial\(f, a = 1\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert not x == y) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 493.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd) Tj T* (>) Tj (>) Tj (>) Tj ( import pytest) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import eq) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 394.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 910 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(np.nan, np.nan\) ## That's better) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(x = np.array\([np.nan,2]\), y = np.array\([np.nan,2]\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(np.array\([np.array\([1,2]\),2], dtype = 'object'\), np.array\([np.array\([1,2]\),2], dtype = 'object'\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(np.array\([np.nan,2]\),np.array\([np.nan,2]\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(dict\(a = np.array\([np.array\([1,2]\),2], dtype = 'object'\)\) ,  dict\(a = np.array\([np.array\([1,2]\),2], dtype = 'object'\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(dict\(a = np.array\([np.array\([1,np.nan]\),np.nan]\)\) ,  dict\(a = np.array\([np.array\([1,np.nan]\),np.nan]\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(np.array\([np.array\([1,2]\),dict\(a = np.array\([np.array\([1,2]\),2]\)\)]\), np.array\([np.array\([1,2]\),dict\(a = np.array\([np.array\([1,2]\),2]\)\)]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 307.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 622 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert not eq\(dict\(a = 1\), FunnyDict\(a=1\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(1, 1.0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(x = pd.DataFrame\([1,2]\), y = pd.DataFrame\([1,2]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(pd.DataFrame\([np.nan,2]\), pd.DataFrame\([np.nan,2]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(pd.DataFrame\([1,np.nan], columns = ['a']\), pd.DataFrame\([1,np.nan], columns = ['a']\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert not eq\(pd.DataFrame\([1,np.nan], columns = ['a']\), pd.DataFrame\([1,np.nan], columns = ['b']\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 277.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 .501961 rg (in) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 265.0394 cm
Q
q
1 0 0 1 40.01575 253.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._eq.) Tj /F6 10 Tf (in_) Tj /F1 10 Tf ( \() Tj (x) Tj (, seq) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 241.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Evaluates if x is in seq, avoiding issues such as these:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 174.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( s = pd.Series\([1,2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( with pytest.raises\(ValueError\):) Tj T* (>) Tj (>) Tj (>) Tj (     s in [None]    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert not in_\(s, [None]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert in_\(s, [None, s]\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 141.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (bits and pieces) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 111.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (type functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 99.03937 cm
Q
q
1 0 0 1 40.01575 87.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_arr) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 75.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a numpy array of non-zero-size) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 69.03937 cm
Q
q
1 0 0 1 40.01575 57.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_bool) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (43) Tj T* ET
Q
Q
 
endstream
endobj
1014 0 obj
<<
/Length 8024
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a Bool, or a ) Tj 1 0 0 rg (np.bool_) Tj 0 0 0 rg ( type) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_date) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 745.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a date type: either datetime.date, datetime.datetime or np.datetime64) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 727.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_df) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 715.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a pd.DataFrame) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 709.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_dict) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 685.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a dict) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 679.0394 cm
Q
q
1 0 0 1 40.01575 667.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_float) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 655.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value an float, or any variant of np.float) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 649.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_int) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 625.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value an int, or any variant of np.intN type) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 619.0394 cm
Q
q
1 0 0 1 40.01575 607.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_iterable) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 595.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value Iterable excluding a string) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 589.0394 cm
Q
q
1 0 0 1 40.01575 577.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_len) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 565.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value of zero length \(or has no len at all\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 559.0394 cm
Q
q
1 0 0 1 40.01575 547.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_list) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 535.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a list) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.0394 cm
Q
q
1 0 0 1 40.01575 517.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_nan) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 505.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a nan or an inf. Unlike np.isnan, works for non numeric) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 499.0394 cm
Q
q
1 0 0 1 40.01575 487.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_none) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 475.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value None) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 469.0394 cm
Q
q
1 0 0 1 40.01575 457.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_num) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 445.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is _int\(value\) or is_float\(value\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 439.0394 cm
Q
q
1 0 0 1 40.01575 427.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_pd) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 415.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a pd.DataFrame/pd.Series) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 397.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_series) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 385.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a pd.Series) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 379.0394 cm
Q
q
1 0 0 1 40.01575 367.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_str) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 355.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a str, or a ) Tj 1 0 0 rg (np.str_) Tj 0 0 0 rg ( type) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 349.0394 cm
Q
q
1 0 0 1 40.01575 337.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_ts) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 325.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a pandas datafrome whch is indexed by datetimes) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 319.0394 cm
Q
q
1 0 0 1 40.01575 307.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (is_tuple) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 295.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (is value a tuple) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 289.0394 cm
Q
q
1 0 0 1 40.01575 277.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._types.) Tj /F6 10 Tf (nan2none) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 265.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (convert np.nan/np.inf to None) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 234.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (zipper) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 222.6394 cm
Q
q
1 0 0 1 40.01575 210.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._zip.) Tj /F6 10 Tf (zipper) Tj /F1 10 Tf ( \() Tj (*) Tj (values) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 198.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a safer version of zip) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 192.6394 cm
Q
q
1 0 0 1 50.01575 177.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (zipper works with single values as well as full list:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 110.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert list\(zipper\([1,2,3], 4\)\) == [\(1, 4\), \(2, 4\), \(3, 4\)]) Tj T* (>) Tj (>) Tj (>) Tj ( assert list\(zipper\([1,2,3], [4,5,6]\)\) == [\(1, 4\), \(2, 5\), \(3, 6\)]) Tj T* (>) Tj (>) Tj (>) Tj ( assert list\(zipper\([1,2,3], [4,5,6], [7]\)\) ==  [\(1, 4, 7\), \(2, 5, 7\), \(3, 6, 7\)]) Tj T* (>) Tj (>) Tj (>) Tj ( assert list\(zipper\([1,2,3], [4,5,6], None\)\) ==  [\(1, 4, None\), \(2, 5, None\), \(3, 6, None\)]) Tj T* (>) Tj (>) Tj (>) Tj ( assert list\(zipper\(\(1,2,3\), np.array\([4,5,6]\), None\)\) ==  [\(1, 4, None\), \(2, 5, None\), \(3, 6, None\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 96.83937 cm
Q
q
1 0 0 1 50.01575 81.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (zipper rejects multi-length lists) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (44) Tj T* ET
Q
Q
 
endstream
endobj
1015 0 obj
<<
/Length 6893
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pytest) Tj T* (>) Tj (>) Tj (>) Tj ( with pytest.raises\(ValueError\):) Tj T* (>) Tj (>) Tj (>) Tj (     zipper\([1,2,3], [4,5]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 730.2394 cm
Q
q
1 0 0 1 50.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 699.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (values : ) Tj /F4 10 Tf (lists) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 684.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (values to be zipped) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 678.2394 cm
Q
q
1 0 0 1 50.01575 663.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 651.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (zipped values) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 620.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (reducer) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 608.8394 cm
Q
q
1 0 0 1 40.01575 596.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._reducer.) Tj /F6 10 Tf (reducer) Tj /F1 10 Tf ( \() Tj (function) Tj (, sequence) Tj (, default) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 584.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (reduce adds stuff to zero by defaults. This is not needed.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 578.8394 cm
Q
q
1 0 0 1 50.01575 563.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 547.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 532.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (binary function.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 516.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (sequence : ) Tj /F4 10 Tf (iterable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 501.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of inputs to be applied iteratively to reduce.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 485.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (default : ) Tj /F4 10 Tf (TYPE, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 470.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A default value to be returned with an empty sequence) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 464.8394 cm
Q
q
1 0 0 1 50.01575 449.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 407.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from operator import add, mul) Tj T* (>) Tj (>) Tj (>) Tj ( from functools import reduce) Tj T* (>) Tj (>) Tj (>) Tj ( import pytest) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 356.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert reducer\(add, [1,2,3,4]\) == 10) Tj T* (>) Tj (>) Tj (>) Tj ( assert reducer\(mul, [1,2,3,4]\) == 24) Tj T* (>) Tj (>) Tj (>) Tj ( assert reducer\(add, [1]\) == 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 305.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert reducer\(add, []\) is None) Tj T* (>) Tj (>) Tj (>) Tj ( with pytest.raises\(TypeError\):) Tj T* (>) Tj (>) Tj (>) Tj (     reduce\(add, []\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 275.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (reducing) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.0394 cm
Q
q
1 0 0 1 40.01575 245.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.base._reducer.) Tj /F6 10 Tf (reducing) Tj /F1 10 Tf ( \() Tj (function) Tj (=) Tj (None) Tj (, *) Tj (args) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 233.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Makes a bivariate-function being able to act on a sequence of elements using reduction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 227.0394 cm
Q
q
1 0 0 1 50.01575 212.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 169.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from operator import mul) Tj T* (>) Tj (>) Tj (>) Tj ( assert reducing\(mul\)\([1,2,3,4]\) == 24    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert reducing\(mul\)\(6,4\) == 24    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 149.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Since a.join\(b\).join\(c\).join\(d\) is also very common, we provide a simple interface for that:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 143.2394 cm
Q
q
1 0 0 1 50.01575 128.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (chaining) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 97.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert reducing\('__add__'\)\([1,2,3,4]\) == 10) Tj T* (>) Tj (>) Tj (>) Tj ( assert reducing\('__add__'\)\(6,4\) == 10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 77.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (d = dictable\(a = [1,2,3,5,4]\) reducing\(\221inc\222\)\(d, dict\(a=1\)\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (45) Tj T* ET
Q
Q
 
endstream
endobj
1016 0 obj
<<
/Length 7821
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (logger and get_logger) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 760.6394 cm
Q
q
1 0 0 1 40.01575 736.6394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._logger.) Tj /F6 10 Tf (get_logger) Tj /F1 10 Tf ( \() Tj (name) Tj (=) Tj ('pyg') Tj (, level) Tj (=) Tj ('info') Tj (, fmt) Tj (=) Tj ('%\(asctime\)s - %\(name\)s - %\(levelname\)s -) Tj T* (%\(message\)s') Tj (, file) Tj (=) Tj (False) Tj (, console) Tj (=) Tj (True) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 724.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (quick utility to simplify loggers creation and ensure we cache them and do not add to many handlers) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 718.6394 cm
Q
q
1 0 0 1 50.01575 703.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 687.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (name : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 672.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (name of logger. The default is \221pyg\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 656.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (level : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 641.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (DEBUG/INFO/WARN etc. The default is \221info\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 625.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (fmt : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 610.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (string formatting for messages. The default is \221%\(asctime\)s - %\(name\)s - %\(levelname\)s - %\(message\)s\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 594.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (file : ) Tj /F4 10 Tf (bool/str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 579.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the name of the file to log to. The default is False = do not log to file.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 563.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (console : ) Tj /F4 10 Tf (bool, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 548.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (log to console? The default is True.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 542.6394 cm
Q
q
1 0 0 1 50.01575 527.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 515.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (logging.logger) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 485.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (access functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 467.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (These are useful to convert object-oriented code to declarative functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 461.2394 cm
Q
q
1 0 0 1 40.01575 449.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._getitem.) Tj /F6 10 Tf (callattr) Tj /F1 10 Tf ( \() Tj (value) Tj (, attr) Tj (, args) Tj (=) Tj (None) Tj (, kwargs) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 437.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (gets the attribute\(s\) from a value and calls its) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 431.2394 cm
Q
q
1 0 0 1 50.01575 416.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 361.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( value = Dict\(function = lambda a, b: a + b\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert callattr\(value, 'function', kwargs = dict\(a = 1, b = 2\)\) == 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert callattr\(value, attr = 'function', args = \(1, 2\), kwargs = None\) == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 310.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 574 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ts = pd.Series\(np.random.normal\(0,1,1000\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert ts.std\(\) == callattr\(ts, 'std'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts.ewm\(com = 10\).mean\(\), callattr\(ts, ['ewm','mean'], kwargs = [{'com':10}, {}]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 271.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 640 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = dictable\(a = [1,2,3,4,1,2], b = list\('abcdef'\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert callattr\(d, ['inc', 'exc'], kwargs = [dict\(a = 2\), dict\(b = 'f'\)]\) == d.inc\(a = 2\).exc\(b = 'f'\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 251.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 236.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (object that contrains an item.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 220.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (attr : ) Tj /F4 10 Tf (string\(s\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 205.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (key within object.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 189.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (args : ) Tj /F4 10 Tf (tuple, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 174.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tuple of values to be fed to function. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 158.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (kwargs : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 143.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (kwargs to be fed to the method. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 137.8394 cm
Q
q
1 0 0 1 40.01575 125.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._getitem.) Tj /F6 10 Tf (callitem) Tj /F1 10 Tf ( \() Tj (value) Tj (, key) Tj (, args) Tj (=) Tj (None) Tj (, kwargs) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 113.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (gets an item and calls it) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 107.8394 cm
Q
q
1 0 0 1 50.01575 92.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (46) Tj T* ET
Q
Q
 
endstream
endobj
1017 0 obj
<<
/Length 6913
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = dict\(function = lambda a, b: a + b\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert callitem\(c, 'function', kwargs = dict\(a = 1, b = 2\)\) == 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert callitem\(c, 'function', args = \(1, 2\)\) == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 724.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 709.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (object that contrains an item.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 693.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (key : ) Tj /F4 10 Tf (string) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 678.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (key within object.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 662.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (args : ) Tj /F4 10 Tf (tuple, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 647.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (tuple of values to be fed to function. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 631.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (kwargs : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 616.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (kwargs to be fed to the method. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 598.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._getitem.) Tj /F6 10 Tf (getitem) Tj /F1 10 Tf ( \() Tj (value) Tj (, key) Tj (, *) Tj (default) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 586.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (gets an item, like getattr) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 580.2394 cm
Q
q
1 0 0 1 50.01575 565.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 522.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = dict\(a = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert getitem\(a, 'a'\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert getitem\(a, 'b', 2\) == 2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 471.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pytest) Tj T* (>) Tj (>) Tj (>) Tj ( with pytest.raises\(KeyError\):) Tj T* (>) Tj (>) Tj (>) Tj (     getitem\(a, 'b'\) ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 441.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (inspection) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 423.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are a few functions extending the inspect module.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.2394 cm
Q
q
1 0 0 1 40.01575 405.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (argspec_add) Tj /F1 10 Tf ( \() Tj (fullargspec) Tj (, **) Tj (update) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 393.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (adds new args with default values at the end of the existing args) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 387.2394 cm
Q
q
1 0 0 1 50.01575 372.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 356.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (fullargspec : ) Tj /F4 10 Tf (FullArgSpec) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 341.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (DESCRIPTION.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 325.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (update : ) Tj /F4 10 Tf (dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 310.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (parameter names with their default values.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 304.2394 cm
Q
q
1 0 0 1 50.01575 289.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 277.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (FullArgSpec) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 271.2394 cm
Q
q
1 0 0 1 50.01575 256.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 201.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda b : b) Tj T* (>) Tj (>) Tj (>) Tj ( argspec = getargspec\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( updated = argspec_add\(argspec, axis = 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert updated.args == ['b', 'axis'] and updated.defaults == \(0,\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 138.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda b, axis : None ## axis already exists without a default) Tj T* (>) Tj (>) Tj (>) Tj ( argspec = getargspec\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( updated = argspec_add\(argspec, axis = 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert updated == argspec) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 75.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda b, axis =1 : None ## axis already exists with a different default) Tj T* (>) Tj (>) Tj (>) Tj ( argspec = getargspec\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( updated = argspec_add\(argspec, axis = 0\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert updated == argspec) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 61.83937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (47) Tj T* ET
Q
Q
 
endstream
endobj
1018 0 obj
<<
/Length 7785
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (argspec_defaults) Tj /F1 10 Tf ( \() Tj (function) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 769.0394 cm
Q
q
1 0 0 1 50.01575 754.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the function defaults as a dict rather than using the inspect structure) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a, b = 1: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( assert argspec_defaults\(f\) == dict\(b=1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 669.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( g = partial\(f, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert argspec_defaults\(g\) == dict\(b=2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 655.4394 cm
Q
q
1 0 0 1 50.01575 640.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 628.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function : callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 622.4394 cm
Q
q
1 0 0 1 50.01575 607.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 595.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (defaults as a dict.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 589.4394 cm
Q
q
1 0 0 1 40.01575 577.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (argspec_required) Tj /F1 10 Tf ( \() Tj (function) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 571.4394 cm
Q
q
1 0 0 1 50.01575 556.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 544.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (function : callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 538.4394 cm
Q
q
1 0 0 1 50.01575 523.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 507.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (list) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 492.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (parameters that ) Tj /F4 10 Tf (must) Tj /F1 10 Tf ( be provided in order to run the function) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 486.4394 cm
Q
q
1 0 0 1 40.01575 474.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (argspec_update) Tj /F1 10 Tf ( \() Tj (argspec) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 462.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (generic function to create new FullArgSpec \(python 3\) or normal ArgSpec \(python 2\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 456.4394 cm
Q
q
1 0 0 1 50.01575 441.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 425.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (argspec : ) Tj /F4 10 Tf (FullArgSpec) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 410.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The argspec of the dunction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 394.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (kwargs : ) Tj /F4 10 Tf (TYPE) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 379.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (updates) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 373.4394 cm
Q
q
1 0 0 1 50.01575 358.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 346.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (FullArgSpec) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 340.4394 cm
Q
q
1 0 0 1 50.01575 325.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 210.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 622 114 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( f = lambda a, b =1 : a + b) Tj T* (>) Tj (>) Tj (>) Tj ( argspec = getargspec\(f\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert argspec_update\(argspec, args = ['a', 'b', 'c']\) == inspect.FullArgSpec\(**{'annotations': {},) Tj T* (                                                                             'args': ['a', 'b', 'c'],) Tj T* (                                                                             'defaults': \(1,\),) Tj T* (                                                                             'kwonlyargs': [],) Tj T* (                                                                             'kwonlydefaults': None,) Tj T* (                                                                             'varargs': None,) Tj T* (                                                                             'varkw': None}\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 196.6394 cm
Q
q
1 0 0 1 40.01575 184.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (call_with_callargs) Tj /F1 10 Tf ( \() Tj (function) Tj (, callargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 172.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (replicates inspect.getcallargs with support to functions within decorators) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 166.6394 cm
Q
q
1 0 0 1 50.01575 151.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 84.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( function = lambda a, b, *args, **kwargs: 1+b+len\(args\)+10*len\(kwargs\)) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(1,2,3,4,5\); kwargs = dict\(c = 6, d = 7\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert function\(*args, **kwargs\) == 26) Tj T* (>) Tj (>) Tj (>) Tj ( callargs = getcallargs\(function, *args, **kwargs\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert call_with_callargs\(function, callargs\) == 26) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 70.83937 cm
Q
q
1 0 0 1 40.01575 58.83937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (getargs) Tj /F1 10 Tf ( \() Tj (function) Tj (, n) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (48) Tj T* ET
Q
Q
 
endstream
endobj
1019 0 obj
<<
/Length 7891
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 756.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 741.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The function for which we want the args) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 725.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (n : ) Tj /F4 10 Tf (int optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 710.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (get the name opf the args after allowing for n args to be set by ) Tj 1 0 0 rg (*) Tj 0 0 0 rg (args. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 704.0394 cm
Q
q
1 0 0 1 50.01575 689.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 677.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None or a list of args) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 671.0394 cm
Q
q
1 0 0 1 40.01575 659.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (getargspec) Tj /F1 10 Tf ( \() Tj (function) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 647.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Extends inspect.getfullargspec to allow us to decorate functions with a signature.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 641.0394 cm
Q
q
1 0 0 1 50.01575 626.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 610.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 595.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function for which we want to know argspec.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 589.0394 cm
Q
q
1 0 0 1 50.01575 574.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 562.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (inspect.FullArgSpec) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 556.0394 cm
Q
q
1 0 0 1 40.01575 544.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (getcallargs) Tj /F1 10 Tf ( \() Tj (function) Tj (, *) Tj (args) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 532.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (replicates inspect.getcallargs with support to functions within decorators) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 526.0394 cm
Q
q
1 0 0 1 50.01575 511.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 456.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1030 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import inspect) Tj T* (>) Tj (>) Tj (>) Tj ( function = lambda a, b, *myargs, **mykwargs: 1 ) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(1,2,3,4,5\); kwargs = dict\(c = 6, d = 7\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == {'a': 1, 'b': 2, 'myargs': \(3, 4, 5\), 'mykwargs': {'c': 6, 'd': 7}} ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 405.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 688 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( function = lambda a: a + 1) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(\); kwargs = dict\(a=1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == dict\(a = 1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 258.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 730 138 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( function = lambda a, b = 1: 1) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(\); kwargs = dict\(a=1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == dict\(a = 1, b = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(\); kwargs = dict\(a=1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == dict\(a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(1,\); kwargs = {}) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == dict\(a = 1, b = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(1,2\); kwargs = {}) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == dict\(a = 1, b = 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(1,\); kwargs = {'b' : 2}) Tj T* (>) Tj (>) Tj (>) Tj ( assert getcallargs\(function, *args, **kwargs\) == inspect.getcallargs\(function, *args, **kwargs\) == dict\(a = 1, b = 2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 244.6394 cm
Q
q
1 0 0 1 40.01575 232.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.base._inspect.) Tj /F6 10 Tf (kwargs2args) Tj /F1 10 Tf ( \() Tj (function) Tj (, args) Tj (, kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 220.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (converts a list of paramters that were provided as kwargs, into args) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 214.6394 cm
Q
q
1 0 0 1 50.01575 199.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 180.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert kwargs2args\(lambda a, b: a+b, \(\), dict\(a = 1, b=2\)\) == \([1,2], {}\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 166.8394 cm
Q
q
1 0 0 1 50.01575 151.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 139.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function : callable args : tuple) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 133.8394 cm
Q
q
1 0 0 1 50.01575 121.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (parameters of function.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 121.8394 cm
Q
q
1 0 0 1 50.01575 105.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (kwargs : ) Tj /F4 10 Tf (dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 90.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (key-word parameters of function.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 84.83937 cm
Q
q
1 0 0 1 50.01575 69.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to pyg!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (49) Tj T* ET
Q
Q
 
endstream
endobj
1020 0 obj
<<
/Length 7537
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (tuple) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a pair of a function args, kwargs.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 724.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 706.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A few words on MongoDB, a no-SQL database versus SQL:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 700.8394 cm
Q
q
1 0 0 1 40.01575 700.8394 cm
Q
q
1 0 0 1 40.01575 688.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Mongo has \221collections\222 that are the equivalent of tables) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 682.8394 cm
Q
q
1 0 0 1 40.01575 646.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.507606 Tw (Mongo will refer to \221documents\222 instead of traditional records. Those records are unstructured and look like) Tj T* 0 Tw .165479 Tw (trees: dicts of dicts. They contain arbitary objects as well as just the primary types a SQL database is designed) Tj T* 0 Tw (to support.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 640.8394 cm
Q
q
1 0 0 1 40.01575 628.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Mongo collections do not have the concept of primary keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 622.8394 cm
Q
q
1 0 0 1 40.01575 610.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Mongo WHERE SQL clause is replaced by a query in a form of a dict \223presented\224 to the collection object.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 604.8394 cm
Q
q
1 0 0 1 40.01575 592.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Mongo SELECT SQL clause is replaced by a \221projection\222 on the cursor, specifying what fields are retrieved.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 592.8394 cm
Q
q
1 0 0 1 40.01575 560.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Query generator) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 542.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We start by simplifying the way we generate mongo query dictionaries.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (q and Q) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 499.6394 cm
Q
q
1 0 0 1 40.01575 481.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.mongo._q.) Tj /F6 10 Tf (Q) Tj /F1 10 Tf ( \() Tj (keys) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 457.6394 cm
q
BT 1 0 0 1 0 14 Tm 3.4673 Tw 12 TL /F1 10 Tf 0 0 0 rg (The MongoDB interface for query of a collection \(table\) is via a creation of a complicated looking dict:) Tj T* 0 Tw 0 0 .501961 rg (https://docs.mongodb.com/manual/tutorial/query-documents/) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.6394 cm
q
BT 1 0 0 1 0 14 Tm 1.503205 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is rather complicated for the average user so Q simplifies it greatly. Q is based on TinyDB and users of) Tj T* 0 Tw (TinyDB will recognise it. ) Tj 0 0 .501961 rg (https://tinydb.readthedocs.io/en/latest/usage.html) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 421.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (q is the singleton of Q.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 409.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (q supports both ) Tj /F4 10 Tf (calling) Tj /F1 10 Tf ( to generate the querying dict) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 390.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( q\(a = 1, b = 2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 370.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (or) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 340.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( \(q.a == 1\) ) Tj (&) Tj ( \(q.b == 2\)  # {"$and": [{"a": {"$eq": 1}}, {"b": {"$eq": 2}}]}) Tj T* (>) Tj (>) Tj (>) Tj ( \(q.a == 1\) | \(q.b == 2\)  # {"$or": [{"a": {"$eq": 1}}, {"b": {"$eq": 2}}]}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 320.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (or indeed) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 301.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( q\(q.a == 1, q.b  == 2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 287.2394 cm
Q
q
1 0 0 1 50.01575 272.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 241.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import q) Tj T* (>) Tj (>) Tj (>) Tj ( import re) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 178.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 802 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dict\(q.a == 1\) == {"a": {"$eq": 1}}) Tj T* (>) Tj (>) Tj (>) Tj ( assert dict\(q\(a = [1,2]\)\) == {'a': {'$in': [1, 2]}}) Tj T* (>) Tj (>) Tj (>) Tj ( assert dict\(q\(q.a == [1,2], q.b ) Tj (>) Tj ( 3\)\) == {'$and': [{"a": {"$in": [1, 2]}}, {"b": {"$gt": 3}}]}  # a in [1,2] and b greater than 3) Tj T* (>) Tj (>) Tj (>) Tj ( assert dict\(q\(a = re.compile\('^hello'\)\)\) == {'a': {'regex': '^hello'}}     # a regex query using regex expressions    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 151.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dict\(q.a.exists + q.b.not_exists\)  == {"$and": [{"a": {"$exists": true}}, {"b": {"$exists": false}}]}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 125.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert dict\(~\(q.a==1\)\)  == {'$not': {"a": {"$eq": 1}}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (50) Tj T* ET
Q
Q
 
endstream
endobj
1021 0 obj
<<
/Length 8238
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Tables in Mongo) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 739.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (mongo_cursor) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (mongo_cursor has hybrid functionality of a Mongo cursor and Mongo collection objects.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 715.8394 cm
Q
q
1 0 0 1 40.01575 697.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.mongo._cursor.) Tj /F6 10 Tf (mongo_cursor) Tj /F1 10 Tf ( \() Tj (cursor) Tj (, writer) Tj (=) Tj (None) Tj (, reader) Tj (=) Tj (None) Tj (, query) Tj (=) Tj (None) Tj (, **) Tj (_) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 685.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (mongo_cursor is a souped-up combination of mongo.Cursor and mongo.Collection with a simple API.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 679.8394 cm
Q
q
1 0 0 1 50.01575 664.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 652.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cursor : MongoDB cursor or MongoDB collection) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 636.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (writer : ) Tj /F4 10 Tf (True/False/string, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 453.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 170 Tm  T* ET
q
1 0 0 1 20 168 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The default is None.) Tj T* ET
Q
Q
q
1 0 0 1 20 144 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .761794 Tw (writer allows you to transform the data before saving it in Mongo. You can create a function yourself or use) Tj T* 0 Tw (built-in options:) Tj T* ET
Q
Q
q
1 0 0 1 20 138 cm
Q
q
1 0 0 1 20 138 cm
Q
q
1 0 0 1 20 126 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (False: do nothing, save the document as is) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 96 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.550372 Tw (True/None: use pyg.base.encode to encode objects. This will transform numpy array/dataframes into) Tj T* 0 Tw (bytes that can be stored) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 90 cm
Q
q
1 0 0 1 20 78 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\221.csv\222: save dataframes into csv files and then save reference of these files to mongo) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 60 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\221.parquet\222 save dataframes into .parquet and np.ndarray into .npy files.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.131234 Tw (For .csv and .parquet to work, you will need to specify WHERE the document is to be saved. This can be done) Tj T* 0 Tw (either:) Tj T* ET
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the document has a \221root\222 key, specifying the root.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (you specify root by setting writer = \221c:/%name%surname.parquet\222) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 437.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (reader : ) Tj /F4 10 Tf (callable or None, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 422.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The default is None, using decode. Use reader = False to passthru) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 406.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (query : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 391.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This is used to specify the Mongo query, e.g. q.a==1.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 379.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (_ :) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 373.8394 cm
Q
q
1 0 0 1 50.01575 358.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 316.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( cursor = mongo_table\('test', 'test'\)) Tj T* (>) Tj (>) Tj (>) Tj ( cursor.drop\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 296.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (## insert some data) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 253.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( table = dictable\(a = range\(5\)\) * dictable\(b = range\(5\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( cursor.insert_many\(table\)) Tj T* (>) Tj (>) Tj (>) Tj ( cursor.set\(c = lambda a, b: a * b\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 239.2394 cm
Q
q
1 0 0 1 50.01575 224.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 30.25937 0 Td (Filtering:) Tj T* -30.25937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 169.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 766 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert len\(cursor\) == 25) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(cursor.find\(a = 3\)\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(cursor.exc\(a = 3\)\) == 20) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(cursor.find\(a = [3,2]\).find\(q.b) Tj (<) Tj (3\)\) == 6 ## can chain queries as well as use q to create complicated expressions) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 155.4394 cm
Q
q
1 0 0 1 50.01575 140.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 12.45937 0 Td (Row access:) Tj T* -12.45937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 121.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cursor[0]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 101.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL ({\221_id\222: ObjectId\(\221603aec85cd15e2c090c07b87\222\), \221a\222: 0, \221b\222: 0}) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 82.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cursor[::] - '_id' == dictable\(cursor\) - '_id') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (51) Tj T* ET
Q
Q
 
endstream
endobj
1022 0 obj
<<
/Length 6343
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 672.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 114 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( dictable[25 x 3]) Tj T* (>) Tj (>) Tj (>) Tj ( a|b|c ) Tj T* (>) Tj (>) Tj (>) Tj ( 0|0|0 ) Tj T* (>) Tj (>) Tj (>) Tj ( 0|1|0 ) Tj T* (>) Tj (>) Tj (>) Tj ( 0|2|0 ) Tj T* (>) Tj (>) Tj (>) Tj ( ...25 rows...) Tj T* (>) Tj (>) Tj (>) Tj ( 4|2|8 ) Tj T* (>) Tj (>) Tj (>) Tj ( 4|3|12) Tj T* (>) Tj (>) Tj (>) Tj ( 4|4|16) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 658.2394 cm
Q
q
1 0 0 1 50.01575 631.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL 35.81937 0 Td (Column) Tj T* .53 0 Td (access:) Tj T* -36.34937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 576.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cursor[['a', 'b']]  ## just columns 'a' and 'b') Tj T* (>) Tj (>) Tj (>) Tj ( del cursor['c'] ## delete all c) Tj T* (>) Tj (>) Tj (>) Tj ( cursor.set\(c = lambda a, b: a * b\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert cursor.find_one\(a = 3, b = 2\)[0].c == 6) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 562.4394 cm
Q
q
1 0 0 1 50.01575 547.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (root specification) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 432.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 114 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( t = mongo_table\('test', 'test', writer = 'c:/temp/%name/%surname.parquet'\)) Tj T* (>) Tj (>) Tj (>) Tj ( t.drop\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( doc = dict\(name = 'adam', surname = 'smith', ts = pd.Series\(np.arange\(10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( t.insert_one\(doc\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(pd_read_parquet\('c:/temp/adam/smith/ts.parquet'\), doc['ts']\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(t[0]['ts'], doc['ts']\)) Tj T* (>) Tj (>) Tj (>) Tj ( doc = dict\(name = 'beth', surname = 'brown', a = np.arange\(10\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( t.insert_one\(doc\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 412.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Since mongo_cursor is too powerful, we also have a mongo_reader version which is read-only.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 406.6394 cm
Q
q
1 0 0 1 50.01575 388.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (delete_many) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 376.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Equivalent to drop: deletes all documents the cursor currently points to.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 370.6394 cm
Q
q
1 0 0 1 60.01575 355.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 47.48937 0 Td (Note:) Tj T* -47.48937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 343.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you want to drop a subset of the data, then use c.find\(criteria\).delete_many\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 337.6394 cm
Q
q
1 0 0 1 60.01575 322.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 310.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (itself) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 304.6394 cm
Q
q
1 0 0 1 50.01575 286.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (delete_one) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 274.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (drops a specific record after verifying exactly one exists.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 268.6394 cm
Q
q
1 0 0 1 60.01575 253.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 241.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (args : query ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (kwargs : query) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 235.6394 cm
Q
q
1 0 0 1 60.01575 220.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 208.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (itself) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 202.6394 cm
Q
q
1 0 0 1 50.01575 184.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (drop) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 172.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Equivalent to drop: deletes all documents the cursor currently points to.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 166.6394 cm
Q
q
1 0 0 1 60.01575 151.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 47.48937 0 Td (Note:) Tj T* -47.48937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 139.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you want to drop a subset of the data, then use c.find\(criteria\).delete_many\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 133.6394 cm
Q
q
1 0 0 1 60.01575 118.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 106.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (itself) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 100.6394 cm
Q
q
1 0 0 1 50.01575 82.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (insert_many) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (table) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 70.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (inserts multiple documents into the collection) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (52) Tj T* ET
Q
Q
 
endstream
endobj
1023 0 obj
<<
/Length 6014
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (table : ) Tj /F4 10 Tf (sequence of documents) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (list of dicts or dictable) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 748.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (mongo_cursor) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 742.0394 cm
Q
q
1 0 0 1 60.01575 727.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (simple insertion) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 648.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( t = mongo_table\('test', 'test'\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.drop\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( values = dictable\(a = [1,2,3,4,], b = [5,6,7,8]\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.insert_many\(values\)) Tj T* (>) Tj (>) Tj (>) Tj ( t[::]        ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 561.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( dictable[4 x 3]) Tj T* (>) Tj (>) Tj (>) Tj ( _id                     |a|b) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77bdd|1|5) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77bde|2|6) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77bdf|3|7) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77be0|4|8) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 547.4394 cm
Q
q
1 0 0 1 60.01575 532.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (update) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 489.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( table = t[::]) Tj T* (>) Tj (>) Tj (>) Tj ( modified = table\(b = lambda b: b**2\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.insert_many\(modified\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 469.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Since each of the documents we uploaded already has an _id\205) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 366.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert len\(t\) == 4) Tj T* (>) Tj (>) Tj (>) Tj ( t[::]) Tj T* (>) Tj (>) Tj (>) Tj ( dictable[4 x 3]) Tj T* (>) Tj (>) Tj (>) Tj ( _id                     |a|b) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77bdd|1|25) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77bde|2|36) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77bdf|3|49) Tj T* (>) Tj (>) Tj (>) Tj ( 602daee68c336f6429a77be0|4|64) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 352.8394 cm
Q
q
1 0 0 1 50.01575 334.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (insert_one) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (doc) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 322.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (inserts/updates a single document.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 298.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.116496 Tw (If the document ALREADY has _id in it, it updates that document If the document has no _id in it, it inserts it as a) Tj T* 0 Tw (new document) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 292.8394 cm
Q
q
1 0 0 1 60.01575 277.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 261.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (doc : ) Tj /F4 10 Tf (dict) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 246.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (document.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 240.8394 cm
Q
q
1 0 0 1 60.01575 225.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 159.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( t = mongo_table\('test', 'test'\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.drop\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( values = dictable\(a = [1,2,3,4,], b = [5,6,7,8]\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.insert_many\(values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 145.0394 cm
Q
q
1 0 0 1 60.01575 130.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (used to update an existing document) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 75.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( doc = t[0]) Tj T* (>) Tj (>) Tj (>) Tj ( doc['c'] = 8) Tj T* (>) Tj (>) Tj (>) Tj ( str\(doc\)) Tj T* (>) Tj (>) Tj (>) Tj ( "{'_id': ObjectId\('602d36150a5cd32717323197'\), 'a': 1, 'b': 5, 'c': 8}") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (53) Tj T* ET
Q
Q
 
endstream
endobj
1024 0 obj
<<
/Length 6973
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = t.insert_one\(doc\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t\) == 4        ) Tj T* (>) Tj (>) Tj (>) Tj ( assert t[0] == doc        ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 730.2394 cm
Q
q
1 0 0 1 60.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (used to insert) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 660.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( doc = Dict\(a = 1, b = 8, c = 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.insert_one\(doc\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t\) == 5) Tj T* (>) Tj (>) Tj (>) Tj ( t.drop\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 646.4394 cm
Q
q
1 0 0 1 50.01575 634.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (property ) Tj /F6 10 Tf (raw) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 622.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns an unfiltered mongo_reader) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 616.4394 cm
Q
q
1 0 0 1 50.01575 598.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (set) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 574.4394 cm
q
BT 1 0 0 1 0 14 Tm 1.113182 Tw 12 TL /F1 10 Tf 0 0 0 rg (updates all documents in current cursor based on the kwargs. It is similar to update_many but supports also) Tj T* 0 Tw (functions) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 568.4394 cm
Q
q
1 0 0 1 60.01575 553.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 541.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (kwargs: dict of values to be updated) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 535.4394 cm
Q
q
1 0 0 1 60.01575 520.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 441.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( t = mongo_table\('test', 'test'\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.drop\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( values = dictable\(a = [1,2,3,4,], b = [5,6,7,8]\)) Tj T* (>) Tj (>) Tj (>) Tj ( t = t.insert_many\(values\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert t[::]-'_id' == values) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 378.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t.set\(c = lambda a, b: a+b\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert t[::]-'_id' == values\(c = [6,8,10,12]\)) Tj T* (>) Tj (>) Tj (>) Tj ( t.set\(d = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert t[::]-'_id' == values\(c =lambda a, b: a+b\)\(d = 1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 364.8394 cm
Q
q
1 0 0 1 60.01575 349.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 337.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (itself) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 331.8394 cm
Q
q
1 0 0 1 50.01575 313.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (update_many) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (doc) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (upsert) Tj (=) Tj (False) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 301.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (updates all documents in current cursor based on the doc. The two are equivalent:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 271.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cursot.update_many\(doc\)) Tj T* (>) Tj (>) Tj (>) Tj ( collection.update_many\(cursor.spec, { 'set' : update}\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 257.0394 cm
Q
q
1 0 0 1 60.01575 242.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 230.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (doc : dict of values to be updated) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 224.0394 cm
Q
q
1 0 0 1 60.01575 209.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 197.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (itself) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 191.0394 cm
Q
q
1 0 0 1 50.01575 173.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (update_one) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (doc) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (upsert) Tj (=) Tj (True) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 167.0394 cm
Q
q
1 0 0 1 60.01575 167.0394 cm
Q
q
1 0 0 1 60.01575 155.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (updates a document if an _id is present in doc.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 149.0394 cm
Q
q
1 0 0 1 60.01575 137.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (insert a document if an _id is not present and upsert is true) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 137.0394 cm
Q
q
1 0 0 1 60.01575 131.0394 cm
Q
q
1 0 0 1 60.01575 116.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 100.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (doc : ) Tj /F4 10 Tf (document) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 85.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (doc to be upserted.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 69.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (upsert : ) Tj /F4 10 Tf (bool, optional) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (54) Tj T* ET
Q
Q
 
endstream
endobj
1025 0 obj
<<
/Length 7301
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (insert if no document present? The default is True.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 766.0394 cm
Q
q
1 0 0 1 60.01575 751.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 735.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (doc) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 720.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (document updated.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 689.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (mongo_reader) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 671.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (mongo_reader is a read-only version of the cursor to avoid any unintentional damage to database.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 665.6394 cm
Q
q
1 0 0 1 40.01575 647.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.mongo._reader.) Tj /F6 10 Tf (mongo_reader) Tj /F1 10 Tf ( \() Tj (cursor) Tj (, writer) Tj (=) Tj (None) Tj (, reader) Tj (=) Tj (None) Tj (, query) Tj (=) Tj (None) Tj (, **) Tj (_) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 623.6394 cm
q
BT 1 0 0 1 0 14 Tm .039606 Tw 12 TL /F1 10 Tf 0 0 0 rg (mongo_reader is a read-only version of the mongo_cursor. You can instantiate it with a mongo_reader\(cursor\) call) Tj T* 0 Tw (where cursor can be a mongo_cursor, a pymongo.Cursor or a pymongo.Collection) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 617.6394 cm
Q
q
1 0 0 1 50.01575 605.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (property ) Tj /F6 10 Tf (address) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 599.6394 cm
Q
q
1 0 0 1 60.01575 584.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 568.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (tuple) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 541.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm .992435 Tw 12 TL /F1 10 Tf 0 0 0 rg (A unique combination of the client addres, database name and collection name, identifying the collection) Tj T* 0 Tw (uniquely.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 535.6394 cm
Q
q
1 0 0 1 50.01575 517.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (clone) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (**) Tj (params) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 511.6394 cm
Q
q
1 0 0 1 60.01575 496.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 480.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (mongo_reader) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 453.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm -0.067869 Tw 12 TL /F1 10 Tf 0 0 0 rg (Returns a cloned version of current mongo_reader but allows additional parameters to be set \(see spec and) Tj T* 0 Tw (project\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 447.6394 cm
Q
q
1 0 0 1 50.01575 435.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (property ) Tj /F6 10 Tf (collection) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 429.6394 cm
Q
q
1 0 0 1 60.01575 414.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 402.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (pymongo.Collection object) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 396.6394 cm
Q
q
1 0 0 1 50.01575 378.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (count) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 366.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (cursor.count\(\) and len\(cursor\) are the same and return the number of documents matching current specification.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 360.6394 cm
Q
q
1 0 0 1 50.01575 342.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (distinct) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (key) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 330.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns the distinct values of the key) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 314.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (key : ) Tj /F4 10 Tf (str) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 299.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a key in the documents.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 283.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (list of strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 268.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (distinct values) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 262.6394 cm
Q
q
1 0 0 1 60.01575 247.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 180.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pymongo) Tj T* (>) Tj (>) Tj (>) Tj ( table = pymongo.MongoClient\(\)['test']['test']) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'alan', surname = 'abrahams', age = 39, marriage = dt\(2000\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'barbara', surname = 'brown', age = 50, marriage = dt\(2020\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'charlie', surname = 'cohen', age = 20\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 130.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = mongo_reader\(table\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert t.name == t.distinct\('name'\) == ['alan', 'barbara', 'charlie']) Tj T* (>) Tj (>) Tj (>) Tj ( table.drop\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 116.0394 cm
Q
q
1 0 0 1 50.01575 98.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (docs) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (doc) Tj (=) Tj ('doc') Tj /F2 10 Tf (, ) Tj /F1 10 Tf (*) Tj (keys) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 74.03937 cm
q
BT 1 0 0 1 0 14 Tm -0.029785 Tw 12 TL /F1 10 Tf 0 0 0 rg (self[::] flattens the entire document. At times, we want to see the full documents, indexed by keys and docs does) Tj T* 0 Tw (that. returns a dictable with both keys and the document in the \221doc\222 column) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 68.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (55) Tj T* ET
Q
Q
 
endstream
endobj
1026 0 obj
<<
/Length 7529
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (exc) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (filters \221negatively\222 removing documents that match the criteria specified.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 747.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cursor) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 732.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (filtered documents.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 726.0394 cm
Q
q
1 0 0 1 60.01575 711.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 644.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pymongo) Tj T* (>) Tj (>) Tj (>) Tj ( table = pymongo.MongoClient\(\)['test']['test']) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'alan', surname = 'abrahams', age = 39, marriage = dt\(2000\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'barbara', surname = 'brown', age = 50, marriage = dt\(2020\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'charlie', surname = 'cohen', age = 20\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 581.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = mongo_reader\(table\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.exc\(name = 'alan'\)\) == 2        ) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.exc\(name = ['alan', 'barbara']\)\) == 1        ) Tj T* (>) Tj (>) Tj (>) Tj ( table.drop\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 567.4394 cm
Q
q
1 0 0 1 50.01575 549.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (find) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 537.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Same as self.specify\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 513.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .910215 Tw (The \221spec\222 is the cursor\222s filter on documents \(can think of it as row-selection\) within the collection. We use q) Tj T* 0 Tw (\(see pyg.mongo._q.q\) to specify the filter on the cursor.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 507.4394 cm
Q
q
1 0 0 1 60.01575 492.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 480.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A filtered mongo_reader cursor) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 474.4394 cm
Q
q
1 0 0 1 60.01575 459.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 392.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pymongo) Tj T* (>) Tj (>) Tj (>) Tj ( table = pymongo.MongoClient\(\)['test']['test']) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'alan', surname = 'abrahams', age = 39, marriage = dt\(2000\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'barbara', surname = 'brown', age = 50, marriage = dt\(2020\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'charlie', surname = 'cohen', age = 20\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 329.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = mongo_reader\(table\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.find\(name = 'alan'\)\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.find\(q.age) Tj (>) Tj (25\)\) == 2) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.find\(q.age) Tj (>) Tj (25, q.marriage) Tj (<) Tj (dt\(2010\)\)\) == 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 303.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( table.drop\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 289.0394 cm
Q
q
1 0 0 1 50.01575 271.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (find_one) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (doc) Tj (=) Tj (None) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 247.0394 cm
q
BT 1 0 0 1 0 14 Tm -0.128583 Tw 12 TL /F1 10 Tf 0 0 0 rg (searches for records based either on the doc, or the args/kwargs specified. Unlike mongo cursor which finds one) Tj T* 0 Tw (of many, here, when we ask for find_one, we will throw an exception if more than one documents are found.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 241.0394 cm
Q
q
1 0 0 1 60.01575 226.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 220.0394 cm
Q
q
1 0 0 1 60.01575 208.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A cursor pointing to a single record \(document\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 208.0394 cm
Q
q
1 0 0 1 50.01575 202.0394 cm
Q
q
1 0 0 1 50.01575 184.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (inc) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 172.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Same as self.specify\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 148.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .910215 Tw (The \221spec\222 is the cursor\222s filter on documents \(can think of it as row-selection\) within the collection. We use q) Tj T* 0 Tw (\(see pyg.mongo._q.q\) to specify the filter on the cursor.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 142.0394 cm
Q
q
1 0 0 1 60.01575 127.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 115.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A filtered mongo_reader cursor) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 109.0394 cm
Q
q
1 0 0 1 60.01575 94.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 63.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pymongo) Tj T* (>) Tj (>) Tj (>) Tj ( table = pymongo.MongoClient\(\)['test']['test']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (56) Tj T* ET
Q
Q
 
endstream
endobj
1027 0 obj
<<
/Length 7840
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 568 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'alan', surname = 'abrahams', age = 39, marriage = dt\(2000\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'barbara', surname = 'brown', age = 50, marriage = dt\(2020\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( table.insert_one\(dict\(name = 'charlie', surname = 'cohen', age = 20\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 681.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = mongo_reader\(table\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.find\(name = 'alan'\)\) == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.find\(q.age) Tj (>) Tj (25\)\) == 2) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(t.find\(q.age) Tj (>) Tj (25, q.marriage) Tj (<) Tj (dt\(2010\)\)\) == 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 654.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( table.drop\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 640.6394 cm
Q
q
1 0 0 1 50.01575 622.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (project) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (projection) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 598.6394 cm
q
BT 1 0 0 1 0 14 Tm .096894 Tw 12 TL /F1 10 Tf 0 0 0 rg (The \221projection\222 is the cursor\222s column selection on documents. If in SQL we write SELECT col1, col2 FROM \205,) Tj T* 0 Tw (in Mongo, the cursor.projection = [\221col1\222, \221col2\222]) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 592.6394 cm
Q
q
1 0 0 1 60.01575 577.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 553.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .688476 Tw (projection: a list/str of keys we are interested in reading. Note that nested keys are OK: \221level1.level2.name\222 is) Tj T* 0 Tw (perfectly good) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 547.6394 cm
Q
q
1 0 0 1 60.01575 532.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 520.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A mongo_reader cursor filtered to read just these keys) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 514.6394 cm
Q
q
1 0 0 1 50.01575 502.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (property ) Tj /F6 10 Tf (projection) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 496.6394 cm
Q
q
1 0 0 1 60.01575 481.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 475.6394 cm
Q
q
1 0 0 1 60.01575 451.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 1.845256 Tw 12 TL /F1 10 Tf 0 0 0 rg (The \221projection\222 is the cursor\222s column selection on documents. If in SQL we write SELECT col1, col2) Tj T* 0 Tw (FROM \205, in Mongo, the cursor.projection = [\221col1\222, \221col2\222]) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 451.6394 cm
Q
q
1 0 0 1 50.01575 445.6394 cm
Q
q
1 0 0 1 50.01575 433.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (property ) Tj /F6 10 Tf (raw) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 421.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns an unfiltered mongo_reader) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 415.6394 cm
Q
q
1 0 0 1 50.01575 397.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (read) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (item) Tj (=) Tj (0) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (reader) Tj (=) Tj (None) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 385.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (reads the next document from the collection.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 379.6394 cm
Q
q
1 0 0 1 60.01575 364.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 348.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (item : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 333.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Please read the ith record. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 317.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (reader : ) Tj /F4 10 Tf (callable/list of callables, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 290.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .819653 Tw (When we read the document from the collection, we first transform them. The default behaviour is to use) Tj T* 0 Tw (pyg.base._encode.decode but you may pass reader = False to grab the raw data from mongo) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 284.6394 cm
Q
q
1 0 0 1 60.01575 269.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 253.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (document) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 238.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The document from Mongo) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 232.6394 cm
Q
q
1 0 0 1 50.01575 214.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (sort) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (by) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 202.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (sorting on server side, per key\(s\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 190.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (by : str/list of strs) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 178.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sorted cursor.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 172.6394 cm
Q
q
1 0 0 1 50.01575 160.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (property ) Tj /F6 10 Tf (spec) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 154.6394 cm
Q
q
1 0 0 1 60.01575 139.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 133.6394 cm
Q
q
1 0 0 1 60.01575 121.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The \221spec\222 is the cursor\222s filter on documents \(can think of it as row-selection\) within the collection) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 121.6394 cm
Q
q
1 0 0 1 50.01575 115.6394 cm
Q
q
1 0 0 1 50.01575 97.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (specify) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (args) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 73.63937 cm
q
BT 1 0 0 1 0 14 Tm .910215 Tw 12 TL /F1 10 Tf 0 0 0 rg (The \221spec\222 is the cursor\222s filter on documents \(can think of it as row-selection\) within the collection. We use q) Tj T* 0 Tw (\(see pyg.mongo._q.q\) to specify the filter on the cursor.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 67.63937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (57) Tj T* ET
Q
Q
 
endstream
endobj
1028 0 obj
<<
/Length 7850
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 60.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 760.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A filtered mongo_reader cursor) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 729.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (mongo_pk_reader) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 711.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (mongo_pk_reader extends the standard reader to handle tables with primary keys \(pk\) while being read-only.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 705.6394 cm
Q
q
1 0 0 1 40.01575 687.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.mongo._pk_reader.) Tj /F6 10 Tf (mongo_pk_reader) Tj /F1 10 Tf ( \() Tj (cursor) Tj (, pk) Tj (, writer) Tj (=) Tj (None) Tj (, reader) Tj (=) Tj (None) Tj (, query) Tj (=) Tj (None) Tj (, **) Tj (_) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 675.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (we set up a system in Mongo to ensure we can mimin tables with primary keys. The way we do this is two folds:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 669.6394 cm
Q
q
1 0 0 1 50.01575 621.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.516506 Tw (At document insertion, we mark as _deleted old documents sharing the same keys by adding a key) Tj T* 0 Tw (_deleted to the old doc) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (At reading, we filter for documents where q._deleted.not_exists.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 621.6394 cm
Q
q
1 0 0 1 50.01575 615.6394 cm
Q
q
1 0 0 1 50.01575 597.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (clone) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 591.6394 cm
Q
q
1 0 0 1 60.01575 576.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 560.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (mongo_reader) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 533.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm -0.067869 Tw 12 TL /F1 10 Tf 0 0 0 rg (Returns a cloned version of current mongo_reader but allows additional parameters to be set \(see spec and) Tj T* 0 Tw (project\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 527.6394 cm
Q
q
1 0 0 1 50.01575 509.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (create_index) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (*) Tj (keys) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 497.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (creates a sorted index on the collection) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 491.6394 cm
Q
q
1 0 0 1 60.01575 476.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 460.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (keys : ) Tj /F4 10 Tf (strings) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 445.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if misssing, use the primary keys.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 439.6394 cm
Q
q
1 0 0 1 50.01575 421.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (dedup) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 385.6394 cm
q
BT 1 0 0 1 0 26 Tm .327888 Tw 12 TL /F1 10 Tf 0 0 0 rg (Although in principle, if a single process reads/writes to Mongo, we should not get duplicates. In practice, when) Tj T* 0 Tw .93094 Tw (multiple clients access the database, we occasionally get multiple records with the same primary keys. When) Tj T* 0 Tw (this happens, we also end up with poor mongo _ids) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 369.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (mongo_pk_cursor) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 354.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Hopefully, a table with unique keys.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 348.6394 cm
Q
q
1 0 0 1 50.01575 330.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (docs) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (doc) Tj (=) Tj ('doc') Tj /F2 10 Tf (, ) Tj /F1 10 Tf (*) Tj (keys) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 306.6394 cm
q
BT 1 0 0 1 0 14 Tm -0.029785 Tw 12 TL /F1 10 Tf 0 0 0 rg (self[::] flattens the entire document. At times, we want to see the full documents, indexed by keys and docs does) Tj T* 0 Tw (that. returns a dictable with both keys and the document in the \221doc\222 column) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 276.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (mongo_pk_cursor) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 246.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 7.270315 Tw (mongo_pk_cursor is our go-to object and it manages all our primary-keyed tables. .. autoclass::) Tj T* 0 Tw (pyg.mongo._pk_cursor.mongo_pk_cursor) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 240.2394 cm
Q
q
1 0 0 1 40.01575 219.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 15 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 25.24937 0 Td (members:) Tj T* -25.24937 0 Td ET
Q
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 219.2394 cm
Q
q
1 0 0 1 40.01575 186.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (encoding docs before saving to mongo) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 144.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .306205 Tw (Before we save data to Mongo, we may need to transform it, especially if we are to save pd.DataFrame. By default,) Tj T* 0 Tw .245227 Tw (we encode them into bytes and push to mongo. You can choose to save pandas dataframes/series as .parquet files) Tj T* 0 Tw (and numpy arrays into .npy files.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 114.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (parquet_write) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 102.0394 cm
Q
q
1 0 0 1 40.01575 90.03937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.mongo._encoders.) Tj /F6 10 Tf (parquet_write) Tj /F1 10 Tf ( \() Tj (doc) Tj (, root) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 66.03937 cm
q
BT 1 0 0 1 0 14 Tm .915292 Tw 12 TL /F1 10 Tf 0 0 0 rg (MongoDB is great for manipulating/searching dict keys/values. However, the actual dataframes in each doc, we) Tj T* 0 Tw .848766 Tw (may want to save in a file system. - The DataFrames are stored as bytes in MongoDB anyway, so they are not) Tj T* 0 Tw ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (58) Tj T* ET
Q
Q
 
endstream
endobj
1029 0 obj
<<
/Length 7191
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 739.0394 cm
q
BT 1 0 0 1 0 38 Tm 2.026721 Tw 12 TL /F1 10 Tf 0 0 0 rg (searchable - Storing in files allows other non-python/non-MongoDB users easier access, allowing data to be) Tj T* 0 Tw .14811 Tw (detached from app - MongoDB free version has limitations on size of document - file based system may be faster,) Tj T* 0 Tw .585205 Tw (especially if saved locally not over network - for data licensing issues, data must not sit on servers but stored on) Tj T* 0 Tw (local computer) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 715.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.097406 Tw (Therefore, the doc encode will cycle through the elements in the doc. Each time it sees a pd.DataFrame/pd.Series,) Tj T* 0 Tw (it will - determine where to write it \(with the help of the doc\) - save it to a .parquet file) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 684.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (csv_write) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 672.6394 cm
Q
q
1 0 0 1 40.01575 660.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.mongo._encoders.) Tj /F6 10 Tf (csv_write) Tj /F1 10 Tf ( \() Tj (doc) Tj (, root) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 588.6394 cm
q
BT 1 0 0 1 0 62 Tm .915292 Tw 12 TL /F1 10 Tf 0 0 0 rg (MongoDB is great for manipulating/searching dict keys/values. However, the actual dataframes in each doc, we) Tj T* 0 Tw .848766 Tw (may want to save in a file system. - The DataFrames are stored as bytes in MongoDB anyway, so they are not) Tj T* 0 Tw 2.026721 Tw (searchable - Storing in files allows other non-python/non-MongoDB users easier access, allowing data to be) Tj T* 0 Tw .296711 Tw (detached from orignal application - MongoDB free version has limitations on size of document - file based system) Tj T* 0 Tw .335705 Tw (may be faster, especially if saved locally not over network - for data licensing issues, data must not sit on servers) Tj T* 0 Tw (but stored on local computer) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 564.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.097406 Tw (Therefore, the doc encode will cycle through the elements in the doc. Each time it sees a pd.DataFrame/pd.Series,) Tj T* 0 Tw (it will - determine where to write it \(with the help of the doc\) - save it to a .csv file) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 531.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (cells in Mongo) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 513.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now that we have a database, we construct cells that can load/save data to collections.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 483.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (db_cell) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 471.4394 cm
Q
q
1 0 0 1 40.01575 453.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.mongo._db_cell.) Tj /F6 10 Tf (db_cell) Tj /F1 10 Tf ( \() Tj (function) Tj (=) Tj (None) Tj (, output) Tj (=) Tj (None) Tj (, db) Tj (=) Tj (None) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 429.4394 cm
q
BT 1 0 0 1 0 14 Tm .291048 Tw 12 TL /F1 10 Tf 0 0 0 rg (a db_cell is a specialized cell with a \221db\222 member pointing to a database where cell is to be stored. We use this to) Tj T* 0 Tw (implement save/load for the cell.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 405.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .206837 Tw (It is important to recognize the duality in the design: - the job of the cell.db is to be able to save/load based on the) Tj T* 0 Tw (primary keys. - the job of the cell is to provide the primary keys to the db object.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 393.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The cell saves itself by \221presenting\222 itself to cell.db\(\) and say\205 go on, load my data based on my keys.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 387.4394 cm
Q
q
1 0 0 1 50.01575 372.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (saving & loading) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 305.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 532 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( people = partial\(mongo_table, db = 'test', table = 'test', pk = ['name', 'surname']\)) Tj T* (>) Tj (>) Tj (>) Tj ( anna = db_cell\(db = people, name = 'anna', surname = 'abramzon', age = 46\).save\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( bob  = db_cell\(db = people, name = 'bob', surname = 'brown', age = 25\).save\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( james = db_cell\(db = people, name = 'james', surname = 'johnson', age = 39\).save\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 285.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now we can pull the data directly from the database) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 206.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( people\(\)['name', 'surname', 'age'][::]) Tj T* (>) Tj (>) Tj (>) Tj ( dictable[3 x 4]) Tj T* (>) Tj (>) Tj (>) Tj ( _id                     |age|name |surname ) Tj T* (>) Tj (>) Tj (>) Tj ( 601e732e0ef13bec9cd8a6cb|39 |james|johnson ) Tj T* (>) Tj (>) Tj (>) Tj ( 601e73db0ef13bec9cd8a6d4|46 |anna |abramzon) Tj T* (>) Tj (>) Tj (>) Tj ( 601e73db0ef13bec9cd8a6d7|25 |bob  |brown       ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 186.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (db_cell can implement a function:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 120.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( def is_young\(age\):) Tj T* (>) Tj (>) Tj (>) Tj (    return age ) Tj (<) Tj ( 30) Tj T* (>) Tj (>) Tj (>) Tj ( bob.function = is_young) Tj T* (>) Tj (>) Tj (>) Tj ( bob = bob.go\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert bob.data is True) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 100.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When run, it saves its new data to Mongo and we can load its own data:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 69.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 544 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( new_cell_with_just_db_and_keys = db_cell\(db = people, name = 'bob', surname = 'brown'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert 'age' not in new_cell_with_just_db_and_keys ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (59) Tj T* ET
Q
Q
 
endstream
endobj
1030 0 obj
<<
/Length 6642
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( now_with_the_data_from_database = new_cell_with_just_db_and_keys.load\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert now_with_the_data_from_database.age == 25) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 657.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( people\(\)['name', 'surname', 'age', 'data'][::]) Tj T* (>) Tj (>) Tj (>) Tj (  dictable[3 x 4]) Tj T* (>) Tj (>) Tj (>) Tj ( _id                     |age|name |surname |data) Tj T* (>) Tj (>) Tj (>) Tj ( 601e732e0ef13bec9cd8a6cb|39 |james|johnson |None) Tj T* (>) Tj (>) Tj (>) Tj ( 601e73db0ef13bec9cd8a6d4|46 |anna |abramzon|None) Tj T* (>) Tj (>) Tj (>) Tj ( 601e73db0ef13bec9cd8a6d7|25 |bob  |brown   |True) Tj T* (>) Tj (>) Tj (>) Tj ( people\(\).raw.drop\(\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 643.4394 cm
Q
q
1 0 0 1 50.01575 625.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (go) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (go) Tj (=) Tj (1) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (mode) Tj (=) Tj (0) Tj /F2 10 Tf (, ) Tj /F1 10 Tf (**) Tj (kwargs) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 601.4394 cm
q
BT 1 0 0 1 0 14 Tm .424004 Tw 12 TL /F1 10 Tf 0 0 0 rg (calculates the cell \(if needed\). By default, will then run cell.save\(\) to save the cell. If you don\222t want to save the) Tj T* 0 Tw (output \(perhaps you want to check it first\), use cell._go\(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 595.4394 cm
Q
q
1 0 0 1 60.01575 580.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 564.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (go : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 513.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .663052 Tw (a parameter that forces calculation. The default is 0. go = 0: calculate cell only if cell.run\(\) is True go = 1:) Tj T* 0 Tw -0.011439 Tw (calculate THIS cell regardless. calculate the parents only if their cell.run\(\) is True go = 2: calculate THIS cell) Tj T* 0 Tw .576506 Tw (and PARENTS cell regardless, calculate grandparents if cell.run\(\) is True etc. go = -1: calculate the entire) Tj T* 0 Tw (tree again.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 497.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 1 0 0 rg (**) Tj 0 0 0 rg (kwargs : ) Tj /F4 10 Tf (parameters) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 482.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can actually allocate the variables to the function at runtime) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 458.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.126095 Tw (Note that by default, cell.go\(\) will default to go = 1 and force a calculation on cell while cell\(\) is lazy and will) Tj T* 0 Tw (default to assuming go = 0) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 452.4394 cm
Q
q
1 0 0 1 60.01575 437.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 421.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 406.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the cell, calculated) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 400.4394 cm
Q
q
1 0 0 1 60.01575 385.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (different values of go) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 306.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( f = lambda x=None,y=None: max\([dt\(x\), dt\(y\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = cell\(f\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = cell\(f, x = a\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = cell\(f, x = b\)\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = cell\(f, x = c\)\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 231.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( e = d.go\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( e0 = d.go\(0\)) Tj T* (>) Tj (>) Tj (>) Tj ( e1 = d.go\(1\)) Tj T* (>) Tj (>) Tj (>) Tj ( e2 = d.go\(2\)) Tj T* (>) Tj (>) Tj (>) Tj ( e_1 = d.go\(-1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 157.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 508 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert not d.run\(\) and e.data == d.data ) Tj T* (>) Tj (>) Tj (>) Tj ( assert e0.data == d.data ) Tj T* (>) Tj (>) Tj (>) Tj ( assert e1.data ) Tj (>) Tj ( d.data and e1.x.data == d.x.data) Tj T* (>) Tj (>) Tj (>) Tj ( assert e2.data ) Tj (>) Tj ( d.data and e2.x.data ) Tj (>) Tj ( d.x.data and e2.x.x.data == d.x.x.data) Tj T* (>) Tj (>) Tj (>) Tj ( assert e_1.data ) Tj (>) Tj ( d.data and e_1.x.data ) Tj (>) Tj ( d.x.data and e_1.x.x.data ) Tj (>) Tj ( d.x.x.data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 143.0394 cm
Q
q
1 0 0 1 60.01575 128.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adding parameters on the run) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 85.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda a, b: a+b\)) Tj T* (>) Tj (>) Tj (>) Tj ( d = c\(a = 1, b =2\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert d.data == 3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 71.23937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (60) Tj T* ET
Q
Q
 
endstream
endobj
1031 0 obj
<<
/Length 6983
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (load) Tj /F2 10 Tf ( \() Tj /F1 10 Tf (mode) Tj (=) Tj (0) Tj /F2 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (loads a document from the database and updates various keys.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 757.0394 cm
Q
q
1 0 0 1 60.01575 742.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 13.56937 0 Td (Persistency:) Tj T* -13.56937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 718.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.843373 Tw (Since we want to avoid hitting the database, there is a singleton GRAPH, a dict, storing the cells by their) Tj T* 0 Tw (address. Every time we load/save from/to Mongo, we also update GRAPH.) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 706.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We use the GRAPH often so if you want to FORCE the cell to go to the database when loading, use this:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 663.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cell.load\(-1\) ) Tj T* (>) Tj (>) Tj (>) Tj ( cell.load\(-1\).load\(0\)  # clear GRAPH and load from db) Tj T* (>) Tj (>) Tj (>) Tj ( cell.load\([0]\)     # same thing: clear GRAPH and then load if available) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 649.2394 cm
Q
q
1 0 0 1 60.01575 598.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F2 10 Tf 12 TL 31.36937 0 Td (Merge of) Tj T* -12.25 0 Td (cached cell) Tj T* 1.68 0 Td (and calling) Tj T* 32.23 0 Td (cell:) Tj T* -53.02937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 562.2394 cm
q
BT 1 0 0 1 0 26 Tm .395535 Tw 12 TL /F1 10 Tf 0 0 0 rg (Once we load from memory \(either MongoDB or GRAPH\), we tree_update the cached cell with the new values) Tj T* 0 Tw .14583 Tw (in the current cell. This means that it is next to impossible to actually ) Tj /F4 10 Tf (delete) Tj /F1 10 Tf ( keys. If you want to delete keys in a) Tj T* 0 Tw (cell/cells in the database, you need to:) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 543.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( del db.inc\(filters\)['key.subkey']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 60.01575 529.4394 cm
Q
q
1 0 0 1 60.01575 514.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 498.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (mode : ) Tj /F4 10 Tf (int , dataetime, optional) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 447.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .454732 Tw (if -1, then does not load and clears the GRAPH if 0, then will load from database if found. If not found, will) Tj T* 0 Tw .000705 Tw (return original document if 1, then will throw an exception if no document is found in the database if mode is) Tj T* 0 Tw (a date, will return the version alive at that date The default is 0.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (IF you enclose any of these in a list, then GRAPH is cleared prior to running and the database is called.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 441.4394 cm
Q
q
1 0 0 1 60.01575 426.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 414.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (document) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 408.4394 cm
Q
q
1 0 0 1 50.01575 390.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (save) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 378.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Saves the cell for persistency. Not implemented for simple cell. see db_cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 372.4394 cm
Q
q
1 0 0 1 60.01575 357.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 341.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (cell) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 326.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (self, saved.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 296.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (periodic_cell) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 284.0394 cm
Q
q
1 0 0 1 40.01575 254.0394 cm
q
BT 1 0 0 1 0 14 Tm 4.876819 Tw 12 TL /F4 10 Tf 0 0 0 rg (class ) Tj /F5 10 Tf (pyg.mongo._periodic_cell.) Tj /F6 10 Tf (periodic_cell) Tj /F1 10 Tf ( \() Tj (function) Tj (=) Tj (None) Tj (, output) Tj (=) Tj (None) Tj (, db) Tj (=) Tj (None) Tj (, period) Tj (=) Tj ('1b') Tj (,) Tj T* 0 Tw (updated) Tj (=) Tj (None) Tj (, **) Tj (kwargs) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 230.0394 cm
q
BT 1 0 0 1 0 14 Tm 2.505256 Tw 12 TL /F1 10 Tf 0 0 0 rg (periodic_cell inherits from db_cell its ability to save itself in MongoDb using its db members Its calculation) Tj T* 0 Tw (schedule depends on when it was last updated.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 224.0394 cm
Q
q
1 0 0 1 50.01575 209.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 178.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( c = periodic_cell\(lambda a: a + 1, a = 0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 158.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We now assert it needs to be calculated and calculate it\205) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 103.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert c.run\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = c.go\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.data == 1) Tj T* (>) Tj (>) Tj (>) Tj ( assert not c.run\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 83.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now let us cheat and tell it, it was last run 3 days ago\205) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (61) Tj T* ET
Q
Q
 
endstream
endobj
1032 0 obj
<<
/Length 7757
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c.updated = dt\(-3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.run\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 724.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (run) Tj /F2 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 700.2394 cm
q
BT 1 0 0 1 0 14 Tm -0.053138 Tw 12 TL /F1 10 Tf 0 0 0 rg (checks if the cell needs calculation. This depends on the nature of the cell. By default \(for cell and db_cell\), if the) Tj T* 0 Tw (cell is already calculated so that cell._output exists, then returns False. otherwise True) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 684.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (bool) Tj T* ET
Q
Q
q
1 0 0 1 60.01575 669.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (run cell?) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 663.2394 cm
Q
q
1 0 0 1 60.01575 648.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 60.01575 593.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 494.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c = cell\(lambda x: x+1, x = 1\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.run\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = c\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert c.data == 2 and not c.run\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 563.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (get_cell) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 532.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (db_save) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 520.6394 cm
Q
q
1 0 0 1 40.01575 508.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.mongo._db_cell.) Tj /F6 10 Tf (db_save) Tj /F1 10 Tf ( \() Tj (value) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 496.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (saves a db_cell from the database. Will iterates through lists and dicts) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 490.6394 cm
Q
q
1 0 0 1 50.01575 475.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 459.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (value: obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 444.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (db_cell \(or list/dict of\) to be loaded) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 438.6394 cm
Q
q
1 0 0 1 50.01575 423.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 356.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( db = partial\(mongo_table, table = 'test', db = 'test', pk = ['a','b']\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = db_cell\(add_, a = 2, b = 3, key = 'test', db = db\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = db_save\(c\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert get_cell\('test', 'test', a = 2, b = 3\).key == 'test') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 326.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (db_load) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 314.4394 cm
Q
q
1 0 0 1 40.01575 302.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.mongo._db_cell.) Tj /F6 10 Tf (db_load) Tj /F1 10 Tf ( \() Tj (value) Tj (, mode) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 290.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (loads a db_cell from the database. Iterates through lists and dicts) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 284.4394 cm
Q
q
1 0 0 1 50.01575 269.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 253.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (value: obj) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 238.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (db_cell \(or list/dict of\) to be loaded) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 222.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (mode: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 207.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (loading mode -1: dont load, +1: load and throw an exception if not found, 0: load if found) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 172.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 142.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.87245 Tw (Given pandas, why do we need this timeseries library? pandas is amazing but there are a few features in) Tj T* 0 Tw (pyg.timeseries designed to enhance it. There are three issues with pandas that pyg.timeseries tries to address:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 136.2394 cm
Q
q
1 0 0 1 40.01575 136.2394 cm
Q
q
1 0 0 1 40.01575 124.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas works on pandas objects \(obviously\) but not on numpy arrays.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 118.2394 cm
Q
q
1 0 0 1 40.01575 55.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 48 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (pandas handles TimeSeries with nan inconsistently across its functions. This makes your results) Tj T* (sensitive to reindexing/resampling. E.g.:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a.expanding\(\) & a.ewm\(\) ) Tj /F2 10 Tf (ignore) Tj /F1 10 Tf ( nan\222s for calculation and then ffill the result.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a.diff\(\), a.rolling\(\) ) Tj /F2 10 Tf (include) Tj /F1 10 Tf ( any nans in the calculation, leading to nan propagation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (62) Tj T* ET
Q
Q
 
endstream
endobj
1033 0 obj
<<
/Length 9247
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 751.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .414481 Tw (pandas is great if you have the full timeseries. However, if you now want to run the same calculations in a live) Tj T* 0 Tw 2.150215 Tw (environment, on recent data, pandas cannot help you: you have to stick the new data at the end of the) Tj T* 0 Tw (DataFrame and rerun.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 751.0394 cm
Q
q
1 0 0 1 40.01575 733.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries tries to address this:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 703.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.010994 Tw (pyg.timeseries agrees with pandas 100% on DataFrames \(with no nan\) while being of comparable \(if not faster\)) Tj T* 0 Tw (speed) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
Q
q
1 0 0 1 40.01575 685.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries works seemlessly on pandas objects and on numpy arrays, with no code change.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 679.0394 cm
Q
q
1 0 0 1 40.01575 655.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.450315 Tw (pyg.timeseries handles nan consistently across all its functions, \221ignoring\222 all nan, making your results) Tj T* 0 Tw (consistent regardless of resampling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 649.0394 cm
Q
q
1 0 0 1 40.01575 502.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 132 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 108 cm
q
BT 1 0 0 1 0 26 Tm 12 TL /F2 10 Tf 0 0 0 rg (pyg.timeseries exposes the state of the internal function calculation. The exposure of internal states) Tj T* (allows us to calculate the output of additional data without re-running history. This speeds up of two) Tj T* (very common problems in finance:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 98 Tm  T* ET
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 78 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .009006 Tw (risk calculations, Monte Carlo scenarios: We can run a trading strategy up to today and then generate) Tj T* 0 Tw (multiple scenarios and see what-if, without having to rerun the full history.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 62 Tm 1.346273 Tw 12 TL /F1 10 Tf 0 0 0 rg (live versus history: pandas is designed to run a full historical simulation. However, once we reach) Tj T* 0 Tw .859653 Tw (\223today\224, speed is of the essense and running a full historical simulation every time we ingest a new) Tj T* 0 Tw 1.056711 Tw (price, is just too slow. That is why most fast trading is built around fast state-machines. Of course,) Tj T* 0 Tw .477584 Tw (making sure research & live versions do the same thing is tricky. pyg gives you the ability to run two) Tj T* 0 Tw 1.017756 Tw (systems in parallel with almost the same code base: run full history overnight and then run today\222s) Tj T* 0 Tw (code base instantly, instantiated with the output of the historical simulation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 502.0394 cm
Q
q
1 0 0 1 40.01575 469.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (simple functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 438.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (diff) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 426.8394 cm
Q
q
1 0 0 1 40.01575 414.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (diff) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 402.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to a.diff\(n\) in pandas if there are no nans. If there are, we SKIP nans rather than propagate them.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 396.8394 cm
Q
q
1 0 0 1 50.01575 381.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 365.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array/timeseries) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 350.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (array/timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 334.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int, optional, default = 1) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 319.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (window size) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 303.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 288.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 272.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 257.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 251.8394 cm
Q
q
1 0 0 1 50.01575 236.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (: matching pandas no nan\222s) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 194.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(timer\(diff, 1000\)\(a\), timer\(lambda a, n=1: a.diff\(n\), 1000\)\(a\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 180.0394 cm
Q
q
1 0 0 1 50.01575 165.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (: nan skipping) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 122.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([1., np.nan, 3., 9.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(diff\(a\),                      np.array\([np.nan, np.nan, 2.0,   6.0]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(pd.Series\(a\).diff\(\).values,   np.array\([np.nan, np.nan, np.nan,6.0]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 91.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (shift) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 79.83937 cm
Q
q
1 0 0 1 40.01575 67.83937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (shift) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 55.83937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Equivalent to a.shift\(\) with support to arra) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (63) Tj T* ET
Q
Q
 
endstream
endobj
1034 0 obj
<<
/Length 7965
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 756.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 741.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 725.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 710.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 694.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 679.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 663.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 648.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 642.0394 cm
Q
q
1 0 0 1 50.01575 627.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 560.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\([1.,2,3,4,5], drange\(-4\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(shift\(a\), pd.Series\([np.nan,1,2,3,4], drange\(-4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(shift\(a,2\), pd.Series\([np.nan,np.nan,1,2,3], drange\(-4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(shift\(a,-1\), pd.Series\([2,3,4,5,np.nan], drange\(-4\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 546.2394 cm
Q
q
1 0 0 1 50.01575 531.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (np.ndarrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 512.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(shift\(a.values\), shift\(a\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 498.4394 cm
Q
q
1 0 0 1 50.01575 483.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan skipping) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 440.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = pd.Series\([1.,2,np.nan,3,4], drange\(-4\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(shift\(a\), pd.Series\([np.nan,1,np.nan, 2,3], drange\(-4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a.shift\(\), pd.Series\([np.nan,1,2,np.nan,3], drange\(-4\)\)\) # the location of the nan changes) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 426.6394 cm
Q
q
1 0 0 1 50.01575 411.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 344.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:3]) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[3:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = shift_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = shift\(new, **old_ts\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, shift\(a\).iloc[3:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 314.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ratio) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 302.4394 cm
Q
q
1 0 0 1 40.01575 290.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (ratio) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 278.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Equivalent to a.diff\(\) but in log-space..) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 272.4394 cm
Q
q
1 0 0 1 50.01575 257.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 241.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 226.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 210.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 195.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 179.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 164.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 148.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 133.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 127.4394 cm
Q
q
1 0 0 1 50.01575 112.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 57.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\([1.,2,3,4,5], drange\(-4\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ratio\(a\), pd.Series\([np.nan, 2, 1.5, 4/3,1.25], drange\(-4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ratio\(a,2\), pd.Series\([np.nan, np.nan, 3, 2, 5/3], drange\(-4\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (64) Tj T* ET
Q
Q
 
endstream
endobj
1035 0 obj
<<
/Length 8629
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_count) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 760.6394 cm
Q
q
1 0 0 1 40.01575 748.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_count) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a\) is equivalent to a.count\(\) \(though slightly slower) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 742.6394 cm
Q
q
1 0 0 1 50.01575 742.6394 cm
Q
q
1 0 0 1 50.01575 730.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (supports numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 724.6394 cm
Q
q
1 0 0 1 50.01575 712.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (skips nan) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 706.6394 cm
Q
q
1 0 0 1 50.01575 694.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 694.6394 cm
Q
q
1 0 0 1 50.01575 688.6394 cm
Q
q
1 0 0 1 50.01575 673.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas matching) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 618.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # create sample data:) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\); a[a) Tj (>) Tj (0] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert ts_count\(a\) == a.count\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 604.8394 cm
Q
q
1 0 0 1 50.01575 589.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 571.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ts_count\(a.values\) == ts_count\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 557.0394 cm
Q
q
1 0 0 1 50.01575 542.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 499.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = ts_count_\(a.iloc[:2000]\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = ts_count\(a.iloc[2000:], state = old.state\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert new == ts_count\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 468.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_sum) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 456.8394 cm
Q
q
1 0 0 1 40.01575 444.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_sum) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a\) is equivalent to a.sum\() Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 438.8394 cm
Q
q
1 0 0 1 50.01575 438.8394 cm
Q
q
1 0 0 1 50.01575 426.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (supports numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 420.8394 cm
Q
q
1 0 0 1 50.01575 408.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 402.8394 cm
Q
q
1 0 0 1 50.01575 390.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 390.8394 cm
Q
q
1 0 0 1 50.01575 384.8394 cm
Q
q
1 0 0 1 50.01575 369.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 353.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 338.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 322.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 307.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 291.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 276.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 260.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 245.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 239.8394 cm
Q
q
1 0 0 1 50.01575 224.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas matching) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 170.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # create sample data:) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\); a[a) Tj (>) Tj (0] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert ts_sum\(a\) == a.sum\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 156.0394 cm
Q
q
1 0 0 1 50.01575 141.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 122.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ts_sum\(a.values\) == ts_sum\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 108.2394 cm
Q
q
1 0 0 1 50.01575 93.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (65) Tj T* ET
Q
Q
 
endstream
endobj
1036 0 obj
<<
/Length 8523
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = ts_sum_\(a.iloc[:2000]\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = ts_sum\(a.iloc[2000:], vec = old.vec\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert new == ts_sum\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 713.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_mean) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 701.8394 cm
Q
q
1 0 0 1 40.01575 689.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_mean) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a\) is equivalent to a.mean\() Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 683.8394 cm
Q
q
1 0 0 1 50.01575 683.8394 cm
Q
q
1 0 0 1 50.01575 671.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (supports numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 665.8394 cm
Q
q
1 0 0 1 50.01575 653.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 647.8394 cm
Q
q
1 0 0 1 50.01575 635.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 629.8394 cm
Q
q
1 0 0 1 50.01575 617.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas is actually faster on count) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 617.8394 cm
Q
q
1 0 0 1 50.01575 611.8394 cm
Q
q
1 0 0 1 50.01575 596.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 580.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 565.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 549.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 534.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 518.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 503.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 487.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 472.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 466.8394 cm
Q
q
1 0 0 1 50.01575 451.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas matching) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 397.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # create sample data:) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\); a[a) Tj (>) Tj (0] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert ts_mean\(a\) == a.mean\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 383.0394 cm
Q
q
1 0 0 1 50.01575 368.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 349.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ts_mean\(a.values\) == ts_mean\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 335.2394 cm
Q
q
1 0 0 1 50.01575 320.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 277.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = ts_mean_\(a.iloc[:2000]\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = ts_mean\(a.iloc[2000:], vec = old.vec\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert new == ts_mean\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 247.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_rms) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 235.0394 cm
Q
q
1 0 0 1 40.01575 223.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_rms) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 211.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (ts_rms\(a\) is equivalent to \(a**2\).mean\(\)**0.5) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 205.0394 cm
Q
q
1 0 0 1 50.01575 190.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 174.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 159.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 143.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 128.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 112.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 97.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 81.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 66.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.03937 cm
Q
q
1 0 0 1 50.01575 60.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (66) Tj T* ET
Q
Q
 
endstream
endobj
1037 0 obj
<<
/Length 9164
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 769.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 751.0394 cm
Q
q
1 0 0 1 50.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 739.0394 cm
Q
q
1 0 0 1 50.01575 696.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # create sample data:) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\); a[a) Tj (>) Tj (0] = np.nan) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 682.2394 cm
Q
q
1 0 0 1 50.01575 667.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas matching) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 648.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert abs\(ts_std\(a\) - a.std\(\)\)) Tj (<) Tj (1e-13) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 634.4394 cm
Q
q
1 0 0 1 50.01575 619.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 600.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ts_std\(a.values\) == ts_std\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 586.6394 cm
Q
q
1 0 0 1 50.01575 571.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 528.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = ts_rms_\(a.iloc[:2000]\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = ts_rms\(a.iloc[2000:], vec = old.vec\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert new == ts_rms\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 498.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_std) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 486.4394 cm
Q
q
1 0 0 1 40.01575 474.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_std) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a\) is equivalent to a.std\() Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 468.4394 cm
Q
q
1 0 0 1 50.01575 468.4394 cm
Q
q
1 0 0 1 50.01575 456.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (supports numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 450.4394 cm
Q
q
1 0 0 1 50.01575 438.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 432.4394 cm
Q
q
1 0 0 1 50.01575 420.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 420.4394 cm
Q
q
1 0 0 1 50.01575 377.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # create sample data:) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\); a[a) Tj (>) Tj (0] = np.nan) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 363.6394 cm
Q
q
1 0 0 1 50.01575 348.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas matching) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 329.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert abs\(ts_std\(a\) - a.std\(\)\)) Tj (<) Tj (1e-13) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 315.8394 cm
Q
q
1 0 0 1 50.01575 300.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 282.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ts_std\(a.values\) == ts_std\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 268.0394 cm
Q
q
1 0 0 1 50.01575 253.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 210.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = ts_std_\(a.iloc[:2000]\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = ts_std\(a.iloc[2000:], vec = old.vec\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert new == ts_std\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 179.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_skew) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 167.8394 cm
Q
q
1 0 0 1 40.01575 155.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_skew) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a) Tj /F1 10 Tf (, ) Tj /F5 10 Tf (0\) is equivalent to a.skew\() Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 149.8394 cm
Q
q
1 0 0 1 50.01575 149.8394 cm
Q
q
1 0 0 1 50.01575 137.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (supports numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 131.8394 cm
Q
q
1 0 0 1 50.01575 119.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 113.8394 cm
Q
q
1 0 0 1 50.01575 101.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (faster than pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 95.83937 cm
Q
q
1 0 0 1 50.01575 83.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 83.83937 cm
Q
q
1 0 0 1 50.01575 77.83937 cm
Q
q
1 0 0 1 50.01575 62.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (67) Tj T* ET
Q
Q
 
endstream
endobj
1038 0 obj
<<
/Length 7555
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 744.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 729.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 713.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (min_sample: float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 662.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 38 Tm 1.113182 Tw 12 TL /F1 10 Tf 0 0 0 rg (This refers to the denominator when we calculate the skew. Over time, the deonimator converges to 1 but) Tj T* 0 Tw .696205 Tw (initially, it is small. Also, if there is a gap in the data, older datapoints weight may have decayed while there) Tj T* 0 Tw .50094 Tw (are not enough \223new point\224. min_sample ensures that in both cases, if denominator) Tj (<) Tj (0.25 \)\(default value\) we) Tj T* 0 Tw (return nan.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 646.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 631.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 615.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 600.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 594.0394 cm
Q
q
1 0 0 1 50.01575 579.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas matching) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 524.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # create sample data:) Tj T* (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\); a[a) Tj (>) Tj (0] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts_skew\(a, 0\) - a.skew\(\)\)) Tj (<) Tj (1e-13) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 510.2394 cm
Q
q
1 0 0 1 50.01575 495.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 476.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert ts_skew\(a.values\) == ts_skew\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 462.4394 cm
Q
q
1 0 0 1 50.01575 447.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 404.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = ts_skew_\(a.iloc[:2000]\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = ts_skew\(a.iloc[2000:], vec = old.vec\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert new == ts_skew\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 374.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_min) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 362.2394 cm
Q
q
1 0 0 1 40.01575 350.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_max) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a\) is equivalent to pandas a.min\() Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 319.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_max) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 307.8394 cm
Q
q
1 0 0 1 40.01575 295.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_max) Tj /F1 10 Tf ( \() Tj /F5 10 Tf (a\) is equivalent to pandas a.min\() Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 265.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ts_median) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 253.4394 cm
Q
q
1 0 0 1 40.01575 241.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_median) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 211.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (fnna) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 199.0394 cm
Q
q
1 0 0 1 40.01575 187.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (fnna) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, axis) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 175.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (returns the index in a of the nth first non-nan.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 169.0394 cm
Q
q
1 0 0 1 50.01575 154.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 142.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n: int, optional, default = 1) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 136.0394 cm
Q
q
1 0 0 1 50.01575 121.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 90.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([np.nan,np.nan,1,np.nan,np.nan,2,np.nan,np.nan,np.nan]\)) Tj T* (>) Tj (>) Tj (>) Tj ( fnna\(a,n=-2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 59.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (v2na/na2v) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (68) Tj T* ET
Q
Q
 
endstream
endobj
1039 0 obj
<<
/Length 7676
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 781.0394 cm
Q
q
1 0 0 1 40.01575 769.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (v2na) Tj /F1 10 Tf ( \() Tj (a) Tj (, old) Tj (=) Tj (0.0) Tj (, new) Tj (=) Tj (nan) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 757.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (replaces an old value with a new value \(default is nan\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 751.0394 cm
Q
q
1 0 0 1 50.01575 736.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 23.01937 0 Td (Examples:) Tj T* -23.01937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 669.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = np.array\([1., np.nan, 1., 0.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(v2na\(a\), np.array\([1., np.nan, 1., np.nan]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(v2na\(a,1\), np.array\([np.nan, np.nan, np.nan, 0]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(v2na\(a,1,0\), np.array\([0., np.nan, 0., 0.]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 655.2394 cm
Q
q
1 0 0 1 50.01575 640.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 628.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries old: float) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 622.2394 cm
Q
q
1 0 0 1 50.01575 610.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (value to be replaced) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 610.2394 cm
Q
q
1 0 0 1 50.01575 594.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (new : ) Tj /F4 10 Tf (float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 579.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (new value to be used, The default is np.nan.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 573.2394 cm
Q
q
1 0 0 1 50.01575 558.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 546.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (array/timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 540.2394 cm
Q
q
1 0 0 1 40.01575 528.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (na2v) Tj /F1 10 Tf ( \() Tj (a) Tj (, new) Tj (=) Tj (0.0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 516.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (replaces a nan with a new value) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 510.2394 cm
Q
q
1 0 0 1 50.01575 495.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 440.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = np.array\([1., np.nan, 1.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(na2v\(a\), np.array\([1., 0.0, 1.]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(na2v\(a,1\), np.array\([1., 1., 1.]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 426.4394 cm
Q
q
1 0 0 1 50.01575 411.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 399.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries new : float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 393.4394 cm
Q
q
1 0 0 1 50.01575 381.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (DESCRIPTION. The default is 0.0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 381.4394 cm
Q
q
1 0 0 1 50.01575 375.4394 cm
Q
q
1 0 0 1 50.01575 360.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 348.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (array/timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 318.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ffill/bfill) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 306.0394 cm
Q
q
1 0 0 1 40.01575 294.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (ffill) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (0) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 270.0394 cm
q
BT 1 0 0 1 0 14 Tm .235479 Tw 12 TL /F1 10 Tf 0 0 0 rg (returns a forward filled array, up to n values forward. supports state manegement which is needed if we want only) Tj T* 0 Tw (nth) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 264.0394 cm
Q
q
1 0 0 1 50.01575 249.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 233.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array/timeseries) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 218.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (array/timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 202.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int, optional, default = 1) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 187.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (window size) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 171.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 156.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 140.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 125.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 119.0394 cm
Q
q
1 0 0 1 50.01575 104.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 73.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([np.nan,np.nan,1,np.nan,np.nan,2,np.nan,np.nan,np.nan]\)) Tj T* (>) Tj (>) Tj (>) Tj ( fnna\(a, n=-2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 59.23937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (69) Tj T* ET
Q
Q
 
endstream
endobj
1040 0 obj
<<
/Length 8116
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (bfill) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (- 1) Tj (, axis) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to a.fillna\(\221bfill\222\). There is no state-aware as this function is forward looking) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 742.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 687.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = np.array\([np.nan, 1., np.nan]\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = np.array\([1., 1., np.nan]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(bfill\(a\),  b\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 673.2394 cm
Q
q
1 0 0 1 50.01575 658.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pd.Series) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 627.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ts = pd.Series\(a, drange\(-2\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(bfill\(ts\).values, b\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 597.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (nona) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 585.0394 cm
Q
q
1 0 0 1 40.01575 573.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (nona) Tj /F1 10 Tf ( \() Tj (a) Tj (, value) Tj (=) Tj (nan) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 561.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (removes rows that are entirely nan \(or a specific other value\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 555.0394 cm
Q
q
1 0 0 1 50.01575 540.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 528.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : dataframe/ndarray) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 512.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (value : ) Tj /F4 10 Tf (float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 497.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (value to be removed. The default is np.nan.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 491.0394 cm
Q
q
1 0 0 1 50.01575 476.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 433.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = np.array\([1,np.nan,2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(nona\(a\), np.array\([1,2,3]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 419.2394 cm
Q
q
1 0 0 1 50.01575 404.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multiple columns) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 361.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([[1,np.nan,2,np.nan], [np.nan, np.nan, np.nan, 3]]\).T ) Tj T* (>) Tj (>) Tj (>) Tj ( b = np.array\([[1,2,np.nan], [np.nan, np.nan, 3]]\).T ## 2nd row has nans across) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(nona\(a\), b\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 328.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (expanding window functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 298.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_mean) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 286.2394 cm
Q
q
1 0 0 1 40.01575 274.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_mean) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 262.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).mean\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 256.2394 cm
Q
q
1 0 0 1 50.01575 256.2394 cm
Q
q
1 0 0 1 50.01575 244.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 238.2394 cm
Q
q
1 0 0 1 50.01575 226.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 220.2394 cm
Q
q
1 0 0 1 50.01575 208.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 208.2394 cm
Q
q
1 0 0 1 50.01575 202.2394 cm
Q
q
1 0 0 1 50.01575 187.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 171.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 156.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 140.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 125.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 109.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 94.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 78.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 63.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 57.23937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (70) Tj T* ET
Q
Q
 
endstream
endobj
1041 0 obj
<<
/Length 7091
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 717.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).mean\(\); ts = expanding_mean\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 703.2394 cm
Q
q
1 0 0 1 50.01575 688.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 676.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 645.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).mean\(\); ts = expanding_mean\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 474.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-23  1.562960  1.562960) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24  0.908910  0.908910) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25  0.846817  0.846817) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26  0.821423  0.821423) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27  0.821423       NaN) Tj T* (>) Tj (>) Tj (>) Tj (              ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-03  0.870358  0.870358) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  0.870358       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  0.870358       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  0.870358       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  0.870353  0.870353) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 460.6394 cm
Q
q
1 0 0 1 50.01575 445.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 433.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 354.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_mean\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_mean_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_mean\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 340.8394 cm
Q
q
1 0 0 1 50.01575 325.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 295.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_mean\(dict\(x = a, y = a**2\)\), dict\(x = expanding_mean\(a\), y = expanding_mean\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_mean\([a,a**2]\), [expanding_mean\(a\), expanding_mean\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 264.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_rms) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 252.6394 cm
Q
q
1 0 0 1 40.01575 240.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_rms) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 216.6394 cm
q
BT 1 0 0 1 0 14 Tm -0.115422 Tw 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas \(a**2\).expanding\(\).mean\(\)**0.5\). - works with np.arrays - handles nan without forward filling. -) Tj T* 0 Tw (supports state parameters) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 210.6394 cm
Q
q
1 0 0 1 50.01575 195.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 179.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame, list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 164.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 148.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 133.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 117.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 102.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 86.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 71.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 65.63937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (71) Tj T* ET
Q
Q
 
endstream
endobj
1042 0 obj
<<
/Length 7561
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 717.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = \(a**2\).expanding\(\).mean\(\)**0.5; ts = expanding_rms\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 703.2394 cm
Q
q
1 0 0 1 50.01575 688.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 676.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 645.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = \(a**2\).expanding\(\).mean\(\)**0.5; ts = expanding_rms\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 474.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-23  0.160462  0.160462) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24  0.160462       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25  0.160462       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26  0.160462       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27  0.160462       NaN) Tj T* (>) Tj (>) Tj (>) Tj (                  ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-03  1.040346  1.040346) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  1.040346       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  1.040338  1.040338) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  1.040337  1.040337) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  1.040473  1.040473) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 460.6394 cm
Q
q
1 0 0 1 50.01575 445.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 433.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 354.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_rms\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_rms_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_rms\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 340.8394 cm
Q
q
1 0 0 1 50.01575 325.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 295.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_rms\(dict\(x = a, y = a**2\)\), dict\(x = expanding_rms\(a\), y = expanding_rms\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_rms\([a,a**2]\), [expanding_rms\(a\), expanding_rms\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 264.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_std) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 252.6394 cm
Q
q
1 0 0 1 40.01575 240.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_std) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 228.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).std\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 222.6394 cm
Q
q
1 0 0 1 50.01575 222.6394 cm
Q
q
1 0 0 1 50.01575 210.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 204.6394 cm
Q
q
1 0 0 1 50.01575 192.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 186.6394 cm
Q
q
1 0 0 1 50.01575 174.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 174.6394 cm
Q
q
1 0 0 1 50.01575 168.6394 cm
Q
q
1 0 0 1 50.01575 153.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 137.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 122.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 106.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 75.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 60.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (72) Tj T* ET
Q
Q
 
endstream
endobj
1043 0 obj
<<
/Length 7598
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 754.0394 cm
Q
q
1 0 0 1 50.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 684.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).std\(\); ts = expanding_std\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 670.2394 cm
Q
q
1 0 0 1 50.01575 655.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 643.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).std\(\); ts = expanding_std\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 441.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-23       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj (              ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-03  0.590448  0.590448) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  0.590448       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  0.590475  0.590475) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  0.590475       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  0.590411  0.590411) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 427.6394 cm
Q
q
1 0 0 1 50.01575 412.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 400.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 321.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_std\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_std_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_std\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 307.8394 cm
Q
q
1 0 0 1 50.01575 292.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 262.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_std\(dict\(x = a, y = a**2\)\), dict\(x = expanding_std\(a\), y = expanding_std\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_std\([a,a**2]\), [expanding_std\(a\), expanding_std\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 231.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_sum) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 219.6394 cm
Q
q
1 0 0 1 40.01575 207.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_sum) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 195.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).sum\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 189.6394 cm
Q
q
1 0 0 1 50.01575 189.6394 cm
Q
q
1 0 0 1 50.01575 177.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 171.6394 cm
Q
q
1 0 0 1 50.01575 159.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 153.6394 cm
Q
q
1 0 0 1 50.01575 141.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 141.6394 cm
Q
q
1 0 0 1 50.01575 135.6394 cm
Q
q
1 0 0 1 50.01575 120.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 104.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 89.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 73.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 58.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (73) Tj T* ET
Q
Q
 
endstream
endobj
1044 0 obj
<<
/Length 7753
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 744.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 729.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 723.0394 cm
Q
q
1 0 0 1 50.01575 708.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 653.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).sum\(\); ts = expanding_sum\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 639.2394 cm
Q
q
1 0 0 1 50.01575 624.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 612.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 581.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).sum\(\); ts = expanding_sum\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 410.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-23          NaN          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24          NaN          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25     0.645944     0.645944) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26     2.816321     2.816321) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27     2.816321          NaN) Tj T* (>) Tj (>) Tj (>) Tj (                 ...          ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-03  3976.911348  3976.911348) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  3976.911348          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  3976.911348          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  3976.911348          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  3976.911348          NaN) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 396.6394 cm
Q
q
1 0 0 1 50.01575 381.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 369.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 290.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_sum\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_sum_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_sum\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 276.8394 cm
Q
q
1 0 0 1 50.01575 261.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 231.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_sum\(dict\(x = a, y = a**2\)\), dict\(x = expanding_sum\(a\), y = expanding_sum\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_sum\([a,a**2]\), [expanding_sum\(a\), expanding_sum\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 200.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_skew) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 188.6394 cm
Q
q
1 0 0 1 40.01575 176.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_skew) Tj /F1 10 Tf ( \() Tj (a) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 164.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).skew\(\) which doesn\222t exist) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 158.6394 cm
Q
q
1 0 0 1 50.01575 158.6394 cm
Q
q
1 0 0 1 50.01575 146.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 140.6394 cm
Q
q
1 0 0 1 50.01575 128.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 122.6394 cm
Q
q
1 0 0 1 50.01575 110.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 110.6394 cm
Q
q
1 0 0 1 50.01575 104.6394 cm
Q
q
1 0 0 1 50.01575 89.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 73.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 58.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (74) Tj T* ET
Q
Q
 
endstream
endobj
1045 0 obj
<<
/Length 8473
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 744.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 729.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 713.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 698.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 692.0394 cm
Q
q
1 0 0 1 50.01575 677.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 665.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 634.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 547.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_skew\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_skew_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_skew\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 533.4394 cm
Q
q
1 0 0 1 50.01575 518.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 487.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_skew\(dict\(x = a, y = a**2\)\), dict\(x = expanding_skew\(a\), y = expanding_skew\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_skew\([a,a**2]\), [expanding_skew\(a\), expanding_skew\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 457.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_min) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 445.2394 cm
Q
q
1 0 0 1 40.01575 433.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._min.) Tj /F6 10 Tf (expanding_min) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 421.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).min\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 415.2394 cm
Q
q
1 0 0 1 50.01575 415.2394 cm
Q
q
1 0 0 1 50.01575 403.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 397.2394 cm
Q
q
1 0 0 1 50.01575 385.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 379.2394 cm
Q
q
1 0 0 1 50.01575 367.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 367.2394 cm
Q
q
1 0 0 1 50.01575 361.2394 cm
Q
q
1 0 0 1 50.01575 346.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 330.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 315.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 299.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 284.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 268.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 253.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 237.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 222.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 216.2394 cm
Q
q
1 0 0 1 50.01575 201.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 146.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).min\(\); ts = expanding_min\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 132.4394 cm
Q
q
1 0 0 1 50.01575 117.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 105.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 74.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).min\(\); ts = expanding_min\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (75) Tj T* ET
Q
Q
 
endstream
endobj
1046 0 obj
<<
/Length 7628
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 624.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26  0.775176  0.775176) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27  0.691942  0.691942) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-28  0.691942       NaN) Tj T* (>) Tj (>) Tj (>) Tj (              ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  0.100099  0.100099) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  0.100099       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  0.100099       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  0.100099  0.100099) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-08  0.100099  0.100099) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 610.2394 cm
Q
q
1 0 0 1 50.01575 595.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 583.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 504.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_min\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_min_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_min\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 490.4394 cm
Q
q
1 0 0 1 50.01575 475.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 444.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_min\(dict\(x = a, y = a**2\)\), dict\(x = expanding_min\(a\), y = expanding_min\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_min\([a,a**2]\), [expanding_min\(a\), expanding_min\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 414.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_max) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 402.2394 cm
Q
q
1 0 0 1 40.01575 390.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._max.) Tj /F6 10 Tf (expanding_max) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 378.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).max\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 372.2394 cm
Q
q
1 0 0 1 50.01575 372.2394 cm
Q
q
1 0 0 1 50.01575 360.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 354.2394 cm
Q
q
1 0 0 1 50.01575 342.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 336.2394 cm
Q
q
1 0 0 1 50.01575 324.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 324.2394 cm
Q
q
1 0 0 1 50.01575 318.2394 cm
Q
q
1 0 0 1 50.01575 303.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 287.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 272.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 256.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 241.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 225.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 210.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 194.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 179.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 173.2394 cm
Q
q
1 0 0 1 50.01575 158.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 103.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).max\(\); ts = expanding_max\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 89.43937 cm
Q
q
1 0 0 1 50.01575 74.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 62.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (76) Tj T* ET
Q
Q
 
endstream
endobj
1047 0 obj
<<
/Length 7197
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).max\(\); ts = expanding_max\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 585.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26  0.875409  0.875409) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27  0.875409       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-28  0.875409       NaN) Tj T* (>) Tj (>) Tj (>) Tj (              ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  3.625858  3.625858) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  3.625858       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  3.625858  3.625858) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  3.625858       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-08  3.625858       NaN) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 571.4394 cm
Q
q
1 0 0 1 50.01575 556.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 544.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 465.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_max\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_max_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_max\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 451.6394 cm
Q
q
1 0 0 1 50.01575 436.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 405.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_max\(dict\(x = a, y = a**2\)\), dict\(x = expanding_max\(a\), y = expanding_max\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_max\([a,a**2]\), [expanding_max\(a\), expanding_max\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 375.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_median) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 363.4394 cm
Q
q
1 0 0 1 40.01575 351.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._median.) Tj /F6 10 Tf (expanding_median) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 339.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).median\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 333.4394 cm
Q
q
1 0 0 1 50.01575 333.4394 cm
Q
q
1 0 0 1 50.01575 321.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 315.4394 cm
Q
q
1 0 0 1 50.01575 303.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 297.4394 cm
Q
q
1 0 0 1 50.01575 285.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There is no state-aware version since this requires essentially the whole history to be stored.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 285.4394 cm
Q
q
1 0 0 1 50.01575 279.4394 cm
Q
q
1 0 0 1 50.01575 264.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 248.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 233.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 217.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 202.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 196.4394 cm
Q
q
1 0 0 1 50.01575 181.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 126.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).median\(\); ts = expanding_median\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 112.6394 cm
Q
q
1 0 0 1 50.01575 97.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 85.63937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (77) Tj T* ET
Q
Q
 
endstream
endobj
1048 0 obj
<<
/Length 7319
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).median\(\); ts = expanding_median\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 585.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-23  1.562960  1.562960) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24  0.908910  0.908910) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25  0.846817  0.846817) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26  0.821423  0.821423) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27  0.821423       NaN) Tj T* (>) Tj (>) Tj (>) Tj (              ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-03  0.870358  0.870358) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  0.870358       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  0.870358       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  0.870358       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  0.870353  0.870353) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 571.4394 cm
Q
q
1 0 0 1 50.01575 556.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 525.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 682 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_median\(dict\(x = a, y = a**2\)\), dict\(x = expanding_median\(a\), y = expanding_median\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_median\([a,a**2]\), [expanding_median\(a\), expanding_median\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 495.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding_rank) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 483.2394 cm
Q
q
1 0 0 1 40.01575 471.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rank.) Tj /F6 10 Tf (expanding_rank) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 447.2394 cm
q
BT 1 0 0 1 0 14 Tm -0.073304 Tw 12 TL /F1 10 Tf 0 0 0 rg (returns a rank of the current value within history, scaled to be -1 if it is the smallest and +1 if it is the largest - works) Tj T* 0 Tw (on mumpy arrays too - skips nan, no ffill) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 441.2394 cm
Q
q
1 0 0 1 50.01575 426.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 410.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 395.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 379.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 364.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 358.2394 cm
Q
q
1 0 0 1 50.01575 343.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 252.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\([1.,2., np.nan, 0.,4.,2.], drange\(-5\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( rank = expanding_rank\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rank, pd.Series\([0, 1, np.nan, -1, 1, 0.25], drange\(-5\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( #) Tj T* (>) Tj (>) Tj (>) Tj ( # 2 is largest in [1,2] so goes to 1; ) Tj T* (>) Tj (>) Tj (>) Tj ( # 0 is smallest in [1,2,0] so goes to -1 etc.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 238.4394 cm
Q
q
1 0 0 1 50.01575 223.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy equivalent) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 204.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_rank\(a.values\), expanding_rank\(a\).values\)  ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 174.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cumsum) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 162.2394 cm
Q
q
1 0 0 1 40.01575 150.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (cumsum) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 138.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.expanding\(\).sum\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 132.2394 cm
Q
q
1 0 0 1 50.01575 132.2394 cm
Q
q
1 0 0 1 50.01575 120.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 114.2394 cm
Q
q
1 0 0 1 50.01575 102.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 96.23937 cm
Q
q
1 0 0 1 50.01575 84.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 84.23937 cm
Q
q
1 0 0 1 50.01575 78.23937 cm
Q
q
1 0 0 1 50.01575 63.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (78) Tj T* ET
Q
Q
 
endstream
endobj
1049 0 obj
<<
/Length 7498
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 744.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 729.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 713.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 698.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 682.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 667.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 661.0394 cm
Q
q
1 0 0 1 50.01575 646.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 591.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).sum\(\); ts = expanding_sum\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts,panda\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 577.2394 cm
Q
q
1 0 0 1 50.01575 562.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 550.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 519.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.expanding\(\).sum\(\); ts = expanding_sum\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 348.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                    0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-23          NaN          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24          NaN          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25     0.645944     0.645944) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26     2.816321     2.816321) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27     2.816321          NaN) Tj T* (>) Tj (>) Tj (>) Tj (                 ...          ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-03  3976.911348  3976.911348) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04  3976.911348          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  3976.911348          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06  3976.911348          NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  3976.911348          NaN) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 334.6394 cm
Q
q
1 0 0 1 50.01575 319.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 307.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 228.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = expanding_sum\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = expanding_sum_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = expanding_sum\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 214.8394 cm
Q
q
1 0 0 1 50.01575 199.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 169.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_sum\(dict\(x = a, y = a**2\)\), dict\(x = expanding_sum\(a\), y = expanding_sum\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(expanding_sum\([a,a**2]\), [expanding_sum\(a\), expanding_sum\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 138.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cumprod) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 126.6394 cm
Q
q
1 0 0 1 40.01575 114.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (cumprod) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 102.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas np.exp\(np.log\(a\).expanding\(\).sum\(\)\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 96.63937 cm
Q
q
1 0 0 1 50.01575 96.63937 cm
Q
q
1 0 0 1 50.01575 84.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 78.63937 cm
Q
q
1 0 0 1 50.01575 66.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.63937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (79) Tj T* ET
Q
Q
 
endstream
endobj
1050 0 obj
<<
/Length 7119
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 775.0394 cm
Q
q
1 0 0 1 50.01575 769.0394 cm
Q
q
1 0 0 1 50.01575 754.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 738.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 723.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 707.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 692.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 676.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 661.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 645.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 630.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 624.0394 cm
Q
q
1 0 0 1 50.01575 609.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 554.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = 1 + pd.Series\(np.random.normal\(0.001,0.05,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = np.exp\(np.log\(a\).expanding\(\).sum\(\)\); ts = cumprod\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\) ) Tj (<) Tj ( 1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 540.2394 cm
Q
q
1 0 0 1 50.01575 525.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 513.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unlike pandas, timeseries does not forward fill the nans.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 470.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = 1 + pd.Series\(np.random.normal\(-0.01,0.05,100\), drange\(-99, 2020\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.975] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = np.exp\(np.log\(a\).expanding\(\).sum\(\)\); ts = cumprod\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 311.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 150 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([panda,ts], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-09-24  1.037161  1.037161) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-09-25  1.050378  1.050378) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-09-26  1.158734  1.158734) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-09-27  1.158734       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-09-28  1.219402  1.219402) Tj T* (>) Tj (>) Tj (>) Tj (              ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-12-28  4.032919  4.032919) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-12-29  4.032919       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-12-30  4.180120  4.180120) Tj T* (>) Tj (>) Tj (>) Tj ( 2019-12-31  4.180120       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 2020-01-01  4.244261  4.244261) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 297.6394 cm
Q
q
1 0 0 1 50.01575 282.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 270.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 191.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:50]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[50:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = cumprod\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = cumprod_\(old\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = cumprod\(new, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[50:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 177.8394 cm
Q
q
1 0 0 1 50.01575 162.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 132.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 520 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(cumprod\(dict\(x = a, y = a**2\)\), dict\(x = cumprod\(a\), y = cumprod\(a**2\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(cumprod\([a,a**2]\), [cumprod\(a\), cumprod\(a**2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 99.23937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (rolling window functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 68.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_mean) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 56.83937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (80) Tj T* ET
Q
Q
 
endstream
endobj
1051 0 obj
<<
/Length 8624
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_mean) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).mean\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 745.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 739.0394 cm
Q
q
1 0 0 1 50.01575 727.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 721.0394 cm
Q
q
1 0 0 1 50.01575 709.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 709.0394 cm
Q
q
1 0 0 1 50.01575 703.0394 cm
Q
q
1 0 0 1 50.01575 688.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 672.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 657.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 641.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 626.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 610.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (time: a sequence of rising values of time) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 595.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 579.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 564.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 548.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 533.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 517.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 502.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 496.0394 cm
Q
q
1 0 0 1 50.01575 481.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 426.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).mean\(\); ts = rolling_mean\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 412.2394 cm
Q
q
1 0 0 1 50.01575 397.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 361.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw .091894 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return 99%) Tj T* 0 Tw (of nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 306.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).mean\(\); ts = rolling_mean\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 6 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 292.4394 cm
Q
q
1 0 0 1 50.01575 277.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 265.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 186.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_mean\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_mean_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_mean\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 172.6394 cm
Q
q
1 0 0 1 50.01575 157.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 126.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_mean\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_mean\(a,10\), y = rolling_mean\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_mean\([a,a**2],10\), [rolling_mean\(a,10\), rolling_mean\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 112.8394 cm
Q
q
1 0 0 1 50.01575 97.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 67.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([1.,2.,3.,4.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( time = np.array\([0,0,1,1]\) ## i.e. the first two observations are from day 0 and the next two are from day 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (81) Tj T* ET
Q
Q
 
endstream
endobj
1052 0 obj
<<
/Length 8127
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( rolling_mean\(a,2,time\)) Tj T* (>) Tj (>) Tj (>) Tj ( array\([nan, nan, 2.5, 3. ]\)  ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 712.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .458874 Tw (## The first two observations are from day 0 so cannot have a mean until we get a second point ## The mean is) Tj T* 0 Tw 1.137338 Tw (then calculated from last observation in day 0 \(i.e. 2\) and then 3. and then with 4. since these are again, from) Tj T* 0 Tw (same day) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 681.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_rms) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 669.8394 cm
Q
q
1 0 0 1 40.01575 657.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_rms) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 645.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas \(a**2\).rolling\(n\).mean\(\)**0.5.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 639.8394 cm
Q
q
1 0 0 1 50.01575 639.8394 cm
Q
q
1 0 0 1 50.01575 627.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 621.8394 cm
Q
q
1 0 0 1 50.01575 609.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 603.8394 cm
Q
q
1 0 0 1 50.01575 591.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 591.8394 cm
Q
q
1 0 0 1 50.01575 585.8394 cm
Q
q
1 0 0 1 50.01575 570.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 554.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 539.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 523.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 508.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 492.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (time: a sequence of rising values of time) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 477.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 461.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 446.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 430.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 415.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 399.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 384.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 378.8394 cm
Q
q
1 0 0 1 50.01575 363.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 309.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = \(a**2\).rolling\(10\).mean\(\)**0.5; ts = rolling_rms\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 295.0394 cm
Q
q
1 0 0 1 50.01575 280.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 244.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw .091894 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return 99%) Tj T* 0 Tw (of nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 189.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = \(a**2\).rolling\(10\).mean\(\)**0.5; ts = rolling_rms\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 6 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 175.2394 cm
Q
q
1 0 0 1 50.01575 160.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 148.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 69.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_rms\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_rms_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_rms\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 55.43937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (82) Tj T* ET
Q
Q
 
endstream
endobj
1053 0 obj
<<
/Length 8772
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 741.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_rms\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_rms\(a,10\), y = rolling_rms\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_rms\([a,a**2],10\), [rolling_rms\(a,10\), rolling_rms\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 727.2394 cm
Q
q
1 0 0 1 50.01575 712.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 657.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([1.,2.,3.,4.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( time = np.array\([0,0,1,1]\) ## i.e. the first two observations are from day 0 and the next two are from day 1) Tj T* (>) Tj (>) Tj (>) Tj ( \(rolling_rms\(a,2,time\) ** 2\) * 2) Tj T* (>) Tj (>) Tj (>) Tj ( array\([nan, nan, 13., 20.]\)   == array\([nan, nan, 4 + 9, 4 + 16]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 625.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.138996 Tw (## The first two observations are from day 0 so cannot have a mean until we get a second point ## The rms is then) Tj T* 0 Tw (calculated from last observation in day 0 \(i.e. 2\) and then 3. and then with 4. since these are again, from same day) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_std) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 583.0394 cm
Q
q
1 0 0 1 40.01575 571.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_std) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 559.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).std\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 553.0394 cm
Q
q
1 0 0 1 50.01575 553.0394 cm
Q
q
1 0 0 1 50.01575 541.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 535.0394 cm
Q
q
1 0 0 1 50.01575 523.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 517.0394 cm
Q
q
1 0 0 1 50.01575 505.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 505.0394 cm
Q
q
1 0 0 1 50.01575 499.0394 cm
Q
q
1 0 0 1 50.01575 484.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 468.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 453.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 437.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 422.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 406.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (time: a sequence of rising values of time) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 391.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 375.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 360.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 344.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 329.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 313.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 298.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 292.0394 cm
Q
q
1 0 0 1 50.01575 277.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 222.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).std\(\); ts = rolling_std\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 208.2394 cm
Q
q
1 0 0 1 50.01575 193.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 157.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw 1.437888 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return) Tj T* 0 Tw (99.9% nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 102.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).std\(\); ts = rolling_std\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 2 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 88.43937 cm
Q
q
1 0 0 1 50.01575 73.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 61.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (83) Tj T* ET
Q
Q
 
endstream
endobj
1054 0 obj
<<
/Length 7915
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_std\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_std_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_std\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 694.2394 cm
Q
q
1 0 0 1 50.01575 679.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 648.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_std\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_std\(a,10\), y = rolling_std\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_std\([a,a**2],10\), [rolling_std\(a,10\), rolling_std\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 634.4394 cm
Q
q
1 0 0 1 50.01575 619.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 564.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([1.,2.,3.,4.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( time = np.array\([0,0,1,1]\) ## i.e. the first two observations are from day 0 and the next two are from day 1) Tj T* (>) Tj (>) Tj (>) Tj ( 2*\(rolling_std\(a,2,time\) ** 2\)) Tj T* (>) Tj (>) Tj (>) Tj ( array\([nan, nan, 1., 4.]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 520.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .724961 Tw (## The first two observations are from day 0 so cannot have a mean until we get a second point ## The sum is) Tj T* 0 Tw 1.137338 Tw (then calculated from last observation in day 0 \(i.e. 2\) and then 3. and then with 4. since these are again, from) Tj T* 0 Tw (same day) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 490.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_sum) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 478.2394 cm
Q
q
1 0 0 1 40.01575 466.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_sum) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 454.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).sum\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 448.2394 cm
Q
q
1 0 0 1 50.01575 448.2394 cm
Q
q
1 0 0 1 50.01575 436.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 430.2394 cm
Q
q
1 0 0 1 50.01575 418.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 412.2394 cm
Q
q
1 0 0 1 50.01575 400.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 400.2394 cm
Q
q
1 0 0 1 50.01575 394.2394 cm
Q
q
1 0 0 1 50.01575 379.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 363.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 348.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 332.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 317.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 301.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (time: a sequence of rising values of time) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 286.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 270.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 255.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 239.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 224.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 208.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 193.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 187.2394 cm
Q
q
1 0 0 1 50.01575 172.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 117.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).sum\(\); ts = rolling_sum\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 103.4394 cm
Q
q
1 0 0 1 50.01575 88.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (84) Tj T* ET
Q
Q
 
endstream
endobj
1055 0 obj
<<
/Length 8169
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 751.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw 1.437888 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return) Tj T* 0 Tw (99.9% nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 696.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).sum\(\); ts = rolling_sum\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 2 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 682.2394 cm
Q
q
1 0 0 1 50.01575 667.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 655.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 576.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_sum\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_sum_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_sum\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 562.4394 cm
Q
q
1 0 0 1 50.01575 547.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 516.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_sum\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_sum\(a,10\), y = rolling_sum\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_sum\([a,a**2],10\), [rolling_sum\(a,10\), rolling_sum\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 502.6394 cm
Q
q
1 0 0 1 50.01575 487.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 432.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.array\([1.,2.,3.,4.]\)) Tj T* (>) Tj (>) Tj (>) Tj ( time = np.array\([0,0,1,1]\) ## i.e. the first two observations are from day 0 and the next two are from day 1) Tj T* (>) Tj (>) Tj (>) Tj ( rolling_sum\(a,2,time\) ) Tj T* (>) Tj (>) Tj (>) Tj ( array\([nan, nan, 5., 6.]\)   == array\([nan, nan, 2+3, 2+4]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 388.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .724961 Tw (## The first two observations are from day 0 so cannot have a mean until we get a second point ## The sum is) Tj T* 0 Tw 1.137338 Tw (then calculated from last observation in day 0 \(i.e. 2\) and then 3. and then with 4. since these are again, from) Tj T* 0 Tw (same day) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 358.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_skew) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 346.4394 cm
Q
q
1 0 0 1 40.01575 334.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_skew) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, bias) Tj (=) Tj (False) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 322.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).skew\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 316.4394 cm
Q
q
1 0 0 1 50.01575 316.4394 cm
Q
q
1 0 0 1 50.01575 304.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 298.4394 cm
Q
q
1 0 0 1 50.01575 286.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 280.4394 cm
Q
q
1 0 0 1 50.01575 268.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 268.4394 cm
Q
q
1 0 0 1 50.01575 262.4394 cm
Q
q
1 0 0 1 50.01575 247.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 231.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 216.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 200.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 185.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 169.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (time: a sequence of rising values of time) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 154.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (passage of time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 138.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (bias:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 123.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (affects the skew calculation definition, see scipy documentation for details.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 107.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 92.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 76.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 61.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (85) Tj T* ET
Q
Q
 
endstream
endobj
1056 0 obj
<<
/Length 8522
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 754.0394 cm
Q
q
1 0 0 1 50.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 684.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).skew\(\); ts = rolling_skew\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 670.2394 cm
Q
q
1 0 0 1 50.01575 655.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 619.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw 1.437888 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return) Tj T* 0 Tw (99.9% nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 564.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).skew\(\); ts = rolling_skew\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 2 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 550.4394 cm
Q
q
1 0 0 1 50.01575 535.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 523.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 444.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_skew\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_skew_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_skew\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 430.6394 cm
Q
q
1 0 0 1 50.01575 415.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 384.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_skew\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_skew\(a,10\), y = rolling_skew\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_skew\([a,a**2],10\), [rolling_skew\(a,10\), rolling_skew\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 354.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_min) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 342.4394 cm
Q
q
1 0 0 1 40.01575 330.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._min.) Tj /F6 10 Tf (rolling_min) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 318.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).min\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 312.4394 cm
Q
q
1 0 0 1 50.01575 312.4394 cm
Q
q
1 0 0 1 50.01575 300.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 294.4394 cm
Q
q
1 0 0 1 50.01575 282.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 276.4394 cm
Q
q
1 0 0 1 50.01575 264.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 264.4394 cm
Q
q
1 0 0 1 50.01575 258.4394 cm
Q
q
1 0 0 1 50.01575 243.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 227.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 212.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 196.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 181.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 165.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 150.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 134.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 119.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 103.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 88.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 82.43937 cm
Q
q
1 0 0 1 50.01575 67.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (86) Tj T* ET
Q
Q
 
endstream
endobj
1057 0 obj
<<
/Length 8319
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 732.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).min\(\); ts = rolling_min\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).min\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 718.2394 cm
Q
q
1 0 0 1 50.01575 703.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 667.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw .091894 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return 99%) Tj T* 0 Tw (of nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).min\(\); ts = rolling_min\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 6 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 598.4394 cm
Q
q
1 0 0 1 50.01575 583.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 571.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 492.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_min\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_min_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_min\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 478.6394 cm
Q
q
1 0 0 1 50.01575 463.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 432.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_min\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_min\(a,10\), y = rolling_min\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_min\([a,a**2],10\), [rolling_min\(a,10\), rolling_min\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 402.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_max) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 390.4394 cm
Q
q
1 0 0 1 40.01575 378.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._max.) Tj /F6 10 Tf (rolling_max) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 366.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).max\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 360.4394 cm
Q
q
1 0 0 1 50.01575 360.4394 cm
Q
q
1 0 0 1 50.01575 348.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 342.4394 cm
Q
q
1 0 0 1 50.01575 330.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 324.4394 cm
Q
q
1 0 0 1 50.01575 312.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 312.4394 cm
Q
q
1 0 0 1 50.01575 306.4394 cm
Q
q
1 0 0 1 50.01575 291.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 275.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 260.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 244.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 229.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 213.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 198.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 182.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 167.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 151.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 136.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 130.4394 cm
Q
q
1 0 0 1 50.01575 115.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).max\(\); ts = rolling_max\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (87) Tj T* ET
Q
Q
 
endstream
endobj
1058 0 obj
<<
/Length 8503
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 781.0394 cm
Q
q
1 0 0 1 50.01575 766.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 730.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw .091894 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return 99%) Tj T* 0 Tw (of nans) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 675.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).max\(\); ts = rolling_max\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (>) Tj (>) Tj (>) Tj ( #original: 4534 timeseries: 4525 panda: 6 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 661.2394 cm
Q
q
1 0 0 1 50.01575 646.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 634.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 555.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_max\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_max_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_max\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 541.4394 cm
Q
q
1 0 0 1 50.01575 526.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 495.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 646 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_max\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_max\(a,10\), y = rolling_max\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_max\([a,a**2],10\), [rolling_max\(a,10\), rolling_max\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 465.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_median) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 453.2394 cm
Q
q
1 0 0 1 40.01575 441.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._median.) Tj /F6 10 Tf (rolling_median) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 429.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to pandas a.rolling\(n\).median\(\).) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 423.2394 cm
Q
q
1 0 0 1 50.01575 423.2394 cm
Q
q
1 0 0 1 50.01575 411.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (works with np.arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 405.2394 cm
Q
q
1 0 0 1 50.01575 393.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (handles nan without forward filling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 387.2394 cm
Q
q
1 0 0 1 50.01575 375.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports state parameters) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 375.2394 cm
Q
q
1 0 0 1 50.01575 369.2394 cm
Q
q
1 0 0 1 50.01575 354.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 338.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 323.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 307.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 292.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (size of rolling window) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 276.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 261.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 245.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 230.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 214.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 199.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 193.2394 cm
Q
q
1 0 0 1 50.01575 178.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (agreement with pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 123.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).median\(\); ts = rolling_median\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-panda\).max\(\)) Tj (<) Tj (1e-10   ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 109.4394 cm
Q
q
1 0 0 1 50.01575 94.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 58.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622594 Tw (Unlike pandas, timeseries does not include the nans in the rolling calculation: it skips them. Since pandas rolling) Tj T* 0 Tw .091894 Tw (engine does not skip nans, they propagate. In fact, having removed half the data points, rolling\(10\) will return 99%) Tj T* 0 Tw (of nans) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (88) Tj T* ET
Q
Q
 
endstream
endobj
1059 0 obj
<<
/Length 7732
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 732.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( panda = a.rolling\(10\).median\(\); ts = rolling_median\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( print\('#original:', len\(nona\(a\)\), 'timeseries:', len\(nona\(ts\)\), 'panda:', len\(nona\(panda\)\), 'data points'\)) Tj T* (#original: 4634 timeseries: 4625 panda: 4 data points) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 718.2394 cm
Q
q
1 0 0 1 50.01575 703.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 691.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (One can split the calculation and run old and new data separately.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]        ) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]    ) Tj T* (>) Tj (>) Tj (>) Tj ( ts = rolling_median\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = rolling_median_\(old,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = rolling_median\(new, 10, **old_ts\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 598.4394 cm
Q
q
1 0 0 1 50.01575 583.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dict/list inputs) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 552.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 700 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_median\(dict\(x = a, y = a**2\),10\), dict\(x = rolling_median\(a,10\), y = rolling_median\(a**2,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_median\([a,a**2],10\), [rolling_median\(a,10\), rolling_median\(a**2,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 522.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_quantile) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 510.2394 cm
Q
q
1 0 0 1 40.01575 498.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._stride.) Tj /F6 10 Tf (rolling_quantile) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, quantile) Tj (=) Tj (0.5) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 486.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to a.rolling\(n\).quantile\(q\) except\205 - supports numpy arrays - supports multiple q values) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 480.2394 cm
Q
q
1 0 0 1 50.01575 465.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 410.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = rolling_quantile\(a, 100, 0.3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert sub_\(res, a.rolling\(100\).quantile\(0.3\)\).max\(\) ) Tj (<) Tj ( 1e-13) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 396.4394 cm
Q
q
1 0 0 1 50.01575 381.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (multiple quantiles) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 350.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( res = rolling_quantile\(a, 100, [0.3, 0.5, 0.75]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(res[0.3] - a.rolling\(100\).quantile\(0.3\)\).max\(\) ) Tj (<) Tj ( 1e-13) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 336.6394 cm
Q
q
1 0 0 1 50.01575 321.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 254.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( res = rolling_quantile\(a, 100, 0.3\)) Tj T* (>) Tj (>) Tj (>) Tj ( old = rolling_quantile_\(a.iloc[:2000], 100, 0.3\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = rolling_quantile\(a.iloc[2000:], 100, 0.3, **old\)) Tj T* (>) Tj (>) Tj (>) Tj ( both = pd.concat\([old.data, new]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(both, res\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 240.8394 cm
Q
q
1 0 0 1 50.01575 225.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 213.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n : integer) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 207.8394 cm
Q
q
1 0 0 1 50.01575 195.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (window size.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 195.8394 cm
Q
q
1 0 0 1 50.01575 179.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (q : ) Tj /F4 10 Tf (float or list of floats in [0,1]) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 164.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (quantile\(s\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 148.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 133.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 117.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 102.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 96.83937 cm
Q
q
1 0 0 1 50.01575 81.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 69.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries/array of quantile\(s\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (89) Tj T* ET
Q
Q
 
endstream
endobj
1060 0 obj
<<
/Length 8425
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling_rank) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 760.6394 cm
Q
q
1 0 0 1 40.01575 748.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rank.) Tj /F6 10 Tf (rolling_rank) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 724.6394 cm
q
BT 1 0 0 1 0 14 Tm 1.078964 Tw 12 TL /F1 10 Tf 0 0 0 rg (returns a rank of the current value within a given window, scaled to be -1 if it is the smallest and +1 if it is the) Tj T* 0 Tw (largest - works on mumpy arrays too - skips nan, no ffill) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 718.6394 cm
Q
q
1 0 0 1 50.01575 703.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 687.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (array, pd.Series, pd.DataFrame or list/dict of these) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 672.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 656.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (n: int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 641.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (window size) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 625.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 610.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0/1/-1. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 594.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 579.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 563.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 548.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 542.6394 cm
Q
q
1 0 0 1 50.01575 527.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 436.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import pandas as pd; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\([1.,2., np.nan, 0., 4., 2., 3., 1., 2.], drange\(-8\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( rank = rolling_rank\(a, 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(rank.values, np.array\([np.nan, np.nan, np.nan, -1, 1, 0, 0, -1, 0]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( # 0 is smallest in [1,2,0] so goes to -1) Tj T* (>) Tj (>) Tj (>) Tj ( # 4 is largest in [2,0,4] so goes to +1) Tj T* (>) Tj (>) Tj (>) Tj ( # 2 is middle of [0,4,2] so goes to 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 422.8394 cm
Q
q
1 0 0 1 50.01575 407.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy equivalent) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 389.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(rolling_rank\(a.values, 10\), rolling_rank\(a, 10\).values\)  ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 375.0394 cm
Q
q
1 0 0 1 50.01575 360.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 305.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = np.random.normal\(0,1,10000\)) Tj T* (>) Tj (>) Tj (>) Tj ( old = rolling_rank_\(a[:5000], 10\) # grab both data and state) Tj T* (>) Tj (>) Tj (>) Tj ( new = rolling_rank\(a[5000:], 10, **old\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(np.concatenate\([old.data,new]\), rolling_rank\(a, 10\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 272.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (exponentially weighted moving functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 242.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 230.0394 cm
Q
q
1 0 0 1 40.01575 218.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewma) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 194.0394 cm
q
BT 1 0 0 1 0 14 Tm .494358 Tw 12 TL /F1 10 Tf 0 0 0 rg (ewma is equivalent to a.ewm\(n\).mean\(\) but with\205 - supports np.ndarrays as well as timeseries - handles nan by) Tj T* 0 Tw (skipping them - allows state-management - ability to supply a \221clock\222 to the calculation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 188.0394 cm
Q
q
1 0 0 1 50.01575 173.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 161.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 155.0394 cm
Q
q
1 0 0 1 50.01575 143.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 143.0394 cm
Q
q
1 0 0 1 50.01575 127.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 48.01575 54.85039 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 59.18898 Tm  T* ET
q
1 0 0 1 20 45.18898 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 6.188976 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (90) Tj T* ET
Q
Q
 
endstream
endobj
1061 0 obj
<<
/Length 7236
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 751.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 23 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 20 Tm  T* ET
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 735.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 720.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 704.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 689.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 683.0394 cm
Q
q
1 0 0 1 50.01575 668.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (matching pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 613.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd; import numpy as np; from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewma\(a,10\); df = a.ewm\(10\).mean\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 599.2394 cm
Q
q
1 0 0 1 50.01575 584.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 565.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewma\(a.values, 10\), ewma\(a,10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 551.4394 cm
Q
q
1 0 0 1 50.01575 536.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 493.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 772 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewma\(a,10, time = 'i'\); df = a.ewm\(10\).mean\(\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 322.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 162 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([ts,df], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                        0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24  0.263875  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-28       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj (                  ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04       NaN  0.786506) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  0.928817  0.928817) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-06       NaN  0.928817) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  0.839168  0.839168) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-08  0.831109  0.831109) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 308.8394 cm
Q
q
1 0 0 1 50.01575 293.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 215.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = ewma_\(old, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = ewma\(new, 10, **old_ts\) # instantiation with previous ewma) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewma\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 201.0394 cm
Q
q
1 0 0 1 50.01575 186.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Support for time & clock) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 107.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( daily = a) Tj T* (>) Tj (>) Tj (>) Tj ( monthly = daily.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( m_ts = ewma\(monthly, 3\) ## 3-month ewma run on monthly data) Tj T* (>) Tj (>) Tj (>) Tj ( d_ts = ewma\(daily, 3, 'm'\) ## 3-month ewma run on daily data) Tj T* (>) Tj (>) Tj (>) Tj ( daily_resampled_to_month = d_ts.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(daily_resampled_to_month - m_ts\).max\(\) ) Tj (<) Tj ( 1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 87.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (So you can run a 3-monthly ewma on daily, where within month, most recent value is used with the EOM history.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 81.23937 cm
Q
q
1 0 0 1 50.01575 66.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Support for dict/list of arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (91) Tj T* ET
Q
Q
 
endstream
endobj
1062 0 obj
<<
/Length 8211
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 732.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 700 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\); y = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = dict\(x = x, y = y\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewma\(dict\(x=x, y=y\),10\), dict\(x=ewma\(x,10\), y=ewma\(y,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewma\([x,y],10\), [ewma\(x,10\), ewma\(y,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 718.2394 cm
Q
q
1 0 0 1 50.01575 703.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 691.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an array/timeseries of ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 660.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmrms) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 648.8394 cm
Q
q
1 0 0 1 40.01575 636.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmrms) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.8394 cm
q
BT 1 0 0 1 0 14 Tm 1.87315 Tw 12 TL /F1 10 Tf 0 0 0 rg (ewmrms is equivalent to \(a**2\).ewm\(n\).mean\(\)**0.5 but with\205 - supports np.ndarrays as well as timeseries -) Tj T* 0 Tw (handles nan by skipping them - allows state-management - ability to supply a \221clock\222 to the calculation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 606.8394 cm
Q
q
1 0 0 1 50.01575 591.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 579.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 573.8394 cm
Q
q
1 0 0 1 50.01575 561.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 561.8394 cm
Q
q
1 0 0 1 50.01575 545.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 449.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 433.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 418.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 402.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 387.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 381.8394 cm
Q
q
1 0 0 1 50.01575 366.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (matching pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 312.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd; import numpy as np; from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmrms\(a,10\); df = \(a**2\).ewm\(10\).mean\(\)**0.5) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 298.0394 cm
Q
q
1 0 0 1 50.01575 283.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 264.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewmrms\(a.values, 10\), ewmrms\(a,10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 250.2394 cm
Q
q
1 0 0 1 50.01575 235.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 192.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 844 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (<) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmrms\(a,10, time = 'i'\); df = \(a**2\).ewm\(10\).mean\(\)**0.5 # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 57.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 126 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pd.concat\([ts,df], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj (                        0         1) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-24  0.263875  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-25       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-26       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-27       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj ( 1993-09-28       NaN  0.263875) Tj T* (>) Tj (>) Tj (>) Tj (                  ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-04       NaN  0.786506) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-05  0.928817  0.928817) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (92) Tj T* ET
Q
Q
 
endstream
endobj
1063 0 obj
<<
/Length 8335
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( 2021-02-06       NaN  0.928817) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-07  0.839168  0.839168) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-02-08  0.831109  0.831109) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 730.2394 cm
Q
q
1 0 0 1 50.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 636.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = ewmrms_\(old, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = ewmrms\(new, 10, **old_ts\) # instantiation with previous ewma) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmrms\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 622.4394 cm
Q
q
1 0 0 1 50.01575 607.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Support for time & clock) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 528.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( daily = a) Tj T* (>) Tj (>) Tj (>) Tj ( monthly = daily.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( m_ts = ewmrms\(monthly, 3\) ## 3-month ewma run on monthly data) Tj T* (>) Tj (>) Tj (>) Tj ( d_ts = ewmrms\(daily, 3, 'm'\) ## 3-month ewma run on daily data) Tj T* (>) Tj (>) Tj (>) Tj ( daily_resampled_to_month = d_ts.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(daily_resampled_to_month - m_ts\).max\(\) ) Tj (<) Tj ( 1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 508.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (So you can run a 3-monthly ewma on daily, where within month, most recent value is used with the EOM history.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 502.6394 cm
Q
q
1 0 0 1 50.01575 487.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Support for dict/list of arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 432.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 700 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\); y = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = dict\(x = x, y = y\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewmrms\(dict\(x=x, y=y\),10\), dict\(x=ewmrms\(x,10\), y=ewmrms\(y,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewmrms\([x,y],10\), [ewmrms\(x,10\), ewmrms\(y,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 418.8394 cm
Q
q
1 0 0 1 50.01575 403.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 391.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an array/timeseries of ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 361.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmstd) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 349.4394 cm
Q
q
1 0 0 1 40.01575 325.4394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmstd) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 301.4394 cm
q
BT 1 0 0 1 0 14 Tm .723182 Tw 12 TL /F1 10 Tf 0 0 0 rg (ewmstd is equivalent to a.ewm\(n\).std\(\) but with\205 - supports np.ndarrays as well as timeseries - handles nan by) Tj T* 0 Tw (skipping them - allows state-management - ability to supply a \221clock\222 to the calculation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 295.4394 cm
Q
q
1 0 0 1 50.01575 280.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 268.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 262.4394 cm
Q
q
1 0 0 1 50.01575 250.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 250.4394 cm
Q
q
1 0 0 1 50.01575 234.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 138.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 122.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 107.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 91.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 70.43937 cm
Q
q
1 0 0 1 50.01575 55.43937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (matching pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (93) Tj T* ET
Q
Q
 
endstream
endobj
1064 0 obj
<<
/Length 7507
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd; import numpy as np; from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmstd\(a,10\); df = a.ewm\(10\).std\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmstd\(a,10, bias = True\); df = a.ewm\(10\).std\(bias = True\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 694.2394 cm
Q
q
1 0 0 1 50.01575 679.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 660.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewmstd\(a.values, 10\), ewmstd\(a,10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 646.4394 cm
Q
q
1 0 0 1 50.01575 631.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 564.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 922 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (<) Tj (-0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmstd\(a,10, time = 'i'\); df = a.ewm\(10\).std\(\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmstd\(a,10, time = 'i', bias = True\); df = a.ewm\(10\).std\(bias = True\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 550.6394 cm
Q
q
1 0 0 1 50.01575 535.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 456.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = ewmstd_\(old, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = ewmstd\(new, 10, **old_ts\) # instantiation with previous ewma) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmstd\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 442.8394 cm
Q
q
1 0 0 1 50.01575 427.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Support for time & clock) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 349.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( daily = a) Tj T* (>) Tj (>) Tj (>) Tj ( monthly = daily.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( m_ts = ewmstd\(monthly, 3\) ## 3-month ewma run on monthly data) Tj T* (>) Tj (>) Tj (>) Tj ( d_ts = ewmstd\(daily, 3, 'm'\) ## 3-month ewma run on daily data) Tj T* (>) Tj (>) Tj (>) Tj ( daily_resampled_to_month = d_ts.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(daily_resampled_to_month - m_ts\).max\(\) ) Tj (<) Tj ( 1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 329.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (So you can run a 3-monthly ewma on daily, where within month, most recent value is used with the EOM history.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 323.0394 cm
Q
q
1 0 0 1 50.01575 308.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Support for dict/list of arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 253.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 700 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\); y = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = dict\(x = x, y = y\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewmstd\(dict\(x=x, y=y\),10\), dict\(x=ewmstd\(x,10\), y=ewmstd\(y,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewmstd\([x,y],10\), [ewmstd\(x,10\), ewmstd\(y,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 239.2394 cm
Q
q
1 0 0 1 50.01575 224.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 212.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an array/timeseries of ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 181.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmskew) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 169.8394 cm
Q
q
1 0 0 1 40.01575 145.8394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmskew) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, bias) Tj (=) Tj (False) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 121.8394 cm
q
BT 1 0 0 1 0 14 Tm .594631 Tw 12 TL /F1 10 Tf 0 0 0 rg (Equivalent to a.ewm\(n\).skew\(\) but with\205 - supports np.ndarrays as well as timeseries - handles nan by skipping) Tj T* 0 Tw (them - allows state-management - ability to supply a \221clock\222 to the calculation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 115.8394 cm
Q
q
1 0 0 1 50.01575 100.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 88.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 82.83937 cm
Q
q
1 0 0 1 50.01575 70.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 70.83937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (94) Tj T* ET
Q
Q
 
endstream
endobj
1065 0 obj
<<
/Length 7962
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 679.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 663.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 648.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 632.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 617.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 611.0394 cm
Q
q
1 0 0 1 50.01575 596.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (matching pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 553.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd; import numpy as np; from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( x = a.ewm\(10\).skew\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 430.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 114 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:10]) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[10:]) Tj T* (>) Tj (>) Tj (>) Tj ( for f in [ewma_, ewmstd_, ewmrms_, ewmskew_, ]:) Tj T* (>) Tj (>) Tj (>) Tj (    both = f\(a, 3\)) Tj T* (>) Tj (>) Tj (>) Tj (    o = f\(old, 3\)) Tj T* (>) Tj (>) Tj (>) Tj (    n = f\(new, 3, **o\)) Tj T* (>) Tj (>) Tj (>) Tj (    assert eq\(o.data, both.data.iloc[:10]\) ) Tj T* (>) Tj (>) Tj (>) Tj (    assert eq\(n.data, both.data.iloc[10:]\) ) Tj T* (>) Tj (>) Tj (>) Tj (    assert both - 'data' == n - 'data') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 391.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert abs\(a.ewm\(10\).mean\(\) - ewma\(a,10\)\).max\(\) ) Tj (<) Tj ( 1e-14) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(a.ewm\(10\).std\(\) - ewmstd\(a,10\)\).max\(\) ) Tj (<) Tj ( 1e-14) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 377.6394 cm
Q
q
1 0 0 1 50.01575 362.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 343.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewma\(a.values, 10\), ewma\(a,10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 329.8394 cm
Q
q
1 0 0 1 50.01575 314.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 302.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (while panadas ffill values, timeseries skips nans:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 248.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (>) Tj (0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewma\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ts[~np.isnan\(ts\)], ewma\(a[~np.isnan\(a\)], 10\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 234.0394 cm
Q
q
1 0 0 1 50.01575 219.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (initiating the ewma with past state) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 140.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 574 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = np.random.normal\(0,1,100\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = np.random.normal\(0,1,100\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_ = ewma_\(old, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ = ewma\(new, 10, t0 = old_ewma.t0, t1 = old_ewma.t1\) # instantiation with previous ewma) Tj T* (>) Tj (>) Tj (>) Tj ( new_2 = ewma\(np.concatenate\([old,new]\), 10\)[-100:]) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ewma, new_ewma2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 126.2394 cm
Q
q
1 0 0 1 50.01575 111.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Support for time & clock) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 56.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( daily = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\).cumsum\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( monthly = daily.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( m = ewma\(monthly, 3\) ## 3-month ewma run on monthly data) Tj T* (>) Tj (>) Tj (>) Tj ( d = ewma\(daily, 3, 'm'\) ## 3-month ewma run on daily data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (95) Tj T* ET
Q
Q
 
endstream
endobj
1066 0 obj
<<
/Length 8628
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( daily_resampled_to_month = d.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(daily_resampled_to_month - m\).max\(\) ) Tj (<) Tj ( 1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 736.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (So you can run a 3-monthly ewma on daily, where within month, most recent value is used with the EOM history.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 730.2394 cm
Q
q
1 0 0 1 50.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 703.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an array/timeseries of ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 672.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmvar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 660.8394 cm
Q
q
1 0 0 1 40.01575 636.8394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmvar) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.8394 cm
q
BT 1 0 0 1 0 14 Tm .690829 Tw 12 TL /F1 10 Tf 0 0 0 rg (ewmstd is equivalent to a.ewm\(n\).var\(\) but with\205 - supports np.ndarrays as well as timeseries - handles nan by) Tj T* 0 Tw (skipping them - allows state-management - ability to supply a \221clock\222 to the calculation) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 606.8394 cm
Q
q
1 0 0 1 50.01575 591.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 579.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 573.8394 cm
Q
q
1 0 0 1 50.01575 561.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 561.8394 cm
Q
q
1 0 0 1 50.01575 545.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 449.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 433.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (data: None.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 418.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (unused at the moment. Allow code such as func\(live, ) Tj 1 0 0 rg (**) Tj 0 0 0 rg (func_\(history\)\) to work) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 402.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (state: dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 387.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state parameters used to instantiate the internal calculations, based on history prior to \221a\222 provided.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 381.8394 cm
Q
q
1 0 0 1 50.01575 366.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (matching pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 288.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd; import numpy as np; from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmvar\(a,10\); df = a.ewm\(10\).var\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmvar\(a,10, bias = True\); df = a.ewm\(10\).var\(bias = True\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 274.0394 cm
Q
q
1 0 0 1 50.01575 259.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 240.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewmvar\(a.values, 10\), ewmvar\(a,10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 226.2394 cm
Q
q
1 0 0 1 50.01575 211.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 144.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 922 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (<) Tj (-0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmvar\(a,10, time = 'i'\); df = a.ewm\(10\).var\(\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmvar\(a,10, time = 'i', bias = True\); df = a.ewm\(10\).var\(bias = True\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 130.4394 cm
Q
q
1 0 0 1 50.01575 115.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 60.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = a.iloc[:5000]) Tj T* (>) Tj (>) Tj (>) Tj ( new = a.iloc[5000:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = ewmvar_\(old, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = ewmvar\(new, 10, **old_ts\) # instantiation with previous ewma) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (96) Tj T* ET
Q
Q
 
endstream
endobj
1067 0 obj
<<
/Length 8472
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ts = ewmvar\(a,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 742.2394 cm
Q
q
1 0 0 1 50.01575 727.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Support for time & clock) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 648.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( daily = a) Tj T* (>) Tj (>) Tj (>) Tj ( monthly = daily.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( m_ts = ewmvar\(monthly, 3\) ## 3-month ewma run on monthly data) Tj T* (>) Tj (>) Tj (>) Tj ( d_ts = ewmvar\(daily, 3, 'm'\) ## 3-month ewma run on daily data) Tj T* (>) Tj (>) Tj (>) Tj ( daily_resampled_to_month = d_ts.resample\('M'\).last\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(daily_resampled_to_month - m_ts\).max\(\) ) Tj (<) Tj ( 1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 628.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (So you can run a 3-monthly ewma on daily, where within month, most recent value is used with the EOM history.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 622.4394 cm
Q
q
1 0 0 1 50.01575 607.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Support for dict/list of arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 552.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 700 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\); y = pd.Series\(np.random.normal\(0,1,1000\), drange\(-999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = dict\(x = x, y = y\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewmvar\(dict\(x=x, y=y\),10\), dict\(x=ewmvar\(x,10\), y=ewmvar\(y,10\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(ewmvar\([x,y],10\), [ewmvar\(x,10\), ewmvar\(y,10\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 538.6394 cm
Q
q
1 0 0 1 50.01575 523.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 511.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an array/timeseries of ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 481.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmcor) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 469.2394 cm
Q
q
1 0 0 1 40.01575 445.2394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmcor) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (True) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 433.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (calculates pair-wise correlation between a and b.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 427.2394 cm
Q
q
1 0 0 1 50.01575 412.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 400.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries b : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 394.2394 cm
Q
q
1 0 0 1 50.01575 382.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 382.2394 cm
Q
q
1 0 0 1 50.01575 366.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 270.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 254.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (min_sample : ) Tj /F4 10 Tf (floar, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 227.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .720829 Tw (minimum weight of observations before we return a reading. The default is 0.25. This ensures that we don\222t) Tj T* 0 Tw (get silly numbers due to small population.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 211.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (bias : ) Tj /F4 10 Tf (book, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 184.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .264705 Tw (vol estimation for a and b should really by unbiased. Nevertheless, we track pandas and set bias = True as a) Tj T* 0 Tw (default.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 168.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 153.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (axis of calculation. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 137.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (data : ) Tj /F4 10 Tf (place holder, ignore, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 122.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ignore. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 106.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (state : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 91.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Output from a previous run of ) Tj 0 0 .501961 rg (ewmcor) Tj 0 0 0 rg (. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 85.23937 cm
Q
q
1 0 0 1 50.01575 70.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (matching pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (97) Tj T* ET
Q
Q
 
endstream
endobj
1068 0 obj
<<
/Length 7403
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 720.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pandas as pd; import numpy as np; from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = pd.Series\(np.random.normal\(0,1,9000\), drange\(-8999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmcor\(a, b, n = 10\); df = a.ewm\(10\).corr\(b\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 706.2394 cm
Q
q
1 0 0 1 50.01575 691.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 672.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewmcor\(a.values, b.values, 10\), ewmcor\(a, b, 10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 658.4394 cm
Q
q
1 0 0 1 50.01575 643.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 600.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 814 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (<) Tj (-0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmcor\(a, b, 10, time = 'i'\); df = a.ewm\(10\).corr\(b\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 586.6394 cm
Q
q
1 0 0 1 50.01575 571.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 468.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_a = a.iloc[:5000]; old_b = b.iloc[:5000]) Tj T* (>) Tj (>) Tj (>) Tj ( new_a = a.iloc[5000:]; new_b = b.iloc[5000:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = ewmcor_\(old_a, old_b, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = ewmcor\(new_a, new_b, 10, **old_ts\) # instantiation with previous ewma) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmcor\(a,b,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts, ts.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 438.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmcorr) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 426.4394 cm
Q
q
1 0 0 1 40.01575 414.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmcorr) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (False) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 390.4394 cm
q
BT 1 0 0 1 0 14 Tm .976506 Tw 12 TL /F1 10 Tf 0 0 0 rg (This calculates a full correlation matrix as a timeseries. The calculation is returned as an xarray.Dataset object,) Tj T* 0 Tw (which is a multidimensional data structure.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 384.4394 cm
Q
q
1 0 0 1 50.01575 369.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 353.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (a : ) Tj /F4 10 Tf (np.array or a pd.DataFrame) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 338.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries to calculate correlation for) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 322.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (n : ) Tj /F4 10 Tf (int) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 307.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (days for which rolling correlation is calculated.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 291.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (min_sample : ) Tj /F4 10 Tf (float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 276.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Minimum observations needed before we calculate correlation. The default is 0.25.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 260.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (bias : ) Tj /F4 10 Tf (bool, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 245.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (input to stdev calculations, the default is False.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 229.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (instate : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 214.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (historical calculations so far.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 198.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (correlation dataset) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 183.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (an xarray.Dataset unless there are only two timeserieses) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 177.4394 cm
Q
q
1 0 0 1 50.01575 162.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a pair of ts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 83.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( rtn = np.random.normal\(0,1,10000\)) Tj T* (>) Tj (>) Tj (>) Tj ( x0 = ewmxo\(rtn, 10, 20, 30\)[50:]) Tj T* (>) Tj (>) Tj (>) Tj ( x1 = ewmxo\(rtn, 20, 40, 30\)[50:]) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.DataFrame\(np.array\([x0,x1]\).T, drange\(-9949\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = ewmcorr\(a, n\)) Tj T* (>) Tj (>) Tj (>) Tj ( res) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (98) Tj T* ET
Q
Q
 
endstream
endobj
1069 0 obj
<<
/Length 5544
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj (     Out[130]: ) Tj T* (>) Tj (>) Tj (>) Tj (     1994-06-07         NaN) Tj T* (>) Tj (>) Tj (>) Tj (     1994-06-08         NaN) Tj T* (>) Tj (>) Tj (>) Tj (     1994-06-09         NaN) Tj T* (>) Tj (>) Tj (>) Tj (     1994-06-10         NaN) Tj T* (>) Tj (>) Tj (>) Tj (     1994-06-11         NaN) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 621.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj (     2021-08-29    0.890766) Tj T* (>) Tj (>) Tj (>) Tj (     2021-08-30    0.886926) Tj T* (>) Tj (>) Tj (>) Tj (     2021-08-31    0.883054) Tj T* (>) Tj (>) Tj (>) Tj (     2021-09-01    0.879577) Tj T* (>) Tj (>) Tj (>) Tj (     2021-09-02    0.875766) Tj T* (>) Tj (>) Tj (>) Tj (     Length: 9950, dtype: float64    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 607.4394 cm
Q
q
1 0 0 1 50.01575 592.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a pair of ts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 501.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( rtn = np.random.normal\(0,1,10000\)) Tj T* (>) Tj (>) Tj (>) Tj ( x0 = ewmxo\(rtn, 10, 20, 30\)[50:]) Tj T* (>) Tj (>) Tj (>) Tj ( x1 = ewmxo\(rtn, 20, 40, 30\)[50:]) Tj T* (>) Tj (>) Tj (>) Tj ( x2 = ewmxo\(rtn, 40, 80, 30\)[50:]) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.DataFrame\(np.array\([x0,x1,x2]\).T, drange\(-9949\), ['a','b','c']\)) Tj T* (>) Tj (>) Tj (>) Tj ( ds = ewmcorr\(a, n\)) Tj T* (>) Tj (>) Tj (>) Tj ( ds) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 390.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ) Tj (<) Tj (xarray.Dataset) Tj (>) Tj  T* (>) Tj (>) Tj (>) Tj ( Dimensions:  \(index: 9950, x: 3, y: 3\)) Tj T* (>) Tj (>) Tj (>) Tj ( Coordinates:) Tj T* (>) Tj (>) Tj (>) Tj (   * index    \(index\) datetime64[ns] 1994-06-07 1994-06-08 ... 2021-09-02) Tj T* (>) Tj (>) Tj (>) Tj (   * x        \(x\) ) Tj (<) Tj (U1 'a' 'b' 'c') Tj T* (>) Tj (>) Tj (>) Tj (   * y        \(y\) ) Tj (<) Tj (U1 'a' 'b' 'c') Tj T* (>) Tj (>) Tj (>) Tj ( Data variables:) Tj T* (>) Tj (>) Tj (>) Tj (     cor      \(index, x, y\) float64 1.0 nan nan nan ... 0.9402 0.7254 0.9402 1.0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 370.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To access individual correlations:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 352.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a_vs_b = pd.Series\(ds.loc[dict\(x = 'a', y = 'b'\)].cor.values, ds.index.values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 332.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To access all correlations to a:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 289.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( subset = ds.loc[dict\(x = 'a'\)]) Tj T* (>) Tj (>) Tj (>) Tj ( a_vs_all = pd.DataFrame\(subset.cor.values, ds.index.values, subset.y.values\)) Tj T* (>) Tj (>) Tj (>) Tj ( a_vs_all) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 130.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 150 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj (                   a         b         c) Tj T* (>) Tj (>) Tj (>) Tj ( 1994-06-07  1.0       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1994-06-08  1.0       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1994-06-09  1.0       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1994-06-10  1.0       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj ( 1994-06-11  1.0       NaN       NaN) Tj T* (>) Tj (>) Tj (>) Tj (         ...       ...       ...) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-08-29  1.0  0.890766  0.753859) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-08-30  1.0  0.886926  0.746812) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-08-31  1.0  0.883054  0.739746) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-09-01  1.0  0.879577  0.733322) Tj T* (>) Tj (>) Tj (>) Tj ( 2021-09-02  1.0  0.875766  0.725399) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 100.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmLR) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 88.03937 cm
Q
q
1 0 0 1 40.01575 64.03937 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmLR) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (True) Tj (, axis) Tj (=) Tj (0) Tj (, c) Tj (=) Tj (None) Tj (, m) Tj (=) Tj (None) Tj (,) Tj T* (state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (99) Tj T* ET
Q
Q
 
endstream
endobj
1070 0 obj
<<
/Length 8373
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (calculates pair-wise linear regression between a and b. We have a and b for which we want to fit:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 720.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( b_i = c + m a_i ) Tj T* (>) Tj (>) Tj (>) Tj ( LSE\(c,m\) = \\sum w_i \(c + m a_i - b_i\)^2) Tj T* (>) Tj (>) Tj (>) Tj ( dLSE/dc  = 0  ) Tj (<) Tj (==) Tj (>) Tj ( \\sum w_i  \(c + m a_i - b_i\) = 0    [1]) Tj T* (>) Tj (>) Tj (>) Tj ( dLSE/dm  = 0 ) Tj (<) Tj (==) Tj (>) Tj ( \\sum w_i  a_i \(c + m a_i - b_i\) = 0 [2]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 681.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( c     + mE\(a\)    = E\(b\)     [1]) Tj T* (>) Tj (>) Tj (>) Tj ( cE\(a\) + mE\(a^2\)  = E\(ab\)    [2]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 618.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( cE\(a\) + mE\(a\)^2  = E\(a\)E\(n\) [1] * E\(a\) ) Tj T* (>) Tj (>) Tj (>) Tj ( m\(E\(a^2\) - E\(a\)^2\) = E\(ab\) - E\(a\)E\(b\)) Tj T* (>) Tj (>) Tj (>) Tj ( m = covar\(a,b\)/var\(a\)) Tj T* (>) Tj (>) Tj (>) Tj ( c = E\(b\) - mE\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 598.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : array/timeseries b : array/timeseries n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 592.6394 cm
Q
q
1 0 0 1 50.01575 580.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 580.6394 cm
Q
q
1 0 0 1 50.01575 564.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 468.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 452.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (min_sample : ) Tj /F4 10 Tf (floar, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 425.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .720829 Tw (minimum weight of observations before we return a reading. The default is 0.25. This ensures that we don\222t) Tj T* 0 Tw (get silly numbers due to small population.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 409.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (bias : ) Tj /F4 10 Tf (book, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 382.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .264705 Tw (vol estimation for a and b should really by unbiased. Nevertheless, we track pandas and set bias = True as a) Tj T* 0 Tw (default.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 366.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 351.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (axis of calculation. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 335.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (c,m : ) Tj /F4 10 Tf (place holder, ignore, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 320.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ignore. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 304.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (state : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 289.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Output from a previous run of ) Tj 0 0 .501961 rg (ewmcor) Tj 0 0 0 rg (. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 283.6394 cm
Q
q
1 0 0 1 50.01575 268.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (numpy arrays support) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 249.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(ewmLR\(a.values, b.values, 10\), ewmLR\(a, b, 10\).values\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 235.8394 cm
Q
q
1 0 0 1 50.01575 220.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (nan handling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 178.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 814 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a[a.values) Tj (<) Tj (-0.1] = np.nan) Tj T* (>) Tj (>) Tj (>) Tj ( ts = ewmcor\(a, b, 10, time = 'i'\); df = a.ewm\(10\).corr\(b\) # note: pandas assumes, 'time' pass per index entry, even if value is nan) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(ts-df\).max\(\)) Tj (<) Tj (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 164.0394 cm
Q
q
1 0 0 1 50.01575 149.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (state management) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 58.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 90 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( old_a = a.iloc[:5000]; old_b = b.iloc[:5000]) Tj T* (>) Tj (>) Tj (>) Tj ( new_a = a.iloc[5000:]; new_b = b.iloc[5000:]) Tj T* (>) Tj (>) Tj (>) Tj ( old_ts = ewmLR_\(old_a, old_b, 10\)) Tj T* (>) Tj (>) Tj (>) Tj ( new_ts = ewmLR\(new_a, new_b, 10, **old_ts\) # instantiation with previous ewma) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (100) Tj T* ET
Q
Q
 
endstream
endobj
1071 0 obj
<<
/Length 7959
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( ts = ewmLR\(a,b,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts.c, ts.c.iloc[5000:]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new_ts.m, ts.m.iloc[5000:]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 730.2394 cm
Q
q
1 0 0 1 50.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 612.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 102 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a0 = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a1 = pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = \(a0 - a1\) + pd.Series\(np.random.normal\(0,1,10000\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.concat\([a0,a1], axis=1\)) Tj T* (>) Tj (>) Tj (>) Tj ( LR = ewmLR\(a,b,50\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(LR.m.mean\(\)[0]-1\)) Tj (<) Tj (0.5) Tj T* (>) Tj (>) Tj (>) Tj ( assert abs\(LR.m.mean\(\)[1]+1\)) Tj (<) Tj (0.5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 582.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmGLM) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 570.0394 cm
Q
q
1 0 0 1 40.01575 558.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmGLM) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (True) Tj (, data) Tj (=) Tj (None) Tj (, state) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 546.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Calculates a General Linear Model fitting b to a.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 540.0394 cm
Q
q
1 0 0 1 50.01575 525.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 513.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a : a 2-d array/pd.DataFrame of values fitting b b : a 1-d array/pd.Series n : int/fraction) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 507.0394 cm
Q
q
1 0 0 1 50.01575 495.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number or days \(or a ratio\) to scale the history) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 495.0394 cm
Q
q
1 0 0 1 50.01575 479.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (time : ) Tj /F4 10 Tf (Calendar, \221b/d/y/m\222 or a timeseries of time \(use clock\(a\) to see output\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 383.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 83 Tm  T* ET
q
1 0 0 1 20 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL (If time parameter is provided, we allow multiple observations per unit of time. i.e., converging to the) Tj T* (last observation in time unit.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 56 Tm  T* ET
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if we have intraday data, and set time = \221d\222, then) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the ewm calculation on last observations per day is what is retained.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489606 Tw (the ewm calculation on each intraday observation is same as an ewm\(past EOD + current intraday) Tj T* 0 Tw (observation\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 367.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (min_sample : ) Tj /F4 10 Tf (floar, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 340.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .786123 Tw (minimum weight of observations before we return the fitting. The default is 0.25. This ensures that we don\222t) Tj T* 0 Tw (get silly numbers due to small population.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 324.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (data : ) Tj /F4 10 Tf (place holder, ignore, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 309.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ignore. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 293.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (state : ) Tj /F4 10 Tf (dict, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 278.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Output from a previous run of ) Tj 0 0 .501961 rg (ewmGLM) Tj 0 0 0 rg (. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 272.0394 cm
Q
q
1 0 0 1 50.01575 257.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 36.36937 0 Td (Theory:) Tj T* -36.36937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 233.0394 cm
q
BT 1 0 0 1 0 14 Tm .914918 Tw 12 TL /F1 10 Tf 0 0 0 rg (See ) Tj 0 0 .501961 rg (https://en.wikipedia.org/wiki/Generalized_linear_model) Tj 0 0 0 rg ( for full details. Briefly, we assume b is single column) Tj T* 0 Tw (while a is multicolumn. We minimize least square error \(LSE\) fitting:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 202.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( b[i] =\\sum_j m_j a_j[i]    ) Tj T* (>) Tj (>) Tj (>) Tj ( LSE\(m\) = \\sum_i w_i \(b[i] - \\sum_j m_j * a_j[i]\)^2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 151.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( dLSE/dm_k = 0  ) Tj T* (>) Tj (>) Tj (>) Tj ( ) Tj (<) Tj (==) Tj (>) Tj (  \\sum_i w_i \(b[i] - \\sum_j m_j * a_j[i]\) a_k[i] = 0) Tj T* (>) Tj (>) Tj (>) Tj ( ) Tj (<) Tj (==) Tj (>) Tj (  E\(b*a_k\) = m_k E\(a_k^2\) + sum_{j) Tj (<) Tj (>) Tj (k} m_k E\(a_j a_k\) ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 131.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (E is expectation under weights w. And we can rewrite it as:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a2 x m = ab ## matrix multiplication) Tj T* (>) Tj (>) Tj (>) Tj ( a2[i,j] = E\(a_i * a_j\)) Tj T* (>) Tj (>) Tj (>) Tj ( ab[j] = E\(a_j * b\)) Tj T* (>) Tj (>) Tj (>) Tj ( m = a2.inverse x ab ## matrix multiplication    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 62.63937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (101) Tj T* ET
Q
Q
 
endstream
endobj
1072 0 obj
<<
/Length 8963
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 772.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (simple fit) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 705.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.DataFrame\(np.random.normal\(0,1,\(10000,10\)\), drange\(-9999\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( true_m = np.random.normal\(1,1,10\)) Tj T* (>) Tj (>) Tj (>) Tj ( noise = np.random.normal\(0,1,10000\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = \(a * true_m\).sum\(axis = 1\) + noise) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 678.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( fitted_m = ewmGLM\(a, b, 50\)    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 648.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (ewmxo) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 636.0394 cm
Q
q
1 0 0 1 40.01575 624.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewmxo.) Tj /F6 10 Tf (ewmxo) Tj /F1 10 Tf ( \() Tj (rtn) Tj (, fast) Tj (, slow) Tj (, vol) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 612.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This is the normalized crossover function) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 593.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 544 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( res = \(ewma\(rtn, fast\) - ewma\(rtn, slow\)\) / \(ewmstd\(rtn, vol\) * ou_factor\(fast, slow\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 573.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The OU factor normalizes the result so that rms\(res\) is approximately 1) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 557.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (rtn: timeseries) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 542.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The returns of a financial process) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 526.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (fast : ) Tj /F4 10 Tf (int/frac) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 511.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of days. can also be 1/\(1+days\) if presented as a fraction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 495.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (slow : ) Tj /F4 10 Tf (int/frc) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 480.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of days. can also be 1/\(1+days\) if presented as a fraction) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 464.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (vol: int/frc) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 449.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of days. used for calculating the volatility horizon) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 443.2394 cm
Q
q
1 0 0 1 50.01575 428.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 385.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import numpy as np; import pandas as pd; from pyg import * ) Tj T* (>) Tj (>) Tj (>) Tj ( rtn = pd.Series\(np.random.normal\(0,1,10000\),drange\(-9999,0\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( fast = 64; slow = 192; vol = 32; instate = None    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 352.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (functions exposing their state) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 322.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (simple functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 310.2394 cm
Q
q
1 0 0 1 40.01575 298.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (diff_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 274.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .000671 Tw (returns a forward filled array, up to n values forward. Equivalent to diff\(a,n\) but returns the full state. See diff for full) Tj T* 0 Tw (details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 268.2394 cm
Q
q
1 0 0 1 40.01575 256.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (shift_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, axis) Tj (=) Tj (0) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 244.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equivalent to shift\(a,n\) but returns the full state. See shift for full details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 238.2394 cm
Q
q
1 0 0 1 40.01575 226.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (ratio_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (1) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 220.2394 cm
Q
q
1 0 0 1 40.01575 208.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_count_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 196.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_count_\(a\) is equivalent to ts_count\(a\) except vec is also returned. See ts_count for full documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 190.2394 cm
Q
q
1 0 0 1 40.01575 178.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_sum_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 166.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_sum_\(a\) is equivalent to ts_sum\(a\) except vec is also returned. See ts_sum for full documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 160.2394 cm
Q
q
1 0 0 1 40.01575 148.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_mean_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 136.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_mean_\(a\) is equivalent to ts_mean\(a\) except vec is also returned. See ts_mean for full documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 130.2394 cm
Q
q
1 0 0 1 40.01575 118.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_rms_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 106.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_rms_\(a\) is equivalent to ts_rms\(a\) except it also returns vec see ts_rms for full documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 100.2394 cm
Q
q
1 0 0 1 40.01575 88.23937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_std_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_std_\(a\) is equivalent to ts_std\(a\) except vec is also returned. See ts_std for full documentation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 70.23937 cm
Q
q
1 0 0 1 40.01575 58.23937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_skew_) Tj /F1 10 Tf ( \() Tj (a) Tj (, bias) Tj (=) Tj (False) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (102) Tj T* ET
Q
Q
 
endstream
endobj
1073 0 obj
<<
/Length 9748
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_skew_\(a\) is equivalent to ts_skew except vec is also returned. See ts_skew for full details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_max_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 745.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_max\(a\) is equivalent to pandas a.min\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 727.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ts.) Tj /F6 10 Tf (ts_max_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 715.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts_max\(a\) is equivalent to pandas a.min\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 709.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (ffill_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (=) Tj (0) Tj (, axis) Tj (=) Tj (0) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 685.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (returns a forward filled array, up to n values forward. supports state manegement) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 654.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (expanding window functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 642.6394 cm
Q
q
1 0 0 1 40.01575 630.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_mean_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 606.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.660315 Tw (Equivalent to expanding_mean\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (expanding_mean.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 600.6394 cm
Q
q
1 0 0 1 40.01575 588.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_rms_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 564.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.302623 Tw (Equivalent to expanding_rms\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (expanding_rms.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 558.6394 cm
Q
q
1 0 0 1 40.01575 546.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_std_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 522.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.660315 Tw (Equivalent to expanding_mean\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (expanding_std.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 516.6394 cm
Q
q
1 0 0 1 40.01575 504.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_sum_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 480.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.131084 Tw (Equivalent to expanding_sum\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (expanding_sum.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 474.6394 cm
Q
q
1 0 0 1 40.01575 462.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (expanding_skew_) Tj /F1 10 Tf ( \() Tj (a) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 438.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.660315 Tw (Equivalent to expanding_mean\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (expanding_skew.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 432.6394 cm
Q
q
1 0 0 1 40.01575 420.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._min.) Tj /F6 10 Tf (expanding_min_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 396.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.48294 Tw (Equivalent to a.expanding\(\).min\(\) but returns the full state: i.e. both data: the expanding\(\).min\(\) m: the current) Tj T* 0 Tw (minimum) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 390.6394 cm
Q
q
1 0 0 1 40.01575 378.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._max.) Tj /F6 10 Tf (expanding_max_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 354.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.112273 Tw (Equivalent to a.expanding\(\).max\(\) but returns the full state: i.e. both data: the expanding\(\).max\(\) m: the current) Tj T* 0 Tw (maximum) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 348.6394 cm
Q
q
1 0 0 1 40.01575 336.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (cumsum_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 312.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.131084 Tw (Equivalent to expanding_sum\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (expanding_sum.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 306.6394 cm
Q
q
1 0 0 1 40.01575 294.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._expanding.) Tj /F6 10 Tf (cumprod_) Tj /F1 10 Tf ( \() Tj (a) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 282.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equivalent to cumprod\(a\) but returns also the state variable. For full documentation, look at cumprod.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 252.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (rolling window functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 240.2394 cm
Q
q
1 0 0 1 40.01575 228.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_mean_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 204.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.779606 Tw (Equivalent to rolling_mean\(a\) but returns also the state variables t0,t1 etc. For full documentation, look at) Tj T* 0 Tw (rolling_mean.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 198.2394 cm
Q
q
1 0 0 1 40.01575 186.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_rms_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 162.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.336273 Tw (Equivalent to rolling_rms\(a\) but returns also the state variables t0,t1 etc. For full documentation, look at) Tj T* 0 Tw (rolling_rms.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 156.2394 cm
Q
q
1 0 0 1 40.01575 144.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_std_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 120.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.557606 Tw (Equivalent to rolling_std\(a\) but returns also the state variables t0,t1 etc. For full documentation, look at) Tj T* 0 Tw (rolling_std.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 114.2394 cm
Q
q
1 0 0 1 40.01575 102.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_sum_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 78.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.187606 Tw (Equivalent to rolling_sum\(a\) but returns also the state variables t0,t1 etc. For full documentation, look at) Tj T* 0 Tw (rolling_sum.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 72.23937 cm
Q
q
1 0 0 1 40.01575 60.23937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rolling.) Tj /F6 10 Tf (rolling_skew_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (103) Tj T* ET
Q
Q
 
endstream
endobj
1074 0 obj
<<
/Length 9414
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.928273 Tw (Equivalent to rolling_skew\(a\) but returns also the state variables t0,t1 etc. For full documentation, look at) Tj T* 0 Tw (rolling_skew.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 745.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._min.) Tj /F6 10 Tf (rolling_min_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, vec) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 733.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equivalent to rolling_min\(a\) but returns also the state. For full documentation, look at rolling_min.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 715.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._max.) Tj /F6 10 Tf (rolling_max_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 703.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equivalent to rolling_max\(a\) but returns also the state. For full documentation, look at rolling_max.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
Q
q
1 0 0 1 40.01575 685.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._median.) Tj /F6 10 Tf (rolling_median_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 673.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equivalent to rolling_median\(a\) but returns also the state. For full documentation, look at rolling_median.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
Q
q
1 0 0 1 40.01575 655.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._rank.) Tj /F6 10 Tf (rolling_rank_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 631.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 6.5857 Tw (Equivalent to rolling_rank\(a\) but returns also the state variables. For full documentation, look at) Tj T* 0 Tw (rolling_rank.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 625.0394 cm
Q
q
1 0 0 1 40.01575 613.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._stride.) Tj /F6 10 Tf (rolling_quantile_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, quantile) Tj (=) Tj (0.5) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 601.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equivalent to rolling_quantile\(a\) but returns also the state. For full documentation, look at rolling_quantile.__doc__) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 570.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (exponentially weighted moving functions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 558.6394 cm
Q
q
1 0 0 1 40.01575 546.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewma_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 522.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .408273 Tw (Equivalent to ewma but returns a state parameter for instantiation of later calculations. See ewma documentation) Tj T* 0 Tw (for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 516.6394 cm
Q
q
1 0 0 1 40.01575 504.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmrms_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 480.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.735292 Tw (Equivalent to ewmrms but returns a state parameter for instantiation of later calculations. See ewmrms) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 474.6394 cm
Q
q
1 0 0 1 40.01575 450.6394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmstd_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 426.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.209578 Tw (Equivalent to ewmstd but returns a state parameter for instantiation of later calculations. See ewmstd) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 420.6394 cm
Q
q
1 0 0 1 40.01575 396.6394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmvar_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (False) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 372.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.131007 Tw (Equivalent to ewmvar but returns a state parameter for instantiation of later calculations. See ewmvar) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 366.6394 cm
Q
q
1 0 0 1 40.01575 342.6394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmcor_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (True) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 318.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.131007 Tw (Equivalent to ewmcor but returns a state parameter for instantiation of later calculations. See ewmcor) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 312.6394 cm
Q
q
1 0 0 1 40.01575 300.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmcorr_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (False) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 276.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.702594 Tw (This calculates a full correlation matrix as a timeseries. Also returns the recent state of the calculations. See) Tj T* 0 Tw (ewmcorr for full details.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 270.6394 cm
Q
q
1 0 0 1 40.01575 246.6394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmLR_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (True) Tj (, axis) Tj (=) Tj (0) Tj (, c) Tj (=) Tj (None) Tj (, m) Tj (=) Tj (None) Tj (,) Tj T* (instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 222.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.131007 Tw (Equivalent to ewmcor but returns a state parameter for instantiation of later calculations. See ewmcor) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 216.6394 cm
Q
q
1 0 0 1 40.01575 204.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmGLM_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, bias) Tj (=) Tj (True) Tj (, data) Tj (=) Tj (None) Tj (, instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 180.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.019578 Tw (Equivalent to ewmGLM but returns a state parameter for instantiation of later calculations. See ewmGLM) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 174.6394 cm
Q
q
1 0 0 1 40.01575 150.6394 cm
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._ewm.) Tj /F6 10 Tf (ewmskew_) Tj /F1 10 Tf ( \() Tj (a) Tj (, n) Tj (, time) Tj (=) Tj (None) Tj (, bias) Tj (=) Tj (False) Tj (, min_sample) Tj (=) Tj (0.25) Tj (, axis) Tj (=) Tj (0) Tj (, data) Tj (=) Tj (None) Tj (,) Tj T* (instate) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 126.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.861007 Tw (Equivalent to ewmskew but returns a state parameter for instantiation of later calculations. See ewmskew) Tj T* 0 Tw (documentation for more details) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 93.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Index handling) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 63.43937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (df_fillna) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (104) Tj T* ET
Q
Q
 
endstream
endobj
1075 0 obj
<<
/Length 8917
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (df_fillna) Tj /F1 10 Tf ( \() Tj (df) Tj (, method) Tj (=) Tj (None) Tj (, axis) Tj (=) Tj (0) Tj (, limit) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 763.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Equivelent to df.fillna\(\) except:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 757.0394 cm
Q
q
1 0 0 1 50.01575 745.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (support np.ndarray as well as dataframes) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 739.0394 cm
Q
q
1 0 0 1 50.01575 727.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (support multiple methods of filling/interpolation) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 721.0394 cm
Q
q
1 0 0 1 50.01575 709.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports removal of nan from the start/all of the timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 703.0394 cm
Q
q
1 0 0 1 50.01575 691.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (supports action on multiple timeseries) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 691.0394 cm
Q
q
1 0 0 1 50.01575 685.0394 cm
Q
q
1 0 0 1 50.01575 670.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 658.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (df : dataframe/numpy array) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 642.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (method : ) Tj /F4 10 Tf (string, list of strings or None, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 591.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .665256 Tw (Either a fill method \(bfill, ffill, pad\) Or an interplation method: \221linear\222, \221time\222, \221index\222, \221values\222, \221nearest\222, \221zero\222,) Tj T* 0 Tw 13.2763 Tw (\221slinear\222, \221quadratic\222, \221cubic\222, \221barycentric\222, \221krogh\222, \221spline\222, \221polynomial\222, \221from_derivatives\222,) Tj T* 0 Tw 1.752435 Tw (\221piecewise_polynomial\222, \221pchip\222, \221akima\222, \221cubicspline\222 Or \221fnna\222: removes all to the first non nan Or \221nona\222:) Tj T* 0 Tw (removes all nans) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 575.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (axis : ) Tj /F4 10 Tf (int, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 560.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (axis. The default is 0.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 544.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (limit : ) Tj /F4 10 Tf (TYPE, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 529.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (when filling, how many nan get filled. The default is None \(indefinite\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 523.0394 cm
Q
q
1 0 0 1 50.01575 508.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (method ffill or bfill) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 441.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 532 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( df = np.array\([np.nan, 1., np.nan, 9, np.nan, 25]\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(df, 'ffill'\), np.array\([ np.nan, 1.,  1.,  9.,  9., 25.]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(df, ['ffill','bfill']\), np.array\([ 1., 1.,  1.,  9.,  9., 25.]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(df, ['ffill','bfill']\), np.array\([ 1., 1.,  1.,  9.,  9., 25.]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 402.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 784 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( df = np.array\([np.nan, 1., np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 9, np.nan, 25]\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(df, 'ffill', limit = 2\), np.array\([np.nan,  1.,  1.,  1., np.nan, np.nan, np.nan, np.nan,  9.,  9., 25.]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 382.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (df_fillna does not maintain state of latest \221prev\222 value: use ) Tj 1 0 0 rg (ffill_) Tj 0 0 0 rg ( for that.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 376.4394 cm
Q
q
1 0 0 1 50.01575 361.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (interpolation methods) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 306.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 526 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( df = np.array\([np.nan, 1., np.nan, 9, np.nan, 25]\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(df, 'linear'\), np.array\([ np.nan, 1.,  5.,  9.,  17., 25.]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(df, 'quadratic'\), np.array\([ np.nan, 1.,  4.,  9.,  16., 25.]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 292.6394 cm
Q
q
1 0 0 1 50.01575 277.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (method = fnna and nona) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 222.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *; import numpy as np) Tj T* (>) Tj (>) Tj (>) Tj ( ts = np.array\([np.nan] * 10 + [1.] * 10 + [np.nan]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(ts, 'fnna'\), np.array\([1.]*10 + [np.nan]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(df_fillna\(ts, 'nona'\), np.array\([1.]*10\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 184.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert len\(df_fillna\(np.array\([np.nan]\), 'nona'\)\) == 0) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(df_fillna\(np.array\([np.nan]\), 'fnna'\)\) == 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 170.0394 cm
Q
q
1 0 0 1 50.01575 155.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 143.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (array/dataframe with nans removed/filled) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 112.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (df_index) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 100.6394 cm
Q
q
1 0 0 1 40.01575 88.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (df_index) Tj /F1 10 Tf ( \() Tj (seq) Tj (, index) Tj (=) Tj ('inner') Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.63937 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Determines a joint index of multiple timeseries objects.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 70.63937 cm
Q
q
1 0 0 1 50.01575 55.63937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (105) Tj T* ET
Q
Q
 
endstream
endobj
1076 0 obj
<<
/Length 7632
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (seq : ) Tj /F4 10 Tf (sequence whose index needs to be determined) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a \(possible nested\) sequence of timeseries/non-timeseries object within lists/dicts) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 744.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (index : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 729.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (method to determine the index. The default is \221inner\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 723.0394 cm
Q
q
1 0 0 1 50.01575 708.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 692.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (pd.Index) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 677.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The joint index.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 671.0394 cm
Q
q
1 0 0 1 50.01575 656.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 577.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 688 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tss = [pd.Series\(np.random.normal\(0,1,10\), drange\(-i, 9-i\)\) for i in range\(5\)]) Tj T* (>) Tj (>) Tj (>) Tj ( more_tss_as_dict = dict\(zip\('abcde',[pd.Series\(np.random.normal\(0,1,10\), drange\(-i, 9-i\)\) for i in range\(5\)]\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = df_index\(tss + [more_tss_as_dict], 'inner'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(res\) == 6) Tj T* (>) Tj (>) Tj (>) Tj ( res = df_index\(more_tss_as_dict, 'outer'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(res\) == 14) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 546.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (df_reindex) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 534.8394 cm
Q
q
1 0 0 1 40.01575 522.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (df_reindex) Tj /F1 10 Tf ( \() Tj (ts) Tj (, index) Tj (=) Tj (None) Tj (, method) Tj (=) Tj (None) Tj (, limit) Tj (=) Tj (None) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 510.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (A slightly more general version of df.reindex\(index\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 504.8394 cm
Q
q
1 0 0 1 50.01575 489.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 473.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (ts : ) Tj /F4 10 Tf (dataframe or numpy array \(or list/dict of theses\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 458.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries to be reindexed) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 442.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (index : ) Tj /F4 10 Tf (str, timeseries, pd.Index.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 427.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The new index) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 411.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (method : ) Tj /F4 10 Tf (str, list of str, float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 396.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (various methods of handling nans are available. The default is None. See df_fillna for a full list.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 390.8394 cm
Q
q
1 0 0 1 50.01575 375.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 359.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (timeseries/np.ndarray \(or list/dict of theses\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 344.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (timeseries reindex.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 338.8394 cm
Q
q
1 0 0 1 50.01575 323.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (index = inner/outer) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 257.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tss = [pd.Series\(np.random.normal\(0,1,10\), drange\(-i, 9-i\)\) for i in range\(5\)]) Tj T* (>) Tj (>) Tj (>) Tj ( res = df_reindex\(tss, 'inner'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(res[0]\) == 6) Tj T* (>) Tj (>) Tj (>) Tj ( res = df_reindex\(tss, 'outer'\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(res[0]\) == 14) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 243.0394 cm
Q
q
1 0 0 1 50.01575 228.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (index provided) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 161.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( tss = [pd.Series\(np.random.normal\(0,1,10\), drange\(-i, 9-i\)\) for i in range\(5\)]) Tj T* (>) Tj (>) Tj (>) Tj ( res = df_reindex\(tss, tss[0]\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(res[0], tss[0]\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = df_reindex\(tss, tss[0].index\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(res[0], tss[0]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 130.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (presync) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 118.8394 cm
Q
q
1 0 0 1 40.01575 106.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (presync) Tj /F1 10 Tf ( \(\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 82.83937 cm
q
BT 1 0 0 1 0 14 Tm .974631 Tw 12 TL /F1 10 Tf 0 0 0 rg (Much of timeseries analysis in Pandas is spent aligning multiple timeseries before feeding them into a function.) Tj T* 0 Tw (presync allows easy presynching of all paramters of a function.) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 76.83937 cm
Q
q
1 0 0 1 50.01575 61.83937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 15.23937 0 Td (Parameters:) Tj T* -15.23937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (106) Tj T* ET
Q
Q
 
endstream
endobj
1077 0 obj
<<
/Length 7542
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 775.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (function : ) Tj /F4 10 Tf (callable, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 760.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function to be presynched. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 744.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (index : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 729.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (index join policy. The default is \221inner\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 713.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (method : ) Tj /F4 10 Tf (str/int/list of these, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 698.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (method of nan handling. The default is None.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 682.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (columns : ) Tj /F4 10 Tf (str, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 667.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (columns join policy. The default is \221inner\222.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 651.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (default : ) Tj /F4 10 Tf (float, optional) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 636.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (value when no data is available. The default is np.nan.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 630.0394 cm
Q
q
1 0 0 1 50.01575 615.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 31.92937 0 Td (Returns:) Tj T* -31.92937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 603.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (presynch-decorated function) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 597.0394 cm
Q
q
1 0 0 1 50.01575 582.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.57937 0 Td (Example:) Tj T* -28.57937 0 Td ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 515.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import *) Tj T* (>) Tj (>) Tj (>) Tj ( x = pd.Series\([1,2,3,4], drange\(-3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.Series\([1,2,3,4], drange\(-4,-1\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( z = pd.DataFrame\([[1,2],[3,4]], drange\(-3,-2\), ['a','b']\)) Tj T* (>) Tj (>) Tj (>) Tj ( addition = lambda a, b: a+b    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 495.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (#We get some nonsensical results:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 476.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 18 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert list\(addition\(x,z\).columns\) ==  list\(x.index\) + ['a', 'b']) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 456.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (#But:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 413.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert list\(presync\(addition\)\(x,z\).columns\) == ['a', 'b']) Tj T* (>) Tj (>) Tj (>) Tj ( res = presync\(addition, index='outer', method = 'ffill'\)\(x,z\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(res.a.values, np.array\([2,5,6,7]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 399.6394 cm
Q
q
1 0 0 1 50.01575 384.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 20.23937 0 Td (Example 2:) Tj T* -20.23937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (alignment works for parameters \221buried\222 within\205) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 329.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 688 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( function = lambda a, b: a['x'] + a['y'] + b    ) Tj T* (>) Tj (>) Tj (>) Tj ( f = presync\(function, 'outer', method = 'ffill'\)) Tj T* (>) Tj (>) Tj (>) Tj ( res = f\(dict\(x = x, y = y\), b = z\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(res, pd.DataFrame\(dict\(a = [np.nan, 4, 8, 10, 11], b = [np.nan, 5, 9, 11, 12]\), index = drange\(-4\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 315.8394 cm
Q
q
1 0 0 1 50.01575 300.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 20.23937 0 Td (Example 3:) Tj T* -20.23937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (alignment of numpy arrays) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 222.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 856 78 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( addition = lambda a, b: a+b) Tj T* (>) Tj (>) Tj (>) Tj ( a = presync\(addition\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(pd.Series\([1,2,3,4], drange\(-3\)\), np.array\([[1,2,3,4]]\).T\),  pd.Series\([2,4,6,8], drange\(-3\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(pd.Series\([1,2,3,4], drange\(-3\)\), np.array\([1,2,3,4]\)\),  pd.Series\([2,4,6,8], drange\(-3\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(pd.Series\([1,2,3,4], drange\(-3\)\), np.array\([[1,2,3,4],[5,6,7,8]]\).T\),  pd.DataFrame\({0:[2,4,6,8], 1:[6,8,10,12]}, drange\(-3\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(np.array\([1,2,3,4]\), np.array\([[1,2,3,4]]\).T\),  np.array\([2,4,6,8]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 208.0394 cm
Q
q
1 0 0 1 50.01575 193.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 20.23937 0 Td (Example 4:) Tj T* -20.23937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (inner join alignment of columns in dataframes by default) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 78.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 610 114 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = pd.DataFrame\({'a':[2,4,6,8], 'b':[6,8,10,12.]}, drange\(-3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.DataFrame\({'wrong':[2,4,6,8], 'columns':[6,8,10,12]}, drange\(-3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert len\(a\(x,y\)\) == 0    ) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.DataFrame\({'a':[2,4,6,8], 'other':[6,8,10,12.]}, drange\(-3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(x,y\),x[['a']]*2\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.DataFrame\({'a':[2,4,6,8], 'b':[6,8,10,12.]}, drange\(-3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(x,y\),x*2\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.DataFrame\({'column name for a single column dataframe is ignored':[1,1,1,1]}, drange\(-3\)\) ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(x,y\),x+1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (107) Tj T* ET
Q
Q
 
endstream
endobj
1078 0 obj
<<
/Length 7221
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 50.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = presync\(addition, columns = 'outer'\)) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.DataFrame\({'other':[2,4,6,8], 'a':[6,8,10,12]}, drange\(-3\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert sorted\(a\(x,y\).columns\) == ['a','b','other']    ) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 730.2394 cm
Q
q
1 0 0 1 50.01575 715.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 20.23937 0 Td (Example 4:) Tj T* -20.23937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ffilling, bfilling) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 672.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( x = pd.Series\([1.,np.nan,3.,4.], drange\(-3\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.Series\([1.,np.nan,3.,4.], drange\(-4,-1\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(x,y\), pd.Series\([np.nan, np.nan,7], drange\(-3,-1\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 652.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (but, we provide easy conversion of internal parameters of presync:) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 597.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 508 54 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( assert eq\(a.ffill\(x,y\), pd.Series\([2,4,7], drange\(-3,-1\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a.bfill\(x,y\), pd.Series\([4,6,7], drange\(-3,-1\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a.oj\(x,y\), pd.Series\([np.nan, np.nan, np.nan, 7, np.nan], drange\(-4\)\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a.oj.ffill\(x,y\), pd.Series\([np.nan, 2, 4, 7, 8], drange\(-4\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 583.6394 cm
Q
q
1 0 0 1 50.01575 568.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 20.23937 0 Td (Example 5:) Tj T* -20.23937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (indexing to a specific index) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 501.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( index = pd.Index\([dt\(-3\), dt\(-1\)]\)) Tj T* (>) Tj (>) Tj (>) Tj ( a = presync\(addition, index = index\)) Tj T* (>) Tj (>) Tj (>) Tj ( x = pd.Series\([1.,np.nan,3.,4.], drange\(-3\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( y = pd.Series\([1.,np.nan,3.,4.], drange\(-4,-1\)\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(a\(x,y\), pd.Series\([np.nan, 7], index\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 487.8394 cm
Q
q
1 0 0 1 50.01575 472.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 20.23937 0 Td (Example 6:) Tj T* -20.23937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (returning complicated stuff) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 50.01575 430.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 42 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pyg import * ) Tj T* (>) Tj (>) Tj (>) Tj ( a = pd.DataFrame\(np.random.normal\(0,1,\(100,10\)\), drange\(-99\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( b = pd.DataFrame\(np.random.normal\(0,1,\(100,10\)\), drange\(-99\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 391.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 30 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( def f\(a, b\):) Tj T* (>) Tj (>) Tj (>) Tj (     return \(a*b, ts_sum\(a\), ts_sum\(b\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 50.01575 316.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 504.4441 66 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( old = f\(a,b\)    ) Tj T* (>) Tj (>) Tj (>) Tj ( self = presync\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( args = \(\); kwargs = dict\(a = a, b = b\)) Tj T* (>) Tj (>) Tj (>) Tj ( new = self\(*args, **kwargs\)) Tj T* (>) Tj (>) Tj (>) Tj ( assert eq\(new, old\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 286.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (add/sub/mul/div/pow operators) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 274.0394 cm
Q
q
1 0 0 1 40.01575 262.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (add_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 250.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (addition of a and b supporting presynching \(inner join\) of timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 244.0394 cm
Q
q
1 0 0 1 40.01575 232.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (mul_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 220.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (multiplication of a and b supporting presynching \(inner join\) of timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 214.0394 cm
Q
q
1 0 0 1 40.01575 202.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (div_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 190.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (division of a by b supporting presynching \(inner join\) of timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 184.0394 cm
Q
q
1 0 0 1 40.01575 172.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (sub_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 160.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (subtraction of b from a supporting presynching \(inner join\) of timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 154.0394 cm
Q
q
1 0 0 1 40.01575 142.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pyg.timeseries._index.) Tj /F6 10 Tf (pow_) Tj /F1 10 Tf ( \() Tj (a) Tj (, b) Tj (\)) Tj T* ET
Q
Q
q
1 0 0 1 50.01575 130.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (equivalent to a**b supporting presynching \(inner join\) of timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 94.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Tutorials) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 64.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .614952 Tw (Below are some tutorials covering some aspects of pyg that may not be obvious. All the tutorials are active python) Tj T* 0 Tw (notebooks available in the ../docs/lab/ directory.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Tutorials) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (108) Tj T* ET
Q
Q
 
endstream
endobj
1079 0 obj
<<
/Length 22672
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 767.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.base.Dict) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 737.8394 cm
q
BT 1 0 0 1 0 14 Tm .190273 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are a few existing dict-extensions similar to Dict \(a nice example is ) Tj 0 0 .501961 rg (https://github.com/mewwts/addict) Tj 0 0 0 rg (\) but Dict) Tj T* 0 Tw (has a little more up its sleeve.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 705.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (initialization) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 668.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 18 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 641.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 12 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 614.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 12 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 36 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj (:) Tj ( ) Tj (a) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (b) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 587.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 24 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 555.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (members access) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 530.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 24 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 503.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (a) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 476.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
1 .941176 .941176 rg
n 12 0 18 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
1 .941176 .941176 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 449.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
1 .941176 .941176 rg
n 18 0 18 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
1 .941176 .941176 rg
n 48 0 18 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([[) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 429.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (But the fun starts when Dict allows you to access ) Tj /F2 10 Tf (functions) Tj /F1 10 Tf ( of its keys:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 411.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 36 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj (:) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (b) Tj (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 379.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .530613 Tw (It is important to note that be making d[\221a\222, \221b\222] access both \221a\222 and \221b\222 keys, we abandon the right to have tuples as) Tj T* 0 Tw (keys.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 324.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 24 12 re f*
.933333 1 .8 rg
n 48 36 18 12 re f*
1 .941176 .941176 rg
n 66 36 18 12 re f*
.933333 1 .8 rg
n 84 36 6 12 re f*
1 .941176 .941176 rg
n 90 36 18 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 138 36 12 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 36 12 re f*
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 48 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 180 12 312 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
1 .941176 .941176 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
1 .941176 .941176 rg
n 66 0 18 12 re f*
.933333 1 .8 rg
n 84 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\({\() Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)) Tj ( ) Tj (:) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (}\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pytest) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (KeyError) Tj /F5 10 Tf 0 0 0 rg (\):) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# Dict will be trying to grab 'a' and 'b' separately) Tj /F5 10 Tf 0 0 0 rg  T* (    ) Tj (d) Tj ([\() Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 291.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (adding) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 266.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 24 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 198 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# like .update\(\) but not in-place) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 246.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (But addition is subtly different from update in the case of tree structure:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 203.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 24 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
.933333 1 .8 rg
n 42 24 24 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 138 24 24 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 240 24 12 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 24 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 24 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
1 .941176 .941176 rg
n 204 12 192 12 re f*
.933333 1 .8 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 420 12 6 12 re f*
.933333 1 .8 rg
n 432 12 6 12 re f*
.933333 1 .8 rg
n 438 12 12 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 36 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (tree) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (update) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('new value for b.c but keep b.d') Tj 0 0 0 rg (,) Tj ( ) Tj (e) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (tree) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (update) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 183.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Tree updating is actually important enough to have its own function that can operate on dict-trees) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 153.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 42 12 24 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 24 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 240 12 12 12 re f*
.933333 1 .8 rg
n 258 12 108 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 24 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 36 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 234 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (tree) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# I only use dicts) Tj /F5 10 Tf 0 0 0 rg  T* (tree_update) Tj (\() Tj (tree) Tj (,) Tj ( ) Tj (update) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# but I can still update it like a tree) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 120.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (subtracting) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 102.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can subtract keys or list of keys) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 83.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 66 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 258 0 114 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('remove me') Tj 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# subtracting a key) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 56.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 574 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 66 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
1 .941176 .941176 rg
n 156 0 78 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
1 .941176 .941176 rg
n 306 0 18 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
1 .941176 .941176 rg
n 336 0 18 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 204 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('I am gone') Tj 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('and so am I') Tj 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# subtracting a collection of keys) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.Dict) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (109) Tj T* ET
Q
Q
 
endstream
endobj
1080 0 obj
<<
/Length 28677
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 718 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 42 12 24 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 24 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
1 .941176 .941176 rg
n 192 12 66 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
1 .941176 .941176 rg
n 294 12 78 12 re f*
.933333 1 .8 rg
n 372 12 12 12 re f*
.933333 1 .8 rg
n 390 12 6 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 414 12 6 12 re f*
.933333 1 .8 rg
n 420 12 6 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
1 .941176 .941176 rg
n 48 0 18 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
1 .941176 .941176 rg
n 78 0 18 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 114 0 600 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (tree) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('delete me') Tj 0 0 0 rg (,) Tj ( ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('but keep me') Tj 0 0 0 rg (\),) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (tree) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (\() Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (\)) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## subtracting a branch in a tree using a tuple, possible because we know \('b', 'c'\) is never a node) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 723.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (modifying the keys: rename) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 698.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 36 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 156 0 54 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 168 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rename) Tj (\() Tj .729412 .129412 .129412 rg ('prefix_') Tj 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# need to be done sufficient) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 671.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 36 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 156 0 54 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rename) Tj (\() Tj .729412 .129412 .129412 rg ('_suffix') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 645.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 36 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 30 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rename) Tj (\() Tj (upper) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 618.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 36 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
1 .941176 .941176 rg
n 222 0 54 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
1 .941176 .941176 rg
n 312 0 54 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rename) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Abraham') Tj 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Barbara') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 585.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (modifying the values: do) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 560.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 36 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 12 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 204 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# modify all values using function) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 533.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 168 0 12 12 re f*
.933333 1 .8 rg
n 180 0 36 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 12 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 276 0 36 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
.933333 1 .8 rg
n 372 0 252 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\([) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# modify all values using list of function) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 507.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 706 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 168 0 12 12 re f*
.933333 1 .8 rg
n 180 0 36 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 12 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 276 0 36 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
1 .941176 .941176 rg
n 372 0 18 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
1 .941176 .941176 rg
n 402 0 18 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 432 0 270 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\([) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# modify selected keys using list of function) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 474.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Dict can store a calculation flow) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 444.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .779205 Tw (Being able to access function of members means we can think of a Dict as a container of variables. Consider this) Tj T* 0 Tw (code:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 353.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 18 12 re f*
.933333 1 .8 rg
n 24 72 24 12 re f*
.933333 1 .8 rg
n 48 72 6 12 re f*
.933333 1 .8 rg
n 54 72 6 12 re f*
.933333 1 .8 rg
n 60 72 6 12 re f*
.933333 1 .8 rg
n 72 72 6 12 re f*
.933333 1 .8 rg
n 78 72 12 12 re f*
.933333 1 .8 rg
n 24 60 6 12 re f*
.933333 1 .8 rg
n 36 60 6 12 re f*
.933333 1 .8 rg
n 48 60 6 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 72 60 6 12 re f*
.933333 1 .8 rg
n 24 48 6 12 re f*
.933333 1 .8 rg
n 36 48 6 12 re f*
.933333 1 .8 rg
n 48 48 6 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 72 48 6 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 36 36 6 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 54 36 6 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 72 36 6 12 re f*
.933333 1 .8 rg
n 84 36 6 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 24 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (func) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (b) Tj (\):) Tj  T* (    ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (b) Tj  T* (    ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (c) Tj  T* (    ) Tj (e) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (b) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (d) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (c) Tj  T* (    ) Tj (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (\() Tj (d) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (e) Tj (\)) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (c) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (f) Tj  T* (func) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 333.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How can we keep track of our calculations and debug it easily? Consider rewriting this:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 254.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 6 12 re f*
.933333 1 .8 rg
n 12 60 6 12 re f*
.933333 1 .8 rg
n 24 60 24 12 re f*
.933333 1 .8 rg
n 48 60 6 12 re f*
.933333 1 .8 rg
n 54 60 6 12 re f*
.933333 1 .8 rg
n 66 60 6 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 84 60 6 12 re f*
.933333 1 .8 rg
n 96 60 6 12 re f*
.933333 1 .8 rg
n 108 60 6 12 re f*
.933333 1 .8 rg
n 120 60 6 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 0 48 6 12 re f*
.933333 1 .8 rg
n 12 48 6 12 re f*
.933333 1 .8 rg
n 24 48 6 12 re f*
.933333 1 .8 rg
n 30 48 6 12 re f*
.933333 1 .8 rg
n 36 48 6 12 re f*
.933333 1 .8 rg
n 48 48 6 12 re f*
.933333 1 .8 rg
n 60 48 36 12 re f*
.933333 1 .8 rg
n 102 48 6 12 re f*
.933333 1 .8 rg
n 108 48 6 12 re f*
.933333 1 .8 rg
n 120 48 6 12 re f*
.933333 1 .8 rg
n 126 48 6 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 150 48 6 12 re f*
.933333 1 .8 rg
n 162 48 6 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 30 36 6 12 re f*
.933333 1 .8 rg
n 36 36 6 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 60 36 36 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 126 36 6 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 168 36 6 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 60 24 36 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 60 12 36 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj (:) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (b) Tj (\)) Tj  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (\() Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (b) Tj (,) Tj ( ) Tj (c) Tj (:) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (c) Tj (\)) Tj  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (\() Tj (e) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj (b) Tj (,) Tj (c) Tj (,) Tj (d) Tj ( ) Tj (:) Tj ( ) Tj (a) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (b) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (d) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (c) Tj (\)) Tj  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (\() Tj (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (c) Tj (,) Tj (d) Tj (,) Tj (e) Tj (:) Tj ( ) Tj (\() Tj (d) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (e) Tj (\)) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (c) Tj (\)) Tj  T* (x) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 234.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We have all the internals of the function exposed and we are able to separate calculation flow and data easily:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 155.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 120 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 138 60 24 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 168 60 6 12 re f*
.933333 1 .8 rg
n 180 60 6 12 re f*
.933333 1 .8 rg
n 192 60 36 12 re f*
.933333 1 .8 rg
n 234 60 6 12 re f*
.933333 1 .8 rg
n 240 60 6 12 re f*
.933333 1 .8 rg
n 252 60 6 12 re f*
.933333 1 .8 rg
n 258 60 6 12 re f*
.933333 1 .8 rg
n 270 60 6 12 re f*
.933333 1 .8 rg
n 282 60 6 12 re f*
.933333 1 .8 rg
n 294 60 6 12 re f*
.933333 1 .8 rg
n 300 60 6 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 6 12 re f*
.933333 1 .8 rg
n 192 48 36 12 re f*
.933333 1 .8 rg
n 234 48 6 12 re f*
.933333 1 .8 rg
n 240 48 6 12 re f*
.933333 1 .8 rg
n 252 48 6 12 re f*
.933333 1 .8 rg
n 258 48 6 12 re f*
.933333 1 .8 rg
n 270 48 6 12 re f*
.933333 1 .8 rg
n 282 48 6 12 re f*
.933333 1 .8 rg
n 294 48 6 12 re f*
.933333 1 .8 rg
n 300 48 6 12 re f*
.933333 1 .8 rg
n 168 36 6 12 re f*
.933333 1 .8 rg
n 180 36 6 12 re f*
.933333 1 .8 rg
n 192 36 36 12 re f*
.933333 1 .8 rg
n 234 36 6 12 re f*
.933333 1 .8 rg
n 240 36 6 12 re f*
.933333 1 .8 rg
n 246 36 6 12 re f*
.933333 1 .8 rg
n 252 36 6 12 re f*
.933333 1 .8 rg
n 258 36 6 12 re f*
.933333 1 .8 rg
n 264 36 6 12 re f*
.933333 1 .8 rg
n 270 36 6 12 re f*
.933333 1 .8 rg
n 282 36 6 12 re f*
.933333 1 .8 rg
n 294 36 6 12 re f*
.933333 1 .8 rg
n 300 36 6 12 re f*
.933333 1 .8 rg
n 306 36 6 12 re f*
.933333 1 .8 rg
n 318 36 6 12 re f*
.933333 1 .8 rg
n 330 36 6 12 re f*
.933333 1 .8 rg
n 336 36 6 12 re f*
.933333 1 .8 rg
n 342 36 6 12 re f*
.933333 1 .8 rg
n 348 36 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 36 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 252 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 288 24 6 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 6 12 re f*
.933333 1 .8 rg
n 306 24 6 12 re f*
.933333 1 .8 rg
n 312 24 6 12 re f*
.933333 1 .8 rg
n 318 24 6 12 re f*
.933333 1 .8 rg
n 0 0 84 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 24 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (calculation_pipeline) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj (:) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (b) Tj (,) Tj  T* (                            ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (b) Tj (,) Tj ( ) Tj (c) Tj (:) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (c) Tj (,) Tj  T* (                            ) Tj (e) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj (b) Tj (,) Tj (c) Tj (,) Tj (d) Tj ( ) Tj (:) Tj ( ) Tj (a) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (b) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (d) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (c) Tj (,) Tj  T* (                            ) Tj (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (c) Tj (,) Tj (d) Tj (,) Tj (e) Tj (:) Tj ( ) Tj (\() Tj (d) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (e) Tj (\)) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (c) Tj (\)) Tj  T*  T* (initial_values) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 129.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 84 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 12 12 re f*
.933333 1 .8 rg
n 102 0 120 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (initial_values) Tj (\() Tj .188235 .188235 .188235 rg (**) Tj 0 0 0 rg (calculation_pipeline) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 109.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can see in pyg.base.dictable tutorial how this is extended) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.Dict) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (110) Tj T* ET
Q
Q
 
endstream
endobj
1081 0 obj
<<
/Length 18152
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 767.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 737.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .073221 Tw (dictable is a table, a collection of iterable records. It is also a dict with each key\222s value being a column. Why not use) Tj T* 0 Tw (a pandas.DataFrame? pd.DataFrame leads a dual life:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 731.8394 cm
Q
q
1 0 0 1 40.01575 731.8394 cm
Q
q
1 0 0 1 40.01575 719.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (by day an index-based optimized numpy array supporting e.g. timeseries analytics etc.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 713.8394 cm
Q
q
1 0 0 1 40.01575 689.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .870241 Tw (by night, a table with keys supporting filtering, aggregating, pivoting on keys as well as inner/outer joining on) Tj T* 0 Tw (keys.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 689.8394 cm
Q
q
1 0 0 1 40.01575 587.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL 2.522273 Tw (As a result, the pandas interface is somewhat cumbersome. Further, the DataFrame isn\222t really designed for) Tj T* 0 Tw 2.467756 Tw (containing more complicated objects within it. Conversely, dictable only tries to do the latter and is designed) Tj T* 0 Tw 2.691268 Tw (precisely for holding entire research process in one place. You can think of dictable as \221one level up\222 on a) Tj T* 0 Tw .060783 Tw (DataFrame: a dictable will handle thousands of data frames within it with ease. Indeed, dictable should be thought of) Tj T* 0 Tw .502705 Tw (as an \221organiser of research flow\222 rather than as an array of primitives. In general, each row will contain some keys) Tj T* 0 Tw 3.681084 Tw (indexing the experiment, while some keys will contain complicated objects: a pd.DataFrame, a timeseries,) Tj T* 0 Tw .6457 Tw (yield_curves, machine-learning experiments etc. The interface is succinct and extremely intuitive, allowing the user) Tj T* 0 Tw (to concentrate on logic of the calculations rather than boilerplate.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 555.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Motivation: dictable as an organiser of research flow) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 537.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We start with a simple motivating example. Here is a typical workflow:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 506.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 18 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 36 12 re f*
.933333 1 .8 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 216 12 12 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 240 12 36 12 re f*
.933333 1 .8 rg
n 282 12 30 12 re f*
.933333 1 .8 rg
n 318 12 12 12 re f*
.933333 1 .8 rg
n 336 12 12 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 48 12 re f*
.933333 1 .8 rg
n 96 0 12 12 re f*
.933333 1 .8 rg
n 114 0 12 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pandas) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pd) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (yfinance) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (yf) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 407.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 42 12 re f*
.933333 1 .8 rg
n 48 72 6 12 re f*
.933333 1 .8 rg
n 60 72 6 12 re f*
1 .941176 .941176 rg
n 66 72 36 12 re f*
.933333 1 .8 rg
n 102 72 6 12 re f*
1 .941176 .941176 rg
n 114 72 30 12 re f*
.933333 1 .8 rg
n 144 72 6 12 re f*
1 .941176 .941176 rg
n 156 72 36 12 re f*
.933333 1 .8 rg
n 192 72 6 12 re f*
1 .941176 .941176 rg
n 204 72 36 12 re f*
.933333 1 .8 rg
n 240 72 6 12 re f*
1 .941176 .941176 rg
n 252 72 72 12 re f*
.933333 1 .8 rg
n 324 72 6 12 re f*
1 .941176 .941176 rg
n 336 72 18 12 re f*
.933333 1 .8 rg
n 354 72 6 12 re f*
.933333 1 .8 rg
n 0 60 42 12 re f*
.933333 1 .8 rg
n 48 60 6 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 12 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 84 60 48 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 138 60 36 12 re f*
.933333 1 .8 rg
n 174 60 6 12 re f*
.933333 1 .8 rg
n 186 60 18 12 re f*
.933333 1 .8 rg
n 210 60 36 12 re f*
.933333 1 .8 rg
n 252 60 12 12 re f*
.933333 1 .8 rg
n 270 60 42 12 re f*
.933333 1 .8 rg
n 312 60 6 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 6 12 re f*
.933333 1 .8 rg
n 54 48 6 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
1 .941176 .941176 rg
n 72 48 66 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 150 48 18 12 re f*
.933333 1 .8 rg
n 174 48 6 12 re f*
.933333 1 .8 rg
n 186 48 12 12 re f*
.933333 1 .8 rg
n 204 48 42 12 re f*
.933333 1 .8 rg
n 246 48 6 12 re f*
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 6 12 re f*
.933333 1 .8 rg
n 42 36 6 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 54 36 6 12 re f*
.933333 1 .8 rg
n 60 36 24 12 re f*
.933333 1 .8 rg
n 84 36 12 12 re f*
.933333 1 .8 rg
n 102 36 18 12 re f*
.933333 1 .8 rg
n 126 36 6 12 re f*
.933333 1 .8 rg
n 138 36 12 12 re f*
.933333 1 .8 rg
n 156 36 36 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 0 24 24 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 60 24 18 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 12 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 18 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 144 24 18 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 180 24 12 12 re f*
.933333 1 .8 rg
n 198 24 24 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 0 12 42 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 18 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 12 12 re f*
.933333 1 .8 rg
n 156 12 18 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 24 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 216 12 24 12 re f*
.933333 1 .8 rg
n 240 12 12 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 24 12 re f*
.933333 1 .8 rg
n 90 0 12 12 re f*
.933333 1 .8 rg
n 108 0 18 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 12 12 re f*
.933333 1 .8 rg
n 162 0 42 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F5 10 Tf 0 0 0 rg (symbols) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('MSFT') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('WMT') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('TSLA') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('AAPL') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('BAD_SYMBOL') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('C') Tj 0 0 0 rg (]) Tj  T* (history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (yf) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (download) Tj (\() Tj (symbol) Tj (\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (symbol) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (symbols) Tj (]) Tj  T* (prices) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (h) Tj ([) Tj .729412 .129412 .129412 rg ('Adj Close') Tj 0 0 0 rg (]) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (h) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (history) Tj (]) Tj  T* (rtns) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (p) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (diff) Tj (\(\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (p) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (prices) Tj (]) Tj  T* (vols) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (r) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (\(\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (r) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (rtns) Tj (]) Tj  T* (zscores) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (r) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (v) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (r) Tj (,) Tj (v) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (zip) Tj 0 0 0 rg (\() Tj (rtns) Tj (,) Tj ( ) Tj (vols) Tj (\)]) Tj  T* (zavgs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (z) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (z) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (zscores) Tj (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 380.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F5 10 Tf 12 TL (zavgs) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 360.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (At this point we ask ourselves: Why do we have a ) Tj /F2 10 Tf (nan) Tj /F1 10 Tf (? Which ticker was it, and when did it go wrong?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 341.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 18 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 174 0 18 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 42 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 252 0 30 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 12 12 re f*
.933333 1 .8 rg
n 312 0 12 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 30 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
.933333 1 .8 rg
n 372 0 18 12 re f*
.933333 1 .8 rg
n 396 0 66 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (bad_symbols) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (s) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (s) Tj (,) Tj ( ) Tj (z) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (zip) Tj 0 0 0 rg (\() Tj (symbols) Tj (,) Tj ( ) Tj (zavgs) Tj (\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (isnan) Tj (\() Tj (z) Tj (\)];) Tj ( ) Tj (bad_symbols) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 321.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Great, how do we remove bad symbols from all our other variables?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 303.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 60 0 18 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 12 12 re f*
.933333 1 .8 rg
n 132 0 18 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 42 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 24 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 246 0 12 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 276 0 18 12 re f*
.933333 1 .8 rg
n 300 0 12 12 re f*
.933333 1 .8 rg
n 318 0 66 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (vols) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (v) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (s) Tj (,) Tj ( ) Tj (v) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (zip) Tj 0 0 0 rg (\() Tj (symbols) Tj (,) Tj ( ) Tj (vols) Tj (\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (s) Tj ( ) Tj /F6 10 Tf (not) Tj /F5 10 Tf ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (bad_symbols) Tj (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 283.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now we can calculate some stuff with rtns and vols perhaps?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 264.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 18 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 24 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 18 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 12 12 re f*
.933333 1 .8 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 24 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 24 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 18 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 360 0 12 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 384 0 12 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 408 0 12 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 432 0 12 12 re f*
.933333 1 .8 rg
n 444 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (ewmas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (r) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj (n) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (v) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (r) Tj (,) Tj (v) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (zip) Tj 0 0 0 rg (\() Tj (rtns) Tj (,) Tj ( ) Tj (vols) Tj (\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (n) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 244.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Things went wrong and went wrong silently too:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 238.2394 cm
Q
q
1 0 0 1 40.01575 238.2394 cm
Q
q
1 0 0 1 40.01575 214.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.024004 Tw (We forgot to remove bad data from rtns as well as from vols so our zip function is zipping the wrong stocks) Tj T* 0 Tw (together) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 208.2394 cm
Q
q
1 0 0 1 40.01575 196.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It is nearly impossible to discover what item in the list belong to what n and what stock) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 196.2394 cm
Q
q
1 0 0 1 40.01575 178.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you ever dealt with real data, the mess described above must be familiar.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (111) Tj T* ET
Q
Q
 
endstream
endobj
1082 0 obj
<<
/Length 25737
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Same code, in dictable) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 649.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 114 re B*
Q
q
.933333 1 .8 rg
n 0 96 24 12 re f*
.933333 1 .8 rg
n 30 96 18 12 re f*
.933333 1 .8 rg
n 54 96 36 12 re f*
.933333 1 .8 rg
n 96 96 6 12 re f*
.933333 1 .8 rg
n 0 84 36 12 re f*
.933333 1 .8 rg
n 42 84 48 12 re f*
.933333 1 .8 rg
n 96 84 12 12 re f*
.933333 1 .8 rg
n 114 84 12 12 re f*
.933333 1 .8 rg
n 0 72 6 12 re f*
.933333 1 .8 rg
n 12 72 6 12 re f*
.933333 1 .8 rg
n 24 72 48 12 re f*
.933333 1 .8 rg
n 72 72 6 12 re f*
.933333 1 .8 rg
n 78 72 36 12 re f*
.933333 1 .8 rg
n 120 72 6 12 re f*
.933333 1 .8 rg
n 132 72 6 12 re f*
1 .941176 .941176 rg
n 138 72 36 12 re f*
.933333 1 .8 rg
n 174 72 6 12 re f*
1 .941176 .941176 rg
n 186 72 30 12 re f*
.933333 1 .8 rg
n 216 72 6 12 re f*
1 .941176 .941176 rg
n 228 72 36 12 re f*
.933333 1 .8 rg
n 264 72 6 12 re f*
1 .941176 .941176 rg
n 276 72 36 12 re f*
.933333 1 .8 rg
n 312 72 6 12 re f*
1 .941176 .941176 rg
n 324 72 72 12 re f*
.933333 1 .8 rg
n 396 72 6 12 re f*
1 .941176 .941176 rg
n 408 72 18 12 re f*
.933333 1 .8 rg
n 426 72 12 12 re f*
.933333 1 .8 rg
n 0 60 6 12 re f*
.933333 1 .8 rg
n 12 60 6 12 re f*
.933333 1 .8 rg
n 24 60 6 12 re f*
.933333 1 .8 rg
n 30 60 6 12 re f*
.933333 1 .8 rg
n 36 60 42 12 re f*
.933333 1 .8 rg
n 84 60 6 12 re f*
.933333 1 .8 rg
n 96 60 36 12 re f*
.933333 1 .8 rg
n 138 60 36 12 re f*
.933333 1 .8 rg
n 174 60 6 12 re f*
.933333 1 .8 rg
n 186 60 12 12 re f*
.933333 1 .8 rg
n 198 60 6 12 re f*
.933333 1 .8 rg
n 204 60 48 12 re f*
.933333 1 .8 rg
n 252 60 6 12 re f*
.933333 1 .8 rg
n 258 60 36 12 re f*
.933333 1 .8 rg
n 294 60 12 12 re f*
.933333 1 .8 rg
n 0 48 6 12 re f*
.933333 1 .8 rg
n 12 48 6 12 re f*
.933333 1 .8 rg
n 24 48 6 12 re f*
.933333 1 .8 rg
n 30 48 6 12 re f*
.933333 1 .8 rg
n 36 48 30 12 re f*
.933333 1 .8 rg
n 72 48 6 12 re f*
.933333 1 .8 rg
n 84 48 36 12 re f*
.933333 1 .8 rg
n 126 48 42 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 42 12 re f*
.933333 1 .8 rg
n 222 48 6 12 re f*
1 .941176 .941176 rg
n 228 48 66 12 re f*
.933333 1 .8 rg
n 294 48 12 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 30 36 6 12 re f*
.933333 1 .8 rg
n 36 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 72 36 36 12 re f*
.933333 1 .8 rg
n 114 36 30 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 156 36 30 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 24 12 re f*
.933333 1 .8 rg
n 216 36 18 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
.933333 1 .8 rg
n 36 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 72 24 36 12 re f*
.933333 1 .8 rg
n 114 24 18 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 144 24 18 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 168 24 18 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 12 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 18 12 re f*
.933333 1 .8 rg
n 234 24 18 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 36 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 36 12 re f*
.933333 1 .8 rg
n 132 12 18 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 18 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 18 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 18 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 24 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 36 12 re f*
.933333 1 .8 rg
n 120 0 36 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 24 12 re f*
.933333 1 .8 rg
n 234 0 18 12 re f*
BT 1 0 0 1 0 98 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (yfinance) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (yf) Tj /F5 10 Tf 0 0 0 rg  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('MSFT') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('WMT') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('TSLA') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('AAPL') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('BAD_SYMBOL') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('C') Tj 0 0 0 rg (]\)) Tj  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj (\() Tj (history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (symbol) Tj (:) Tj ( ) Tj (yf) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (download) Tj (\() Tj (symbol) Tj (\)\)) Tj  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj (\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (history) Tj (:) Tj ( ) Tj (history) Tj ([) Tj .729412 .129412 .129412 rg ('Adj Close') Tj 0 0 0 rg (]\)) Tj  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj (\() Tj (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (price) Tj (:) Tj ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (diff) Tj (\(\)\)) Tj  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj (\() Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (:) Tj ( ) Tj (rtn) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (\(\)\)) Tj  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj (\() Tj (zscore) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (vol) Tj (:) Tj ( ) Tj (rtn) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (vol) Tj (\)) Tj  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj (\() Tj (zavg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (zscore) Tj (:) Tj ( ) Tj (zscore) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 629.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (dictable ) Tj /F2 10 Tf (s) Tj /F1 10 Tf ( contains all our data.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 623.4394 cm
Q
q
1 0 0 1 40.01575 623.4394 cm
Q
q
1 0 0 1 40.01575 611.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (each row contains all the variables associated with a specific symbol) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 605.4394 cm
Q
q
1 0 0 1 40.01575 593.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (each column corresponds to a variable) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 587.4394 cm
Q
q
1 0 0 1 40.01575 575.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (adding a new variable is declarative and free of boiler-plate loop and zip) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 575.4394 cm
Q
q
1 0 0 1 40.01575 556.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
1 .941176 .941176 rg
n 18 0 48 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
1 .941176 .941176 rg
n 78 0 54 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
1 .941176 .941176 rg
n 144 0 30 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
1 .941176 .941176 rg
n 186 0 36 12 re f*
.933333 1 .8 rg
n 222 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (s) Tj ([[) Tj .729412 .129412 .129412 rg ('symbol') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('history') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('vol') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('zavg') Tj 0 0 0 rg (]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 529.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (zavg) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 499.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Oh, no, we have a bad symbol, how do we remove it?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 474.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 18 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 24 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 18 12 re f*
.933333 1 .8 rg
n 138 0 12 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 24 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj (zavg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (nan) Tj (\);) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (zavg) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 444.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Now if we want to calculate something per symbol and window\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 414.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .454732 Tw (We want to create a new table, now keyed on two values: symbol and window n, so we create a bigger table using) Tj T* 0 Tw (cross product:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 395.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 24 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 12 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 12 12 re f*
.933333 1 .8 rg
n 162 0 12 12 re f*
.933333 1 .8 rg
n 180 0 294 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## each row is now unique per symbol and window n) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 368.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 24 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 36 12 re f*
.933333 1 .8 rg
n 132 0 18 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 18 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 18 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 18 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 24 12 re f*
.933333 1 .8 rg
n 300 0 12 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 318 0 18 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (sn) Tj (\() Tj (ewma) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (n) Tj (,) Tj ( ) Tj (vol) Tj (:) Tj ( ) Tj (rtn) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj (n) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (vol) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 348.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And here is Citibank\222s three ewma\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 329.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 18 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
1 .941176 .941176 rg
n 96 0 18 12 re f*
.933333 1 .8 rg
n 114 0 18 12 re f*
1 .941176 .941176 rg
n 132 0 18 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 36 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sn) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('C') Tj 0 0 0 rg (\)[[) Tj .729412 .129412 .129412 rg ('n') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ewma') Tj 0 0 0 rg (]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 297.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.806705 Tw (Here is a pivot table of the average of each ewma per symbol and window\205 Note that again, we can access) Tj T* 0 Tw (functions of variables and not just the existing keys in the dictable) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 279.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 30 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 48 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
1 .941176 .941176 rg
n 114 0 18 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 36 12 re f*
.933333 1 .8 rg
n 186 0 24 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 24 12 re f*
.933333 1 .8 rg
n 276 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sn) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (pivot) Tj (\() Tj .729412 .129412 .129412 rg ('symbol') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('n') Tj 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (ewma) Tj (:) Tj ( ) Tj (ewma) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 246.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (dictable functionality) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 215.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (construction) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 197.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dictable is quite flexible on constuctions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 179.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 12 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
1 .941176 .941176 rg
n 198 0 18 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
1 .941176 .941176 rg
n 258 0 18 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
1 .941176 .941176 rg
n 288 0 18 12 re f*
.933333 1 .8 rg
n 306 0 18 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('d') Tj 0 0 0 rg (]\);) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 152.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
1 .941176 .941176 rg
n 258 0 18 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
1 .941176 .941176 rg
n 288 0 18 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
1 .941176 .941176 rg
n 318 0 18 12 re f*
.933333 1 .8 rg
n 336 0 18 12 re f*
.933333 1 .8 rg
n 360 0 36 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
1 .941176 .941176 rg
n 420 0 36 12 re f*
.933333 1 .8 rg
n 456 0 6 12 re f*
1 .941176 .941176 rg
n 468 0 36 12 re f*
.933333 1 .8 rg
n 504 0 6 12 re f*
1 .941176 .941176 rg
n 516 0 30 12 re f*
.933333 1 .8 rg
n 546 0 6 12 re f*
1 .941176 .941176 rg
n 558 0 30 12 re f*
.933333 1 .8 rg
n 588 0 12 12 re f*
.933333 1 .8 rg
n 606 0 48 12 re f*
.933333 1 .8 rg
n 660 0 6 12 re f*
1 .941176 .941176 rg
n 672 0 36 12 re f*
.933333 1 .8 rg
n 708 0 12 12 re f*
.933333 1 .8 rg
n 726 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('d') Tj 0 0 0 rg (]\),) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('MSFT') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('AAPL') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('APA') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('MMM') Tj 0 0 0 rg (],) Tj ( ) Tj (exchange) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('NYSE') Tj 0 0 0 rg (\);) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 125.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 586 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 54 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 456 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (df) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (DataFrame) Tj (\() Tj (d) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# can instantiate a DataFrame from a dictable with no code and vice versa...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 98.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 12 12 re f*
.933333 1 .8 rg
n 90 0 12 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (df) Tj (\);) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 71.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 532 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 18 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 12 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 12 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 18 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 222 0 18 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
1 .941176 .941176 rg
n 252 0 18 12 re f*
.933333 1 .8 rg
n 270 0 18 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 306 0 222 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\([\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)],) Tj ( ) Tj ([) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (]\);) Tj ( ) Tj (d) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# construction from records as tuples) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (112) Tj T* ET
Q
Q
 
endstream
endobj
1083 0 obj
<<
/Length 29077
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 768.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1072 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
.933333 1 .8 rg
n 84 0 24 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
.933333 1 .8 rg
n 204 0 24 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
1 .941176 .941176 rg
n 342 0 72 12 re f*
.933333 1 .8 rg
n 414 0 12 12 re f*
.933333 1 .8 rg
n 432 0 24 12 re f*
.933333 1 .8 rg
n 456 0 6 12 re f*
.933333 1 .8 rg
n 462 0 6 12 re f*
.933333 1 .8 rg
n 474 0 6 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
.933333 1 .8 rg
n 504 0 6 12 re f*
.933333 1 .8 rg
n 516 0 6 12 re f*
.933333 1 .8 rg
n 528 0 6 12 re f*
.933333 1 .8 rg
n 534 0 6 12 re f*
.933333 1 .8 rg
n 546 0 6 12 re f*
.933333 1 .8 rg
n 558 0 6 12 re f*
1 .941176 .941176 rg
n 570 0 66 12 re f*
.933333 1 .8 rg
n 636 0 24 12 re f*
.933333 1 .8 rg
n 666 0 6 12 re f*
.933333 1 .8 rg
n 678 0 390 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\([) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('new column') Tj 0 0 0 rg (\),) Tj ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('also here') Tj 0 0 0 rg (\)]\);) Tj ( ) Tj (d) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# construction from records as dicts, mismatching on keys is fine) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 741.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 556 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 48 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 324 12 re f*
.933333 1 .8 rg
n 456 0 18 12 re f*
.933333 1 .8 rg
n 480 0 6 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
.933333 1 .8 rg
n 504 0 6 12 re f*
.933333 1 .8 rg
n 510 0 12 12 re f*
.933333 1 .8 rg
n 522 0 6 12 re f*
.933333 1 .8 rg
n 528 0 12 12 re f*
.933333 1 .8 rg
n 546 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (read_csv) Tj (\() Tj .729412 .129412 .129412 rg ('d:/dropbox/yoav/python/pyg/docs/constituents_csv.csv') Tj 0 0 0 rg (\)\);) Tj ( ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (d) Tj ([:) Tj /F6 10 Tf 0 0 .815686 rg (6) Tj /F5 10 Tf 0 0 0 rg (];) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 711.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (row access) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 686.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 102 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (#returns a record) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 659.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 36 0 156 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([:) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## subset rows using slice) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 620.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 18 12 re f*
.933333 1 .8 rg
n 48 12 12 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 126 12 re f*
.933333 1 .8 rg
n 24 0 30 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 18 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (row) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (d) Tj (:) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# iteration is by row) Tj /F5 10 Tf 0 0 0 rg  T* (    ) Tj 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (row) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 590.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (column access) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 565.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Name) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 538.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
1 .941176 .941176 rg
n 12 0 36 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 511.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
1 .941176 .941176 rg
n 12 0 36 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 60 0 48 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sector') Tj 0 0 0 rg (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 485.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
1 .941176 .941176 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
1 .941176 .941176 rg
n 66 0 48 12 re f*
.933333 1 .8 rg
n 114 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([[) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sector') Tj 0 0 0 rg (]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 454.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (d is a dict so supports the usual keys\(\), values\(\) and items\(\):) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 18 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 12 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 30 12 re f*
.933333 1 .8 rg
n 156 12 18 12 re f*
.933333 1 .8 rg
n 24 0 30 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 18 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
1 .941176 .941176 rg
n 90 0 18 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 36 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (key) Tj (,) Tj ( ) Tj (column) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (items) Tj (\(\):) Tj  T* (    ) Tj 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (key) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg (':') Tj 0 0 0 rg (,) Tj ( ) Tj (column) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 397.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (access via ) Tj /F2 10 Tf (function) Tj /F1 10 Tf ( of variables is also supported) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 379.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 36 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 36 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
1 .941176 .941176 rg
n 150 0 6 12 re f*
.878431 .878431 .878431 rg
n 156 0 12 12 re f*
1 .941176 .941176 rg
n 168 0 12 12 re f*
.878431 .878431 .878431 rg
n 180 0 12 12 re f*
1 .941176 .941176 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 36 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 36 12 re f*
.933333 1 .8 rg
n 294 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (Symbol) Tj (,) Tj ( ) Tj (Sector) Tj (:) Tj ( ) Tj .729412 .129412 .129412 rg (') Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (, ) Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj .188235 .188235 .188235 rg (%) Tj 0 0 0 rg (\() Tj (Symbol) Tj (,) Tj ( ) Tj (Sector) Tj (\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 348.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (column and row access are commutative) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 275.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 850 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 6 12 re f*
.933333 1 .8 rg
n 48 48 6 12 re f*
.933333 1 .8 rg
n 54 48 6 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
.933333 1 .8 rg
n 72 48 24 12 re f*
.933333 1 .8 rg
n 102 48 12 12 re f*
.933333 1 .8 rg
n 120 48 6 12 re f*
.933333 1 .8 rg
n 126 48 6 12 re f*
.933333 1 .8 rg
n 132 48 24 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
.933333 1 .8 rg
n 162 48 6 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 12 12 re f*
1 .941176 .941176 rg
n 198 48 72 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 6 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 54 36 6 12 re f*
.933333 1 .8 rg
n 60 36 12 12 re f*
.933333 1 .8 rg
n 72 36 36 12 re f*
.933333 1 .8 rg
n 114 36 36 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 162 36 36 12 re f*
.933333 1 .8 rg
n 198 36 6 12 re f*
1 .941176 .941176 rg
n 210 36 6 12 re f*
.878431 .878431 .878431 rg
n 216 36 12 12 re f*
1 .941176 .941176 rg
n 228 36 12 12 re f*
.878431 .878431 .878431 rg
n 240 36 12 12 re f*
1 .941176 .941176 rg
n 252 36 6 12 re f*
.933333 1 .8 rg
n 258 36 6 12 re f*
.933333 1 .8 rg
n 264 36 6 12 re f*
.933333 1 .8 rg
n 270 36 36 12 re f*
.933333 1 .8 rg
n 306 36 6 12 re f*
.933333 1 .8 rg
n 318 36 36 12 re f*
.933333 1 .8 rg
n 354 36 12 12 re f*
.933333 1 .8 rg
n 372 36 12 12 re f*
.933333 1 .8 rg
n 390 36 6 12 re f*
.933333 1 .8 rg
n 396 36 6 12 re f*
.933333 1 .8 rg
n 402 36 36 12 re f*
.933333 1 .8 rg
n 444 36 36 12 re f*
.933333 1 .8 rg
n 480 36 6 12 re f*
.933333 1 .8 rg
n 492 36 36 12 re f*
.933333 1 .8 rg
n 528 36 6 12 re f*
1 .941176 .941176 rg
n 540 36 6 12 re f*
.878431 .878431 .878431 rg
n 546 36 12 12 re f*
1 .941176 .941176 rg
n 558 36 12 12 re f*
.878431 .878431 .878431 rg
n 570 36 12 12 re f*
1 .941176 .941176 rg
n 582 36 6 12 re f*
.933333 1 .8 rg
n 588 36 6 12 re f*
.933333 1 .8 rg
n 594 36 6 12 re f*
.933333 1 .8 rg
n 600 36 36 12 re f*
.933333 1 .8 rg
n 636 36 6 12 re f*
.933333 1 .8 rg
n 648 36 36 12 re f*
.933333 1 .8 rg
n 684 36 18 12 re f*
.933333 1 .8 rg
n 702 36 6 12 re f*
.933333 1 .8 rg
n 708 36 6 12 re f*
.933333 1 .8 rg
n 720 36 12 12 re f*
1 .941176 .941176 rg
n 738 36 108 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 60 24 12 12 re f*
1 .941176 .941176 rg
n 72 24 36 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 120 24 12 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
1 .941176 .941176 rg
n 150 24 36 12 re f*
.933333 1 .8 rg
n 186 24 12 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 48 12 12 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 12 12 re f*
1 .941176 .941176 rg
n 78 12 36 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
1 .941176 .941176 rg
n 126 12 48 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 12 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
1 .941176 .941176 rg
n 216 12 36 12 re f*
.933333 1 .8 rg
n 252 12 6 12 re f*
1 .941176 .941176 rg
n 264 12 48 12 re f*
.933333 1 .8 rg
n 312 12 18 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 336 12 6 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 18 12 re f*
1 .941176 .941176 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 48 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 12 12 re f*
1 .941176 .941176 rg
n 234 0 36 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
1 .941176 .941176 rg
n 282 0 48 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (d) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Name) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Name) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('3M Company') Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (d) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (][) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (Symbol) Tj (,) Tj ( ) Tj (Sector) Tj (:) Tj ( ) Tj .729412 .129412 .129412 rg (') Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (, ) Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj .188235 .188235 .188235 rg (%) Tj 0 0 0 rg (\() Tj (Symbol) Tj (,) Tj ( ) Tj (Sector) Tj (\)]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (d) Tj ([) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (Symbol) Tj (,) Tj ( ) Tj (Sector) Tj (:) Tj ( ) Tj .729412 .129412 .129412 rg (') Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (, ) Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj .188235 .188235 .188235 rg (%) Tj 0 0 0 rg (\() Tj (Symbol) Tj (,) Tj ( ) Tj (Sector) Tj (\)][) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('MMM, Industrials') Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (d) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (][) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (d) Tj ([) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (][) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (d) Tj ([:) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (][) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sector') Tj 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (d) Tj ([) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sector') Tj 0 0 0 rg (][:) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (]) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (d) Tj ([:) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (][[) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sector') Tj 0 0 0 rg (]]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (d) Tj ([[) Tj .729412 .129412 .129412 rg ('Name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sector') Tj 0 0 0 rg (]][:) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 245.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (adding records) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 220.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 640 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 48 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
1 .941176 .941176 rg
n 126 0 36 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
1 .941176 .941176 rg
n 174 0 54 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
1 .941176 .941176 rg
n 240 0 42 12 re f*
.933333 1 .8 rg
n 282 0 12 12 re f*
.933333 1 .8 rg
n 300 0 42 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
1 .941176 .941176 rg
n 366 0 60 12 re f*
.933333 1 .8 rg
n 426 0 6 12 re f*
1 .941176 .941176 rg
n 438 0 42 12 re f*
.933333 1 .8 rg
n 480 0 6 12 re f*
1 .941176 .941176 rg
n 492 0 42 12 re f*
.933333 1 .8 rg
n 534 0 12 12 re f*
.933333 1 .8 rg
n 552 0 18 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
.933333 1 .8 rg
n 588 0 6 12 re f*
.933333 1 .8 rg
n 594 0 6 12 re f*
.933333 1 .8 rg
n 600 0 6 12 re f*
.933333 1 .8 rg
n 606 0 6 12 re f*
.933333 1 .8 rg
n 612 0 6 12 re f*
.933333 1 .8 rg
n 618 0 6 12 re f*
.933333 1 .8 rg
n 624 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('abramson') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('brown') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cohen') Tj 0 0 0 rg (],) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 193.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 24 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 24 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
1 .941176 .941176 rg
n 96 0 42 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 42 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
1 .941176 .941176 rg
n 210 0 66 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 18 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 342 0 150 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('donaldson') Tj 0 0 0 rg (,) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## adding a single record) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 167.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 24 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 24 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
1 .941176 .941176 rg
n 102 0 42 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 42 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
1 .941176 .941176 rg
n 216 0 66 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 18 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 354 0 24 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 384 0 24 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
1 .941176 .941176 rg
n 426 0 36 12 re f*
.933333 1 .8 rg
n 462 0 6 12 re f*
.933333 1 .8 rg
n 474 0 42 12 re f*
.933333 1 .8 rg
n 522 0 6 12 re f*
1 .941176 .941176 rg
n 534 0 60 12 re f*
.933333 1 .8 rg
n 594 0 6 12 re f*
.933333 1 .8 rg
n 606 0 18 12 re f*
.933333 1 .8 rg
n 630 0 6 12 re f*
.933333 1 .8 rg
n 642 0 6 12 re f*
.933333 1 .8 rg
n 648 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj ([) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('donaldson') Tj 0 0 0 rg (,) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('evan') Tj 0 0 0 rg (,) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('emmerson') Tj 0 0 0 rg (,) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 140.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 24 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 24 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
1 .941176 .941176 rg
n 102 0 42 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
1 .941176 .941176 rg
n 156 0 36 12 re f*
.933333 1 .8 rg
n 192 0 12 12 re f*
.933333 1 .8 rg
n 210 0 42 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
1 .941176 .941176 rg
n 276 0 66 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
1 .941176 .941176 rg
n 354 0 60 12 re f*
.933333 1 .8 rg
n 414 0 12 12 re f*
.933333 1 .8 rg
n 432 0 18 12 re f*
.933333 1 .8 rg
n 456 0 6 12 re f*
.933333 1 .8 rg
n 468 0 6 12 re f*
.933333 1 .8 rg
n 474 0 6 12 re f*
.933333 1 .8 rg
n 480 0 6 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 492 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('evan') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('donaldson') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('emmerson') Tj 0 0 0 rg (],) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 113.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 592 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 12 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 54 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 24 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 24 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
1 .941176 .941176 rg
n 180 0 42 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
1 .941176 .941176 rg
n 234 0 36 12 re f*
.933333 1 .8 rg
n 270 0 12 12 re f*
.933333 1 .8 rg
n 288 0 42 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
1 .941176 .941176 rg
n 354 0 66 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
1 .941176 .941176 rg
n 432 0 60 12 re f*
.933333 1 .8 rg
n 492 0 12 12 re f*
.933333 1 .8 rg
n 510 0 18 12 re f*
.933333 1 .8 rg
n 534 0 6 12 re f*
.933333 1 .8 rg
n 546 0 6 12 re f*
.933333 1 .8 rg
n 552 0 6 12 re f*
.933333 1 .8 rg
n 558 0 6 12 re f*
.933333 1 .8 rg
n 564 0 6 12 re f*
.933333 1 .8 rg
n 570 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (DataFrame) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('evan') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('donaldson') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('emmerson') Tj 0 0 0 rg (],) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 83.03937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (adding/modifying columns) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can add a column or a constant by simply calling the dictable with the values:) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (113) Tj T* ET
Q
Q
 
endstream
endobj
1084 0 obj
<<
/Length 24201
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 768.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 36 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
1 .941176 .941176 rg
n 72 0 18 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
1 .941176 .941176 rg
n 102 0 18 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 18 12 re f*
.933333 1 .8 rg
n 150 0 18 12 re f*
.933333 1 .8 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
1 .941176 .941176 rg
n 222 0 54 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj (\() Tj (gender) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('m') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('f') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('m') Tj 0 0 0 rg (]\)\() Tj (school) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('St Paul') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 748.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (More interestingly, it can be a callable function using the other variables\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 729.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 48 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 36 12 re f*
.933333 1 .8 rg
n 144 0 24 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 42 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 24 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 42 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 18 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (d) Tj (\() Tj (initials) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (name) Tj (,) Tj ( ) Tj (surname) Tj (:) Tj ( ) Tj (name) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (surname) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]\);) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 709.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Given d is a dict, a more traditional way of setting a new key is by simple assignment:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 690.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
1 .941176 .941176 rg
n 12 0 60 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 36 12 re f*
.933333 1 .8 rg
n 150 0 24 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 42 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 24 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 42 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 18 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ([) Tj .729412 .129412 .129412 rg ('initials') Tj 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (d) Tj ([) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (name) Tj (,) Tj ( ) Tj (surname) Tj (:) Tj ( ) Tj (name) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (surname) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]];) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 670.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Or you can use the dict.update method:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 651.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 36 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 24 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
1 .941176 .941176 rg
n 144 0 18 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
1 .941176 .941176 rg
n 174 0 18 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
1 .941176 .941176 rg
n 204 0 18 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (update) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (gender) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('m') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('f') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('m') Tj 0 0 0 rg (]\)\);) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 621.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (do) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 603.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Sometime we want to apply the same function\(s\) to a collection of columns. For this, \221do\222 will do nicely:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 584.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 30 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
1 .941176 .941176 rg
n 96 0 60 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
1 .941176 .941176 rg
n 168 0 48 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 12 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 36 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
1 .941176 .941176 rg
n 294 0 36 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
1 .941176 .941176 rg
n 342 0 54 12 re f*
.933333 1 .8 rg
n 396 0 12 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj (upper) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg ('initials') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('gender') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj (proper) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg ('name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('surname') Tj 0 0 0 rg (\);) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 554.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (removing columns) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
1 .941176 .941176 rg
n 48 0 60 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (d) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('initials') Tj 0 0 0 rg (;) Tj ( ) Tj (d) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 499.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (removing rows) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 474.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 18 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 24 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
1 .941176 .941176 rg
n 78 0 36 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Alan') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 447.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 18 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 24 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
1 .941176 .941176 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 42 12 re f*
.933333 1 .8 rg
n 174 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('Alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Chris') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 420.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 18 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 36 12 re f*
.933333 1 .8 rg
n 78 0 18 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 18 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (age) Tj (:) Tj ( ) Tj (age) Tj .188235 .188235 .188235 rg (>) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 393.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 18 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 36 12 re f*
.933333 1 .8 rg
n 78 0 36 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 36 12 re f*
.933333 1 .8 rg
n 168 0 12 12 re f*
1 .941176 .941176 rg
n 186 0 18 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (gender) Tj (:) Tj ( ) Tj (gender) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('M') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 367.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 18 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 36 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 42 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 18 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 24 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 42 12 re f*
.933333 1 .8 rg
n 294 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (name) Tj (,) Tj ( ) Tj (surname) Tj (:) Tj ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (name) Tj (\)) Tj .188235 .188235 .188235 rg (>) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (surname) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 336.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (sort) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 311.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
1 .941176 .941176 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
1 .941176 .941176 rg
n 90 0 54 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sort) Tj (\() Tj .729412 .129412 .129412 rg ('name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('surname') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 285.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 84 0 24 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 24 12 re f*
.933333 1 .8 rg
n 144 0 18 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 12 12 re f*
.933333 1 .8 rg
n 192 0 240 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sort) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (name) Tj (:) Tj ( ) Tj (name) Tj ([::) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# can sort on functions of variables too) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 254.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (listby\(keys\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 224.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .636385 Tw (listby is like groupby except it returns a dictable with unique keys and the other columns are returned as a list. We) Tj T* 0 Tw (find that MUCH more useful usually than groupby) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 181.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 54 24 48 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 24 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
1 .941176 .941176 rg
n 156 24 36 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
1 .941176 .941176 rg
n 204 24 54 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
1 .941176 .941176 rg
n 270 24 42 12 re f*
.933333 1 .8 rg
n 312 24 12 12 re f*
.933333 1 .8 rg
n 330 24 36 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 390 24 12 12 re f*
.933333 1 .8 rg
n 402 24 6 12 re f*
.933333 1 .8 rg
n 408 24 12 12 re f*
.933333 1 .8 rg
n 420 24 6 12 re f*
.933333 1 .8 rg
n 426 24 12 12 re f*
.933333 1 .8 rg
n 438 24 12 12 re f*
.933333 1 .8 rg
n 456 24 42 12 re f*
.933333 1 .8 rg
n 504 24 6 12 re f*
1 .941176 .941176 rg
n 516 24 54 12 re f*
.933333 1 .8 rg
n 570 24 6 12 re f*
.933333 1 .8 rg
n 582 24 42 12 re f*
.933333 1 .8 rg
n 630 24 6 12 re f*
1 .941176 .941176 rg
n 642 24 66 12 re f*
.933333 1 .8 rg
n 708 24 6 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 48 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 24 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
1 .941176 .941176 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
1 .941176 .941176 rg
n 204 12 42 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
1 .941176 .941176 rg
n 258 12 48 12 re f*
.933333 1 .8 rg
n 306 12 12 12 re f*
.933333 1 .8 rg
n 324 12 36 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
.933333 1 .8 rg
n 384 12 12 12 re f*
.933333 1 .8 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 402 12 12 12 re f*
.933333 1 .8 rg
n 414 12 6 12 re f*
.933333 1 .8 rg
n 420 12 12 12 re f*
.933333 1 .8 rg
n 432 12 12 12 re f*
.933333 1 .8 rg
n 450 12 42 12 re f*
.933333 1 .8 rg
n 498 12 6 12 re f*
1 .941176 .941176 rg
n 510 12 36 12 re f*
.933333 1 .8 rg
n 546 12 6 12 re f*
.933333 1 .8 rg
n 558 12 42 12 re f*
.933333 1 .8 rg
n 606 12 6 12 re f*
1 .941176 .941176 rg
n 618 12 66 12 re f*
.933333 1 .8 rg
n 684 12 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 48 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 24 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 156 0 54 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
1 .941176 .941176 rg
n 222 0 42 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
1 .941176 .941176 rg
n 276 0 48 12 re f*
.933333 1 .8 rg
n 324 0 12 12 re f*
.933333 1 .8 rg
n 342 0 36 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 402 0 12 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 420 0 12 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
.933333 1 .8 rg
n 438 0 12 12 re f*
.933333 1 .8 rg
n 450 0 12 12 re f*
.933333 1 .8 rg
n 468 0 42 12 re f*
.933333 1 .8 rg
n 516 0 6 12 re f*
1 .941176 .941176 rg
n 528 0 48 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
.933333 1 .8 rg
n 588 0 42 12 re f*
.933333 1 .8 rg
n 636 0 6 12 re f*
1 .941176 .941176 rg
n 648 0 78 12 re f*
.933333 1 .8 rg
n 726 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (],) Tj ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (90) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (80) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (subject) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('english') Tj 0 0 0 rg (,) Tj ( ) Tj (teacher) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('mr bennet') Tj 0 0 0 rg (\)) Tj ( \\) Tj T* (       ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('esther') Tj 0 0 0 rg (],) Tj ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (40) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (70) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (subject) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('math') Tj 0 0 0 rg (,) Tj ( ) Tj (teacher) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('mrs ruler') Tj 0 0 0 rg (\)) Tj ( \\) Tj T* (       ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('esther') Tj 0 0 0 rg (],) Tj ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (90) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (60) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (80) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (subject) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('french') Tj 0 0 0 rg (,) Tj ( ) Tj (teacher) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('dr francois') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 155.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
1 .941176 .941176 rg
n 84 0 54 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (listby) Tj (\() Tj .729412 .129412 .129412 rg ('teacher') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 128.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
1 .941176 .941176 rg
n 84 0 54 12 re f*
.933333 1 .8 rg
n 138 0 12 12 re f*
.933333 1 .8 rg
n 150 0 54 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 36 12 re f*
.933333 1 .8 rg
n 264 0 36 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 312 0 12 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 360 0 36 12 re f*
.933333 1 .8 rg
n 396 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (listby) Tj (\() Tj .729412 .129412 .129412 rg ('teacher') Tj 0 0 0 rg (\)\() Tj (avg_grade) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (grades) Tj (:) Tj ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\() Tj (grades) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 97.83937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (unlist) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 79.83937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (unlist undoes listby\(\) assuming it is possible\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 61.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
1 .941176 .941176 rg
n 84 0 54 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 36 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (listby) Tj (\() Tj .729412 .129412 .129412 rg ('teacher') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (unlist) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (114) Tj T* ET
Q
Q
 
endstream
endobj
1085 0 obj
<<
/Length 26067
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (groupby\(keys\) and ungroup) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 742.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.195705 Tw (This is similar to DatFrame groupby except that instead of a new object, a dictable is returned: The name of the) Tj T* 0 Tw (grouped column is given by \221grp\222. ungroup allows us to get back to original.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 723.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 60 0 36 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 42 12 re f*
.933333 1 .8 rg
n 144 0 12 12 re f*
1 .941176 .941176 rg
n 156 0 54 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
1 .941176 .941176 rg
n 222 0 54 12 re f*
.933333 1 .8 rg
n 276 0 12 12 re f*
.933333 1 .8 rg
n 294 0 18 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
1 .941176 .941176 rg
n 330 0 42 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (classes) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (groupby) Tj (\([) Tj .729412 .129412 .129412 rg ('teacher') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('subject') Tj 0 0 0 rg (],) Tj ( ) Tj (grp) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('class') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (classes) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 670.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 42 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
1 .941176 .941176 rg
n 96 0 42 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (classes) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ungroup) Tj (\() Tj .729412 .129412 .129412 rg ('class') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 639.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (inner join) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 609.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .585479 Tw (The multiplication operation is overloaded for the join method. By default, if two dictables share keys, the join is an) Tj T* 0 Tw (inner join on the keys) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 591.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 964 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 48 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 24 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
1 .941176 .941176 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
1 .941176 .941176 rg
n 216 0 54 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
1 .941176 .941176 rg
n 282 0 42 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
1 .941176 .941176 rg
n 336 0 42 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
1 .941176 .941176 rg
n 390 0 48 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
1 .941176 .941176 rg
n 450 0 48 12 re f*
.933333 1 .8 rg
n 498 0 12 12 re f*
.933333 1 .8 rg
n 516 0 42 12 re f*
.933333 1 .8 rg
n 564 0 6 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
1 .941176 .941176 rg
n 582 0 60 12 re f*
.933333 1 .8 rg
n 642 0 6 12 re f*
1 .941176 .941176 rg
n 654 0 42 12 re f*
.933333 1 .8 rg
n 696 0 6 12 re f*
1 .941176 .941176 rg
n 708 0 42 12 re f*
.933333 1 .8 rg
n 750 0 6 12 re f*
1 .941176 .941176 rg
n 762 0 60 12 re f*
.933333 1 .8 rg
n 822 0 6 12 re f*
1 .941176 .941176 rg
n 834 0 72 12 re f*
.933333 1 .8 rg
n 906 0 6 12 re f*
1 .941176 .941176 rg
n 918 0 30 12 re f*
.933333 1 .8 rg
n 948 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (students) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('esthar') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fabian') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('abramsom') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('brown') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cohen') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('drummond') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ecklestone') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fox') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 552.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
1 .941176 .941176 rg
n 36 12 84 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 24 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 228 12 48 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 282 12 24 12 re f*
.933333 1 .8 rg
n 306 12 18 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 48 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj .729412 .129412 .129412 rg ('shared keys:') Tj 0 0 0 rg (,) Tj ( ) Tj (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (keys) Tj (\(\)) Tj ( ) Tj .188235 .188235 .188235 rg (&) Tj 0 0 0 rg ( ) Tj (students) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (keys) Tj (\(\)\)) Tj  T* (grades) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (students) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 532.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Are there students with no surname? We can do a xor or use division which is overloaded for xor:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 513.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (students) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 493.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Are there students with no grades?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 474.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 36 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (students) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (grades) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 447.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 964 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 48 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 24 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
1 .941176 .941176 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
1 .941176 .941176 rg
n 216 0 54 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
1 .941176 .941176 rg
n 282 0 42 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
1 .941176 .941176 rg
n 336 0 42 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
1 .941176 .941176 rg
n 390 0 48 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
1 .941176 .941176 rg
n 450 0 48 12 re f*
.933333 1 .8 rg
n 498 0 12 12 re f*
.933333 1 .8 rg
n 516 0 42 12 re f*
.933333 1 .8 rg
n 564 0 6 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
1 .941176 .941176 rg
n 582 0 60 12 re f*
.933333 1 .8 rg
n 642 0 6 12 re f*
1 .941176 .941176 rg
n 654 0 42 12 re f*
.933333 1 .8 rg
n 696 0 6 12 re f*
1 .941176 .941176 rg
n 708 0 42 12 re f*
.933333 1 .8 rg
n 750 0 6 12 re f*
1 .941176 .941176 rg
n 762 0 60 12 re f*
.933333 1 .8 rg
n 822 0 6 12 re f*
1 .941176 .941176 rg
n 834 0 72 12 re f*
.933333 1 .8 rg
n 906 0 6 12 re f*
1 .941176 .941176 rg
n 918 0 30 12 re f*
.933333 1 .8 rg
n 948 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (students) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('Alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Chris') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('David') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Esther') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Fabian') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('abramsom') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('brown') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cohen') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('drummond') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ecklestone') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fox') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 415.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .351794 Tw (We fixed Esther\222s spelling but introduced capitalization, that is OK, we are allowed to inner join on functions of keys) Tj T* 0 Tw (too.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 397.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 24 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 48 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 36 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 36 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 24 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 30 12 re f*
.933333 1 .8 rg
n 318 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (join) Tj (\() Tj (students) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg ('name') Tj 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (name) Tj (:) Tj ( ) Tj (name) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (lower) Tj (\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 370.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1000 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 48 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 60 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
1 .941176 .941176 rg
n 204 0 36 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
1 .941176 .941176 rg
n 252 0 54 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
1 .941176 .941176 rg
n 318 0 42 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
1 .941176 .941176 rg
n 372 0 42 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
1 .941176 .941176 rg
n 426 0 48 12 re f*
.933333 1 .8 rg
n 474 0 6 12 re f*
1 .941176 .941176 rg
n 486 0 48 12 re f*
.933333 1 .8 rg
n 534 0 12 12 re f*
.933333 1 .8 rg
n 552 0 42 12 re f*
.933333 1 .8 rg
n 600 0 6 12 re f*
.933333 1 .8 rg
n 612 0 6 12 re f*
1 .941176 .941176 rg
n 618 0 60 12 re f*
.933333 1 .8 rg
n 678 0 6 12 re f*
1 .941176 .941176 rg
n 690 0 42 12 re f*
.933333 1 .8 rg
n 732 0 6 12 re f*
1 .941176 .941176 rg
n 744 0 42 12 re f*
.933333 1 .8 rg
n 786 0 6 12 re f*
1 .941176 .941176 rg
n 798 0 60 12 re f*
.933333 1 .8 rg
n 858 0 6 12 re f*
1 .941176 .941176 rg
n 870 0 72 12 re f*
.933333 1 .8 rg
n 942 0 6 12 re f*
1 .941176 .941176 rg
n 954 0 30 12 re f*
.933333 1 .8 rg
n 984 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (students) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (first_name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('esther') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fabian') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('abramsom') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('brown') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cohen') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('drummond') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ecklestone') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fox') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 350.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can inner join on different column names and both columns will be populated:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 331.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 24 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 54 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 48 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
1 .941176 .941176 rg
n 216 0 36 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
1 .941176 .941176 rg
n 264 0 72 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (grades) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (join) Tj (\() Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (DataFrame) Tj (\() Tj (students) Tj (\),) Tj ( ) Tj .729412 .129412 .129412 rg ('name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('first_name') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 301.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (inner join \(with other columns that match names\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 283.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (By default, if columns are shared but are not in the join, they will be returned with a tuple containing both values) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 240.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 48 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 18 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
1 .941176 .941176 rg
n 120 24 18 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
1 .941176 .941176 rg
n 150 24 18 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
1 .941176 .941176 rg
n 180 24 18 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
1 .941176 .941176 rg
n 210 24 18 12 re f*
.933333 1 .8 rg
n 228 24 12 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 270 24 6 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 288 24 6 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 6 12 re f*
.933333 1 .8 rg
n 306 24 6 12 re f*
.933333 1 .8 rg
n 312 24 6 12 re f*
.933333 1 .8 rg
n 318 24 12 12 re f*
.933333 1 .8 rg
n 336 24 6 12 re f*
.933333 1 .8 rg
n 348 24 6 12 re f*
.933333 1 .8 rg
n 360 24 6 12 re f*
.933333 1 .8 rg
n 366 24 6 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 378 24 6 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 390 24 6 12 re f*
.933333 1 .8 rg
n 396 24 6 12 re f*
.933333 1 .8 rg
n 402 24 6 12 re f*
.933333 1 .8 rg
n 408 24 12 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 48 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 18 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
1 .941176 .941176 rg
n 120 12 18 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
1 .941176 .941176 rg
n 150 12 18 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
1 .941176 .941176 rg
n 180 12 18 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
1 .941176 .941176 rg
n 210 12 18 12 re f*
.933333 1 .8 rg
n 228 12 12 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 306 12 6 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 318 12 12 12 re f*
.933333 1 .8 rg
n 336 12 6 12 re f*
.933333 1 .8 rg
n 348 12 6 12 re f*
.933333 1 .8 rg
n 360 12 6 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 390 12 6 12 re f*
.933333 1 .8 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 408 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 60 0 30 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
1 .941176 .941176 rg
n 102 0 30 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 180 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (],) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (6) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (7) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (],) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (z) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (8) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (9) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (join) Tj (\() Tj (y) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## ignore x column for joining) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 213.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 60 0 30 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
1 .941176 .941176 rg
n 102 0 30 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 24 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
1 .941176 .941176 rg
n 186 0 36 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 108 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (join) Tj (\() Tj (y) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (,) Tj ( ) Tj (mode) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('left') Tj 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## grab left value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 183.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (cross join) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 165.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If no columns are shared, then a cross join is returned.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 122.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 48 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 24 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (y) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 95.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 60 0 18 12 re f*
.933333 1 .8 rg
n 84 0 18 12 re f*
.933333 1 .8 rg
n 108 0 204 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (join) Tj (\() Tj (y) Tj (,) Tj ( ) Tj ([],) Tj ( ) Tj ([]\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## you can force a full outer join) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 68.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (x) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.dictable) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (115) Tj T* ET
Q
Q
 
endstream
endobj
1086 0 obj
<<
/Length 21169
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (xor \(versus left and right join\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 730.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.130757 Tw (We find left/right join actually not very useful. There is usually a genuine reason for records for which there is a match) Tj T* 0 Tw 1.082847 Tw (and for records for which there isn\222t. And the treatment of these is distinct, which means a left-join operation that) Tj T* 0 Tw (joins the two outcomes together is positively harmful.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 700.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.467004 Tw (The xor operator is much more useful and you can use it to recreate left/right join if we really must. Here is an) Tj T* 0 Tw (example) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 585.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 700 114 re B*
Q
q
.933333 1 .8 rg
n 0 96 48 12 re f*
.933333 1 .8 rg
n 54 96 6 12 re f*
.933333 1 .8 rg
n 66 96 48 12 re f*
.933333 1 .8 rg
n 114 96 6 12 re f*
.933333 1 .8 rg
n 120 96 24 12 re f*
.933333 1 .8 rg
n 150 96 6 12 re f*
.933333 1 .8 rg
n 162 96 6 12 re f*
1 .941176 .941176 rg
n 168 96 36 12 re f*
.933333 1 .8 rg
n 204 96 6 12 re f*
1 .941176 .941176 rg
n 216 96 54 12 re f*
.933333 1 .8 rg
n 270 96 6 12 re f*
1 .941176 .941176 rg
n 282 96 42 12 re f*
.933333 1 .8 rg
n 324 96 12 12 re f*
.933333 1 .8 rg
n 342 96 42 12 re f*
.933333 1 .8 rg
n 390 96 6 12 re f*
.933333 1 .8 rg
n 402 96 6 12 re f*
1 .941176 .941176 rg
n 408 96 60 12 re f*
.933333 1 .8 rg
n 468 96 6 12 re f*
1 .941176 .941176 rg
n 480 96 42 12 re f*
.933333 1 .8 rg
n 522 96 6 12 re f*
1 .941176 .941176 rg
n 534 96 42 12 re f*
.933333 1 .8 rg
n 576 96 18 12 re f*
.933333 1 .8 rg
n 0 84 72 12 re f*
.933333 1 .8 rg
n 78 84 6 12 re f*
.933333 1 .8 rg
n 90 84 48 12 re f*
.933333 1 .8 rg
n 138 84 6 12 re f*
.933333 1 .8 rg
n 144 84 24 12 re f*
.933333 1 .8 rg
n 174 84 6 12 re f*
.933333 1 .8 rg
n 186 84 6 12 re f*
1 .941176 .941176 rg
n 192 84 42 12 re f*
.933333 1 .8 rg
n 234 84 6 12 re f*
1 .941176 .941176 rg
n 246 84 48 12 re f*
.933333 1 .8 rg
n 294 84 6 12 re f*
1 .941176 .941176 rg
n 306 84 48 12 re f*
.933333 1 .8 rg
n 354 84 12 12 re f*
.933333 1 .8 rg
n 372 84 42 12 re f*
.933333 1 .8 rg
n 420 84 6 12 re f*
.933333 1 .8 rg
n 432 84 6 12 re f*
1 .941176 .941176 rg
n 438 84 60 12 re f*
.933333 1 .8 rg
n 498 84 6 12 re f*
1 .941176 .941176 rg
n 510 84 72 12 re f*
.933333 1 .8 rg
n 582 84 6 12 re f*
1 .941176 .941176 rg
n 594 84 30 12 re f*
.933333 1 .8 rg
n 624 84 12 12 re f*
.933333 1 .8 rg
n 0 60 60 12 re f*
.933333 1 .8 rg
n 66 60 6 12 re f*
.933333 1 .8 rg
n 78 60 36 12 re f*
.933333 1 .8 rg
n 120 60 6 12 re f*
.933333 1 .8 rg
n 132 60 48 12 re f*
.933333 1 .8 rg
n 186 60 138 12 re f*
.933333 1 .8 rg
n 0 48 48 12 re f*
.933333 1 .8 rg
n 54 48 6 12 re f*
.933333 1 .8 rg
n 66 48 36 12 re f*
.933333 1 .8 rg
n 108 48 6 12 re f*
.933333 1 .8 rg
n 120 48 48 12 re f*
.933333 1 .8 rg
n 180 48 150 12 re f*
.933333 1 .8 rg
n 0 24 72 12 re f*
.933333 1 .8 rg
n 0 12 54 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 48 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 36 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 246 12 48 12 re f*
.933333 1 .8 rg
n 300 12 396 12 re f*
.933333 1 .8 rg
n 0 0 54 12 re f*
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (students) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('abramsom') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('brown') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cohen') Tj 0 0 0 rg (,]\)) Tj  T* (new_students) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('david') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('esther') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fabian') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('drummond') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ecklestone') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('fox') Tj 0 0 0 rg (]\)) Tj  T*  T* (inner_join) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (students) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## grades with students) Tj /F5 10 Tf 0 0 0 rg  T* (left_xor) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (students) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## grades without sudents) Tj /F5 10 Tf 0 0 0 rg  T*  T* /F8 10 Tf .501961 .501961 .501961 rg (# you can...) Tj /F5 10 Tf 0 0 0 rg  T* (left_join) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (students) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (students) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## grades for which no surname is available will have None surname) Tj /F5 10 Tf 0 0 0 rg  T* (left_join) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 523.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 168 12 re f*
.933333 1 .8 rg
n 0 24 84 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 36 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 156 24 48 12 re f*
.933333 1 .8 rg
n 0 12 90 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 108 12 36 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 48 12 re f*
.933333 1 .8 rg
n 216 12 204 12 re f*
.933333 1 .8 rg
n 0 0 108 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 132 0 90 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 72 12 re f*
.933333 1 .8 rg
n 318 0 306 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (# but really you want to do:) Tj /F5 10 Tf 0 0 0 rg  T* (student_grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (students) Tj  T* (unmapped_grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (grades) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (students) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## we treat this one separately...) Tj /F5 10 Tf 0 0 0 rg  T* (new_student_grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg (  ) Tj (unmapped_grades) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (new_students) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## and grab surnames from the new students table...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 496.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 808 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 90 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 108 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 12 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
1 .941176 .941176 rg
n 330 0 474 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (unmapped_grades) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (new_student_grades) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('students must exist either in the students table or in the new students table') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 469.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 60 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 84 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 108 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 60 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (all_grades) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (student_grades) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (new_student_grades) Tj (;) Tj ( ) Tj (all_grades) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 439.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (pivot) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 378.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 48 12 re f*
.933333 1 .8 rg
n 72 36 6 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 126 36 6 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 12 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 48 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (xy) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (\() Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (y) Tj (\)) Tj  T* (xy) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 351.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 30 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 18 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
1 .941176 .941176 rg
n 84 0 18 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 36 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (xy) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (pivot) Tj (\() Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (y) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (y) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 321.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (a few observations:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 309.0394 cm
Q
q
1 0 0 1 40.01575 309.0394 cm
Q
q
1 0 0 1 40.01575 297.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (as per usual, can provide a function for values in table \(indeed columns y\) and not just keys) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 291.0394 cm
Q
q
1 0 0 1 40.01575 267.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.00845 Tw (the output in the cells come back as a list. This is because sometimes there are more than one row with given x) Tj T* 0 Tw (and y, and sometimes there are none:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 267.0394 cm
Q
q
1 0 0 1 40.01575 248.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 18 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 30 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
1 .941176 .941176 rg
n 252 0 18 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
1 .941176 .941176 rg
n 282 0 18 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 312 0 36 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (\() Tj (xy) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (xy) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj (y) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (y) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (pivot) Tj (\() Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (y) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (y) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 228.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can apply a sequence of aggregate functions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 209.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 526 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 18 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 30 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
1 .941176 .941176 rg
n 252 0 18 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
1 .941176 .941176 rg
n 282 0 18 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 312 0 36 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
.933333 1 .8 rg
n 420 0 36 12 re f*
.933333 1 .8 rg
n 462 0 6 12 re f*
.933333 1 .8 rg
n 468 0 6 12 re f*
.933333 1 .8 rg
n 480 0 18 12 re f*
.933333 1 .8 rg
n 498 0 6 12 re f*
.933333 1 .8 rg
n 504 0 6 12 re f*
.933333 1 .8 rg
n 510 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (\() Tj (xy) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (xy) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj (y) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (y) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (pivot) Tj (\() Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (y) Tj (:) Tj ( ) Tj (x) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (y) Tj (,) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (v) Tj (:) Tj ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (v) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 174.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 156.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (MongoDB has replaced our SQL databases as it is just too much fun to use. MongoDB does have its little quirks:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 150.2394 cm
Q
q
1 0 0 1 40.01575 150.2394 cm
Q
q
1 0 0 1 40.01575 126.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.030256 Tw (The MongoDB \221query document\222 that replaces the SQL WHERE statements is very powerful but you need a) Tj T* 0 Tw (PhD for even the simplest of queries.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 120.2394 cm
Q
q
1 0 0 1 40.01575 108.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (too many objects we use \(specifically, numpy and pandas objects\) cannot be pushed directly easily into Mongo.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 102.2394 cm
Q
q
1 0 0 1 40.01575 78.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .518205 Tw (Mongo lacks the concept of a table with primary keys. Unstructured data is great but much of how we think of) Tj T* 0 Tw (data is structured.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 78.23937 cm
Q
q
1 0 0 1 40.01575 60.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo addresses all three issues:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (116) Tj T* ET
Q
Q
 
endstream
endobj
1087 0 obj
<<
/Length 20959
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 787.0394 cm
Q
q
1 0 0 1 40.01575 763.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 6.138273 Tw 12 TL /F2 10 Tf 0 0 0 rg (q) Tj /F1 10 Tf ( is a much easier way to generate Mongo queries. We are happy to acknowledge TinyDB) Tj T* 0 Tw 0 0 .501961 rg (https://tinydb.readthedocs.io/en/latest/usage.html#queries) Tj 0 0 0 rg ( for the idea.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 733.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.288864 Tw 12 TL /F2 10 Tf 0 0 0 rg (mongo_cursor) Tj /F1 10 Tf ( is a super-charged cursor and in particular, it handles encoding and decoding of objects) Tj T* 0 Tw (seemlessly in a way that allows us to store all that we want in Mongo.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 703.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.100273 Tw 12 TL /F2 10 Tf 0 0 0 rg (mongo_pk_cursor) Tj /F1 10 Tf ( manages a table with primary keys and full history audit. We are happy to acknowledge) Tj T* 0 Tw (Arctic by the AHL Man team for the initial inspiration) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 670.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (q) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 616.2394 cm
q
BT 1 0 0 1 0 38 Tm 6.635881 Tw 12 TL /F1 10 Tf 0 0 0 rg (The MongoDB interface for query of a collection \(table\) is via a creation of a query document) Tj T* 0 Tw 1.979344 Tw 0 0 .501961 rg (https://docs.mongodb.com/manual/tutorial/query-documents/) Tj 0 0 0 rg (. This is rather complicated for the average use. For) Tj T* 0 Tw .525479 Tw (example, if you wanted to locate James Bond in the collection, you would need to compose q query document that) Tj T* 0 Tw (looks like this:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 597.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
1 .941176 .941176 rg
n 6 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
1 .941176 .941176 rg
n 66 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
1 .941176 .941176 rg
n 120 0 30 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 42 12 re f*
.933333 1 .8 rg
n 204 0 18 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
1 .941176 .941176 rg
n 234 0 54 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
1 .941176 .941176 rg
n 306 0 30 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
1 .941176 .941176 rg
n 348 0 36 12 re f*
.933333 1 .8 rg
n 384 0 24 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg ({) Tj .729412 .129412 .129412 rg ("$and") Tj 0 0 0 rg (:) Tj ( ) Tj ([{) Tj .729412 .129412 .129412 rg ("name") Tj 0 0 0 rg (:) Tj ( ) Tj ({) Tj .729412 .129412 .129412 rg ("$eq") Tj 0 0 0 rg (:) Tj ( ) Tj .729412 .129412 .129412 rg ("James") Tj 0 0 0 rg (}},) Tj ( ) Tj ({) Tj .729412 .129412 .129412 rg ("surname") Tj 0 0 0 rg (:) Tj ( ) Tj ({) Tj .729412 .129412 .129412 rg ("$eq") Tj 0 0 0 rg (:) Tj ( ) Tj .729412 .129412 .129412 rg ("Bond") Tj 0 0 0 rg (}}]}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 577.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It\222s doable, but not much fun writing. Luckily\205 within the continuum you can write this instead:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 18 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 36 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 42 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 42 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
1 .941176 .941176 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (re) Tj /F5 10 Tf 0 0 0 rg  T* (q) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (,) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Bond') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 519.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 24 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
1 .941176 .941176 rg
n 66 0 42 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 42 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
1 .941176 .941176 rg
n 216 0 36 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (&) Tj 0 0 0 rg ( ) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (surname) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Bond') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 499.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How do we create in MongoDB a query document to find all the James who are not Bond?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 481.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 42 12 re f*
.933333 1 .8 rg
n 60 0 12 12 re f*
1 .941176 .941176 rg
n 72 0 36 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 24 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
1 .941176 .941176 rg
n 198 0 42 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (surname) Tj .188235 .188235 .188235 rg (!=) Tj .729412 .129412 .129412 rg ('Bond') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (&) Tj 0 0 0 rg ( ) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 454.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 24 0 42 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
1 .941176 .941176 rg
n 78 0 36 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 24 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
1 .941176 .941176 rg
n 204 0 42 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf .188235 .188235 .188235 rg (~) Tj 0 0 0 rg (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (surname) Tj .188235 .188235 .188235 rg (==) Tj .729412 .129412 .129412 rg ('Bond') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (&) Tj 0 0 0 rg ( ) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 434.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What about records with no surname?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 415.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 24 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
1 .941176 .941176 rg
n 66 0 42 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 42 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (surname) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 388.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 24 0 42 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 60 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 24 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
1 .941176 .941176 rg
n 186 0 42 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (q) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (surname) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (not_exists) Tj (,) Tj ( ) Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 368.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And what about records with james rather than James?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 349.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 688 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
1 .941176 .941176 rg
n 60 0 42 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
1 .941176 .941176 rg
n 114 0 42 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 174 0 42 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
1 .941176 .941176 rg
n 240 0 36 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
1 .941176 .941176 rg
n 288 0 36 12 re f*
.933333 1 .8 rg
n 324 0 12 12 re f*
.933333 1 .8 rg
n 342 0 342 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (q) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('james') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('bond') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Bond') Tj 0 0 0 rg (]\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## the result is long so it is represented more nicely...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 323.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 42 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
1 .941176 .941176 rg
n 120 0 72 12 re f*
.933333 1 .8 rg
n 192 0 12 12 re f*
.933333 1 .8 rg
n 210 0 42 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 12 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 42 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
1 .941176 .941176 rg
n 336 0 66 12 re f*
.933333 1 .8 rg
n 402 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (q) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (re) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (compile) Tj (\() Tj .729412 .129412 .129412 rg ('^[J|j]ames') Tj 0 0 0 rg (\),) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (re) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (compile) Tj (\() Tj .729412 .129412 .129412 rg ('^[B|b]ond') Tj 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 303.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (As you can see, q is callable and you can put expressions inside it, or you can use the q.key method.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 285.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you have funny characters or spaces in your dict\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 266.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
1 .941176 .941176 rg
n 12 0 228 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 36 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (q) Tj ([) Tj .729412 .129412 .129412 rg ('funny$text with # weird \243 characters') Tj 0 0 0 rg (]) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exists) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 246.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If your document is nested and there are subkeys, that is ok, you can use either:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 227.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
1 .941176 .941176 rg
n 18 0 72 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 18 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 12 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 18 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 30 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 36 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 312 0 24 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 30 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 378 0 30 12 re f*
.933333 1 .8 rg
n 414 0 12 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 444 0 6 12 re f*
.933333 1 .8 rg
n 450 0 6 12 re f*
.933333 1 .8 rg
n 456 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (\() Tj (q) Tj ([) Tj .729412 .129412 .129412 rg ('key.subkey') Tj 0 0 0 rg (]) Tj .188235 .188235 .188235 rg (>) Tj (=) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (|) Tj 0 0 0 rg ( ) Tj (\(\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (key) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (other) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exists) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (&) Tj 0 0 0 rg ( ) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (some) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (other) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (stuff) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 195.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.112236 Tw (q does not have the full power of the Mongo query document but it will get you to 95% of what you want. We end with) Tj T* 0 Tw (a fun James Bond query. If we want to find the bond films with all actors who played James Bond after 1980\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 164.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 688 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 48 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 24 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
1 .941176 .941176 rg
n 150 12 48 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
1 .941176 .941176 rg
n 210 12 36 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
1 .941176 .941176 rg
n 258 12 42 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
1 .941176 .941176 rg
n 312 12 54 12 re f*
.933333 1 .8 rg
n 366 12 12 12 re f*
.933333 1 .8 rg
n 384 12 42 12 re f*
.933333 1 .8 rg
n 432 12 6 12 re f*
.933333 1 .8 rg
n 444 12 6 12 re f*
1 .941176 .941176 rg
n 450 12 42 12 re f*
.933333 1 .8 rg
n 492 12 6 12 re f*
1 .941176 .941176 rg
n 504 12 54 12 re f*
.933333 1 .8 rg
n 558 12 6 12 re f*
1 .941176 .941176 rg
n 570 12 42 12 re f*
.933333 1 .8 rg
n 612 12 6 12 re f*
1 .941176 .941176 rg
n 624 12 48 12 re f*
.933333 1 .8 rg
n 672 12 12 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (bonds) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('Daniel') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Sean') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Roger') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Timothy') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('Craig') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Connery') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Moore') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('Dalton') Tj 0 0 0 rg (]\)) Tj  T* (bonds) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 137.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 30 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 72 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 12 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 24 12 re f*
.933333 1 .8 rg
n 234 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (q) Tj (\() Tj 0 .439216 .12549 rg (list) Tj 0 0 0 rg (\() Tj (bonds) Tj (\),) Tj ( ) Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (release_date) Tj ( ) Tj .188235 .188235 .188235 rg (>) Tj 0 0 0 rg ( ) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1980) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 105.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (mongo_cursor) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 87.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The mongo cursor:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 81.03937 cm
Q
q
1 0 0 1 40.01575 81.03937 cm
Q
q
1 0 0 1 40.01575 69.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (enables saving seemlessly objects and data in MongoDB) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 63.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (117) Tj T* ET
Q
Q
 
endstream
endobj
1088 0 obj
<<
/Length 24567
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (simplifies filtering) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (simplifies projecting onto certain keys in document) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 726.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (general objects insertion into documents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 708.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pymongo.Collection supports insertion of documents into it:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 653.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 18 12 re f*
.933333 1 .8 rg
n 54 36 36 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 36 12 re f*
.933333 1 .8 rg
n 156 36 42 12 re f*
.933333 1 .8 rg
n 204 36 12 12 re f*
.933333 1 .8 rg
n 222 36 18 12 re f*
.933333 1 .8 rg
n 240 36 6 12 re f*
.933333 1 .8 rg
n 252 36 36 12 re f*
.933333 1 .8 rg
n 294 36 36 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 18 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 48 24 66 12 re f*
.933333 1 .8 rg
n 114 24 18 12 re f*
1 .941176 .941176 rg
n 132 24 36 12 re f*
.933333 1 .8 rg
n 168 24 12 12 re f*
1 .941176 .941176 rg
n 180 24 36 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 6 12 6 12 re f*
.933333 1 .8 rg
n 12 12 24 12 re f*
.933333 1 .8 rg
n 36 12 12 12 re f*
.933333 1 .8 rg
n 264 12 120 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 60 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 264 0 114 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pymongo) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pym) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pytest) Tj /F5 10 Tf 0 0 0 rg  T* (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pym) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (MongoClient) Tj (\(\)[) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (][) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (]) Tj  T* (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj (                                    ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# drop all documents) Tj /F5 10 Tf 0 0 0 rg  T* (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj (            ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# insert a document) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 627.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 90 12 re f*
.933333 1 .8 rg
n 144 0 24 12 re f*
.933333 1 .8 rg
n 174 0 12 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 210 0 414 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (count_documents) Tj (\({}\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# in order to count documents, must apply the empty query document {}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 607.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can do similar stuff with a mongo_cursor:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 564.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 66 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 96 24 30 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
1 .941176 .941176 rg
n 144 24 36 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 12 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
1 .941176 .941176 rg
n 222 24 36 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 6 12 6 12 re f*
.933333 1 .8 rg
n 12 12 24 12 re f*
.933333 1 .8 rg
n 36 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 60 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (mongo_table) Tj (\() Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (\)) Tj  T* (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 537.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 586 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 12 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 468 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (t) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (#no need to specify the filter, mongo_cursor keeps track of the current filter) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 517.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Annoyingly, raw pymongo.Collection cannot encode for lots of existing objects.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 402.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 114 re B*
Q
q
.933333 1 .8 rg
n 0 96 12 12 re f*
.933333 1 .8 rg
n 18 96 6 12 re f*
.933333 1 .8 rg
n 30 96 12 12 re f*
.933333 1 .8 rg
n 42 96 6 12 re f*
.933333 1 .8 rg
n 48 96 36 12 re f*
.933333 1 .8 rg
n 84 96 12 12 re f*
.933333 1 .8 rg
n 96 96 12 12 re f*
.933333 1 .8 rg
n 108 96 6 12 re f*
.933333 1 .8 rg
n 114 96 12 12 re f*
.933333 1 .8 rg
n 126 96 12 12 re f*
.933333 1 .8 rg
n 144 96 36 12 re f*
.933333 1 .8 rg
n 180 96 6 12 re f*
.933333 1 .8 rg
n 186 96 24 12 re f*
.933333 1 .8 rg
n 210 96 6 12 re f*
.933333 1 .8 rg
n 216 96 6 12 re f*
.933333 1 .8 rg
n 222 96 12 12 re f*
.933333 1 .8 rg
n 0 84 6 12 re f*
.933333 1 .8 rg
n 12 84 6 12 re f*
.933333 1 .8 rg
n 24 84 12 12 re f*
.933333 1 .8 rg
n 36 84 6 12 re f*
.933333 1 .8 rg
n 42 84 36 12 re f*
.933333 1 .8 rg
n 78 84 6 12 re f*
.933333 1 .8 rg
n 84 84 6 12 re f*
.933333 1 .8 rg
n 90 84 6 12 re f*
.933333 1 .8 rg
n 0 72 6 12 re f*
.933333 1 .8 rg
n 12 72 6 12 re f*
.933333 1 .8 rg
n 24 72 12 12 re f*
.933333 1 .8 rg
n 36 72 6 12 re f*
.933333 1 .8 rg
n 42 72 42 12 re f*
.933333 1 .8 rg
n 84 72 6 12 re f*
.933333 1 .8 rg
n 90 72 24 12 re f*
.933333 1 .8 rg
n 114 72 6 12 re f*
.933333 1 .8 rg
n 0 60 24 12 re f*
.933333 1 .8 rg
n 30 60 36 12 re f*
.933333 1 .8 rg
n 66 60 6 12 re f*
.933333 1 .8 rg
n 72 60 36 12 re f*
.933333 1 .8 rg
n 108 60 6 12 re f*
.933333 1 .8 rg
n 114 60 54 12 re f*
.933333 1 .8 rg
n 168 60 12 12 re f*
.933333 1 .8 rg
n 24 48 6 12 re f*
.933333 1 .8 rg
n 30 48 6 12 re f*
.933333 1 .8 rg
n 36 48 60 12 re f*
.933333 1 .8 rg
n 96 48 6 12 re f*
.933333 1 .8 rg
n 102 48 24 12 re f*
.933333 1 .8 rg
n 126 48 6 12 re f*
.933333 1 .8 rg
n 132 48 6 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
.933333 1 .8 rg
n 162 48 12 12 re f*
.933333 1 .8 rg
n 180 48 144 12 re f*
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 36 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 72 36 36 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 54 12 re f*
.933333 1 .8 rg
n 168 36 12 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
.933333 1 .8 rg
n 36 24 60 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 24 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 162 24 12 12 re f*
.933333 1 .8 rg
n 180 24 270 12 re f*
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 54 12 re f*
.933333 1 .8 rg
n 168 12 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 60 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 24 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 12 12 re f*
.933333 1 .8 rg
n 174 0 12 12 re f*
.933333 1 .8 rg
n 198 0 240 12 re f*
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 0 rg (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\([) Tj /F6 10 Tf .376471 0 .878431 rg (1.) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf .376471 0 .878431 rg (2.) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (drange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2000) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (arange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (float32) Tj (\() Tj /F6 10 Tf .376471 0 .878431 rg (32.0) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (Exception) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# cannot insert an array) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (Exception) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (f) Tj (\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# cannot insert a numpy float, string or bool) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (Exception) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ts) Tj (\)\)) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# cannot insert a pd.Series or DataFrame) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 382.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Further, unless we define the encoding, new classes do not work either) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 279.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 102 re B*
Q
q
.933333 1 .8 rg
n 0 84 30 12 re f*
.933333 1 .8 rg
n 36 84 48 12 re f*
.933333 1 .8 rg
n 84 84 18 12 re f*
.933333 1 .8 rg
n 24 72 18 12 re f*
.933333 1 .8 rg
n 48 72 48 12 re f*
.933333 1 .8 rg
n 96 72 6 12 re f*
.933333 1 .8 rg
n 102 72 24 12 re f*
.933333 1 .8 rg
n 126 72 6 12 re f*
.933333 1 .8 rg
n 138 72 6 12 re f*
.933333 1 .8 rg
n 144 72 12 12 re f*
.933333 1 .8 rg
n 48 60 24 12 re f*
.933333 1 .8 rg
n 72 60 6 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 90 60 6 12 re f*
.933333 1 .8 rg
n 102 60 6 12 re f*
.933333 1 .8 rg
n 24 48 18 12 re f*
.933333 1 .8 rg
n 48 48 36 12 re f*
.933333 1 .8 rg
n 84 48 6 12 re f*
.933333 1 .8 rg
n 90 48 24 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 126 48 30 12 re f*
.933333 1 .8 rg
n 156 48 12 12 re f*
.933333 1 .8 rg
n 48 36 36 12 re f*
.933333 1 .8 rg
n 90 36 24 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 30 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 162 36 12 12 re f*
.933333 1 .8 rg
n 180 36 24 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 210 36 24 12 re f*
.933333 1 .8 rg
n 234 36 6 12 re f*
.933333 1 .8 rg
n 246 36 18 12 re f*
.933333 1 .8 rg
n 270 36 24 12 re f*
.933333 1 .8 rg
n 294 36 6 12 re f*
.933333 1 .8 rg
n 300 36 6 12 re f*
.933333 1 .8 rg
n 312 36 12 12 re f*
.933333 1 .8 rg
n 330 36 30 12 re f*
.933333 1 .8 rg
n 360 36 6 12 re f*
.933333 1 .8 rg
n 366 36 6 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 48 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 54 12 re f*
.933333 1 .8 rg
n 168 12 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 60 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 24 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 12 12 re f*
BT 1 0 0 1 0 86 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (class) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .690196 0 .376471 rg (NewClass) Tj /F5 10 Tf 0 0 0 rg (\(\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 0 1 rg (__init__) Tj 0 0 0 rg (\() Tj 0 .439216 .12549 rg (self) Tj 0 0 0 rg (,) Tj ( ) Tj (n) Tj (\):) Tj  T* (        ) Tj 0 .439216 .12549 rg (self) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (n) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 0 1 rg (__eq__) Tj 0 0 0 rg (\() Tj 0 .439216 .12549 rg (self) Tj 0 0 0 rg (,) Tj ( ) Tj (other) Tj (\):) Tj  T* (        ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (type) Tj 0 0 0 rg (\() Tj (other) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (type) Tj 0 0 0 rg (\() Tj 0 .439216 .12549 rg (self) Tj 0 0 0 rg (\)) Tj ( ) Tj /F6 10 Tf (and) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (self) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (n) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (other) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (n) Tj  T* (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (NewClass) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (Exception) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (n) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 259.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Luckily, the mongo_cursor t can insert all these happily:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 205.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 6 36 6 12 re f*
.933333 1 .8 rg
n 12 36 24 12 re f*
.933333 1 .8 rg
n 36 36 12 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 6 24 6 12 re f*
.933333 1 .8 rg
n 12 24 60 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 24 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 12 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 12 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 270 24 6 12 re f*
.933333 1 .8 rg
n 276 24 12 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 12 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 108 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj (Dict) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (f) Tj (,) Tj ( ) Tj (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ts) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (n) Tj (\)\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (t) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg  T* (t) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## reading it back) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 174.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (document reading) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 144.6394 cm
q
BT 1 0 0 1 0 14 Tm .527205 Tw 12 TL /F1 10 Tf 0 0 0 rg (What is nice is that when you read the document using the mongo_cursor, you get back the ) Tj /F2 10 Tf (object) Tj /F1 10 Tf ( you saved, not) Tj T* 0 Tw (just the data. Is this magic? Not really\205 We read the doc directly from the Collection:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 42 12 re f*
.933333 1 .8 rg
n 48 60 6 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 6 12 re f*
.933333 1 .8 rg
n 72 60 48 12 re f*
.933333 1 .8 rg
n 120 60 24 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 42 12 re f*
.933333 1 .8 rg
n 84 48 6 12 re f*
1 .941176 .941176 rg
n 90 48 18 12 re f*
.933333 1 .8 rg
n 108 48 6 12 re f*
.933333 1 .8 rg
n 120 48 12 12 re f*
1 .941176 .941176 rg
n 138 48 264 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 36 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 84 36 6 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 102 36 12 12 re f*
1 .941176 .941176 rg
n 120 36 264 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 36 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
1 .941176 .941176 rg
n 84 24 264 12 re f*
.933333 1 .8 rg
n 348 24 6 12 re f*
.933333 1 .8 rg
n 360 24 12 12 re f*
.933333 1 .8 rg
n 378 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 12 12 re f*
.933333 1 .8 rg
n 114 12 36 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 96 0 12 12 re f*
.933333 1 .8 rg
n 114 0 36 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (raw_doc) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find_one) Tj (\({}\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (raw_doc) Tj ([) Tj .729412 .129412 .129412 rg ('n') Tj 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('{"py/object": "__main__.NewClass", "n": 1}') Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (encode) Tj (\() Tj (n) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('{"py/object": "__main__.NewClass", "n": 1}') Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (decode) Tj (\() Tj .729412 .129412 .129412 rg ('{"py/object": "__main__.NewClass", "n": 1}') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (n) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (writer) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (encode) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reader) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (decode) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (118) Tj T* ET
Q
Q
 
endstream
endobj
1089 0 obj
<<
/Length 21247
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 787.0394 cm
Q
q
1 0 0 1 40.01575 775.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When writing, the mongo_cursor encodes the objects pre-saving it into Mongo, in this case as a simple dict) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When reading, it uses decode to convert what it reads back into the object) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 751.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This is done transparently though you can have full control via specifying writer/reader functions) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .139205 Tw (This all works with the assumption that the person loading and the person saving share the library so objects can be) Tj T* 0 Tw 2.048381 Tw (instantiated on load. If construction method has changed and the object is not back-compatible, then user will) Tj T* 0 Tw (receive the undecoded object and a warning message is logged.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 666.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (document writing to files) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 636.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .487756 Tw (MongoDB is great for manipulating/searching dict keys/values. The actual dataframes in each doc, we may want to) Tj T* 0 Tw (save in a file system because:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 630.6394 cm
Q
q
1 0 0 1 40.01575 630.6394 cm
Q
q
1 0 0 1 40.01575 618.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (DataFrames are stored as bytes in MongoDB anyway, so they are not searchable) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 612.6394 cm
Q
q
1 0 0 1 40.01575 600.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (MongoDB free version has limitations on size of document) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 594.6394 cm
Q
q
1 0 0 1 40.01575 582.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For data licensing issues, data must not sit on servers but needs to be stored on local computer) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 576.6394 cm
Q
q
1 0 0 1 40.01575 492.6394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 74 Tm .462435 Tw 12 TL /F1 10 Tf 0 0 0 rg (Storing in files allows other non-python/non-MongoDB users easier access, allowing data to be detached from) Tj T* 0 Tw .216711 Tw (app. In particular, if you want to stream messages into the array/dataframe, doing it through Mongo is probably) Tj T* 0 Tw 1.016721 Tw (the wrong way about it. ) Tj 0 0 .501961 rg (https://github.com/man-group/arctic) Tj 0 0 0 rg ( attempts to do it but Mongo should probably just) Tj T* 0 Tw 1.391794 Tw (contain a reference to a file. You then have a listener such as 0MQ appending new messages into the file) Tj T* 0 Tw .493099 Tw (\(perhaps via ) Tj 0 0 .501961 rg (https://github.com/xor2k/npy-append-array/) Tj 0 0 0 rg ( or awswrangler\). This will be \(a\) more performant, \(b\)) Tj T* 0 Tw 1.768705 Tw (require next to no code, and \(c\) new data will then magically show up in Mongo every time you read the) Tj T* 0 Tw (document.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 492.6394 cm
Q
q
1 0 0 1 40.01575 413.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 814 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 12 12 re f*
.933333 1 .8 rg
n 18 60 6 12 re f*
.933333 1 .8 rg
n 30 60 66 12 re f*
.933333 1 .8 rg
n 96 60 6 12 re f*
1 .941176 .941176 rg
n 102 60 36 12 re f*
.933333 1 .8 rg
n 138 60 6 12 re f*
1 .941176 .941176 rg
n 150 60 36 12 re f*
.933333 1 .8 rg
n 186 60 6 12 re f*
.933333 1 .8 rg
n 198 60 36 12 re f*
.933333 1 .8 rg
n 240 60 6 12 re f*
1 .941176 .941176 rg
n 252 60 54 12 re f*
.933333 1 .8 rg
n 306 60 6 12 re f*
.933333 1 .8 rg
n 0 48 12 12 re f*
.933333 1 .8 rg
n 12 48 6 12 re f*
.933333 1 .8 rg
n 18 48 24 12 re f*
.933333 1 .8 rg
n 42 48 12 12 re f*
.933333 1 .8 rg
n 0 36 18 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 36 36 24 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 24 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
1 .941176 .941176 rg
n 108 36 54 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 198 36 6 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 216 36 6 12 re f*
.933333 1 .8 rg
n 222 36 6 12 re f*
.933333 1 .8 rg
n 228 36 6 12 re f*
.933333 1 .8 rg
n 234 36 12 12 re f*
.933333 1 .8 rg
n 252 36 12 12 re f*
.933333 1 .8 rg
n 270 36 6 12 re f*
.933333 1 .8 rg
n 282 36 24 12 re f*
.933333 1 .8 rg
n 306 36 6 12 re f*
.933333 1 .8 rg
n 312 36 18 12 re f*
.933333 1 .8 rg
n 336 36 6 12 re f*
.933333 1 .8 rg
n 348 36 12 12 re f*
.933333 1 .8 rg
n 360 36 6 12 re f*
.933333 1 .8 rg
n 372 36 18 12 re f*
.933333 1 .8 rg
n 396 36 6 12 re f*
.933333 1 .8 rg
n 408 36 12 12 re f*
.933333 1 .8 rg
n 420 36 12 12 re f*
.933333 1 .8 rg
n 438 36 6 12 re f*
.933333 1 .8 rg
n 450 36 6 12 re f*
.933333 1 .8 rg
n 462 36 6 12 re f*
.933333 1 .8 rg
n 468 36 6 12 re f*
.933333 1 .8 rg
n 480 36 6 12 re f*
.933333 1 .8 rg
n 492 36 6 12 re f*
.933333 1 .8 rg
n 504 36 6 12 re f*
.933333 1 .8 rg
n 510 36 6 12 re f*
.933333 1 .8 rg
n 528 36 282 12 re f*
.933333 1 .8 rg
n 0 24 12 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 18 24 60 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 18 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 0 12 42 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 48 12 re f*
.933333 1 .8 rg
n 120 12 24 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 54 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 42 12 re f*
.933333 1 .8 rg
n 138 0 12 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (t2) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (mongo_table) Tj (\() Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (writer) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('parquet') Tj 0 0 0 rg (\)) Tj  T* (t2) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* (doc) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (root) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('c:/temp') Tj 0 0 0 rg (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (a) Tj (,) Tj (a) Tj (,) Tj (a) Tj (],) Tj ( ) Tj (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (one) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ts) Tj (,) Tj ( ) Tj (two) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ts) Tj (\),) Tj ( ) Tj (f) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (f) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (n) Tj (\)) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## can handle lists of arrays or dicts of stuff) Tj /F5 10 Tf 0 0 0 rg  T* (t2) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj (doc) Tj (\)) Tj  T* (encoded) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find_one) Tj (\({}\)) Tj  T* 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (tree_repr) Tj (\() Tj (encoded) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 381.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .846005 Tw (You can see that starting at the root location, the document\222s numpy arrays and pandas have been saved to .npy) Tj T* 0 Tw (and .parquet files) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 363.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 54 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 36 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 42 12 re f*
.933333 1 .8 rg
n 180 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (tree_repr) Tj (\() Tj (decode) Tj (\() Tj (encoded) Tj (\)\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 336.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 24 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
1 .941176 .941176 rg
n 48 0 102 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 150 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (load) Tj (\() Tj .729412 .129412 .129412 rg ('c:/temp/a/2.npy') Tj 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## can load data directly) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 309.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 90 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
1 .941176 .941176 rg
n 96 0 144 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pd_read_parquet) Tj (\() Tj .729412 .129412 .129412 rg ('c:/temp/ts/one.parquet') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 279.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (document access) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 261.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We start by pushing a 10x10 times table into t) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 218.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 526 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 6 24 6 12 re f*
.933333 1 .8 rg
n 12 24 24 12 re f*
.933333 1 .8 rg
n 36 24 12 12 re f*
.933333 1 .8 rg
n 0 12 66 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 48 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 168 12 30 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 204 12 12 12 re f*
.933333 1 .8 rg
n 216 12 12 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 246 12 48 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 324 12 30 12 re f*
.933333 1 .8 rg
n 354 12 6 12 re f*
.933333 1 .8 rg
n 360 12 12 12 re f*
.933333 1 .8 rg
n 372 12 24 12 re f*
.933333 1 .8 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 420 12 36 12 re f*
.933333 1 .8 rg
n 462 12 6 12 re f*
.933333 1 .8 rg
n 468 12 6 12 re f*
.933333 1 .8 rg
n 480 12 6 12 re f*
.933333 1 .8 rg
n 486 12 6 12 re f*
.933333 1 .8 rg
n 498 12 6 12 re f*
.933333 1 .8 rg
n 504 12 6 12 re f*
.933333 1 .8 rg
n 510 12 6 12 re f*
.933333 1 .8 rg
n 516 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 66 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 66 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* (times_table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (\() Tj (dictable) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (range) Tj 0 0 0 rg (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (range) Tj 0 0 0 rg (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)\)\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj (:) Tj ( ) Tj (a) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (b) Tj (\)) Tj  T* (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_many) Tj (\() Tj (times_table) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 187.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (filters) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 169.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We now examine how we drill down to the document\(s\) we want:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 115.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 72 36 6 12 re f*
.933333 1 .8 rg
n 78 36 18 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 126 36 6 12 re f*
.933333 1 .8 rg
n 132 36 12 12 re f*
.933333 1 .8 rg
n 150 36 12 12 re f*
.933333 1 .8 rg
n 168 36 12 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 18 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 12 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 168 24 12 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 60 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 18 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 12 12 re f*
.933333 1 .8 rg
n 192 12 72 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 276 12 114 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 24 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 12 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 18 12 re f*
.933333 1 .8 rg
n 312 0 12 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (exc) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (90) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (isinstance) Tj 0 0 0 rg (\() Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (mongo_cursor) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## it is chain-able) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (q) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (b) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 95.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can use the original collection too but not in a chain-like fashion:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 64.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 12 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 90 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 24 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (spec) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (q) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (count_documents) Tj (\() Tj (spec) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (119) Tj T* ET
Q
Q
 
endstream
endobj
1090 0 obj
<<
/Length 22572
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 6 24 6 12 re f*
.933333 1 .8 rg
n 12 24 24 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 42 24 24 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 78 24 72 12 re f*
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 84 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 222 12 180 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 24 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 12 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 24 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 18 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (spec) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# That is OK) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (AttributeError) Tj /F5 10 Tf 0 0 0 rg (\):) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# not OK, cannot chain queries) Tj /F5 10 Tf 0 0 0 rg  T* (    ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (q) Tj (\() Tj (a) Tj .188235 .188235 .188235 rg (=) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (q) Tj (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 713.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (iteration) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 695.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Just like a mongo.Cursor, c.find\(spec\), t is also iterable over the documents:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 677.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 18 12 re f*
.933333 1 .8 rg
n 18 0 12 12 re f*
.933333 1 .8 rg
n 30 0 18 12 re f*
.933333 1 .8 rg
n 54 0 18 12 re f*
.933333 1 .8 rg
n 78 0 18 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 24 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 24 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 24 12 re f*
.933333 1 .8 rg
n 336 0 48 12 re f*
.933333 1 .8 rg
n 384 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 .439216 .12549 rg (sum) Tj 0 0 0 rg (\([) Tj (doc) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (doc) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)],) Tj ( ) Tj (dictable) Tj (\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 650.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 24 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 24 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 18 12 re f*
.933333 1 .8 rg
n 264 0 270 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (dictable) Tj (\() Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## or just put a cursor straight into a table) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 623.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 24 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 36 12 re f*
.933333 1 .8 rg
n 228 0 120 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)[::]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## or simple slicing) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 593.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (sorting) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 568.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
1 .941176 .941176 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
1 .941176 .941176 rg
n 72 0 18 12 re f*
.933333 1 .8 rg
n 90 0 30 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sort) Tj (\() Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)[::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 537.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (getitem of a specfic document) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 513.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ([) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (7) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (8) Tj /F5 10 Tf 0 0 0 rg (\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 482.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (column access) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 457.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 431.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 48 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
1 .941176 .941176 rg
n 150 0 18 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 48 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
1 .941176 .941176 rg
n 264 0 18 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (b) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (distinct) Tj (\() Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (==) Tj 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (distinct) Tj (\() Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 411.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In MongoDB the cursor can have a \221projection\222 onto specific columns. In mongo_cursor this is simplified:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 392.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
1 .941176 .941176 rg
n 18 0 18 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
1 .941176 .941176 rg
n 48 0 18 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 24 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 12 12 re f*
.933333 1 .8 rg
n 150 0 30 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ([[) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (]]) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (find) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)[::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 361.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (add/remove columns) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 325.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
1 .941176 .941176 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (del) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj ([) Tj .729412 .129412 .129412 rg ('c') Tj 0 0 0 rg (]) Tj  T* (t) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 286.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
1 .941176 .941176 rg
n 84 12 144 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (set) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('not very useful but...') Tj 0 0 0 rg (\)) Tj  T* (t) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 247.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 36 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 90 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (set) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj (:) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (b) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (### more useful) Tj /F5 10 Tf 0 0 0 rg  T* (t) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 217.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (add/remove records) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 180.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 6 12 6 12 re f*
.933333 1 .8 rg
n 12 12 18 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 60 12 12 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 24 12 re f*
.933333 1 .8 rg
n 108 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* (t) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 141.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 24 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 12 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (6) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (t) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 102.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 12 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 24 12 re f*
.933333 1 .8 rg
n 132 12 12 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 66 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 234 12 18 12 re f*
.933333 1 .8 rg
n 252 12 6 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 282 12 12 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 306 12 180 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (times_table) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## adding four records at once) Tj /F5 10 Tf 0 0 0 rg  T* (t) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 63.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 12 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 24 12 re f*
.933333 1 .8 rg
n 132 12 12 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 66 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 222 12 66 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 294 12 18 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 342 12 12 12 re f*
.933333 1 .8 rg
n 354 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_many) Tj (\() Tj (times_table) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (t) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (120) Tj T* ET
Q
Q
 
endstream
endobj
1091 0 obj
<<
/Length 19527
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 60 12 162 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raw) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## remove the filter c = 12) Tj /F5 10 Tf 0 0 0 rg  T* (t) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 723.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (mongo_pk_table) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 693.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.014358 Tw (mongo_pk_table is a mongo_cursor implementing a table with primary keys. Suppose we want to have a table of) Tj T* 0 Tw (people:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 566.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 126 re B*
Q
q
.933333 1 .8 rg
n 0 108 24 12 re f*
.933333 1 .8 rg
n 30 108 18 12 re f*
.933333 1 .8 rg
n 54 108 36 12 re f*
.933333 1 .8 rg
n 96 108 6 12 re f*
.933333 1 .8 rg
n 102 108 6 12 re f*
.933333 1 .8 rg
n 114 108 36 12 re f*
.933333 1 .8 rg
n 156 108 42 12 re f*
.933333 1 .8 rg
n 204 108 12 12 re f*
.933333 1 .8 rg
n 222 108 18 12 re f*
.933333 1 .8 rg
n 240 108 6 12 re f*
.933333 1 .8 rg
n 252 108 36 12 re f*
.933333 1 .8 rg
n 294 108 36 12 re f*
.933333 1 .8 rg
n 0 84 6 12 re f*
.933333 1 .8 rg
n 12 84 6 12 re f*
.933333 1 .8 rg
n 24 84 66 12 re f*
.933333 1 .8 rg
n 90 84 6 12 re f*
.933333 1 .8 rg
n 96 84 30 12 re f*
.933333 1 .8 rg
n 132 84 6 12 re f*
1 .941176 .941176 rg
n 144 84 36 12 re f*
.933333 1 .8 rg
n 180 84 6 12 re f*
.933333 1 .8 rg
n 192 84 12 12 re f*
.933333 1 .8 rg
n 210 84 6 12 re f*
1 .941176 .941176 rg
n 222 84 36 12 re f*
.933333 1 .8 rg
n 258 84 6 12 re f*
.933333 1 .8 rg
n 0 72 6 12 re f*
.933333 1 .8 rg
n 12 72 6 12 re f*
.933333 1 .8 rg
n 24 72 18 12 re f*
.933333 1 .8 rg
n 42 72 6 12 re f*
.933333 1 .8 rg
n 48 72 66 12 re f*
.933333 1 .8 rg
n 114 72 18 12 re f*
1 .941176 .941176 rg
n 132 72 36 12 re f*
.933333 1 .8 rg
n 168 72 12 12 re f*
1 .941176 .941176 rg
n 180 72 36 12 re f*
.933333 1 .8 rg
n 216 72 6 12 re f*
.933333 1 .8 rg
n 0 60 12 12 re f*
.933333 1 .8 rg
n 18 60 6 12 re f*
.933333 1 .8 rg
n 30 60 66 12 re f*
.933333 1 .8 rg
n 96 60 6 12 re f*
.933333 1 .8 rg
n 102 60 30 12 re f*
.933333 1 .8 rg
n 138 60 6 12 re f*
1 .941176 .941176 rg
n 150 60 36 12 re f*
.933333 1 .8 rg
n 186 60 6 12 re f*
.933333 1 .8 rg
n 198 60 12 12 re f*
.933333 1 .8 rg
n 216 60 6 12 re f*
1 .941176 .941176 rg
n 228 60 36 12 re f*
.933333 1 .8 rg
n 264 60 6 12 re f*
.933333 1 .8 rg
n 276 60 12 12 re f*
.933333 1 .8 rg
n 294 60 6 12 re f*
.933333 1 .8 rg
n 306 60 6 12 re f*
1 .941176 .941176 rg
n 312 60 36 12 re f*
.933333 1 .8 rg
n 348 60 6 12 re f*
1 .941176 .941176 rg
n 360 60 54 12 re f*
.933333 1 .8 rg
n 414 60 12 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 6 36 6 12 re f*
.933333 1 .8 rg
n 12 36 24 12 re f*
.933333 1 .8 rg
n 36 36 12 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 48 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 24 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
1 .941176 .941176 rg
n 126 24 36 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
1 .941176 .941176 rg
n 174 24 36 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
1 .941176 .941176 rg
n 222 24 54 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
1 .941176 .941176 rg
n 288 24 42 12 re f*
.933333 1 .8 rg
n 330 24 12 12 re f*
.933333 1 .8 rg
n 348 24 42 12 re f*
.933333 1 .8 rg
n 396 24 6 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
1 .941176 .941176 rg
n 414 24 42 12 re f*
.933333 1 .8 rg
n 456 24 6 12 re f*
1 .941176 .941176 rg
n 468 24 42 12 re f*
.933333 1 .8 rg
n 510 24 6 12 re f*
1 .941176 .941176 rg
n 522 24 42 12 re f*
.933333 1 .8 rg
n 564 24 6 12 re f*
1 .941176 .941176 rg
n 576 24 42 12 re f*
.933333 1 .8 rg
n 618 24 12 12 re f*
.933333 1 .8 rg
n 636 24 18 12 re f*
.933333 1 .8 rg
n 660 24 6 12 re f*
.933333 1 .8 rg
n 672 24 6 12 re f*
.933333 1 .8 rg
n 678 24 6 12 re f*
.933333 1 .8 rg
n 684 24 6 12 re f*
.933333 1 .8 rg
n 690 24 6 12 re f*
.933333 1 .8 rg
n 696 24 6 12 re f*
.933333 1 .8 rg
n 702 24 6 12 re f*
.933333 1 .8 rg
n 708 24 6 12 re f*
.933333 1 .8 rg
n 714 24 6 12 re f*
.933333 1 .8 rg
n 720 24 12 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 18 12 66 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
BT 1 0 0 1 0 110 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pymongo) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pym) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pytest) Tj /F5 10 Tf 0 0 0 rg  T*  T* (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (mongo_table) Tj (\() Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (\)) Tj  T* (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pym) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (MongoClient) Tj (\(\)[) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (][) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (]) Tj  T* (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (mongo_table) Tj (\() Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('surname') Tj 0 0 0 rg (]\)) Tj  T*  T* (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chris') Tj 0 0 0 rg (],) Tj ( ) Tj (surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('adams') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('jones') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('brown') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('jones') Tj 0 0 0 rg (],) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (pk) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_many) Tj (\() Tj (d) Tj (\)) Tj  T* (pk) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now let us suppose a year has passed\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 515.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 18 12 18 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 78 12 36 12 re f*
.933333 1 .8 rg
n 120 12 18 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 18 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pk) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (set) Tj (\() Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (age) Tj (:) Tj ( ) Tj (age) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (pk) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 483.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .105256 Tw (The pk-table actually maintains complete audit trail. Older records are not deleted, they just get \222_deleted\222 parameter) Tj T* 0 Tw (set for them.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 465.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 48 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (dictable) Tj (\() Tj (c) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 445.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can see pk only looks at records where _deleted does not exist and _pk are set.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 426.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F5 10 Tf 12 TL (pk) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 394.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .208637 Tw (There are obvioursly some small differences on how pk works but broadly, it is just like a normal mongo_cursor with) Tj T* 0 Tw (an added filter to zoom onto the records that maintain the primary-key table:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 388.2394 cm
Q
q
1 0 0 1 40.01575 388.2394 cm
Q
q
1 0 0 1 40.01575 376.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (you cannot insert docs without primary keys all present:) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 370.2394 cm
Q
q
1 0 0 1 40.01575 358.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the drop\(\) command does not actually delete the documents, they are simply \221marked\222 as deleted.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 352.2394 cm
Q
q
1 0 0 1 40.01575 340.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (to get from a mongo_pk_cursor to mongo_cursor, simply go pk.raw) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 340.2394 cm
Q
q
1 0 0 1 40.01575 309.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 48 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 24 0 12 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 60 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 24 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 108 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
1 .941176 .941176 rg
n 264 0 42 12 re f*
.933333 1 .8 rg
n 306 0 12 12 re f*
.933333 1 .8 rg
n 324 0 156 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (KeyError) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (pk) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (no_name_or_surname) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('James') Tj 0 0 0 rg (\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# cannot insert with no PK) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 270.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 18 12 24 12 re f*
.933333 1 .8 rg
n 42 12 12 12 re f*
.933333 1 .8 rg
n 0 0 18 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 24 0 12 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pk) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (pk) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 243.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 24 12 re f*
.933333 1 .8 rg
n 36 0 306 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t) Tj ([::]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## the data is there, it is just marked as _deleted) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 211.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (mongo_reader and mongo_pk_reader) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 181.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .638705 Tw (Because it is so easy to do stuff in MongoDB, we could easily cause damage to the date underlying. We therefore) Tj T* 0 Tw (also introduced read-only versions for the mongo_cursor and pk_cursor:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 150.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 36 12 66 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 30 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
1 .941176 .941176 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 12 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
1 .941176 .941176 rg
n 234 12 36 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 282 12 12 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
1 .941176 .941176 rg
n 318 12 36 12 re f*
.933333 1 .8 rg
n 354 12 6 12 re f*
1 .941176 .941176 rg
n 366 12 54 12 re f*
.933333 1 .8 rg
n 420 12 12 12 re f*
.933333 1 .8 rg
n 438 12 24 12 re f*
.933333 1 .8 rg
n 468 12 6 12 re f*
1 .941176 .941176 rg
n 480 12 18 12 re f*
.933333 1 .8 rg
n 498 12 6 12 re f*
.933333 1 .8 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pkr) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (mongo_table) Tj (\() Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('name') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('surname') Tj 0 0 0 rg (],) Tj ( ) Tj (mode) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('r') Tj 0 0 0 rg (\)) Tj  T* (pkr) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 111.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 84 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 24 0 18 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 24 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (AttributeError) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (pkr) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 60.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 18 24 6 12 re f*
.933333 1 .8 rg
n 30 24 66 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 30 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
1 .941176 .941176 rg
n 150 24 36 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 198 24 12 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
1 .941176 .941176 rg
n 228 24 36 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
.933333 1 .8 rg
n 276 24 24 12 re f*
.933333 1 .8 rg
n 306 24 6 12 re f*
1 .941176 .941176 rg
n 318 24 18 12 re f*
.933333 1 .8 rg
n 336 24 6 12 re f*
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 84 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 24 12 re f*
.933333 1 .8 rg
n 60 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (r) Tj (  ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (mongo_table) Tj (\() Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (mode) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('r') Tj 0 0 0 rg (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (AttributeError) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (r) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.mongo) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (121) Tj T* ET
Q
Q
 
endstream
endobj
1092 0 obj
<<
/Length 18571
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg  T* (r) Tj ([::]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 741.4394 cm
q
Q
Q
q
1 0 0 1 40.01575 706.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 664.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .587058 Tw (cell is a dict that forms part of a calculation graph. Most usefully, db_cell is implemented to maintain persistency of) Tj T* 0 Tw .875433 Tw (the function output in MongoDB. Before we start, we will show a few examples of how a cell works. Then, we will) Tj T* 0 Tw (build a toy example of trading stocks based on an exponentially weighted crossover.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 658.2394 cm
Q
q
1 0 0 1 40.01575 658.2394 cm
Q
q
1 0 0 1 40.01575 646.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We will start by creating the system using pyg.base.dictable and pyg.timeseries.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 640.2394 cm
Q
q
1 0 0 1 40.01575 616.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.42745 Tw (We then repeat the same code, this time modifying it slightly to save the data and calculation graph in) Tj T* 0 Tw (MongoDB while running the calculation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 598.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We conclude by discussing the two approaches) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 598.2394 cm
Q
q
1 0 0 1 40.01575 565.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Cell 101) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 504.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 18 12 re f*
.933333 1 .8 rg
n 54 36 36 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 24 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 54 24 36 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 252 24 6 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 24 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 252 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (y) Tj (:) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (y) Tj (,) Tj (  ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (y) Tj (:) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (y) Tj (,) Tj (  ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (\)) Tj  T* (b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 477.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 54 0 84 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (b) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (keys) Tj (\(\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## b is a dict) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 451.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 30 12 re f*
.933333 1 .8 rg
n 48 0 54 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (b) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (_args) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## inputs) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 424.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 42 12 re f*
.933333 1 .8 rg
n 60 0 288 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (b) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (_output) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## where the output will go once we calculate it) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 397.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 18 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
.933333 1 .8 rg
n 90 0 264 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (b) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (run) Tj (\(\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## b has not calculated yet... please run it) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 370.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 12 12 re f*
.933333 1 .8 rg
n 24 0 198 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (b) Tj (\(\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# calculated object note b\(\).data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 343.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 18 12 re f*
.933333 1 .8 rg
n 108 0 12 12 re f*
.933333 1 .8 rg
n 126 0 264 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf (not) Tj /F5 10 Tf ( ) Tj (b) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (run) Tj (\(\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## b has calculated now... no need to run it) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 317.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 592 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 36 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 12 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 12 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 348 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (cell) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (y) Tj (:) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (**) Tj 0 0 0 rg ( ) Tj (y) Tj (\)\() Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# you can define the cell and then call it with the values) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 284.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Workflow without saving to the database) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 223.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1150 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 18 12 re f*
.933333 1 .8 rg
n 54 36 36 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 48 12 re f*
.933333 1 .8 rg
n 96 24 12 12 re f*
.933333 1 .8 rg
n 114 24 12 12 re f*
.933333 1 .8 rg
n 132 24 264 12 re f*
.933333 1 .8 rg
n 0 12 72 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 48 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 48 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
1 .941176 .941176 rg
n 198 12 324 12 re f*
.933333 1 .8 rg
n 522 12 12 12 re f*
.933333 1 .8 rg
n 534 12 6 12 re f*
.933333 1 .8 rg
n 540 12 36 12 re f*
.933333 1 .8 rg
n 576 12 6 12 re f*
.933333 1 .8 rg
n 582 12 30 12 re f*
.933333 1 .8 rg
n 612 12 6 12 re f*
.933333 1 .8 rg
n 624 12 108 12 re f*
.933333 1 .8 rg
n 732 12 6 12 re f*
.933333 1 .8 rg
n 738 12 402 12 re f*
.933333 1 .8 rg
n 1140 12 6 12 re f*
.933333 1 .8 rg
n 0 0 72 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj  T* /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (yfinance) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (yf) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# see https://github.com/ranaroussi/yfinance) Tj /F5 10 Tf 0 0 0 rg  T* (constituents) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (read_csv) Tj (\() Tj .729412 .129412 .129412 rg ('d:/dropbox/yoav/python/pyg/docs/constituents_csv.csv') Tj 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rename) Tj (\() Tj (lower) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# downloaded from ) Tj (<) Tj (https://datahub.io/core/s-and-p-500-companies#resource-constituents) Tj (>) Tj /F5 10 Tf 0 0 0 rg  T* (constituents) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 184.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 72 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 18 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
1 .941176 .941176 rg
n 210 12 48 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (constituents) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj (sector) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Energy') Tj 0 0 0 rg (\)) Tj  T* (stocks) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 157.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 42 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 36 12 re f*
.933333 1 .8 rg
n 198 0 36 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 246 0 36 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 24 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 12 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 48 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 402 0 42 12 re f*
.933333 1 .8 rg
n 450 0 6 12 re f*
.933333 1 .8 rg
n 462 0 36 12 re f*
.933333 1 .8 rg
n 498 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (sector) Tj (,) Tj ( ) Tj (name) Tj (:) Tj ( ) Tj (yf) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (download) Tj (\() Tj (tickers) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 131.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 36 12 re f*
.933333 1 .8 rg
n 162 0 42 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 18 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 42 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (history) Tj (:) Tj ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (history) Tj (\)) Tj .188235 .188235 .188235 rg (>) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 104.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 36 12 re f*
.933333 1 .8 rg
n 174 0 42 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 228 0 42 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 30 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 42 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
.933333 1 .8 rg
n 378 0 18 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
1 .941176 .941176 rg
n 414 0 66 12 re f*
.933333 1 .8 rg
n 480 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (adj) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (history) Tj (:) Tj ( ) Tj (getitem) Tj (\() Tj (value) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (history) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Adj Close') Tj 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 77.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 36 12 re f*
.933333 1 .8 rg
n 174 0 18 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 204 0 24 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 18 12 re f*
.933333 1 .8 rg
n 276 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (adj) Tj (:) Tj ( ) Tj (diff) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (adj) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (122) Tj T* ET
Q
Q
 
endstream
endobj
1093 0 obj
<<
/Length 30399
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 768.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 36 12 re f*
.933333 1 .8 rg
n 174 0 18 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 204 0 36 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 18 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 12 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (:) Tj ( ) Tj (ewmstd) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 585.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 174 re B*
Q
q
.933333 1 .8 rg
n 0 156 30 12 re f*
.933333 1 .8 rg
n 36 156 6 12 re f*
1 .941176 .941176 rg
n 48 156 36 12 re f*
.933333 1 .8 rg
n 0 144 18 12 re f*
.933333 1 .8 rg
n 24 144 60 12 re f*
.933333 1 .8 rg
n 84 144 6 12 re f*
.933333 1 .8 rg
n 90 144 6 12 re f*
.933333 1 .8 rg
n 96 144 6 12 re f*
.933333 1 .8 rg
n 108 144 24 12 re f*
.933333 1 .8 rg
n 132 144 6 12 re f*
.933333 1 .8 rg
n 144 144 24 12 re f*
.933333 1 .8 rg
n 168 144 6 12 re f*
.933333 1 .8 rg
n 180 144 18 12 re f*
.933333 1 .8 rg
n 198 144 6 12 re f*
.933333 1 .8 rg
n 210 144 42 12 re f*
.933333 1 .8 rg
n 258 144 6 12 re f*
.933333 1 .8 rg
n 270 144 24 12 re f*
.933333 1 .8 rg
n 294 144 12 12 re f*
.933333 1 .8 rg
n 24 132 30 12 re f*
.933333 1 .8 rg
n 60 132 6 12 re f*
.933333 1 .8 rg
n 72 132 24 12 re f*
.933333 1 .8 rg
n 96 132 6 12 re f*
.933333 1 .8 rg
n 102 132 24 12 re f*
.933333 1 .8 rg
n 132 132 6 12 re f*
.933333 1 .8 rg
n 144 132 18 12 re f*
.933333 1 .8 rg
n 168 132 24 12 re f*
.933333 1 .8 rg
n 198 132 6 12 re f*
.933333 1 .8 rg
n 210 132 18 12 re f*
.933333 1 .8 rg
n 234 132 18 12 re f*
.933333 1 .8 rg
n 258 132 6 12 re f*
.933333 1 .8 rg
n 270 132 18 12 re f*
.933333 1 .8 rg
n 294 132 12 12 re f*
.933333 1 .8 rg
n 312 132 42 12 re f*
.933333 1 .8 rg
n 360 132 12 12 re f*
.933333 1 .8 rg
n 378 132 24 12 re f*
.933333 1 .8 rg
n 408 132 24 12 re f*
.933333 1 .8 rg
n 438 132 42 12 re f*
.933333 1 .8 rg
n 24 120 60 12 re f*
.933333 1 .8 rg
n 90 120 6 12 re f*
.933333 1 .8 rg
n 102 120 30 12 re f*
.933333 1 .8 rg
n 132 120 6 12 re f*
.933333 1 .8 rg
n 138 120 6 12 re f*
.933333 1 .8 rg
n 144 120 6 12 re f*
.933333 1 .8 rg
n 156 120 24 12 re f*
.933333 1 .8 rg
n 180 120 6 12 re f*
.933333 1 .8 rg
n 192 120 42 12 re f*
.933333 1 .8 rg
n 240 120 6 12 re f*
.933333 1 .8 rg
n 252 120 30 12 re f*
.933333 1 .8 rg
n 282 120 6 12 re f*
.933333 1 .8 rg
n 288 120 24 12 re f*
.933333 1 .8 rg
n 312 120 6 12 re f*
.933333 1 .8 rg
n 24 108 60 12 re f*
.933333 1 .8 rg
n 90 108 6 12 re f*
.933333 1 .8 rg
n 102 108 30 12 re f*
.933333 1 .8 rg
n 132 108 6 12 re f*
.933333 1 .8 rg
n 138 108 6 12 re f*
.933333 1 .8 rg
n 144 108 6 12 re f*
.933333 1 .8 rg
n 156 108 24 12 re f*
.933333 1 .8 rg
n 180 108 6 12 re f*
.933333 1 .8 rg
n 192 108 42 12 re f*
.933333 1 .8 rg
n 240 108 6 12 re f*
.933333 1 .8 rg
n 252 108 30 12 re f*
.933333 1 .8 rg
n 282 108 6 12 re f*
.933333 1 .8 rg
n 288 108 24 12 re f*
.933333 1 .8 rg
n 312 108 6 12 re f*
.933333 1 .8 rg
n 24 96 60 12 re f*
.933333 1 .8 rg
n 90 96 6 12 re f*
.933333 1 .8 rg
n 102 96 60 12 re f*
.933333 1 .8 rg
n 162 96 6 12 re f*
.933333 1 .8 rg
n 168 96 24 12 re f*
.933333 1 .8 rg
n 198 96 6 12 re f*
.933333 1 .8 rg
n 210 96 60 12 re f*
.933333 1 .8 rg
n 270 96 6 12 re f*
.933333 1 .8 rg
n 276 96 24 12 re f*
.933333 1 .8 rg
n 24 84 60 12 re f*
.933333 1 .8 rg
n 90 84 6 12 re f*
.933333 1 .8 rg
n 102 84 42 12 re f*
.933333 1 .8 rg
n 144 84 6 12 re f*
.933333 1 .8 rg
n 150 84 60 12 re f*
.933333 1 .8 rg
n 210 84 6 12 re f*
.933333 1 .8 rg
n 222 84 18 12 re f*
.933333 1 .8 rg
n 240 84 6 12 re f*
.933333 1 .8 rg
n 252 84 42 12 re f*
.933333 1 .8 rg
n 300 84 6 12 re f*
.933333 1 .8 rg
n 312 84 30 12 re f*
.933333 1 .8 rg
n 342 84 6 12 re f*
.933333 1 .8 rg
n 348 84 18 12 re f*
.933333 1 .8 rg
n 366 84 6 12 re f*
.933333 1 .8 rg
n 24 72 60 12 re f*
.933333 1 .8 rg
n 90 72 6 12 re f*
.933333 1 .8 rg
n 102 72 60 12 re f*
.933333 1 .8 rg
n 162 72 6 12 re f*
.933333 1 .8 rg
n 168 72 24 12 re f*
.933333 1 .8 rg
n 192 72 6 12 re f*
.933333 1 .8 rg
n 198 72 60 12 re f*
.933333 1 .8 rg
n 258 72 6 12 re f*
.933333 1 .8 rg
n 264 72 24 12 re f*
.933333 1 .8 rg
n 288 72 6 12 re f*
.933333 1 .8 rg
n 24 60 36 12 re f*
.933333 1 .8 rg
n 66 60 24 12 re f*
.933333 1 .8 rg
n 90 60 6 12 re f*
.933333 1 .8 rg
n 96 60 24 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 138 60 60 12 re f*
.933333 1 .8 rg
n 198 60 6 12 re f*
.933333 1 .8 rg
n 210 60 30 12 re f*
.933333 1 .8 rg
n 246 60 6 12 re f*
.933333 1 .8 rg
n 258 60 24 12 re f*
.933333 1 .8 rg
n 282 60 6 12 re f*
.933333 1 .8 rg
n 288 60 24 12 re f*
.933333 1 .8 rg
n 318 60 6 12 re f*
.933333 1 .8 rg
n 330 60 60 12 re f*
.933333 1 .8 rg
n 390 60 6 12 re f*
.933333 1 .8 rg
n 396 60 30 12 re f*
.933333 1 .8 rg
n 426 60 6 12 re f*
.933333 1 .8 rg
n 438 60 24 12 re f*
.933333 1 .8 rg
n 468 60 6 12 re f*
.933333 1 .8 rg
n 480 60 60 12 re f*
.933333 1 .8 rg
n 540 60 6 12 re f*
.933333 1 .8 rg
n 546 60 30 12 re f*
.933333 1 .8 rg
n 576 60 6 12 re f*
.933333 1 .8 rg
n 588 60 18 12 re f*
.933333 1 .8 rg
n 612 60 6 12 re f*
.933333 1 .8 rg
n 624 60 60 12 re f*
.933333 1 .8 rg
n 684 60 6 12 re f*
.933333 1 .8 rg
n 690 60 30 12 re f*
.933333 1 .8 rg
n 720 60 12 12 re f*
.933333 1 .8 rg
n 0 36 60 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 36 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
1 .941176 .941176 rg
n 126 36 36 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
1 .941176 .941176 rg
n 174 36 42 12 re f*
.933333 1 .8 rg
n 216 36 6 12 re f*
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 54 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 102 12 24 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 24 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 18 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 30 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 252 12 24 12 re f*
.933333 1 .8 rg
n 276 12 12 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 60 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 24 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 24 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 18 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 252 0 42 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 312 0 30 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
BT 1 0 0 1 0 158 Tm 12 TL /F5 10 Tf 0 0 0 rg (_data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('data') Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (crossover_) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ({},) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ({},) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ({}\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (instate) Tj ( ) Tj /F6 10 Tf (is) Tj /F5 10 Tf ( ) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (instate) Tj  T* (    ) Tj (fast_ewma_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (fast) Tj (\)) Tj  T* (    ) Tj (slow_ewma_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (slow) Tj (\)) Tj  T* (    ) Tj (raw_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (slow_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj  T* (    ) Tj (signal_rms) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewmrms_) Tj (\() Tj (raw_signal) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (vol) Tj (\)) Tj  T* (    ) Tj (normalized) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (raw_signal) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (v2na) Tj (\() Tj (signal_rms) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (normalized) Tj (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (,) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (slow_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (signal_rms) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (\)\)) Tj  T*  T* (crossover_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (output) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('data') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('state') Tj 0 0 0 rg (]) Tj  T*  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (crossover) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (crossover_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 555.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (some more functions to calculate the profits & loss as well as the signal/noise ratio) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 482.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 18 12 re f*
.933333 1 .8 rg
n 24 48 60 12 re f*
.933333 1 .8 rg
n 84 48 6 12 re f*
.933333 1 .8 rg
n 90 48 36 12 re f*
.933333 1 .8 rg
n 126 48 6 12 re f*
.933333 1 .8 rg
n 138 48 18 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
.933333 1 .8 rg
n 168 48 18 12 re f*
.933333 1 .8 rg
n 186 48 12 12 re f*
.933333 1 .8 rg
n 24 36 36 12 re f*
.933333 1 .8 rg
n 66 36 30 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 36 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 168 36 18 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 18 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 102 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 18 12 re f*
.933333 1 .8 rg
n 150 12 12 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 42 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 18 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 36 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (signal_pnl) Tj /F5 10 Tf 0 0 0 rg (\() Tj (signal) Tj (,) Tj ( ) Tj (rtn) Tj (,) Tj ( ) Tj (vol) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (shift) Tj (\() Tj (signal) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (\() Tj (rtn) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (vol) Tj (\)) Tj  T*  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (information_ratio) Tj /F5 10 Tf 0 0 0 rg (\() Tj (pnl) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (16) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (ts_mean) Tj (\() Tj (pnl) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg ( ) Tj (ts_std) Tj (\() Tj (pnl) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 455.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 616 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 36 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 48 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 24 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 258 0 12 12 re f*
.933333 1 .8 rg
n 276 0 24 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
.933333 1 .8 rg
n 366 0 12 12 re f*
.933333 1 .8 rg
n 384 0 48 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 450 0 6 12 re f*
1 .941176 .941176 rg
n 456 0 36 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
1 .941176 .941176 rg
n 504 0 48 12 re f*
.933333 1 .8 rg
n 552 0 6 12 re f*
1 .941176 .941176 rg
n 564 0 36 12 re f*
.933333 1 .8 rg
n 600 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (8) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (6) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (24) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (forecast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('fast') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('medium') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('slow') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 428.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 676 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 54 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 36 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 36 12 re f*
.933333 1 .8 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 24 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 24 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 60 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
.933333 1 .8 rg
n 396 0 18 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 426 0 24 12 re f*
.933333 1 .8 rg
n 456 0 6 12 re f*
.933333 1 .8 rg
n 468 0 24 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
.933333 1 .8 rg
n 504 0 24 12 re f*
.933333 1 .8 rg
n 534 0 6 12 re f*
.933333 1 .8 rg
n 546 0 24 12 re f*
.933333 1 .8 rg
n 570 0 6 12 re f*
.933333 1 .8 rg
n 582 0 18 12 re f*
.933333 1 .8 rg
n 606 0 6 12 re f*
.933333 1 .8 rg
n 618 0 12 12 re f*
.933333 1 .8 rg
n 630 0 6 12 re f*
.933333 1 .8 rg
n 636 0 6 12 re f*
.933333 1 .8 rg
n 642 0 24 12 re f*
.933333 1 .8 rg
n 666 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecasts) Tj (\() Tj (signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (:) Tj ( ) Tj (crossover_) Tj (\() Tj (rtn) Tj (,) Tj ( ) Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 401.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 622 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 54 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 18 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 210 0 36 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 18 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 288 0 18 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 318 0 60 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 384 0 36 12 re f*
.933333 1 .8 rg
n 426 0 6 12 re f*
.933333 1 .8 rg
n 438 0 36 12 re f*
.933333 1 .8 rg
n 474 0 6 12 re f*
.933333 1 .8 rg
n 486 0 18 12 re f*
.933333 1 .8 rg
n 510 0 6 12 re f*
.933333 1 .8 rg
n 522 0 18 12 re f*
.933333 1 .8 rg
n 540 0 6 12 re f*
.933333 1 .8 rg
n 552 0 18 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
.933333 1 .8 rg
n 588 0 18 12 re f*
.933333 1 .8 rg
n 606 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecasts) Tj (\() Tj (pnl) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (signal) Tj (,) Tj ( ) Tj (rtn) Tj (,) Tj ( ) Tj (vol) Tj (:) Tj ( ) Tj (signal_pnl) Tj (\() Tj (signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (signal) Tj (,) Tj ( ) Tj (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (vol) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 375.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 54 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 36 12 re f*
.933333 1 .8 rg
n 204 0 18 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 102 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 18 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
.933333 1 .8 rg
n 378 0 18 12 re f*
.933333 1 .8 rg
n 396 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecasts) Tj (\() Tj (ir) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pnl) Tj (:) Tj ( ) Tj (information_ratio) Tj (\() Tj (pnl) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pnl) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 348.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 54 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 30 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 48 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
1 .941176 .941176 rg
n 192 0 60 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
1 .941176 .941176 rg
n 264 0 24 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 24 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 342 0 18 12 re f*
.933333 1 .8 rg
n 360 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (forecasts) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (pivot) Tj (\() Tj .729412 .129412 .129412 rg ('symbol') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('forecast') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ir') Tj 0 0 0 rg (,) Tj ( ) Tj ([) Tj (last) Tj (,) Tj ( ) Tj (f12) Tj (]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 315.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Workflow while saving to MongoDB) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 285.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Table creation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We create three tables dependending on the primary keys we will be using.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 224.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 580 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 18 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 36 24 42 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 66 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 12 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
1 .941176 .941176 rg
n 192 24 36 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
.933333 1 .8 rg
n 240 24 30 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
1 .941176 .941176 rg
n 288 24 42 12 re f*
.933333 1 .8 rg
n 330 24 6 12 re f*
.933333 1 .8 rg
n 342 24 12 12 re f*
.933333 1 .8 rg
n 360 24 6 12 re f*
1 .941176 .941176 rg
n 372 24 36 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 36 12 42 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 66 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
1 .941176 .941176 rg
n 192 12 36 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 240 12 30 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
1 .941176 .941176 rg
n 288 12 42 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 342 12 12 12 re f*
.933333 1 .8 rg
n 360 12 6 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
1 .941176 .941176 rg
n 378 12 36 12 re f*
.933333 1 .8 rg
n 414 12 6 12 re f*
1 .941176 .941176 rg
n 426 12 48 12 re f*
.933333 1 .8 rg
n 474 12 12 12 re f*
.933333 1 .8 rg
n 0 0 18 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 36 0 42 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 66 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 12 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
1 .941176 .941176 rg
n 192 0 36 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 30 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
1 .941176 .941176 rg
n 288 0 60 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 360 0 12 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
1 .941176 .941176 rg
n 396 0 36 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
1 .941176 .941176 rg
n 444 0 48 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
1 .941176 .941176 rg
n 504 0 60 12 re f*
.933333 1 .8 rg
n 564 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (idb) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (partial) Tj (\() Tj (mongo_table) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('items') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('item') Tj 0 0 0 rg (\)) Tj  T* (sdb) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (partial) Tj (\() Tj (mongo_table) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('stock') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('item') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('symbol') Tj 0 0 0 rg (]\)) Tj  T* (fdb) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (partial) Tj (\() Tj (mongo_table) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('forecast') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('item') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('symbol') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('forecast') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 197.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 18 12 re f*
.933333 1 .8 rg
n 18 0 12 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 60 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 24 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 24 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
1 .941176 .941176 rg
n 174 0 84 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 24 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 312 0 72 12 re f*
.933333 1 .8 rg
n 384 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (idb) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (insert_one) Tj (\() Tj (Dict) Tj (\() Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('constituents') Tj 0 0 0 rg (,) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (constituents) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 167.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Any code differences?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 149.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Most of the code remains the same as above, except:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 143.0394 cm
Q
q
1 0 0 1 40.01575 143.0394 cm
Q
q
1 0 0 1 40.01575 131.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We wrap it inside a periodic_cell so it is calculated daily) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 125.0394 cm
Q
q
1 0 0 1 40.01575 101.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .244277 Tw (We add reference to where we want to store it in MongoDB by specifying the db as well as the primary keys of) Tj T* 0 Tw (that table) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 95.03937 cm
Q
q
1 0 0 1 40.01575 71.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .14155 Tw (To run the function, we need to call the cell. This: loads the cell from the database \(if found\), checking if it even) Tj T* 0 Tw (needs running and if so, runs it.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 71.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (123) Tj T* ET
Q
Q
 
endstream
endobj
1094 0 obj
<<
/Length 29654
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 868 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 42 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 198 12 36 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 246 12 36 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 294 12 24 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 330 12 78 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 414 12 12 12 re f*
.933333 1 .8 rg
n 426 12 6 12 re f*
.933333 1 .8 rg
n 432 12 48 12 re f*
.933333 1 .8 rg
n 480 12 6 12 re f*
.933333 1 .8 rg
n 492 12 42 12 re f*
.933333 1 .8 rg
n 540 12 6 12 re f*
.933333 1 .8 rg
n 552 12 36 12 re f*
.933333 1 .8 rg
n 588 12 6 12 re f*
.933333 1 .8 rg
n 630 12 234 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 18 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 24 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
1 .941176 .941176 rg
n 366 0 54 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 432 0 36 12 re f*
.933333 1 .8 rg
n 474 0 6 12 re f*
.933333 1 .8 rg
n 486 0 36 12 re f*
.933333 1 .8 rg
n 522 0 24 12 re f*
.933333 1 .8 rg
n 630 0 222 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (sector) Tj (,) Tj ( ) Tj (name) Tj (:) Tj ( ) Tj (periodic_cell) Tj (\() Tj (yf) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (download) Tj (,) Tj ( ) Tj (tickers) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj (      ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# these are the inputs for the function) Tj /F5 10 Tf 0 0 0 rg  T* (                                            ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (sdb) Tj (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('history') Tj 0 0 0 rg (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (\)\(\)\)) Tj (              ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# these define where the data goes to) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 725.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Accessing the data in MongoDB) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 707.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The data is now in the database and can be accessed:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 689.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 42 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
1 .941176 .941176 rg
n 108 0 36 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 36 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
1 .941176 .941176 rg
n 210 0 30 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (get_data) Tj (\() Tj .729412 .129412 .129412 rg ('stock') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('MMM') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 662.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 36 12 re f*
.933333 1 .8 rg
n 162 0 42 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 18 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 42 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 24 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (inc) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (history) Tj (:) Tj ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (history) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj .188235 .188235 .188235 rg (>) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 623.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 628 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 18 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 174 12 42 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 228 12 36 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 276 12 78 12 re f*
.933333 1 .8 rg
n 354 12 6 12 re f*
.933333 1 .8 rg
n 360 12 42 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 414 12 30 12 re f*
.933333 1 .8 rg
n 450 12 6 12 re f*
.933333 1 .8 rg
n 462 12 42 12 re f*
.933333 1 .8 rg
n 504 12 6 12 re f*
.933333 1 .8 rg
n 516 12 18 12 re f*
.933333 1 .8 rg
n 540 12 6 12 re f*
1 .941176 .941176 rg
n 552 12 66 12 re f*
.933333 1 .8 rg
n 618 12 6 12 re f*
.933333 1 .8 rg
n 360 0 12 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 18 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
.933333 1 .8 rg
n 420 0 36 12 re f*
.933333 1 .8 rg
n 462 0 6 12 re f*
.933333 1 .8 rg
n 474 0 36 12 re f*
.933333 1 .8 rg
n 510 0 6 12 re f*
.933333 1 .8 rg
n 522 0 24 12 re f*
.933333 1 .8 rg
n 552 0 6 12 re f*
1 .941176 .941176 rg
n 564 0 30 12 re f*
.933333 1 .8 rg
n 594 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (adj) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (history) Tj (,) Tj ( ) Tj (symbol) Tj (:) Tj ( ) Tj (periodic_cell) Tj (\() Tj (getitem) Tj (,) Tj ( ) Tj (value) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (history) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('Adj Close') Tj 0 0 0 rg (,) Tj  T* (                                                            ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (sdb) Tj (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('adj') Tj 0 0 0 rg (\)\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 584.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 598 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 18 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 174 12 18 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 36 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 252 12 78 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 336 12 24 12 re f*
.933333 1 .8 rg
n 360 12 6 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 396 12 18 12 re f*
.933333 1 .8 rg
n 414 12 6 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 18 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 36 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 450 0 36 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 498 0 24 12 re f*
.933333 1 .8 rg
n 528 0 6 12 re f*
1 .941176 .941176 rg
n 540 0 30 12 re f*
.933333 1 .8 rg
n 570 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (adj) Tj (,) Tj ( ) Tj (symbol) Tj (:) Tj ( ) Tj (periodic_cell) Tj (\() Tj (diff) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (adj) Tj (,) Tj  T* (                                                        ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (sdb) Tj (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('rtn') Tj 0 0 0 rg (\)\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 545.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 598 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 18 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 174 12 18 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 36 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 252 12 78 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 336 12 36 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 408 12 18 12 re f*
.933333 1 .8 rg
n 426 12 6 12 re f*
.933333 1 .8 rg
n 438 12 6 12 re f*
.933333 1 .8 rg
n 450 12 6 12 re f*
.933333 1 .8 rg
n 468 12 12 12 re f*
.933333 1 .8 rg
n 480 12 6 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 18 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 36 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 450 0 36 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 498 0 24 12 re f*
.933333 1 .8 rg
n 528 0 6 12 re f*
1 .941176 .941176 rg
n 540 0 30 12 re f*
.933333 1 .8 rg
n 570 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj (\() Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (symbol) Tj (:) Tj ( ) Tj (periodic_cell) Tj (\() Tj (ewmstd) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg (  ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj  T* (                                                        ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (sdb) Tj (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('vol') Tj 0 0 0 rg (\)\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 515.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Calculating the forecasts & saving them) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 490.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 616 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 36 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 48 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 24 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 258 0 12 12 re f*
.933333 1 .8 rg
n 276 0 24 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
.933333 1 .8 rg
n 366 0 12 12 re f*
.933333 1 .8 rg
n 384 0 48 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 450 0 6 12 re f*
1 .941176 .941176 rg
n 456 0 36 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
1 .941176 .941176 rg
n 504 0 48 12 re f*
.933333 1 .8 rg
n 552 0 6 12 re f*
1 .941176 .941176 rg
n 564 0 36 12 re f*
.933333 1 .8 rg
n 600 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (stocks) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (8) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (6) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (24) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (forecast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('fast') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('medium') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('slow') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 451.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 862 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 54 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 54 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 36 12 re f*
.933333 1 .8 rg
n 228 12 18 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 258 12 24 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 294 12 24 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 330 12 36 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 378 12 48 12 re f*
.933333 1 .8 rg
n 426 12 6 12 re f*
.933333 1 .8 rg
n 438 12 78 12 re f*
.933333 1 .8 rg
n 516 12 6 12 re f*
.933333 1 .8 rg
n 522 12 60 12 re f*
.933333 1 .8 rg
n 582 12 6 12 re f*
.933333 1 .8 rg
n 594 12 6 12 re f*
.933333 1 .8 rg
n 606 12 6 12 re f*
.933333 1 .8 rg
n 618 12 18 12 re f*
.933333 1 .8 rg
n 636 12 6 12 re f*
.933333 1 .8 rg
n 648 12 24 12 re f*
.933333 1 .8 rg
n 678 12 6 12 re f*
.933333 1 .8 rg
n 690 12 24 12 re f*
.933333 1 .8 rg
n 714 12 6 12 re f*
.933333 1 .8 rg
n 726 12 24 12 re f*
.933333 1 .8 rg
n 756 12 6 12 re f*
.933333 1 .8 rg
n 768 12 24 12 re f*
.933333 1 .8 rg
n 792 12 6 12 re f*
.933333 1 .8 rg
n 804 12 18 12 re f*
.933333 1 .8 rg
n 828 12 6 12 re f*
.933333 1 .8 rg
n 840 12 12 12 re f*
.933333 1 .8 rg
n 852 12 6 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 18 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 36 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
.933333 1 .8 rg
n 378 0 36 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 426 0 48 12 re f*
.933333 1 .8 rg
n 480 0 6 12 re f*
.933333 1 .8 rg
n 492 0 48 12 re f*
.933333 1 .8 rg
n 540 0 6 12 re f*
.933333 1 .8 rg
n 552 0 24 12 re f*
.933333 1 .8 rg
n 582 0 6 12 re f*
1 .941176 .941176 rg
n 594 0 48 12 re f*
.933333 1 .8 rg
n 642 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecasts) Tj (\() Tj (signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (symbol) Tj (,) Tj ( ) Tj (forecast) Tj (:) Tj ( ) Tj (periodic_cell) Tj (\() Tj (crossover_) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj  T* (                                            ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fdb) Tj (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (forecast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecast) Tj (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('signal') Tj 0 0 0 rg (\)\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 413.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 814 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 54 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 54 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 18 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 168 12 36 12 re f*
.933333 1 .8 rg
n 210 12 36 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 258 12 18 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 288 12 18 12 re f*
.933333 1 .8 rg
n 306 12 6 12 re f*
.933333 1 .8 rg
n 318 12 36 12 re f*
.933333 1 .8 rg
n 354 12 6 12 re f*
.933333 1 .8 rg
n 366 12 48 12 re f*
.933333 1 .8 rg
n 414 12 6 12 re f*
.933333 1 .8 rg
n 426 12 78 12 re f*
.933333 1 .8 rg
n 504 12 6 12 re f*
.933333 1 .8 rg
n 510 12 60 12 re f*
.933333 1 .8 rg
n 570 12 6 12 re f*
.933333 1 .8 rg
n 582 12 36 12 re f*
.933333 1 .8 rg
n 624 12 6 12 re f*
.933333 1 .8 rg
n 636 12 36 12 re f*
.933333 1 .8 rg
n 672 12 6 12 re f*
.933333 1 .8 rg
n 684 12 18 12 re f*
.933333 1 .8 rg
n 708 12 6 12 re f*
.933333 1 .8 rg
n 720 12 18 12 re f*
.933333 1 .8 rg
n 738 12 6 12 re f*
.933333 1 .8 rg
n 750 12 18 12 re f*
.933333 1 .8 rg
n 774 12 6 12 re f*
.933333 1 .8 rg
n 786 12 18 12 re f*
.933333 1 .8 rg
n 804 12 6 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 18 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 36 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 450 0 36 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 498 0 48 12 re f*
.933333 1 .8 rg
n 552 0 6 12 re f*
.933333 1 .8 rg
n 564 0 48 12 re f*
.933333 1 .8 rg
n 612 0 6 12 re f*
.933333 1 .8 rg
n 624 0 24 12 re f*
.933333 1 .8 rg
n 654 0 6 12 re f*
1 .941176 .941176 rg
n 666 0 30 12 re f*
.933333 1 .8 rg
n 696 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecasts) Tj (\() Tj (pnl) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (signal) Tj (,) Tj ( ) Tj (rtn) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (symbol) Tj (,) Tj ( ) Tj (forecast) Tj (:) Tj ( ) Tj (periodic_cell) Tj (\() Tj (signal_pnl) Tj (,) Tj ( ) Tj (signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (signal) Tj (,) Tj ( ) Tj (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (vol) Tj (,) Tj  T* (                                                        ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fdb) Tj (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (symbol) Tj (,) Tj ( ) Tj (forecast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecast) Tj (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('pnl') Tj 0 0 0 rg (\)\(\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 386.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 54 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 36 12 re f*
.933333 1 .8 rg
n 204 0 18 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 102 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 18 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
.933333 1 .8 rg
n 378 0 18 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 402 0 24 12 re f*
.933333 1 .8 rg
n 426 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (forecasts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (forecasts) Tj (\() Tj (ir) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pnl) Tj (:) Tj ( ) Tj (information_ratio) Tj (\() Tj (pnl) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pnl) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 359.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 54 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 30 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
1 .941176 .941176 rg
n 132 0 48 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
1 .941176 .941176 rg
n 192 0 60 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
1 .941176 .941176 rg
n 264 0 24 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 24 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 342 0 18 12 re f*
.933333 1 .8 rg
n 360 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (forecasts) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (pivot) Tj (\() Tj .729412 .129412 .129412 rg ('symbol') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('forecast') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ir') Tj 0 0 0 rg (,) Tj ( ) Tj ([) Tj (last) Tj (,) Tj ( ) Tj (f12) Tj (]\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 326.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Accessing & running the graph once the graph has been created) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 308.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can access the data or the cell:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 289.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 60 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
1 .941176 .941176 rg
n 126 0 36 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 36 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 30 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 48 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
1 .941176 .941176 rg
n 336 0 36 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 384 0 24 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
1 .941176 .941176 rg
n 426 0 48 12 re f*
.933333 1 .8 rg
n 474 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (get_cell) Tj (\() Tj .729412 .129412 .129412 rg ('forecast') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('APA') Tj 0 0 0 rg (,) Tj ( ) Tj (forecast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('fast') Tj 0 0 0 rg (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('signal') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 257.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.000723 Tw (And now that the graph has been created, you can actually trigger it just by loading. i.e. The code below will give you) Tj T* 0 Tw (the fast signal for APA and will ensure it is up-to-date too:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 215.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 48 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
1 .941176 .941176 rg
n 78 24 60 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
1 .941176 .941176 rg
n 150 24 36 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 198 24 36 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
1 .941176 .941176 rg
n 252 24 30 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 294 24 48 12 re f*
.933333 1 .8 rg
n 348 24 6 12 re f*
1 .941176 .941176 rg
n 360 24 36 12 re f*
.933333 1 .8 rg
n 396 24 6 12 re f*
.933333 1 .8 rg
n 408 24 24 12 re f*
.933333 1 .8 rg
n 438 24 6 12 re f*
1 .941176 .941176 rg
n 450 24 48 12 re f*
.933333 1 .8 rg
n 498 24 6 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 12 12 re f*
.933333 1 .8 rg
n 48 12 12 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 24 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (get_cell) Tj (\() Tj .729412 .129412 .129412 rg ('forecast') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (symbol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('APA') Tj 0 0 0 rg (,) Tj ( ) Tj (forecast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('fast') Tj 0 0 0 rg (,) Tj ( ) Tj (item) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('signal') Tj 0 0 0 rg (\)) Tj  T* (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (go) Tj (\(\)) Tj  T* 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 182.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Point-in-time, cache and persistency) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 140.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.162004 Tw (The pk-tables save a full history of all your data. To avoid hitting the database all the time, we also have a local) Tj T* 0 Tw 2.87245 Tw (GRAPH singleton that caches all the cells by their address. The cell has few basic operations we need to) Tj T* 0 Tw (understand:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 134.2394 cm
Q
q
1 0 0 1 40.01575 134.2394 cm
Q
q
1 0 0 1 40.01575 110.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.166123 Tw 12 TL /F2 10 Tf 0 0 0 rg (cell.run\(\)) Tj /F1 10 Tf (: Returns True/False if the cell needs to be calculated. db_cell\(\) just check for values in its output,) Tj T* 0 Tw (periodic_cell will also check if it is a new business day.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 104.2394 cm
Q
q
1 0 0 1 40.01575 56.23937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 21 cm
q
BT 1 0 0 1 0 14 Tm .926005 Tw 12 TL /F2 10 Tf 0 0 0 rg (cell.go\(\)) Tj /F1 10 Tf (: This calculates the cell and saves the result to the database \(and to GRAPH\). The cell itself is not) Tj T* 0 Tw (loaded but all its inputs are loaded) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
Q
q
1 0 0 1 23 15 cm
Q
q
1 0 0 1 23 3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.go\(0\) : calculate only if there is a need) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (124) Tj T* ET
Q
Q
 
endstream
endobj
1095 0 obj
<<
/Length 23752
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 739.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 35 Tm  T* ET
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.go\(1\) : calculate me but my parents only if there is a need) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (cell.go\(2\) : calculate me & my parents but my grandparents only if there is a need) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.go\(-1\) : calculate everything) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 733.0394 cm
Q
q
1 0 0 1 40.01575 619.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 87 cm
q
BT 1 0 0 1 0 14 Tm .669116 Tw 12 TL /F2 10 Tf 0 0 0 rg (cell.load\(\)) Tj /F1 10 Tf (: This loads the data from GRAPH, if not in GRAPH, loads it from MongoDB \(and updates also the) Tj T* 0 Tw (GRAPH\)) Tj T* ET
Q
Q
q
1 0 0 1 23 81 cm
Q
q
1 0 0 1 23 81 cm
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.load\(-1\) : Clear the data from the GRAPH) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 63 cm
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (cell.load\(0\) : Load & update me from GRAPH, if not, from MongoDB, if not, just return good old me) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.load\(1\) : If you cannot find me, throw an Exception) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.load\(date\) : Load my version as valid on date. If none exists, throw.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (cell.load\([value]\): Force GRAPH to clear, only load from DB. Same as cell.load\(-1\).load\(value\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 613.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (cell\(\)) Tj /F1 10 Tf (: This loads & then go) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 522.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 24 12 re f*
.933333 1 .8 rg
n 30 60 18 12 re f*
.933333 1 .8 rg
n 54 60 36 12 re f*
.933333 1 .8 rg
n 96 60 6 12 re f*
.933333 1 .8 rg
n 102 60 6 12 re f*
.933333 1 .8 rg
n 114 60 24 12 re f*
.933333 1 .8 rg
n 144 60 54 12 re f*
.933333 1 .8 rg
n 204 60 36 12 re f*
.933333 1 .8 rg
n 246 60 42 12 re f*
.933333 1 .8 rg
n 0 48 12 12 re f*
.933333 1 .8 rg
n 18 48 6 12 re f*
.933333 1 .8 rg
n 30 48 42 12 re f*
.933333 1 .8 rg
n 72 48 6 12 re f*
.933333 1 .8 rg
n 78 48 66 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 156 48 12 12 re f*
.933333 1 .8 rg
n 174 48 6 12 re f*
1 .941176 .941176 rg
n 186 48 36 12 re f*
.933333 1 .8 rg
n 222 48 6 12 re f*
.933333 1 .8 rg
n 234 48 30 12 re f*
.933333 1 .8 rg
n 270 48 6 12 re f*
1 .941176 .941176 rg
n 282 48 78 12 re f*
.933333 1 .8 rg
n 360 48 6 12 re f*
.933333 1 .8 rg
n 372 48 12 12 re f*
.933333 1 .8 rg
n 390 48 6 12 re f*
1 .941176 .941176 rg
n 402 48 30 12 re f*
.933333 1 .8 rg
n 432 48 6 12 re f*
.933333 1 .8 rg
n 0 36 12 12 re f*
.933333 1 .8 rg
n 12 36 12 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 30 36 18 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 54 36 24 12 re f*
.933333 1 .8 rg
n 78 36 12 12 re f*
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 12 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (functools) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (partial) Tj  T* (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (partial) Tj (\() Tj (mongo_table) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('persistency') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (\)) Tj  T* (db) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raw) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj  T*  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (f) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (b) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg (b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 423.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 246 12 re f*
.933333 1 .8 rg
n 0 60 6 12 re f*
.933333 1 .8 rg
n 12 60 6 12 re f*
.933333 1 .8 rg
n 24 60 42 12 re f*
.933333 1 .8 rg
n 66 60 6 12 re f*
.933333 1 .8 rg
n 72 60 6 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 90 60 6 12 re f*
.933333 1 .8 rg
n 102 60 6 12 re f*
.933333 1 .8 rg
n 114 60 6 12 re f*
.933333 1 .8 rg
n 120 60 6 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 144 60 6 12 re f*
.933333 1 .8 rg
n 156 60 6 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 174 60 12 12 re f*
.933333 1 .8 rg
n 192 60 6 12 re f*
.933333 1 .8 rg
n 204 60 12 12 re f*
.933333 1 .8 rg
n 216 60 6 12 re f*
.933333 1 .8 rg
n 228 60 18 12 re f*
.933333 1 .8 rg
n 252 60 6 12 re f*
1 .941176 .941176 rg
n 264 60 18 12 re f*
.933333 1 .8 rg
n 282 60 6 12 re f*
.933333 1 .8 rg
n 0 48 6 12 re f*
.933333 1 .8 rg
n 12 48 6 12 re f*
.933333 1 .8 rg
n 24 48 42 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
.933333 1 .8 rg
n 72 48 6 12 re f*
.933333 1 .8 rg
n 78 48 6 12 re f*
.933333 1 .8 rg
n 90 48 6 12 re f*
.933333 1 .8 rg
n 102 48 6 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 120 48 6 12 re f*
.933333 1 .8 rg
n 132 48 6 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
.933333 1 .8 rg
n 162 48 6 12 re f*
.933333 1 .8 rg
n 174 48 12 12 re f*
.933333 1 .8 rg
n 192 48 6 12 re f*
.933333 1 .8 rg
n 204 48 12 12 re f*
.933333 1 .8 rg
n 216 48 6 12 re f*
.933333 1 .8 rg
n 228 48 18 12 re f*
.933333 1 .8 rg
n 252 48 6 12 re f*
1 .941176 .941176 rg
n 264 48 18 12 re f*
.933333 1 .8 rg
n 282 48 6 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 42 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 72 36 6 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 12 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 204 36 12 12 re f*
.933333 1 .8 rg
n 216 36 6 12 re f*
.933333 1 .8 rg
n 228 36 18 12 re f*
.933333 1 .8 rg
n 252 36 6 12 re f*
1 .941176 .941176 rg
n 264 36 18 12 re f*
.933333 1 .8 rg
n 282 36 6 12 re f*
.933333 1 .8 rg
n 0 12 288 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (## now we set up a fake calculation tree:) Tj /F5 10 Tf 0 0 0 rg  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (f) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (\)) Tj  T* (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (f) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (\)) Tj  T* (z) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (f) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (y) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('z') Tj 0 0 0 rg (\)) Tj  T*  T* /F8 10 Tf .501961 .501961 .501961 rg (## and run it by running the final value we want) Tj /F5 10 Tf 0 0 0 rg  T* (z) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (z) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 384.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 156 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 78 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
1 .941176 .941176 rg
n 144 0 36 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 18 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (## we can access the data:) Tj /F5 10 Tf 0 0 0 rg  T* (get_data) Tj (\() Tj .729412 .129412 .129412 rg ('persistency') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 357.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 12 12 re f*
.933333 1 .8 rg
n 66 0 114 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (t0) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dt) Tj (\(\)) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## first breakpoint) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 307.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 42 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 12 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 12 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 186 24 12 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 216 24 12 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
.933333 1 .8 rg
n 240 24 18 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
1 .941176 .941176 rg
n 276 24 18 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 6 12 re f*
.933333 1 .8 rg
n 306 24 12 12 re f*
.933333 1 .8 rg
n 318 24 12 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 42 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 12 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 216 12 12 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 240 12 18 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
1 .941176 .941176 rg
n 276 12 18 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 306 12 12 12 re f*
.933333 1 .8 rg
n 318 12 12 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 42 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 12 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 18 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
1 .941176 .941176 rg
n 270 0 18 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 12 12 re f*
.933333 1 .8 rg
n 312 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (f) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (go) Tj (\(\)) Tj  T* (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (f) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (,) Tj (  ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (go) Tj (\(\)) Tj  T* (z) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (f) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (,) Tj (  ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (y) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('z') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (go) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 268.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 162 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 78 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
1 .941176 .941176 rg
n 144 0 36 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 18 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (## and here is the new data) Tj /F5 10 Tf 0 0 0 rg  T* (get_data) Tj (\() Tj .729412 .129412 .129412 rg ('persistency') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 229.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 682 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 678 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
1 .941176 .941176 rg
n 54 0 78 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
1 .941176 .941176 rg
n 144 0 36 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 18 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 48 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 12 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (## and here is the data valid at our first breakpoint. get_data/get_cell always go to the database to load values) Tj /F5 10 Tf 0 0 0 rg  T* (get_data) Tj (\() Tj .729412 .129412 .129412 rg ('persistency') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('demo') Tj 0 0 0 rg (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (,) Tj ( ) Tj (_deleted) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (t0) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 173.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .071004 Tw (We can ask a cell to load itself, but remember: it will go to GRAPH first by default. The GRAPH has only one copy of) Tj T* 0 Tw .319719 Tw (the cell, while in MongoDB, every time we recalculate/save a new version of the cell, we mark the old version in the) Tj T* 0 Tw .082205 Tw (database as \223deleted\224 but otherwise keep it. To force a cell to load itself from the database, encase the breakpoint in) Tj T* 0 Tw (a list\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 154.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 12 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 18 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
1 .941176 .941176 rg
n 138 0 18 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 24 12 re f*
.933333 1 .8 rg
n 192 0 12 12 re f*
.933333 1 .8 rg
n 204 0 12 12 re f*
.933333 1 .8 rg
n 216 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (db_cell) Tj (\() Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (load) Tj (\([) Tj (t0) Tj (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 134.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can force a full recalculation of the tree in a single line of code:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 115.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 556 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 12 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 18 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
1 .941176 .941176 rg
n 138 0 18 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 168 0 12 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 12 12 re f*
.933333 1 .8 rg
n 282 0 12 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 24 12 re f*
.933333 1 .8 rg
n 330 0 222 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (db_cell) Tj (\() Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('z') Tj 0 0 0 rg (\)\() Tj (go) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (mode) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (t0) Tj (]\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## Should be 8, same as the old value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 83.03937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Comparison of the two workflows) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Saving to the database has negatives:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 59.03937 cm
Q
q
1 0 0 1 40.01575 59.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (125) Tj T* ET
Q
Q
 
endstream
endobj
1096 0 obj
<<
/Length 21589
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (does require some \(but really not much\) additional code to specify where each data item goes to) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (slows down the calculation) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Conversely,) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 733.0394 cm
Q
q
1 0 0 1 40.01575 733.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .128705 Tw (We get full persistency: We can access each part of the graph with full visibility on the inputs, the function used) Tj T* 0 Tw .822205 Tw (to calculate the result, the function output\(s\), the location of where the data is stored and the time it was last) Tj T* 0 Tw (updated as well as the periodicity it is calculated.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 679.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We get full audit, past calculations remain available to track \(and indeed, rerun\) if anything goes wrong) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 673.0394 cm
Q
q
1 0 0 1 40.01575 661.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Each node will manage its schedule, ensuring data is up-to-date) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 655.0394 cm
Q
q
1 0 0 1 40.01575 643.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can run just the parts of the graph we are interested in \(and can run in parallel\)) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 643.0394 cm
Q
q
1 0 0 1 40.01575 610.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (To save or not to save?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 556.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.244004 Tw (Luckily we don\222t really need to decide on one workflow or the other as both can happily coexist. We can build a) Tj T* 0 Tw .196711 Tw (calculation graph and decide that some key points in the calculation we want to save while intermediate calculations) Tj T* 0 Tw .073221 Tw (we can calculate on the fly and not save at all. We have met the crossover function. Here we implement it \221on the fly\222) Tj T* 0 Tw (while saving just final value to db) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 537.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 30 0 18 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 36 12 re f*
.933333 1 .8 rg
n 156 0 36 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
.933333 1 .8 rg
n 216 0 12 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 36 12 re f*
.933333 1 .8 rg
n 282 0 30 12 re f*
.933333 1 .8 rg
n 318 0 12 12 re f*
.933333 1 .8 rg
n 336 0 12 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 360 0 24 12 re f*
.933333 1 .8 rg
n 390 0 54 12 re f*
.933333 1 .8 rg
n 450 0 36 12 re f*
.933333 1 .8 rg
n 492 0 42 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pandas) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pd) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (functools) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (partial) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 474.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 18 12 re f*
.933333 1 .8 rg
n 24 36 42 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 72 36 36 12 re f*
.933333 1 .8 rg
n 108 36 12 12 re f*
.933333 1 .8 rg
n 24 24 36 12 re f*
.933333 1 .8 rg
n 66 24 12 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 36 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 36 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 186 24 36 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 252 24 24 12 re f*
.933333 1 .8 rg
n 276 24 12 12 re f*
.933333 1 .8 rg
n 294 24 36 12 re f*
.933333 1 .8 rg
n 330 24 6 12 re f*
.933333 1 .8 rg
n 336 24 6 12 re f*
.933333 1 .8 rg
n 342 24 18 12 re f*
.933333 1 .8 rg
n 360 24 12 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 42 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 66 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
1 .941176 .941176 rg
n 186 12 36 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 234 12 30 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
1 .941176 .941176 rg
n 282 12 36 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 330 12 12 12 re f*
.933333 1 .8 rg
n 348 12 6 12 re f*
.933333 1 .8 rg
n 360 12 6 12 re f*
1 .941176 .941176 rg
n 366 12 30 12 re f*
.933333 1 .8 rg
n 396 12 12 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 18 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 24 12 re f*
.933333 1 .8 rg
n 78 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (fake_ts) Tj /F5 10 Tf 0 0 0 rg (\() Tj (ticker) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (999) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (partial) Tj (\() Tj (mongo_table) Tj (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (table) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('test') Tj 0 0 0 rg (,) Tj ( ) Tj (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (]\)) Tj  T* (db) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raw) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drop) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 255.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 526 210 re B*
Q
q
.933333 1 .8 rg
n 0 192 24 12 re f*
.933333 1 .8 rg
n 30 192 6 12 re f*
.933333 1 .8 rg
n 42 192 42 12 re f*
.933333 1 .8 rg
n 84 192 6 12 re f*
.933333 1 .8 rg
n 90 192 42 12 re f*
.933333 1 .8 rg
n 132 192 6 12 re f*
.933333 1 .8 rg
n 144 192 36 12 re f*
.933333 1 .8 rg
n 186 192 6 12 re f*
1 .941176 .941176 rg
n 198 192 36 12 re f*
.933333 1 .8 rg
n 234 192 6 12 re f*
.933333 1 .8 rg
n 246 192 18 12 re f*
.933333 1 .8 rg
n 270 192 6 12 re f*
1 .941176 .941176 rg
n 282 192 60 12 re f*
.933333 1 .8 rg
n 342 192 6 12 re f*
.933333 1 .8 rg
n 354 192 12 12 re f*
.933333 1 .8 rg
n 372 192 6 12 re f*
.933333 1 .8 rg
n 384 192 12 12 re f*
.933333 1 .8 rg
n 396 192 18 12 re f*
.933333 1 .8 rg
n 0 168 480 12 re f*
.933333 1 .8 rg
n 0 156 6 12 re f*
.933333 1 .8 rg
n 12 156 6 12 re f*
.933333 1 .8 rg
n 24 156 24 12 re f*
.933333 1 .8 rg
n 48 156 6 12 re f*
.933333 1 .8 rg
n 54 156 24 12 re f*
.933333 1 .8 rg
n 78 156 6 12 re f*
.933333 1 .8 rg
n 90 156 6 12 re f*
.933333 1 .8 rg
n 102 156 6 12 re f*
.933333 1 .8 rg
n 114 156 24 12 re f*
.933333 1 .8 rg
n 138 156 6 12 re f*
.933333 1 .8 rg
n 150 156 6 12 re f*
.933333 1 .8 rg
n 162 156 6 12 re f*
.933333 1 .8 rg
n 174 156 12 12 re f*
.933333 1 .8 rg
n 186 156 6 12 re f*
.933333 1 .8 rg
n 0 144 6 12 re f*
.933333 1 .8 rg
n 12 144 6 12 re f*
.933333 1 .8 rg
n 24 144 24 12 re f*
.933333 1 .8 rg
n 48 144 6 12 re f*
.933333 1 .8 rg
n 54 144 24 12 re f*
.933333 1 .8 rg
n 78 144 6 12 re f*
.933333 1 .8 rg
n 90 144 6 12 re f*
.933333 1 .8 rg
n 102 144 6 12 re f*
.933333 1 .8 rg
n 114 144 24 12 re f*
.933333 1 .8 rg
n 138 144 6 12 re f*
.933333 1 .8 rg
n 150 144 6 12 re f*
.933333 1 .8 rg
n 162 144 6 12 re f*
.933333 1 .8 rg
n 174 144 12 12 re f*
.933333 1 .8 rg
n 186 144 6 12 re f*
.933333 1 .8 rg
n 0 120 360 12 re f*
.933333 1 .8 rg
n 0 108 336 12 re f*
.933333 1 .8 rg
n 0 96 342 12 re f*
.933333 1 .8 rg
n 0 84 348 12 re f*
.933333 1 .8 rg
n 0 72 498 12 re f*
.933333 1 .8 rg
n 0 48 6 12 re f*
.933333 1 .8 rg
n 12 48 6 12 re f*
.933333 1 .8 rg
n 24 48 42 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
.933333 1 .8 rg
n 72 48 24 12 re f*
.933333 1 .8 rg
n 96 48 6 12 re f*
.933333 1 .8 rg
n 108 48 6 12 re f*
.933333 1 .8 rg
n 120 48 6 12 re f*
.933333 1 .8 rg
n 132 48 6 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 150 48 6 12 re f*
.933333 1 .8 rg
n 162 48 6 12 re f*
.933333 1 .8 rg
n 174 48 6 12 re f*
.933333 1 .8 rg
n 180 48 6 12 re f*
.933333 1 .8 rg
n 192 48 18 12 re f*
.933333 1 .8 rg
n 216 48 6 12 re f*
1 .941176 .941176 rg
n 228 48 180 12 re f*
.933333 1 .8 rg
n 408 48 6 12 re f*
.933333 1 .8 rg
n 420 48 12 12 re f*
.933333 1 .8 rg
n 438 48 6 12 re f*
1 .941176 .941176 rg
n 450 48 30 12 re f*
.933333 1 .8 rg
n 480 48 6 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 42 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 72 36 36 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
.933333 1 .8 rg
n 186 36 18 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 216 36 18 12 re f*
.933333 1 .8 rg
n 240 36 6 12 re f*
1 .941176 .941176 rg
n 252 36 192 12 re f*
.933333 1 .8 rg
n 444 36 6 12 re f*
.933333 1 .8 rg
n 456 36 12 12 re f*
.933333 1 .8 rg
n 474 36 6 12 re f*
1 .941176 .941176 rg
n 486 36 30 12 re f*
.933333 1 .8 rg
n 516 36 6 12 re f*
.933333 1 .8 rg
n 0 12 324 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 42 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 24 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 252 0 18 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
1 .941176 .941176 rg
n 288 0 96 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 12 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 426 0 12 12 re f*
.933333 1 .8 rg
n 438 0 18 12 re f*
BT 1 0 0 1 0 194 Tm 12 TL /F5 10 Tf 0 0 0 rg (appl) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (fake_ts) Tj (,) Tj ( ) Tj (ticker) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('appl') Tj 0 0 0 rg (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('appl_rtn') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (\)\(\)) Tj  T*  T* /F8 10 Tf .501961 .501961 .501961 rg (#I am never saving these, In fact, I don't want to see these in calculation log.) Tj /F5 10 Tf 0 0 0 rg  T* (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (ewma) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (appl) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (ewma) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (appl) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T*  T* /F8 10 Tf .501961 .501961 .501961 rg (# I may want to save these nodes but haven't made up my mind) Tj /F5 10 Tf 0 0 0 rg  T* /F8 10 Tf .501961 .501961 .501961 rg (# I do want to see the calculations in the log though...) Tj /F5 10 Tf 0 0 0 rg  T* /F8 10 Tf .501961 .501961 .501961 rg (# I replace db by the primary keys of table \(here 'key'\).) Tj /F5 10 Tf 0 0 0 rg  T* /F8 10 Tf .501961 .501961 .501961 rg (# This allows as to see the calculation log as it happens.) Tj /F5 10 Tf 0 0 0 rg  T* /F8 10 Tf .501961 .501961 .501961 rg (# data is not saved to db though until I switch to db = db as opposed to db = 'key') Tj /F5 10 Tf 0 0 0 rg  T*  T* (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (sub_) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (b) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('calculate difference of ewma') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (\)) Tj  T* (d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (ewmrms) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (c) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('root mean square of difference') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('key') Tj 0 0 0 rg (\)) Tj  T*  T* /F8 10 Tf .501961 .501961 .501961 rg (# The final crossover I definitely want to save to db:) Tj /F5 10 Tf 0 0 0 rg  T* (final_value) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db_cell) Tj (\() Tj (div_) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (c) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (d) Tj (,) Tj ( ) Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('appl_crossover') Tj 0 0 0 rg (,) Tj ( ) Tj (db) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (db) Tj (\)\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 229.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (db) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (key) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 185.0394 cm
q
BT 1 0 0 1 0 26 Tm .847584 Tw 12 TL /F1 10 Tf 0 0 0 rg (So although we had several intermediate steps, we decided to save just the final crossover in the database, If we) Tj T* 0 Tw 1.928766 Tw (look at the inputs for the function, you can see that the values are not saved in the database, though the full) Tj T* 0 Tw (calculation tree ) Tj /F4 10 Tf (is) Tj /F1 10 Tf (. Therefore, one can reload the node and then recalculate all the intermediate values on the fly) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 154.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 844 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 138 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 174 12 18 12 re f*
.933333 1 .8 rg
n 192 12 24 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 222 12 18 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
1 .941176 .941176 rg
n 258 12 96 12 re f*
.933333 1 .8 rg
n 354 12 12 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
1 .941176 .941176 rg
n 384 12 36 12 re f*
.933333 1 .8 rg
n 420 12 6 12 re f*
.933333 1 .8 rg
n 426 12 6 12 re f*
.933333 1 .8 rg
n 432 12 12 12 re f*
.933333 1 .8 rg
n 444 12 6 12 re f*
.933333 1 .8 rg
n 450 12 6 12 re f*
.933333 1 .8 rg
n 456 12 6 12 re f*
.933333 1 .8 rg
n 468 12 372 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 12 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 138 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 24 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 66 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 312 0 24 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (loaded_and_recalculated) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (\() Tj (db) Tj (\(\)[) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (key) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('appl_crossover') Tj 0 0 0 rg (\)]) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('data') Tj 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (go) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## but once recalculated, we can assert we got the same result) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (eq) Tj (\() Tj (loaded_and_recalculated) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (,) Tj ( ) Tj (final_value) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 121.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Behind the scene: cell_func) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 91.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.051339 Tw (Behind the scene of cell, there is machinary designed to make it work smoothly and transparently in most cases.) Tj T* 0 Tw (However, sometimes the user may need to dig deeper. Here is an example for code that fails\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 60.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 18 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pytest) Tj /F5 10 Tf 0 0 0 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.cell) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (126) Tj T* ET
Q
Q
 
endstream
endobj
1097 0 obj
<<
/Length 24363
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 684.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 102 re B*
Q
q
.933333 1 .8 rg
n 0 72 18 12 re f*
.933333 1 .8 rg
n 24 72 24 12 re f*
.933333 1 .8 rg
n 48 72 6 12 re f*
.933333 1 .8 rg
n 54 72 6 12 re f*
.933333 1 .8 rg
n 60 72 12 12 re f*
.933333 1 .8 rg
n 24 60 36 12 re f*
.933333 1 .8 rg
n 66 60 6 12 re f*
.933333 1 .8 rg
n 72 60 6 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 0 48 6 12 re f*
.933333 1 .8 rg
n 12 48 6 12 re f*
.933333 1 .8 rg
n 24 48 24 12 re f*
.933333 1 .8 rg
n 48 48 6 12 re f*
.933333 1 .8 rg
n 54 48 6 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
.933333 1 .8 rg
n 78 48 6 12 re f*
.933333 1 .8 rg
n 84 48 6 12 re f*
.933333 1 .8 rg
n 0 36 6 12 re f*
.933333 1 .8 rg
n 12 36 6 12 re f*
.933333 1 .8 rg
n 24 36 24 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 54 36 24 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 0 12 24 12 re f*
.933333 1 .8 rg
n 30 12 36 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 48 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
BT 1 0 0 1 0 86 Tm 12 TL /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (twox) Tj /F5 10 Tf 0 0 0 rg (\() Tj (x) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj .188235 .188235 .188235 rg (*) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg  T* (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (twox) Tj (,) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (\)) Tj  T*  T* /F6 10 Tf 0 .501961 0 rg (with) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pytest) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (raises) Tj (\() Tj /F6 10 Tf .941176 0 0 rg (KeyError) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (c) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 652.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .639205 Tw (c tries to run the function. The function demands parameter x. When looking at the cells provided, cell \221a\222 does not) Tj T* 0 Tw (contain anything like \221x\222 so the function fails.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 621.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 24 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 24 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 24 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (cell) Tj (\() Tj (twox) Tj (,) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (\)\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 589.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .353368 Tw (\221data\222 key has a preferred status so although \221x\222 is not in the cell, we assume but default that \221data\222 parameter is the) Tj T* 0 Tw (one the cell wants to present to the world. This is controlled by cell_output function:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 570.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (cell_output) Tj (\() Tj (a) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 531.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 580 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 24 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 24 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 48 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 198 12 36 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
1 .941176 .941176 rg
n 252 12 60 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 324 12 252 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 12 12 re f*
.933333 1 .8 rg
n 96 0 54 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (myoutput) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (output) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('myoutput') Tj 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## you can decide your output is different) Tj /F5 10 Tf 0 0 0 rg  T* (cell_output) Tj (\() Tj (a) Tj (\),) Tj ( ) Tj (cell_item) Tj (\() Tj (a) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 505.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 24 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 18 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (cell) Tj (\() Tj (twox) Tj (,) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (\)\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 473.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.098518 Tw (That is good but what happens if the cell has MORE than one output or we want to direct the function to grab another) Tj T* 0 Tw (key?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 442.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 24 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 126 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 54 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 24 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
1 .941176 .941176 rg
n 150 0 18 12 re f*
.933333 1 .8 rg
n 168 0 12 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 18 12 re f*
.933333 1 .8 rg
n 240 0 204 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## this has failed...) Tj /F5 10 Tf 0 0 0 rg  T* (cell) Tj (\() Tj (cell_func) Tj (\() Tj (twox) Tj (,) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg (\),) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (\)\(\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## when you grab x, use 'a' as key) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 422.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What if you need the cell itself rather than the items in it?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 343.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 18 12 re f*
.933333 1 .8 rg
n 24 60 66 12 re f*
.933333 1 .8 rg
n 90 60 6 12 re f*
.933333 1 .8 rg
n 96 60 6 12 re f*
.933333 1 .8 rg
n 102 60 12 12 re f*
.933333 1 .8 rg
n 24 48 36 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
.933333 1 .8 rg
n 72 48 6 12 re f*
.933333 1 .8 rg
n 78 48 6 12 re f*
.933333 1 .8 rg
n 90 48 6 12 re f*
.933333 1 .8 rg
n 102 48 6 12 re f*
.933333 1 .8 rg
n 108 48 6 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 24 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 54 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 90 0 66 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 60 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
1 .941176 .941176 rg
n 246 0 18 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 312 0 18 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (add_a_and_b) Tj /F5 10 Tf 0 0 0 rg (\() Tj (x) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (b) Tj  T*  T* (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T*  T* (cell) Tj (\() Tj (cell_func) Tj (\() Tj (add_a_and_b) Tj (,) Tj ( ) Tj (unitemized) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('x') Tj 0 0 0 rg (\),) Tj ( ) Tj (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x) Tj (\)\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 323.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can see that the cell x itself is presented to the function and x.a + x.b is calculated and data == 3) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 288.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.base.join) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 246.2394 cm
q
BT 1 0 0 1 0 26 Tm .555433 Tw 12 TL /F1 10 Tf 0 0 0 rg (Only read this if you are a seasoned dictable user. In data science, we usually have data in multiple tables and we) Tj T* 0 Tw 1.902847 Tw (want to pull specific columns together for an analysis. We will first look at ) Tj /F2 10 Tf (join) Tj /F1 10 Tf ( function and then examine the) Tj T* 0 Tw /F2 10 Tf (perdictable) Tj /F1 10 Tf ( decorator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 213.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Join) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 183.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Example: Using join function to transfer money to a bank) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 165.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We begin by setting up a mini database:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 74.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1078 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 24 12 re f*
.933333 1 .8 rg
n 30 72 18 12 re f*
.933333 1 .8 rg
n 54 72 36 12 re f*
.933333 1 .8 rg
n 96 72 6 12 re f*
.933333 1 .8 rg
n 0 60 54 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 72 60 48 12 re f*
.933333 1 .8 rg
n 120 60 6 12 re f*
.933333 1 .8 rg
n 126 60 48 12 re f*
.933333 1 .8 rg
n 180 60 6 12 re f*
.933333 1 .8 rg
n 192 60 6 12 re f*
1 .941176 .941176 rg
n 198 60 36 12 re f*
.933333 1 .8 rg
n 234 60 6 12 re f*
1 .941176 .941176 rg
n 246 60 54 12 re f*
.933333 1 .8 rg
n 300 60 6 12 re f*
1 .941176 .941176 rg
n 312 60 54 12 re f*
.933333 1 .8 rg
n 366 60 12 12 re f*
.933333 1 .8 rg
n 384 60 42 12 re f*
.933333 1 .8 rg
n 432 60 6 12 re f*
.933333 1 .8 rg
n 444 60 6 12 re f*
1 .941176 .941176 rg
n 450 60 90 12 re f*
.933333 1 .8 rg
n 540 60 6 12 re f*
1 .941176 .941176 rg
n 552 60 96 12 re f*
.933333 1 .8 rg
n 648 60 6 12 re f*
1 .941176 .941176 rg
n 660 60 90 12 re f*
.933333 1 .8 rg
n 750 60 12 12 re f*
.933333 1 .8 rg
n 768 60 24 12 re f*
.933333 1 .8 rg
n 798 60 6 12 re f*
.933333 1 .8 rg
n 810 60 6 12 re f*
1 .941176 .941176 rg
n 816 60 48 12 re f*
.933333 1 .8 rg
n 864 60 6 12 re f*
1 .941176 .941176 rg
n 876 60 60 12 re f*
.933333 1 .8 rg
n 936 60 6 12 re f*
1 .941176 .941176 rg
n 948 60 42 12 re f*
.933333 1 .8 rg
n 990 60 12 12 re f*
.933333 1 .8 rg
n 0 48 48 12 re f*
.933333 1 .8 rg
n 54 48 6 12 re f*
.933333 1 .8 rg
n 66 48 48 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 120 48 42 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 6 12 re f*
1 .941176 .941176 rg
n 186 48 42 12 re f*
.933333 1 .8 rg
n 228 48 6 12 re f*
1 .941176 .941176 rg
n 240 48 48 12 re f*
.933333 1 .8 rg
n 288 48 6 12 re f*
1 .941176 .941176 rg
n 300 48 48 12 re f*
.933333 1 .8 rg
n 348 48 12 12 re f*
.933333 1 .8 rg
n 366 48 30 12 re f*
.933333 1 .8 rg
n 402 48 6 12 re f*
.933333 1 .8 rg
n 414 48 6 12 re f*
.933333 1 .8 rg
n 420 48 6 12 re f*
.933333 1 .8 rg
n 426 48 6 12 re f*
.933333 1 .8 rg
n 432 48 6 12 re f*
.933333 1 .8 rg
n 438 48 6 12 re f*
.933333 1 .8 rg
n 444 48 6 12 re f*
.933333 1 .8 rg
n 450 48 12 12 re f*
.933333 1 .8 rg
n 468 48 48 12 re f*
.933333 1 .8 rg
n 528 48 6 12 re f*
.933333 1 .8 rg
n 540 48 6 12 re f*
1 .941176 .941176 rg
n 546 48 90 12 re f*
.933333 1 .8 rg
n 636 48 6 12 re f*
1 .941176 .941176 rg
n 648 48 72 12 re f*
.933333 1 .8 rg
n 720 48 6 12 re f*
1 .941176 .941176 rg
n 732 48 96 12 re f*
.933333 1 .8 rg
n 828 48 12 12 re f*
.933333 1 .8 rg
n 0 36 102 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 120 36 48 12 re f*
.933333 1 .8 rg
n 168 36 6 12 re f*
.933333 1 .8 rg
n 174 36 48 12 re f*
.933333 1 .8 rg
n 228 36 6 12 re f*
.933333 1 .8 rg
n 240 36 6 12 re f*
1 .941176 .941176 rg
n 246 36 36 12 re f*
.933333 1 .8 rg
n 282 36 6 12 re f*
1 .941176 .941176 rg
n 294 36 36 12 re f*
.933333 1 .8 rg
n 330 36 6 12 re f*
1 .941176 .941176 rg
n 342 36 54 12 re f*
.933333 1 .8 rg
n 396 36 6 12 re f*
1 .941176 .941176 rg
n 408 36 54 12 re f*
.933333 1 .8 rg
n 462 36 12 12 re f*
.933333 1 .8 rg
n 480 36 42 12 re f*
.933333 1 .8 rg
n 528 36 6 12 re f*
.933333 1 .8 rg
n 540 36 6 12 re f*
1 .941176 .941176 rg
n 546 36 42 12 re f*
.933333 1 .8 rg
n 588 36 6 12 re f*
1 .941176 .941176 rg
n 600 36 48 12 re f*
.933333 1 .8 rg
n 648 36 6 12 re f*
1 .941176 .941176 rg
n 660 36 48 12 re f*
.933333 1 .8 rg
n 708 36 6 12 re f*
1 .941176 .941176 rg
n 720 36 42 12 re f*
.933333 1 .8 rg
n 762 36 12 12 re f*
.933333 1 .8 rg
n 780 36 36 12 re f*
.933333 1 .8 rg
n 822 36 6 12 re f*
.933333 1 .8 rg
n 834 36 6 12 re f*
.933333 1 .8 rg
n 840 36 6 12 re f*
.933333 1 .8 rg
n 846 36 6 12 re f*
.933333 1 .8 rg
n 852 36 6 12 re f*
.933333 1 .8 rg
n 858 36 6 12 re f*
.933333 1 .8 rg
n 864 36 6 12 re f*
.933333 1 .8 rg
n 870 36 6 12 re f*
.933333 1 .8 rg
n 876 36 6 12 re f*
.933333 1 .8 rg
n 882 36 12 12 re f*
.933333 1 .8 rg
n 900 36 78 12 re f*
.933333 1 .8 rg
n 984 36 6 12 re f*
.933333 1 .8 rg
n 996 36 36 12 re f*
.933333 1 .8 rg
n 1032 36 6 12 re f*
.933333 1 .8 rg
n 1038 36 6 12 re f*
.933333 1 .8 rg
n 1044 36 6 12 re f*
.933333 1 .8 rg
n 1050 36 6 12 re f*
.933333 1 .8 rg
n 1056 36 6 12 re f*
.933333 1 .8 rg
n 1062 36 12 12 re f*
.933333 1 .8 rg
n 0 24 30 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 48 24 48 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 24 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
1 .941176 .941176 rg
n 150 24 48 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
1 .941176 .941176 rg
n 210 24 60 12 re f*
.933333 1 .8 rg
n 270 24 12 12 re f*
.933333 1 .8 rg
n 288 24 42 12 re f*
.933333 1 .8 rg
n 336 24 6 12 re f*
.933333 1 .8 rg
n 348 24 6 12 re f*
.933333 1 .8 rg
n 354 24 24 12 re f*
.933333 1 .8 rg
n 378 24 6 12 re f*
.933333 1 .8 rg
n 390 24 24 12 re f*
.933333 1 .8 rg
n 414 24 12 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
1 .941176 .941176 rg
n 36 0 60 12 re f*
1 .941176 .941176 rg
n 96 0 12 12 re f*
1 .941176 .941176 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 54 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
1 .941176 .941176 rg
n 192 0 6 12 re f*
1 .941176 .941176 rg
n 198 0 24 12 re f*
1 .941176 .941176 rg
n 222 0 48 12 re f*
1 .941176 .941176 rg
n 270 0 12 12 re f*
1 .941176 .941176 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 48 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
1 .941176 .941176 rg
n 360 0 6 12 re f*
1 .941176 .941176 rg
n 366 0 24 12 re f*
1 .941176 .941176 rg
n 390 0 102 12 re f*
1 .941176 .941176 rg
n 492 0 12 12 re f*
1 .941176 .941176 rg
n 504 0 6 12 re f*
.933333 1 .8 rg
n 510 0 6 12 re f*
.933333 1 .8 rg
n 522 0 102 12 re f*
.933333 1 .8 rg
n 624 0 6 12 re f*
1 .941176 .941176 rg
n 636 0 6 12 re f*
1 .941176 .941176 rg
n 642 0 24 12 re f*
1 .941176 .941176 rg
n 666 0 30 12 re f*
1 .941176 .941176 rg
n 696 0 12 12 re f*
1 .941176 .941176 rg
n 708 0 6 12 re f*
.933333 1 .8 rg
n 714 0 6 12 re f*
.933333 1 .8 rg
n 726 0 30 12 re f*
.933333 1 .8 rg
n 756 0 6 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* (customers) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (customer) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barbara') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('charles') Tj 0 0 0 rg (],) Tj ( ) Tj (address) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('1 Abba Avenue') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('2 Beatles Lane') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('3 Corrs Close') Tj 0 0 0 rg (],) Tj ( ) Tj (bank) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('allied') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barclays') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('chase') Tj 0 0 0 rg (]\)) Tj  T* (products) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry') Tj 0 0 0 rg (],) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (supplier) Tj (  ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('grove limited') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('go banabas') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry pickers') Tj 0 0 0 rg (]\)) Tj  T* (customer_products) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (customer) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('alan') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('charles') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('charles') Tj 0 0 0 rg (],) Tj ( ) Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (],) Tj ( ) Tj (amount) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (],) Tj ( ) Tj (purchase_date) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (banks) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (bank) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('allied') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('barclays') Tj 0 0 0 rg (],) Tj ( ) Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (5556) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (2461) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T*  T* 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj .729412 .129412 .129412 rg ('Customers) Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj 0 0 0 rg (,) Tj ( ) Tj (customers) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg (') Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (Products) Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj 0 0 0 rg (,) Tj ( ) Tj (products) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg (') Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (Customer_products) Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj 0 0 0 rg (,) Tj ( ) Tj (customer_products) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg (') Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (Banks) Tj /F6 10 Tf .376471 .376471 .376471 rg (\\n) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj 0 0 0 rg (,) Tj ( ) Tj (banks) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.join) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (127) Tj T* ET
Q
Q
 
endstream
endobj
1098 0 obj
<<
/Length 26672
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Simple join: inner join between tables) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 730.6394 cm
q
BT 1 0 0 1 0 26 Tm .926862 Tw 12 TL /F1 10 Tf 0 0 0 rg (Suppose we want to know how much money is to be transferred from each bank. - We only care about the fields) Tj T* 0 Tw .834705 Tw (\221bank\222, \221amount\222 and \221price\222 - each field is pulled from different tables, - need to specify customer & product as the) Tj T* 0 Tw (keys we will join on:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 711.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 634 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 24 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 24 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 54 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 102 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 336 0 30 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 384 0 48 12 re f*
.933333 1 .8 rg
n 432 0 12 12 re f*
.933333 1 .8 rg
n 450 0 12 12 re f*
.933333 1 .8 rg
n 468 0 6 12 re f*
.933333 1 .8 rg
n 480 0 6 12 re f*
1 .941176 .941176 rg
n 486 0 60 12 re f*
.933333 1 .8 rg
n 546 0 6 12 re f*
1 .941176 .941176 rg
n 564 0 54 12 re f*
.933333 1 .8 rg
n 618 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (join) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (bank) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customers) Tj (,) Tj ( ) Tj (amount) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customer_products) Tj (,) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (products) Tj (\),) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('customer') Tj 0 0 0 rg (,) Tj (  ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 681.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Defaults for fields we want to left-join on\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 663.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The function we need to run to transfer money looks like this, so actually, we would like to have account details too.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 608.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 18 12 re f*
.933333 1 .8 rg
n 24 36 84 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 24 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 150 36 36 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 198 36 30 12 re f*
.933333 1 .8 rg
n 228 36 6 12 re f*
.933333 1 .8 rg
n 240 36 42 12 re f*
.933333 1 .8 rg
n 288 36 6 12 re f*
1 .941176 .941176 rg
n 300 36 54 12 re f*
.933333 1 .8 rg
n 354 36 12 12 re f*
.933333 1 .8 rg
n 24 24 426 12 re f*
.933333 1 .8 rg
n 24 12 54 12 re f*
.933333 1 .8 rg
n 24 0 24 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (transfer_money) Tj /F5 10 Tf 0 0 0 rg (\() Tj (bank) Tj (,) Tj ( ) Tj (amount) Tj (,) Tj ( ) Tj (price) Tj (,) Tj ( ) Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('default') Tj 0 0 0 rg (\):) Tj  T* (    ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## if account == 'default' transfer money slowly, else transfer quickly) Tj /F5 10 Tf 0 0 0 rg  T* (    ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## return) Tj /F5 10 Tf 0 0 0 rg  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (pass) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 588.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can grab the account details from the \221banks\222 table:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 569.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 784 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 24 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 24 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 54 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 36 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 102 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 336 0 30 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 384 0 48 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
.933333 1 .8 rg
n 444 0 42 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
.933333 1 .8 rg
n 504 0 30 12 re f*
.933333 1 .8 rg
n 534 0 12 12 re f*
.933333 1 .8 rg
n 552 0 12 12 re f*
.933333 1 .8 rg
n 570 0 6 12 re f*
.933333 1 .8 rg
n 582 0 6 12 re f*
1 .941176 .941176 rg
n 588 0 60 12 re f*
.933333 1 .8 rg
n 648 0 6 12 re f*
1 .941176 .941176 rg
n 666 0 54 12 re f*
.933333 1 .8 rg
n 720 0 6 12 re f*
1 .941176 .941176 rg
n 732 0 36 12 re f*
.933333 1 .8 rg
n 768 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (join) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (bank) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customers) Tj (,) Tj ( ) Tj (amount) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customer_products) Tj (,) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (products) Tj (,) Tj ( ) Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (banks) Tj (\),) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('customer') Tj 0 0 0 rg (,) Tj (  ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('bank') Tj 0 0 0 rg (]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 537.8394 cm
q
BT 1 0 0 1 0 14 Tm 1.276711 Tw 12 TL /F1 10 Tf 0 0 0 rg (but we just ) Tj /F2 10 Tf (lost) Tj /F1 10 Tf ( Chase transactions as we dont have its account details. However, money is transfered perfectly) Tj T* 0 Tw (\(albeit slowly\) even without account id. So instead\205.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 495.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 550 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 24 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 30 24 24 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 60 24 24 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 54 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 168 24 36 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 102 12 re f*
.933333 1 .8 rg
n 324 24 6 12 re f*
.933333 1 .8 rg
n 336 24 30 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 384 24 48 12 re f*
.933333 1 .8 rg
n 432 24 6 12 re f*
.933333 1 .8 rg
n 444 24 42 12 re f*
.933333 1 .8 rg
n 492 24 6 12 re f*
.933333 1 .8 rg
n 504 24 30 12 re f*
.933333 1 .8 rg
n 534 24 12 12 re f*
.933333 1 .8 rg
n 30 12 12 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
1 .941176 .941176 rg
n 66 12 60 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
1 .941176 .941176 rg
n 144 12 54 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
1 .941176 .941176 rg
n 210 12 36 12 re f*
.933333 1 .8 rg
n 246 12 12 12 re f*
.933333 1 .8 rg
n 30 0 48 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 24 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 42 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
1 .941176 .941176 rg
n 186 0 54 12 re f*
.933333 1 .8 rg
n 240 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (join) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (bank) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customers) Tj (,) Tj ( ) Tj (amount) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customer_products) Tj (,) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (products) Tj (,) Tj ( ) Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (banks) Tj (\),) Tj  T* (     ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('customer') Tj 0 0 0 rg (,) Tj (  ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('bank') Tj 0 0 0 rg (],) Tj  T* (     ) Tj (defaults) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('default') Tj 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 464.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Renaming & calculating fields) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 434.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .167705 Tw (We also want to ensure we don\222t transfer money that we already transferred\205 so we need to grab an expiry column) Tj T* 0 Tw (based on purchase_date in customer_product table) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 379.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 30 36 24 12 re f*
.933333 1 .8 rg
n 54 36 6 12 re f*
.933333 1 .8 rg
n 60 36 24 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 102 36 54 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 168 36 36 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 222 36 102 12 re f*
.933333 1 .8 rg
n 324 36 6 12 re f*
.933333 1 .8 rg
n 336 36 30 12 re f*
.933333 1 .8 rg
n 372 36 6 12 re f*
.933333 1 .8 rg
n 384 36 48 12 re f*
.933333 1 .8 rg
n 432 36 6 12 re f*
.933333 1 .8 rg
n 444 36 42 12 re f*
.933333 1 .8 rg
n 492 36 6 12 re f*
.933333 1 .8 rg
n 504 36 30 12 re f*
.933333 1 .8 rg
n 534 36 6 12 re f*
.933333 1 .8 rg
n 546 36 36 12 re f*
.933333 1 .8 rg
n 588 36 6 12 re f*
.933333 1 .8 rg
n 600 36 102 12 re f*
.933333 1 .8 rg
n 702 36 12 12 re f*
.933333 1 .8 rg
n 30 24 12 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
1 .941176 .941176 rg
n 66 24 60 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
1 .941176 .941176 rg
n 144 24 54 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
1 .941176 .941176 rg
n 210 24 36 12 re f*
.933333 1 .8 rg
n 246 24 12 12 re f*
.933333 1 .8 rg
n 30 12 42 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 24 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 36 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 36 12 re f*
.933333 1 .8 rg
n 216 12 78 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 306 12 12 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 324 12 78 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
1 .941176 .941176 rg
n 414 12 24 12 re f*
.933333 1 .8 rg
n 438 12 18 12 re f*
.933333 1 .8 rg
n 468 12 264 12 re f*
.933333 1 .8 rg
n 30 0 48 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 24 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 42 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
1 .941176 .941176 rg
n 186 0 54 12 re f*
.933333 1 .8 rg
n 240 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (join) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (bank) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customers) Tj (,) Tj ( ) Tj (amount) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customer_products) Tj (,) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (products) Tj (,) Tj ( ) Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (banks) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (customer_products) Tj (\),) Tj  T* (     ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('customer') Tj 0 0 0 rg (,) Tj (  ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('bank') Tj 0 0 0 rg (],) Tj  T* (     ) Tj (renames) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (purchase_date) Tj (:) Tj ( ) Tj (dt) Tj (\() Tj (purchase_date) Tj (,) Tj ( ) Tj .729412 .129412 .129412 rg ('1b') Tj 0 0 0 rg (\)\),) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## it takes 1 business day to transfer money) Tj /F5 10 Tf 0 0 0 rg  T* (     ) Tj (defaults) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (account) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('default') Tj 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 347.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Perdictable) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 281.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.502594 Tw (perdictable takes the same operation one steps further and actually runs the function. We also use the function) Tj T* 0 Tw .591506 Tw (signature to determine the defaults parameter. Here is another example: ### Example: Oil prices In Finance, there) Tj T* 0 Tw 2.433381 Tw (are contracts called Futures, each Future contract has an expiry. E.g. Futures contracts for Oil are contracts) Tj T* 0 Tw .767338 Tw (agreeing the delivery of oil to a particular place in a particular month. Once that month is gone, that contract is no) Tj T* 0 Tw (longer traded and the oil needs to be delivered.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 226.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 598 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 18 12 re f*
.933333 1 .8 rg
n 54 36 36 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 0 24 18 12 re f*
.933333 1 .8 rg
n 24 24 6 12 re f*
.933333 1 .8 rg
n 36 24 48 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 12 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 24 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 216 24 30 12 re f*
.933333 1 .8 rg
n 246 24 6 12 re f*
.933333 1 .8 rg
n 252 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 270 24 12 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 12 12 re f*
.933333 1 .8 rg
n 318 24 6 12 re f*
.933333 1 .8 rg
n 330 24 48 12 re f*
.933333 1 .8 rg
n 378 24 6 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 396 24 6 12 re f*
.933333 1 .8 rg
n 408 24 12 12 re f*
.933333 1 .8 rg
n 420 24 12 12 re f*
.933333 1 .8 rg
n 432 24 6 12 re f*
.933333 1 .8 rg
n 438 24 24 12 re f*
.933333 1 .8 rg
n 462 24 6 12 re f*
.933333 1 .8 rg
n 474 24 6 12 re f*
.933333 1 .8 rg
n 486 24 6 12 re f*
.933333 1 .8 rg
n 498 24 30 12 re f*
.933333 1 .8 rg
n 528 24 6 12 re f*
.933333 1 .8 rg
n 534 24 6 12 re f*
.933333 1 .8 rg
n 540 24 6 12 re f*
.933333 1 .8 rg
n 552 24 12 12 re f*
.933333 1 .8 rg
n 564 24 6 12 re f*
.933333 1 .8 rg
n 576 24 6 12 re f*
.933333 1 .8 rg
n 582 24 12 12 re f*
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 36 12 18 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 36 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 36 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
1 .941176 .941176 rg
n 192 12 30 12 re f*
.878431 .878431 .878431 rg
n 222 12 12 12 re f*
1 .941176 .941176 rg
n 234 12 6 12 re f*
.878431 .878431 .878431 rg
n 240 12 12 12 re f*
1 .941176 .941176 rg
n 252 12 6 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 300 12 12 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 324 12 6 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 342 12 24 12 re f*
1 .941176 .941176 rg
n 372 12 12 12 re f*
.878431 .878431 .878431 rg
n 384 12 12 12 re f*
1 .941176 .941176 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* (oil) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dt) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (year) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (m) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (range) Tj 0 0 0 rg (\() Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (13) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dt) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (year) Tj (,) Tj ( ) Tj (m) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (range) Tj 0 0 0 rg (\() Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (13) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (oil) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (oil) Tj (\() Tj (ticker) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (y) Tj (,) Tj ( ) Tj (m) Tj (:) Tj ( ) Tj .729412 .129412 .129412 rg ('OIL_) Tj /F6 10 Tf .733333 .4 .533333 rg (%i) Tj /F5 10 Tf .729412 .129412 .129412 rg (_) Tj /F6 10 Tf .733333 .4 .533333 rg (%s) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj .188235 .188235 .188235 rg (%) Tj 0 0 0 rg (\() Tj (y) Tj (,) Tj ( ) Tj (m) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (m) Tj .188235 .188235 .188235 rg (>) Tj /F6 10 Tf 0 0 .815686 rg (9) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('0) Tj /F6 10 Tf .733333 .4 .533333 rg (%i) Tj /F5 10 Tf .729412 .129412 .129412 rg (') Tj .188235 .188235 .188235 rg (%) Tj /F6 10 Tf 0 .501961 0 rg (m) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj T* (oil) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 206.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (y,m and ticker will form our primary keys) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 163.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 12 12 re f*
.933333 1 .8 rg
n 18 24 6 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
1 .941176 .941176 rg
n 36 24 18 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
1 .941176 .941176 rg
n 66 24 18 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
1 .941176 .941176 rg
n 96 24 48 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 66 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 36 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 12 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 252 12 6 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 264 12 12 12 re f*
.933333 1 .8 rg
n 282 12 12 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 312 12 12 12 re f*
.933333 1 .8 rg
n 324 12 12 12 re f*
.933333 1 .8 rg
n 336 12 6 12 re f*
.933333 1 .8 rg
n 348 12 6 12 re f*
.933333 1 .8 rg
n 360 12 18 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
.933333 1 .8 rg
n 390 12 6 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 414 12 18 12 re f*
.933333 1 .8 rg
n 432 12 6 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (pk) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('m') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ticker') Tj 0 0 0 rg (]) Tj  T* (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (perdictable) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (y) Tj (,) Tj ( ) Tj (m) Tj (:) Tj ( ) Tj (dt) Tj (\() Tj (y) Tj (,) Tj (m) Tj .188235 .188235 .188235 rg (+) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\)\() Tj (y) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (oil) Tj (,) Tj ( ) Tj (m) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (oil) Tj (\)) Tj  T* (expiry) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 124.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 598 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 42 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 36 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 36 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 18 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 36 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 12 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 36 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 36 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 288 0 18 12 re f*
.933333 1 .8 rg
n 306 0 12 12 re f*
.933333 1 .8 rg
n 324 0 36 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
.933333 1 .8 rg
n 366 0 42 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
.933333 1 .8 rg
n 414 0 36 12 re f*
.933333 1 .8 rg
n 450 0 6 12 re f*
.933333 1 .8 rg
n 456 0 6 12 re f*
.933333 1 .8 rg
n 462 0 12 12 re f*
.933333 1 .8 rg
n 474 0 12 12 re f*
.933333 1 .8 rg
n 492 0 36 12 re f*
.933333 1 .8 rg
n 528 0 12 12 re f*
.933333 1 .8 rg
n 540 0 6 12 re f*
.933333 1 .8 rg
n 546 0 36 12 re f*
.933333 1 .8 rg
n 582 0 12 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (fake_ts) Tj /F5 10 Tf 0 0 0 rg (\() Tj (ticker) Tj (,) Tj ( ) Tj (expiry) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (500) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj (dt_bump) Tj (\() Tj (expiry) Tj (,) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (99) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (expiry) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (cumsum) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 104.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To add a price for each of the futures, we first wrap fake_ts and then run it:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 73.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 66 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 42 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 12 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 12 12 re f*
.933333 1 .8 rg
n 216 12 12 12 re f*
.933333 1 .8 rg
n 228 12 36 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 282 12 18 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 312 12 36 12 re f*
.933333 1 .8 rg
n 354 12 6 12 re f*
.933333 1 .8 rg
n 366 12 36 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (perdictable) Tj (\() Tj (fake_ts) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\)\() Tj (ticker) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (oil) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (\)) Tj  T* (price) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.join) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (128) Tj T* ET
Q
Q
 
endstream
endobj
1099 0 obj
<<
/Length 30349
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.879719 Tw 12 TL /F1 10 Tf 0 0 0 rg (We have wrapped a function so that we get a price for ) Tj /F2 10 Tf (each) Tj /F1 10 Tf ( of these contracts. This allows us to move from) Tj T* 0 Tw (operating on single timeseries, to run it on multiple rows from multiple tables) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 562 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 18 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 36 36 66 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 108 36 24 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 144 36 12 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 12 12 re f*
.933333 1 .8 rg
n 186 36 12 12 re f*
.933333 1 .8 rg
n 198 36 6 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 222 36 30 12 re f*
.933333 1 .8 rg
n 252 36 6 12 re f*
.933333 1 .8 rg
n 264 36 36 12 re f*
.933333 1 .8 rg
n 306 36 6 12 re f*
.933333 1 .8 rg
n 318 36 36 12 re f*
.933333 1 .8 rg
n 354 36 6 12 re f*
.933333 1 .8 rg
n 0 24 90 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 108 24 66 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 30 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 12 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 252 24 12 12 re f*
.933333 1 .8 rg
n 264 24 12 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
.933333 1 .8 rg
n 288 24 6 12 re f*
.933333 1 .8 rg
n 300 24 30 12 re f*
.933333 1 .8 rg
n 330 24 6 12 re f*
.933333 1 .8 rg
n 342 24 36 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 396 24 36 12 re f*
.933333 1 .8 rg
n 432 24 6 12 re f*
.933333 1 .8 rg
n 0 12 102 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 66 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 24 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 228 12 12 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 258 12 12 12 re f*
.933333 1 .8 rg
n 270 12 12 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 306 12 18 12 re f*
.933333 1 .8 rg
n 324 12 6 12 re f*
.933333 1 .8 rg
n 336 12 6 12 re f*
.933333 1 .8 rg
n 348 12 6 12 re f*
.933333 1 .8 rg
n 360 12 90 12 re f*
.933333 1 .8 rg
n 450 12 6 12 re f*
.933333 1 .8 rg
n 462 12 36 12 re f*
.933333 1 .8 rg
n 504 12 6 12 re f*
.933333 1 .8 rg
n 516 12 36 12 re f*
.933333 1 .8 rg
n 552 12 6 12 re f*
.933333 1 .8 rg
n 0 0 102 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (perdictable) Tj (\() Tj (diff) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\)\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (\)) Tj  T* (yesterday_price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (perdictable) Tj (\() Tj (shift) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\)\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (\)) Tj  T* (percentage_return) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (perdictable) Tj (\() Tj (div_) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\)\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (rtn) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (yesterday_price) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (\)) Tj  T* (percentage_return) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 677.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (perdictable and caching) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 623.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .463921 Tw (This is nice but \(a\) what have we gained? and \(b\) why do we keep using expiry as a variable? The answer is to do) Tj T* 0 Tw 2.125535 Tw (with caching actually. If we rerun prices, we should get brand new data, since fake_ts just generates random) Tj T* 0 Tw .233373 Tw (prices\205 perdictable identifies rows that have been run and are now \221expired\222 It uses provided old data and does not) Tj T* 0 Tw (recalculate. If either expiry or old values are not provided then it calculates everything.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 593.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 520 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 54 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 66 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 42 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 228 12 12 12 re f*
.933333 1 .8 rg
n 240 12 12 12 re f*
.933333 1 .8 rg
n 252 12 36 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 306 12 18 12 re f*
.933333 1 .8 rg
n 324 12 6 12 re f*
.933333 1 .8 rg
n 336 12 24 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 378 12 30 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 420 12 36 12 re f*
.933333 1 .8 rg
n 462 12 6 12 re f*
.933333 1 .8 rg
n 474 12 36 12 re f*
.933333 1 .8 rg
n 510 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 54 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 42 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 24 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
1 .941176 .941176 rg
n 156 0 30 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 30 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 42 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 24 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
1 .941176 .941176 rg
n 336 0 30 12 re f*
.933333 1 .8 rg
n 366 0 12 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 384 0 24 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
1 .941176 .941176 rg
n 414 0 18 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
1 .941176 .941176 rg
n 444 0 18 12 re f*
.933333 1 .8 rg
n 462 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (new_price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (perdictable) Tj (\() Tj (fake_ts) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\)\() Tj (ticker) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (oil) Tj (,) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (\)) Tj  T* (\() Tj (new_price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (relabel) Tj (\() Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('new') Tj 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (relabel) Tj (\() Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('old') Tj 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sort) Tj (\() Tj .729412 .129412 .129412 rg ('y') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('m') Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 562.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (perdictable with the cell framework) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 544.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can run the function and use a cell to store the output\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 513.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 24 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 66 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 42 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 12 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 210 12 12 12 re f*
.933333 1 .8 rg
n 222 12 12 12 re f*
.933333 1 .8 rg
n 240 12 36 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 294 12 18 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 324 12 36 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 378 12 36 12 re f*
.933333 1 .8 rg
n 414 12 18 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 12 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (c) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (perdictable) Tj (\() Tj (fake_ts) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pk) Tj (\),) Tj ( ) Tj (ticker) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (oil) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (\)\(\)) Tj  T* (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 475.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 102 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 12 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 168 12 144 12 re f*
.933333 1 .8 rg
n 0 0 102 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (recalculated_cell) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (c) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (go) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## force a recalculation) Tj /F5 10 Tf 0 0 0 rg  T* (recalculated_cell) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 419.0394 cm
q
BT 1 0 0 1 0 38 Tm .244006 Tw 12 TL /F1 10 Tf 0 0 0 rg (We observe that the cell, when recalculates, automatically caches the history and does not recalculate fake_ts. This) Tj T* 0 Tw .147058 Tw (is not magic. When a cell calculates its function, it provides the function with the variables it needs. Once calculated,) Tj T* 0 Tw .581095 Tw (it stores the output in ) Tj /F2 10 Tf (data) Tj /F1 10 Tf ( and will be able to provide ) Tj /F2 10 Tf (data) Tj /F1 10 Tf ( to the function next time, allowing it to avoid re-running) Tj T* 0 Tw (expired calculations. Then cell will store the functions\222s result back in the ) Tj /F2 10 Tf (data) Tj /F1 10 Tf ( key for later use and this is repeated.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 388.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (perdictable API) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 358.6394 cm
q
BT 1 0 0 1 0 14 Tm .590241 Tw 12 TL /F1 10 Tf 0 0 0 rg (Parameters ) Tj /F2 10 Tf (on) Tj /F1 10 Tf (, ) Tj /F2 10 Tf (renames) Tj /F1 10 Tf ( and ) Tj /F2 10 Tf (defaults) Tj /F1 10 Tf ( parameters determine the way the data is joined. If defaults is missing, the) Tj T* 0 Tw (defaults from the function are used:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 303.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 718 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 48 12 re f*
.933333 1 .8 rg
n 54 36 6 12 re f*
.933333 1 .8 rg
n 66 36 36 12 re f*
.933333 1 .8 rg
n 108 36 30 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 150 36 48 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 216 36 6 12 re f*
.933333 1 .8 rg
n 222 36 6 12 re f*
.933333 1 .8 rg
n 234 36 30 12 re f*
.933333 1 .8 rg
n 270 36 6 12 re f*
.933333 1 .8 rg
n 282 36 48 12 re f*
.933333 1 .8 rg
n 0 24 30 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 48 24 48 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 42 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
1 .941176 .941176 rg
n 168 24 42 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
1 .941176 .941176 rg
n 222 24 48 12 re f*
.933333 1 .8 rg
n 270 24 6 12 re f*
1 .941176 .941176 rg
n 282 24 48 12 re f*
.933333 1 .8 rg
n 330 24 12 12 re f*
.933333 1 .8 rg
n 348 24 30 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 396 24 6 12 re f*
.933333 1 .8 rg
n 402 24 6 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 414 24 6 12 re f*
.933333 1 .8 rg
n 420 24 6 12 re f*
.933333 1 .8 rg
n 426 24 6 12 re f*
.933333 1 .8 rg
n 432 24 12 12 re f*
.933333 1 .8 rg
n 0 12 48 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 48 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 42 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
1 .941176 .941176 rg
n 186 12 42 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
1 .941176 .941176 rg
n 240 12 48 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
1 .941176 .941176 rg
n 300 12 48 12 re f*
.933333 1 .8 rg
n 348 12 12 12 re f*
.933333 1 .8 rg
n 366 12 48 12 re f*
.933333 1 .8 rg
n 420 12 6 12 re f*
.933333 1 .8 rg
n 432 12 6 12 re f*
.933333 1 .8 rg
n 438 12 6 12 re f*
.933333 1 .8 rg
n 444 12 6 12 re f*
.933333 1 .8 rg
n 450 12 6 12 re f*
.933333 1 .8 rg
n 456 12 6 12 re f*
.933333 1 .8 rg
n 462 12 6 12 re f*
.933333 1 .8 rg
n 468 12 12 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 48 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 54 12 re f*
.933333 1 .8 rg
n 216 0 12 12 re f*
.933333 1 .8 rg
n 228 0 30 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 276 0 30 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 318 0 48 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 384 0 48 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
.933333 1 .8 rg
n 444 0 270 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (function) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (:) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (quantity) Tj  T* (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry') Tj 0 0 0 rg (],) Tj ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('damson') Tj 0 0 0 rg (],) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (perdictable) Tj (\() Tj (function) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## cherry should appear with default quantity) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 283.8394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If you want to see the full calculations and inputs to the function set ) Tj /F2 10 Tf (include_inputs) Tj /F1 10 Tf (=True:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 265.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 580 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 48 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 54 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 228 0 84 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
.933333 1 .8 rg
n 366 0 30 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
.933333 1 .8 rg
n 414 0 30 12 re f*
.933333 1 .8 rg
n 444 0 6 12 re f*
.933333 1 .8 rg
n 456 0 48 12 re f*
.933333 1 .8 rg
n 510 0 6 12 re f*
.933333 1 .8 rg
n 522 0 48 12 re f*
.933333 1 .8 rg
n 570 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (perdictable) Tj (\() Tj (function) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj (include_inputs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 245.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If you want output column to be not data, use ) Tj /F2 10 Tf (col) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 226.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 664 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 48 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 54 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 228 0 84 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 18 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
1 .941176 .941176 rg
n 402 0 36 12 re f*
.933333 1 .8 rg
n 438 0 12 12 re f*
.933333 1 .8 rg
n 450 0 30 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 498 0 30 12 re f*
.933333 1 .8 rg
n 528 0 6 12 re f*
.933333 1 .8 rg
n 540 0 48 12 re f*
.933333 1 .8 rg
n 594 0 6 12 re f*
.933333 1 .8 rg
n 606 0 48 12 re f*
.933333 1 .8 rg
n 654 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (perdictable) Tj (\() Tj (function) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj (include_inputs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (col) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('cost') Tj 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 206.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (if_none) Tj /F1 10 Tf ( parameter determines how data is calculated for rows that have expired but their data is None:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 163.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 916 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 54 24 48 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 42 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
1 .941176 .941176 rg
n 174 24 42 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
1 .941176 .941176 rg
n 228 24 48 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
1 .941176 .941176 rg
n 288 24 48 12 re f*
.933333 1 .8 rg
n 336 24 12 12 re f*
.933333 1 .8 rg
n 354 24 36 12 re f*
.933333 1 .8 rg
n 396 24 6 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 414 24 12 12 re f*
.933333 1 .8 rg
n 426 24 6 12 re f*
.933333 1 .8 rg
n 432 24 6 12 re f*
.933333 1 .8 rg
n 438 24 6 12 re f*
.933333 1 .8 rg
n 444 24 12 12 re f*
.933333 1 .8 rg
n 462 24 12 12 re f*
.933333 1 .8 rg
n 474 24 6 12 re f*
.933333 1 .8 rg
n 480 24 6 12 re f*
.933333 1 .8 rg
n 486 24 6 12 re f*
.933333 1 .8 rg
n 492 24 12 12 re f*
.933333 1 .8 rg
n 510 24 12 12 re f*
.933333 1 .8 rg
n 522 24 6 12 re f*
.933333 1 .8 rg
n 528 24 6 12 re f*
.933333 1 .8 rg
n 534 24 18 12 re f*
.933333 1 .8 rg
n 0 12 78 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 48 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 42 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
1 .941176 .941176 rg
n 216 12 42 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
1 .941176 .941176 rg
n 270 12 48 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
1 .941176 .941176 rg
n 330 12 48 12 re f*
.933333 1 .8 rg
n 378 12 12 12 re f*
.933333 1 .8 rg
n 396 12 24 12 re f*
.933333 1 .8 rg
n 426 12 6 12 re f*
.933333 1 .8 rg
n 438 12 6 12 re f*
.933333 1 .8 rg
n 444 12 24 12 re f*
.933333 1 .8 rg
n 468 12 6 12 re f*
1 .941176 .941176 rg
n 480 12 180 12 re f*
.933333 1 .8 rg
n 660 12 6 12 re f*
1 .941176 .941176 rg
n 672 12 198 12 re f*
.933333 1 .8 rg
n 870 12 12 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 48 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 54 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 228 0 84 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 42 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 426 0 30 12 re f*
.933333 1 .8 rg
n 456 0 12 12 re f*
.933333 1 .8 rg
n 468 0 30 12 re f*
.933333 1 .8 rg
n 504 0 6 12 re f*
.933333 1 .8 rg
n 516 0 30 12 re f*
.933333 1 .8 rg
n 546 0 6 12 re f*
.933333 1 .8 rg
n 558 0 48 12 re f*
.933333 1 .8 rg
n 612 0 6 12 re f*
.933333 1 .8 rg
n 624 0 48 12 re f*
.933333 1 .8 rg
n 672 0 6 12 re f*
.933333 1 .8 rg
n 684 0 36 12 re f*
.933333 1 .8 rg
n 726 0 6 12 re f*
.933333 1 .8 rg
n 738 0 36 12 re f*
.933333 1 .8 rg
n 774 0 6 12 re f*
.933333 1 .8 rg
n 786 0 24 12 re f*
.933333 1 .8 rg
n 816 0 6 12 re f*
.933333 1 .8 rg
n 828 0 78 12 re f*
.933333 1 .8 rg
n 906 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry') Tj 0 0 0 rg (],) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (dt) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (dt) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)]\)) Tj  T* (previous_data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry') Tj 0 0 0 rg (],) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('some value that will be kept') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('this value will be recalculated') Tj 0 0 0 rg (]\)) Tj  T* (perdictable) Tj (\() Tj (function) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj (include_inputs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (if_none) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (False) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (,) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (previous_data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 136.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 910 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 48 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 54 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 228 0 84 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 366 0 42 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 426 0 24 12 re f*
.933333 1 .8 rg
n 450 0 12 12 re f*
.933333 1 .8 rg
n 462 0 30 12 re f*
.933333 1 .8 rg
n 498 0 6 12 re f*
.933333 1 .8 rg
n 510 0 30 12 re f*
.933333 1 .8 rg
n 540 0 6 12 re f*
.933333 1 .8 rg
n 552 0 48 12 re f*
.933333 1 .8 rg
n 606 0 6 12 re f*
.933333 1 .8 rg
n 618 0 48 12 re f*
.933333 1 .8 rg
n 666 0 6 12 re f*
.933333 1 .8 rg
n 678 0 36 12 re f*
.933333 1 .8 rg
n 720 0 6 12 re f*
.933333 1 .8 rg
n 732 0 36 12 re f*
.933333 1 .8 rg
n 768 0 6 12 re f*
.933333 1 .8 rg
n 780 0 24 12 re f*
.933333 1 .8 rg
n 810 0 6 12 re f*
.933333 1 .8 rg
n 822 0 78 12 re f*
.933333 1 .8 rg
n 900 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (perdictable) Tj (\() Tj (function) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj (include_inputs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (if_none) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (,) Tj ( ) Tj (expiry) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (expiry) Tj (,) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (previous_data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 92.63937 cm
q
BT 1 0 0 1 0 26 Tm .96694 Tw 12 TL /F1 10 Tf 0 0 0 rg (Some function want to receive historic data and they use it themselves. Parameter ) Tj /F2 10 Tf (output_is_input) Tj /F1 10 Tf ( controls this.) Tj T* 0 Tw .139705 Tw (For example: If your function is pulling historic prices from yahoo finance, you can use existing data to ask yahoo for) Tj T* 0 Tw (only recent ones.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 61.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 114 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 30 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 48 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 258 12 24 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 294 12 12 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 24 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 30 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 156 0 48 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (running_total_costs) Tj /F5 10 Tf 0 0 0 rg (\() Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj .188235 .188235 .188235 rg (=) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (data) Tj .188235 .188235 .188235 rg (=) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (+) Tj 0 0 0 rg ( ) Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (quantity) Tj  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.base.join) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (129) Tj T* ET
Q
Q
 
endstream
endobj
1100 0 obj
<<
/Length 19707
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 778 42 re B*
Q
q
.933333 1 .8 rg
n 0 12 78 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 96 12 48 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 42 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
1 .941176 .941176 rg
n 216 12 42 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
1 .941176 .941176 rg
n 270 12 48 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
1 .941176 .941176 rg
n 330 12 48 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
1 .941176 .941176 rg
n 390 12 48 12 re f*
.933333 1 .8 rg
n 438 12 12 12 re f*
.933333 1 .8 rg
n 456 12 24 12 re f*
.933333 1 .8 rg
n 486 12 6 12 re f*
.933333 1 .8 rg
n 498 12 6 12 re f*
.933333 1 .8 rg
n 504 12 12 12 re f*
.933333 1 .8 rg
n 516 12 6 12 re f*
.933333 1 .8 rg
n 528 12 12 12 re f*
.933333 1 .8 rg
n 540 12 6 12 re f*
.933333 1 .8 rg
n 552 12 12 12 re f*
.933333 1 .8 rg
n 564 12 6 12 re f*
.933333 1 .8 rg
n 576 12 12 12 re f*
.933333 1 .8 rg
n 588 12 12 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 114 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 54 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 84 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 24 12 re f*
.933333 1 .8 rg
n 420 0 12 12 re f*
.933333 1 .8 rg
n 432 0 30 12 re f*
.933333 1 .8 rg
n 468 0 6 12 re f*
.933333 1 .8 rg
n 480 0 30 12 re f*
.933333 1 .8 rg
n 510 0 6 12 re f*
.933333 1 .8 rg
n 522 0 48 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
.933333 1 .8 rg
n 588 0 48 12 re f*
.933333 1 .8 rg
n 636 0 6 12 re f*
.933333 1 .8 rg
n 648 0 24 12 re f*
.933333 1 .8 rg
n 678 0 6 12 re f*
.933333 1 .8 rg
n 690 0 78 12 re f*
.933333 1 .8 rg
n 768 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg  T* (previous_data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (product) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('apple') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('banana') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('cherry') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('damson') Tj 0 0 0 rg (],) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (40) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (perdictable) Tj (\() Tj (running_total_costs) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj (include_inputs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (,) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (previous_data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 705.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 928 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 402 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 114 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 54 12 re f*
.933333 1 .8 rg
n 282 0 6 12 re f*
.933333 1 .8 rg
n 294 0 84 12 re f*
.933333 1 .8 rg
n 384 0 6 12 re f*
.933333 1 .8 rg
n 396 0 24 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 432 0 90 12 re f*
.933333 1 .8 rg
n 528 0 6 12 re f*
.933333 1 .8 rg
n 540 0 30 12 re f*
.933333 1 .8 rg
n 570 0 12 12 re f*
.933333 1 .8 rg
n 582 0 30 12 re f*
.933333 1 .8 rg
n 618 0 6 12 re f*
.933333 1 .8 rg
n 630 0 30 12 re f*
.933333 1 .8 rg
n 660 0 6 12 re f*
.933333 1 .8 rg
n 672 0 48 12 re f*
.933333 1 .8 rg
n 726 0 6 12 re f*
.933333 1 .8 rg
n 738 0 48 12 re f*
.933333 1 .8 rg
n 786 0 6 12 re f*
.933333 1 .8 rg
n 798 0 24 12 re f*
.933333 1 .8 rg
n 828 0 6 12 re f*
.933333 1 .8 rg
n 840 0 78 12 re f*
.933333 1 .8 rg
n 918 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (## if you don't want existing data to be presented to the function:) Tj /F5 10 Tf 0 0 0 rg  T* (perdictable) Tj (\() Tj (running_total_costs) Tj (,) Tj ( ) Tj (on) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('product') Tj 0 0 0 rg (,) Tj ( ) Tj (include_inputs) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (output_is_input) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (False) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj (,) Tj ( ) Tj (quantity) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (quantity) Tj (,) Tj ( ) Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (previous_data) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 672.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Conclusions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 618.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .029163 Tw (pyg.base.join allows us to create joined table with the variables we need. This is leveraged by perdictable so that the) Tj T* 0 Tw .214004 Tw (\221atomic\222 data we work with is not a single timeseries but a whole table of timeseries data indexed by some keys. We) Tj T* 0 Tw 1.930829 Tw (can use various perdictable parameters to control cache policy. All this is done with very little additional code,) Tj T* 0 Tw (allowing us to manage quite a lot of data items with very little effort while managing caching expired items.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 583.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 553.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.87245 Tw (Given pandas, why do we need this timeseries library? pandas is amazing but there are a few features in) Tj T* 0 Tw (pyg.timeseries designed to enhance it.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 535.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are three issues with pandas that pyg.timeseries tries to address:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.4394 cm
Q
q
1 0 0 1 40.01575 529.4394 cm
Q
q
1 0 0 1 40.01575 517.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pandas works on pandas objects \(obviously\) but not on numpy arrays.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 511.4394 cm
Q
q
1 0 0 1 40.01575 451.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .782435 Tw (pandas handles nan within timeseries inconsistently across its functions. This makes your results sensitive to) Tj T* 0 Tw (reindexing/resampling. E.g.:) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a.expanding\(\) & a.ewm\(\) ) Tj /F2 10 Tf (ignore) Tj /F1 10 Tf ( nan\222s for calculation and then forward-fill the result.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a.diff\(\), a.rolling\(\) ) Tj /F2 10 Tf (include) Tj /F1 10 Tf ( any nans in the calculation, leading to nan propagation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 445.4394 cm
Q
q
1 0 0 1 40.01575 421.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .414481 Tw (pandas is great if you have the full timeseries. However, if you now want to run the same calculations in a live) Tj T* 0 Tw (environment, on recent data, you have to append recent data at the end of the DataFrame and rerun.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 421.4394 cm
Q
q
1 0 0 1 40.01575 403.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries tries to address this:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 397.4394 cm
Q
q
1 0 0 1 40.01575 397.4394 cm
Q
q
1 0 0 1 40.01575 373.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.585256 Tw (pyg.timeseries agrees with pandas 100% \(if there are no nan in the dataframe\) while being of comparable) Tj T* 0 Tw (speed) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 367.4394 cm
Q
q
1 0 0 1 40.01575 355.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries works seemlessly on pandas objects and on numpy arrays, with no code change.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 349.4394 cm
Q
q
1 0 0 1 40.01575 325.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.450315 Tw (pyg.timeseries handles nan consistently across all its functions, \221ignoring\222 all nan, making your results) Tj T* 0 Tw (consistent regardless of reindexing/resampling.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 319.4394 cm
Q
q
1 0 0 1 40.01575 175.4394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 105 cm
q
BT 1 0 0 1 0 26 Tm .160256 Tw 12 TL /F1 10 Tf 0 0 0 rg (pyg.timeseries exposes the state of the internal function calculation. The exposure of internal state allows us to) Tj T* 0 Tw -0.115369 Tw (calculate the output of additional data ) Tj /F2 10 Tf (without) Tj /F1 10 Tf ( re-running history. This speeds up of two very common problems) Tj T* 0 Tw (in finance:) Tj T* ET
Q
Q
q
1 0 0 1 23 99 cm
Q
q
1 0 0 1 23 99 cm
Q
q
1 0 0 1 23 75 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.259006 Tw (risk calculations, Monte Carlo scenarios: We can run a trading strategy up to today and then generate) Tj T* 0 Tw (multiple scenarios and see what-if, without having to rerun the full history.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 69 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 62 Tm .219631 Tw 12 TL /F1 10 Tf 0 0 0 rg (live versus history: pandas is designed to run a full historical simulation. However, once we reach \223today\224,) Tj T* 0 Tw -0.047795 Tw (speed is of the essense and running a full historical simulation every time we ingest a new price, is just too) Tj T* 0 Tw .108476 Tw (slow. That is why most fast trading is built around fast state-machines. Of course, making sure research &) Tj T* 0 Tw -0.018295 Tw (live versions do the same thing is tricky. pyg gives you the ability to run two systems in parallel with almost) Tj T* 0 Tw .528381 Tw (the same code base: run full history overnight and then run today\222s code base instantly, instantiated with) Tj T* 0 Tw (the output of the historical simulation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 175.4394 cm
Q
q
1 0 0 1 40.01575 142.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Agreement between pyg.timeseries and pandas) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 93.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 24 12 re f*
.933333 1 .8 rg
n 30 24 18 12 re f*
.933333 1 .8 rg
n 54 24 36 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 36 12 re f*
.933333 1 .8 rg
n 156 24 36 12 re f*
.933333 1 .8 rg
n 198 24 12 12 re f*
.933333 1 .8 rg
n 216 24 12 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
.933333 1 .8 rg
n 240 24 36 12 re f*
.933333 1 .8 rg
n 282 24 30 12 re f*
.933333 1 .8 rg
n 318 24 12 12 re f*
.933333 1 .8 rg
n 336 24 12 12 re f*
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 12 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 36 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 12 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 36 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 36 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 30 12 re f*
.933333 1 .8 rg
n 240 12 12 12 re f*
.933333 1 .8 rg
n 258 12 36 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 306 12 24 12 re f*
.933333 1 .8 rg
n 330 12 18 12 re f*
.933333 1 .8 rg
n 354 12 6 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 390 12 36 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 24 0 12 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 36 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 12 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 36 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 36 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 30 12 re f*
.933333 1 .8 rg
n 240 0 12 12 re f*
.933333 1 .8 rg
n 258 0 36 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 24 12 re f*
.933333 1 .8 rg
n 330 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pandas) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pd) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg  T* (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (10000) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (9999) Tj /F5 10 Tf 0 0 0 rg (\)\);) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj  T* (t) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (10000) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (9999) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 55.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 30 12 re f*
.933333 1 .8 rg
n 108 12 12 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 48 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 42 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 30 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (count) Tj (\(\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_count) Tj (\() Tj (s) Tj (\)\)) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_mean) Tj (\() Tj (s) Tj (\)\)) Tj (  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (130) Tj T* ET
Q
Q
 
endstream
endobj
1101 0 obj
<<
/Length 64425
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 18 12 re f*
.933333 1 .8 rg
n 96 24 12 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 132 24 36 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 12 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 18 12 re f*
.933333 1 .8 rg
n 96 12 12 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 12 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 24 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 42 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 30 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sum) Tj (\(\)) Tj (  ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_sum) Tj (\() Tj (s) Tj (\)\)) Tj (   ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (\(\)) Tj (  ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_std) Tj (\() Tj (s) Tj (\)\)) Tj (   ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (skew) Tj (\(\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_skew) Tj (\() Tj (s) Tj (\)\)) Tj (  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 681.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 24 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 12 12 re f*
.933333 1 .8 rg
n 126 36 6 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 162 36 18 12 re f*
.933333 1 .8 rg
n 180 36 6 12 re f*
.933333 1 .8 rg
n 186 36 12 12 re f*
.933333 1 .8 rg
n 198 36 6 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 210 36 24 12 re f*
.933333 1 .8 rg
n 234 36 18 12 re f*
.933333 1 .8 rg
n 252 36 6 12 re f*
.933333 1 .8 rg
n 258 36 18 12 re f*
.933333 1 .8 rg
n 276 36 12 12 re f*
.933333 1 .8 rg
n 330 36 6 12 re f*
.933333 1 .8 rg
n 342 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 36 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 174 24 18 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 198 24 12 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 222 24 18 12 re f*
.933333 1 .8 rg
n 240 24 18 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 18 12 re f*
.933333 1 .8 rg
n 282 24 12 12 re f*
.933333 1 .8 rg
n 330 24 6 12 re f*
.933333 1 .8 rg
n 342 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 36 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 12 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 18 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 222 12 18 12 re f*
.933333 1 .8 rg
n 240 12 18 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 264 12 18 12 re f*
.933333 1 .8 rg
n 282 12 12 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 342 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 12 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 18 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 12 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 24 12 re f*
.933333 1 .8 rg
n 264 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 12 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 18 12 re f*
.933333 1 .8 rg
n 312 0 12 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 342 0 30 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewma) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (       ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewmstd) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (      ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewmvar) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (var) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (      ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewmcor) Tj (\() Tj (s) Tj (,) Tj ( ) Tj (t) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (corr) Tj (\() Tj (t) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj ( ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 582.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 36 12 re f*
.933333 1 .8 rg
n 42 72 18 12 re f*
.933333 1 .8 rg
n 60 72 6 12 re f*
.933333 1 .8 rg
n 66 72 78 12 re f*
.933333 1 .8 rg
n 144 72 6 12 re f*
.933333 1 .8 rg
n 150 72 6 12 re f*
.933333 1 .8 rg
n 156 72 6 12 re f*
.933333 1 .8 rg
n 168 72 6 12 re f*
.933333 1 .8 rg
n 180 72 6 12 re f*
.933333 1 .8 rg
n 186 72 6 12 re f*
.933333 1 .8 rg
n 192 72 54 12 re f*
.933333 1 .8 rg
n 246 72 12 12 re f*
.933333 1 .8 rg
n 258 72 6 12 re f*
.933333 1 .8 rg
n 264 72 18 12 re f*
.933333 1 .8 rg
n 282 72 18 12 re f*
.933333 1 .8 rg
n 300 72 6 12 re f*
.933333 1 .8 rg
n 306 72 18 12 re f*
.933333 1 .8 rg
n 324 72 12 12 re f*
.933333 1 .8 rg
n 408 72 6 12 re f*
.933333 1 .8 rg
n 420 72 30 12 re f*
.933333 1 .8 rg
n 0 60 36 12 re f*
.933333 1 .8 rg
n 42 60 18 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 84 12 re f*
.933333 1 .8 rg
n 150 60 6 12 re f*
.933333 1 .8 rg
n 156 60 6 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 174 60 6 12 re f*
.933333 1 .8 rg
n 186 60 6 12 re f*
.933333 1 .8 rg
n 192 60 6 12 re f*
.933333 1 .8 rg
n 198 60 54 12 re f*
.933333 1 .8 rg
n 252 60 12 12 re f*
.933333 1 .8 rg
n 264 60 6 12 re f*
.933333 1 .8 rg
n 270 60 24 12 re f*
.933333 1 .8 rg
n 294 60 18 12 re f*
.933333 1 .8 rg
n 312 60 6 12 re f*
.933333 1 .8 rg
n 318 60 18 12 re f*
.933333 1 .8 rg
n 336 60 12 12 re f*
.933333 1 .8 rg
n 408 60 6 12 re f*
.933333 1 .8 rg
n 420 60 30 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 18 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 78 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 150 48 6 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 6 12 re f*
.933333 1 .8 rg
n 186 48 6 12 re f*
.933333 1 .8 rg
n 192 48 54 12 re f*
.933333 1 .8 rg
n 246 48 12 12 re f*
.933333 1 .8 rg
n 258 48 6 12 re f*
.933333 1 .8 rg
n 264 48 18 12 re f*
.933333 1 .8 rg
n 282 48 18 12 re f*
.933333 1 .8 rg
n 300 48 6 12 re f*
.933333 1 .8 rg
n 306 48 18 12 re f*
.933333 1 .8 rg
n 324 48 12 12 re f*
.933333 1 .8 rg
n 408 48 6 12 re f*
.933333 1 .8 rg
n 420 48 30 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 84 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 198 36 54 12 re f*
.933333 1 .8 rg
n 252 36 12 12 re f*
.933333 1 .8 rg
n 264 36 6 12 re f*
.933333 1 .8 rg
n 270 36 24 12 re f*
.933333 1 .8 rg
n 294 36 18 12 re f*
.933333 1 .8 rg
n 312 36 6 12 re f*
.933333 1 .8 rg
n 318 36 18 12 re f*
.933333 1 .8 rg
n 336 36 12 12 re f*
.933333 1 .8 rg
n 408 36 6 12 re f*
.933333 1 .8 rg
n 420 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 78 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 54 12 re f*
.933333 1 .8 rg
n 246 24 12 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 18 12 re f*
.933333 1 .8 rg
n 282 24 18 12 re f*
.933333 1 .8 rg
n 300 24 6 12 re f*
.933333 1 .8 rg
n 306 24 18 12 re f*
.933333 1 .8 rg
n 324 24 12 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 420 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 78 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 54 12 re f*
.933333 1 .8 rg
n 246 12 12 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 264 12 18 12 re f*
.933333 1 .8 rg
n 282 12 18 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
.933333 1 .8 rg
n 306 12 18 12 re f*
.933333 1 .8 rg
n 324 12 12 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 420 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 96 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 54 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 282 0 36 12 re f*
.933333 1 .8 rg
n 318 0 18 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 18 12 re f*
.933333 1 .8 rg
n 360 0 12 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
.933333 1 .8 rg
n 420 0 30 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_sum) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sum) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (            ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_mean) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (          ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_std) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (            ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_skew) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (skew) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (          ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_min) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (min) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (            ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_max) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (            ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_median) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (median) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (      ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 471.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1594 102 re B*
Q
q
.933333 1 .8 rg
n 0 84 36 12 re f*
.933333 1 .8 rg
n 42 84 18 12 re f*
.933333 1 .8 rg
n 60 84 6 12 re f*
.933333 1 .8 rg
n 66 84 66 12 re f*
.933333 1 .8 rg
n 132 84 6 12 re f*
.933333 1 .8 rg
n 138 84 6 12 re f*
.933333 1 .8 rg
n 144 84 6 12 re f*
.933333 1 .8 rg
n 150 84 12 12 re f*
.933333 1 .8 rg
n 162 84 6 12 re f*
.933333 1 .8 rg
n 174 84 6 12 re f*
.933333 1 .8 rg
n 186 84 6 12 re f*
.933333 1 .8 rg
n 192 84 6 12 re f*
.933333 1 .8 rg
n 198 84 42 12 re f*
.933333 1 .8 rg
n 240 84 6 12 re f*
.933333 1 .8 rg
n 246 84 12 12 re f*
.933333 1 .8 rg
n 258 84 6 12 re f*
.933333 1 .8 rg
n 264 84 6 12 re f*
.933333 1 .8 rg
n 270 84 18 12 re f*
.933333 1 .8 rg
n 288 84 18 12 re f*
.933333 1 .8 rg
n 306 84 6 12 re f*
.933333 1 .8 rg
n 312 84 18 12 re f*
.933333 1 .8 rg
n 330 84 12 12 re f*
.933333 1 .8 rg
n 486 84 6 12 re f*
.933333 1 .8 rg
n 498 84 30 12 re f*
.933333 1 .8 rg
n 0 72 36 12 re f*
.933333 1 .8 rg
n 42 72 18 12 re f*
.933333 1 .8 rg
n 60 72 6 12 re f*
.933333 1 .8 rg
n 66 72 72 12 re f*
.933333 1 .8 rg
n 138 72 6 12 re f*
.933333 1 .8 rg
n 144 72 6 12 re f*
.933333 1 .8 rg
n 150 72 6 12 re f*
.933333 1 .8 rg
n 156 72 12 12 re f*
.933333 1 .8 rg
n 168 72 6 12 re f*
.933333 1 .8 rg
n 180 72 6 12 re f*
.933333 1 .8 rg
n 192 72 6 12 re f*
.933333 1 .8 rg
n 198 72 6 12 re f*
.933333 1 .8 rg
n 204 72 42 12 re f*
.933333 1 .8 rg
n 246 72 6 12 re f*
.933333 1 .8 rg
n 252 72 12 12 re f*
.933333 1 .8 rg
n 264 72 6 12 re f*
.933333 1 .8 rg
n 270 72 6 12 re f*
.933333 1 .8 rg
n 276 72 24 12 re f*
.933333 1 .8 rg
n 300 72 18 12 re f*
.933333 1 .8 rg
n 318 72 6 12 re f*
.933333 1 .8 rg
n 324 72 18 12 re f*
.933333 1 .8 rg
n 342 72 12 12 re f*
.933333 1 .8 rg
n 486 72 6 12 re f*
.933333 1 .8 rg
n 498 72 30 12 re f*
.933333 1 .8 rg
n 0 60 36 12 re f*
.933333 1 .8 rg
n 42 60 18 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 66 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 138 60 6 12 re f*
.933333 1 .8 rg
n 144 60 6 12 re f*
.933333 1 .8 rg
n 150 60 12 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 174 60 6 12 re f*
.933333 1 .8 rg
n 186 60 6 12 re f*
.933333 1 .8 rg
n 192 60 6 12 re f*
.933333 1 .8 rg
n 198 60 42 12 re f*
.933333 1 .8 rg
n 240 60 6 12 re f*
.933333 1 .8 rg
n 246 60 12 12 re f*
.933333 1 .8 rg
n 258 60 6 12 re f*
.933333 1 .8 rg
n 264 60 6 12 re f*
.933333 1 .8 rg
n 270 60 18 12 re f*
.933333 1 .8 rg
n 288 60 18 12 re f*
.933333 1 .8 rg
n 306 60 6 12 re f*
.933333 1 .8 rg
n 312 60 18 12 re f*
.933333 1 .8 rg
n 330 60 12 12 re f*
.933333 1 .8 rg
n 486 60 6 12 re f*
.933333 1 .8 rg
n 498 60 30 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 18 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 72 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 150 48 6 12 re f*
.933333 1 .8 rg
n 156 48 12 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 6 12 re f*
.933333 1 .8 rg
n 192 48 6 12 re f*
.933333 1 .8 rg
n 198 48 6 12 re f*
.933333 1 .8 rg
n 204 48 42 12 re f*
.933333 1 .8 rg
n 246 48 6 12 re f*
.933333 1 .8 rg
n 252 48 12 12 re f*
.933333 1 .8 rg
n 264 48 6 12 re f*
.933333 1 .8 rg
n 270 48 6 12 re f*
.933333 1 .8 rg
n 276 48 24 12 re f*
.933333 1 .8 rg
n 300 48 18 12 re f*
.933333 1 .8 rg
n 318 48 6 12 re f*
.933333 1 .8 rg
n 324 48 18 12 re f*
.933333 1 .8 rg
n 342 48 12 12 re f*
.933333 1 .8 rg
n 486 48 6 12 re f*
.933333 1 .8 rg
n 498 48 30 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 66 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 12 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 198 36 42 12 re f*
.933333 1 .8 rg
n 240 36 6 12 re f*
.933333 1 .8 rg
n 246 36 12 12 re f*
.933333 1 .8 rg
n 258 36 6 12 re f*
.933333 1 .8 rg
n 264 36 6 12 re f*
.933333 1 .8 rg
n 270 36 18 12 re f*
.933333 1 .8 rg
n 288 36 18 12 re f*
.933333 1 .8 rg
n 306 36 6 12 re f*
.933333 1 .8 rg
n 312 36 18 12 re f*
.933333 1 .8 rg
n 330 36 12 12 re f*
.933333 1 .8 rg
n 486 36 6 12 re f*
.933333 1 .8 rg
n 498 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 66 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 198 24 42 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 246 24 12 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
.933333 1 .8 rg
n 270 24 18 12 re f*
.933333 1 .8 rg
n 288 24 18 12 re f*
.933333 1 .8 rg
n 306 24 6 12 re f*
.933333 1 .8 rg
n 312 24 18 12 re f*
.933333 1 .8 rg
n 330 24 12 12 re f*
.933333 1 .8 rg
n 486 24 6 12 re f*
.933333 1 .8 rg
n 498 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 84 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 12 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 42 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 264 12 12 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 288 12 36 12 re f*
.933333 1 .8 rg
n 324 12 18 12 re f*
.933333 1 .8 rg
n 342 12 6 12 re f*
.933333 1 .8 rg
n 348 12 18 12 re f*
.933333 1 .8 rg
n 366 12 12 12 re f*
.933333 1 .8 rg
n 486 12 6 12 re f*
.933333 1 .8 rg
n 498 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 96 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 12 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 18 12 re f*
.933333 1 .8 rg
n 216 0 12 12 re f*
.933333 1 .8 rg
n 228 0 18 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 6 12 re f*
.933333 1 .8 rg
n 282 0 42 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 12 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 48 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
.933333 1 .8 rg
n 408 0 18 12 re f*
.933333 1 .8 rg
n 426 0 12 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 444 0 18 12 re f*
.933333 1 .8 rg
n 462 0 12 12 re f*
.933333 1 .8 rg
n 486 0 6 12 re f*
.933333 1 .8 rg
n 498 0 30 12 re f*
.933333 1 .8 rg
n 534 0 1056 12 re f*
BT 1 0 0 1 0 86 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_sum) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sum) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                        ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_mean) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                      ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_std) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                        ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_skew) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (skew) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                      ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_min) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (min) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                        ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_max) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                        ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_median) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (median) Tj (\(\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_quantile) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf .376471 0 .878431 rg (0.3) Tj /F5 10 Tf 0 0 0 rg (\)[) Tj /F6 10 Tf .376471 0 .878431 rg (0.3) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (quantile) Tj (\() Tj /F6 10 Tf .376471 0 .878431 rg (0.3) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## The rolling_quantile returns the quantile as the header, since it supports multiple quantiles calculations: e.g. rolling_quantile\(s,10,[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 441.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Quick performance comparison) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 423.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg, when run on pandas dataframes rather than arrays, is of comparable speed to pandas) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 260.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 1492 162 re B*
Q
q
.933333 1 .8 rg
n 0 144 42 12 re f*
.933333 1 .8 rg
n 48 144 6 12 re f*
.933333 1 .8 rg
n 60 144 48 12 re f*
.933333 1 .8 rg
n 108 144 6 12 re f*
.933333 1 .8 rg
n 114 144 12 12 re f*
.933333 1 .8 rg
n 132 144 6 12 re f*
.933333 1 .8 rg
n 150 144 6 12 re f*
1 .941176 .941176 rg
n 156 144 78 12 re f*
.933333 1 .8 rg
n 234 144 6 12 re f*
1 .941176 .941176 rg
n 246 144 84 12 re f*
.933333 1 .8 rg
n 330 144 6 12 re f*
1 .941176 .941176 rg
n 342 144 78 12 re f*
.933333 1 .8 rg
n 420 144 6 12 re f*
1 .941176 .941176 rg
n 432 144 78 12 re f*
.933333 1 .8 rg
n 510 144 6 12 re f*
1 .941176 .941176 rg
n 522 144 96 12 re f*
.933333 1 .8 rg
n 618 144 12 12 re f*
.933333 1 .8 rg
n 78 132 18 12 re f*
.933333 1 .8 rg
n 102 132 6 12 re f*
.933333 1 .8 rg
n 114 132 6 12 re f*
.933333 1 .8 rg
n 120 132 66 12 re f*
.933333 1 .8 rg
n 186 132 6 12 re f*
.933333 1 .8 rg
n 198 132 72 12 re f*
.933333 1 .8 rg
n 270 132 6 12 re f*
.933333 1 .8 rg
n 282 132 66 12 re f*
.933333 1 .8 rg
n 348 132 6 12 re f*
.933333 1 .8 rg
n 360 132 66 12 re f*
.933333 1 .8 rg
n 426 132 6 12 re f*
.933333 1 .8 rg
n 438 132 84 12 re f*
.933333 1 .8 rg
n 522 132 12 12 re f*
.933333 1 .8 rg
n 78 120 36 12 re f*
.933333 1 .8 rg
n 120 120 6 12 re f*
.933333 1 .8 rg
n 132 120 6 12 re f*
.933333 1 .8 rg
n 138 120 6 12 re f*
.933333 1 .8 rg
n 144 120 6 12 re f*
.933333 1 .8 rg
n 150 120 42 12 re f*
.933333 1 .8 rg
n 192 120 6 12 re f*
.933333 1 .8 rg
n 198 120 12 12 re f*
.933333 1 .8 rg
n 210 120 6 12 re f*
.933333 1 .8 rg
n 216 120 6 12 re f*
.933333 1 .8 rg
n 222 120 18 12 re f*
.933333 1 .8 rg
n 240 120 6 12 re f*
.933333 1 .8 rg
n 252 120 6 12 re f*
.933333 1 .8 rg
n 258 120 6 12 re f*
.933333 1 .8 rg
n 264 120 42 12 re f*
.933333 1 .8 rg
n 306 120 6 12 re f*
.933333 1 .8 rg
n 312 120 12 12 re f*
.933333 1 .8 rg
n 324 120 6 12 re f*
.933333 1 .8 rg
n 330 120 6 12 re f*
.933333 1 .8 rg
n 336 120 24 12 re f*
.933333 1 .8 rg
n 360 120 6 12 re f*
.933333 1 .8 rg
n 372 120 6 12 re f*
.933333 1 .8 rg
n 378 120 6 12 re f*
.933333 1 .8 rg
n 384 120 42 12 re f*
.933333 1 .8 rg
n 426 120 6 12 re f*
.933333 1 .8 rg
n 432 120 12 12 re f*
.933333 1 .8 rg
n 444 120 6 12 re f*
.933333 1 .8 rg
n 450 120 6 12 re f*
.933333 1 .8 rg
n 456 120 18 12 re f*
.933333 1 .8 rg
n 474 120 6 12 re f*
.933333 1 .8 rg
n 486 120 6 12 re f*
.933333 1 .8 rg
n 492 120 6 12 re f*
.933333 1 .8 rg
n 498 120 42 12 re f*
.933333 1 .8 rg
n 540 120 6 12 re f*
.933333 1 .8 rg
n 546 120 12 12 re f*
.933333 1 .8 rg
n 558 120 6 12 re f*
.933333 1 .8 rg
n 564 120 6 12 re f*
.933333 1 .8 rg
n 570 120 18 12 re f*
.933333 1 .8 rg
n 588 120 6 12 re f*
.933333 1 .8 rg
n 600 120 6 12 re f*
.933333 1 .8 rg
n 606 120 6 12 re f*
.933333 1 .8 rg
n 612 120 42 12 re f*
.933333 1 .8 rg
n 654 120 6 12 re f*
.933333 1 .8 rg
n 660 120 12 12 re f*
.933333 1 .8 rg
n 672 120 6 12 re f*
.933333 1 .8 rg
n 678 120 6 12 re f*
.933333 1 .8 rg
n 684 120 36 12 re f*
.933333 1 .8 rg
n 720 120 12 12 re f*
.933333 1 .8 rg
n 732 120 6 12 re f*
.933333 1 .8 rg
n 738 120 12 12 re f*
.933333 1 .8 rg
n 750 120 6 12 re f*
.933333 1 .8 rg
n 756 120 36 12 re f*
.933333 1 .8 rg
n 798 120 6 12 re f*
.933333 1 .8 rg
n 804 120 6 12 re f*
.933333 1 .8 rg
n 816 120 30 12 re f*
.933333 1 .8 rg
n 846 120 6 12 re f*
.933333 1 .8 rg
n 852 120 6 12 re f*
.933333 1 .8 rg
n 858 120 6 12 re f*
.933333 1 .8 rg
n 870 120 6 12 re f*
.933333 1 .8 rg
n 882 120 6 12 re f*
.933333 1 .8 rg
n 894 120 18 12 re f*
.933333 1 .8 rg
n 912 120 6 12 re f*
.933333 1 .8 rg
n 924 120 24 12 re f*
.933333 1 .8 rg
n 954 120 6 12 re f*
.933333 1 .8 rg
n 966 120 24 12 re f*
.933333 1 .8 rg
n 990 120 12 12 re f*
1 .941176 .941176 rg
n 1008 120 30 12 re f*
.933333 1 .8 rg
n 1038 120 6 12 re f*
1 .941176 .941176 rg
n 1050 120 48 12 re f*
.933333 1 .8 rg
n 1098 120 12 12 re f*
.933333 1 .8 rg
n 1110 120 18 12 re f*
.933333 1 .8 rg
n 1134 120 6 12 re f*
.933333 1 .8 rg
n 1146 120 36 12 re f*
.933333 1 .8 rg
n 1188 120 18 12 re f*
.933333 1 .8 rg
n 1206 120 6 12 re f*
.933333 1 .8 rg
n 1218 120 18 12 re f*
.933333 1 .8 rg
n 1236 120 6 12 re f*
.933333 1 .8 rg
n 1242 120 6 12 re f*
.933333 1 .8 rg
n 1248 120 6 12 re f*
.933333 1 .8 rg
n 1260 120 12 12 re f*
.933333 1 .8 rg
n 1272 120 18 12 re f*
.933333 1 .8 rg
n 1290 120 36 12 re f*
.933333 1 .8 rg
n 1332 120 6 12 re f*
.933333 1 .8 rg
n 1344 120 36 12 re f*
.933333 1 .8 rg
n 1386 120 36 12 re f*
.933333 1 .8 rg
n 1422 120 6 12 re f*
.933333 1 .8 rg
n 1434 120 36 12 re f*
.933333 1 .8 rg
n 1470 120 18 12 re f*
.933333 1 .8 rg
n 0 96 42 12 re f*
.933333 1 .8 rg
n 48 96 12 12 re f*
.933333 1 .8 rg
n 66 96 48 12 re f*
.933333 1 .8 rg
n 114 96 6 12 re f*
.933333 1 .8 rg
n 120 96 12 12 re f*
.933333 1 .8 rg
n 138 96 6 12 re f*
.933333 1 .8 rg
n 156 96 6 12 re f*
1 .941176 .941176 rg
n 162 96 90 12 re f*
.933333 1 .8 rg
n 252 96 6 12 re f*
1 .941176 .941176 rg
n 264 96 96 12 re f*
.933333 1 .8 rg
n 360 96 6 12 re f*
1 .941176 .941176 rg
n 372 96 90 12 re f*
.933333 1 .8 rg
n 462 96 6 12 re f*
1 .941176 .941176 rg
n 474 96 90 12 re f*
.933333 1 .8 rg
n 564 96 6 12 re f*
1 .941176 .941176 rg
n 576 96 108 12 re f*
.933333 1 .8 rg
n 684 96 12 12 re f*
.933333 1 .8 rg
n 78 84 18 12 re f*
.933333 1 .8 rg
n 102 84 6 12 re f*
.933333 1 .8 rg
n 114 84 6 12 re f*
.933333 1 .8 rg
n 120 84 78 12 re f*
.933333 1 .8 rg
n 198 84 6 12 re f*
.933333 1 .8 rg
n 210 84 84 12 re f*
.933333 1 .8 rg
n 294 84 6 12 re f*
.933333 1 .8 rg
n 306 84 78 12 re f*
.933333 1 .8 rg
n 384 84 6 12 re f*
.933333 1 .8 rg
n 396 84 78 12 re f*
.933333 1 .8 rg
n 474 84 6 12 re f*
.933333 1 .8 rg
n 486 84 96 12 re f*
.933333 1 .8 rg
n 582 84 12 12 re f*
.933333 1 .8 rg
n 78 72 36 12 re f*
.933333 1 .8 rg
n 120 72 6 12 re f*
.933333 1 .8 rg
n 132 72 6 12 re f*
.933333 1 .8 rg
n 138 72 6 12 re f*
.933333 1 .8 rg
n 144 72 6 12 re f*
.933333 1 .8 rg
n 150 72 54 12 re f*
.933333 1 .8 rg
n 204 72 12 12 re f*
.933333 1 .8 rg
n 216 72 6 12 re f*
.933333 1 .8 rg
n 222 72 18 12 re f*
.933333 1 .8 rg
n 240 72 6 12 re f*
.933333 1 .8 rg
n 252 72 6 12 re f*
.933333 1 .8 rg
n 258 72 6 12 re f*
.933333 1 .8 rg
n 264 72 54 12 re f*
.933333 1 .8 rg
n 318 72 12 12 re f*
.933333 1 .8 rg
n 330 72 6 12 re f*
.933333 1 .8 rg
n 336 72 24 12 re f*
.933333 1 .8 rg
n 360 72 6 12 re f*
.933333 1 .8 rg
n 372 72 6 12 re f*
.933333 1 .8 rg
n 378 72 6 12 re f*
.933333 1 .8 rg
n 384 72 54 12 re f*
.933333 1 .8 rg
n 438 72 12 12 re f*
.933333 1 .8 rg
n 450 72 6 12 re f*
.933333 1 .8 rg
n 456 72 18 12 re f*
.933333 1 .8 rg
n 474 72 6 12 re f*
.933333 1 .8 rg
n 486 72 6 12 re f*
.933333 1 .8 rg
n 492 72 6 12 re f*
.933333 1 .8 rg
n 498 72 54 12 re f*
.933333 1 .8 rg
n 552 72 12 12 re f*
.933333 1 .8 rg
n 564 72 6 12 re f*
.933333 1 .8 rg
n 570 72 18 12 re f*
.933333 1 .8 rg
n 588 72 6 12 re f*
.933333 1 .8 rg
n 600 72 6 12 re f*
.933333 1 .8 rg
n 606 72 6 12 re f*
.933333 1 .8 rg
n 612 72 54 12 re f*
.933333 1 .8 rg
n 666 72 12 12 re f*
.933333 1 .8 rg
n 678 72 6 12 re f*
.933333 1 .8 rg
n 684 72 36 12 re f*
.933333 1 .8 rg
n 720 72 12 12 re f*
.933333 1 .8 rg
n 732 72 6 12 re f*
.933333 1 .8 rg
n 738 72 12 12 re f*
.933333 1 .8 rg
n 750 72 6 12 re f*
.933333 1 .8 rg
n 756 72 36 12 re f*
.933333 1 .8 rg
n 798 72 6 12 re f*
.933333 1 .8 rg
n 804 72 6 12 re f*
.933333 1 .8 rg
n 816 72 30 12 re f*
.933333 1 .8 rg
n 846 72 6 12 re f*
.933333 1 .8 rg
n 852 72 6 12 re f*
.933333 1 .8 rg
n 858 72 6 12 re f*
.933333 1 .8 rg
n 870 72 6 12 re f*
.933333 1 .8 rg
n 882 72 6 12 re f*
.933333 1 .8 rg
n 894 72 18 12 re f*
.933333 1 .8 rg
n 912 72 6 12 re f*
.933333 1 .8 rg
n 924 72 24 12 re f*
.933333 1 .8 rg
n 954 72 6 12 re f*
.933333 1 .8 rg
n 966 72 24 12 re f*
.933333 1 .8 rg
n 990 72 12 12 re f*
1 .941176 .941176 rg
n 1008 72 30 12 re f*
.933333 1 .8 rg
n 1038 72 6 12 re f*
1 .941176 .941176 rg
n 1050 72 48 12 re f*
.933333 1 .8 rg
n 1098 72 12 12 re f*
.933333 1 .8 rg
n 1110 72 18 12 re f*
.933333 1 .8 rg
n 1134 72 6 12 re f*
.933333 1 .8 rg
n 1146 72 36 12 re f*
.933333 1 .8 rg
n 1188 72 18 12 re f*
.933333 1 .8 rg
n 1206 72 6 12 re f*
.933333 1 .8 rg
n 1218 72 18 12 re f*
.933333 1 .8 rg
n 1236 72 6 12 re f*
.933333 1 .8 rg
n 1242 72 6 12 re f*
.933333 1 .8 rg
n 1248 72 18 12 re f*
.933333 1 .8 rg
n 1266 72 36 12 re f*
.933333 1 .8 rg
n 1308 72 6 12 re f*
.933333 1 .8 rg
n 1320 72 36 12 re f*
.933333 1 .8 rg
n 1362 72 36 12 re f*
.933333 1 .8 rg
n 1398 72 6 12 re f*
.933333 1 .8 rg
n 1410 72 36 12 re f*
.933333 1 .8 rg
n 1446 72 18 12 re f*
.933333 1 .8 rg
n 0 48 42 12 re f*
.933333 1 .8 rg
n 48 48 12 12 re f*
.933333 1 .8 rg
n 66 48 48 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 120 48 12 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
1 .941176 .941176 rg
n 162 48 36 12 re f*
.933333 1 .8 rg
n 198 48 6 12 re f*
1 .941176 .941176 rg
n 210 48 48 12 re f*
.933333 1 .8 rg
n 258 48 6 12 re f*
1 .941176 .941176 rg
n 270 48 48 12 re f*
.933333 1 .8 rg
n 318 48 12 12 re f*
.933333 1 .8 rg
n 78 36 18 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 24 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 156 36 36 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 204 36 36 12 re f*
.933333 1 .8 rg
n 240 36 12 12 re f*
.933333 1 .8 rg
n 78 24 36 12 re f*
.933333 1 .8 rg
n 120 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 18 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 174 24 12 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 198 24 24 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 246 24 18 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
.933333 1 .8 rg
n 270 24 12 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 288 24 6 12 re f*
.933333 1 .8 rg
n 294 24 18 12 re f*
.933333 1 .8 rg
n 312 24 6 12 re f*
.933333 1 .8 rg
n 324 24 6 12 re f*
.933333 1 .8 rg
n 330 24 6 12 re f*
.933333 1 .8 rg
n 336 24 18 12 re f*
.933333 1 .8 rg
n 354 24 6 12 re f*
.933333 1 .8 rg
n 360 24 12 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 378 24 6 12 re f*
.933333 1 .8 rg
n 384 24 18 12 re f*
.933333 1 .8 rg
n 402 24 12 12 re f*
.933333 1 .8 rg
n 414 24 6 12 re f*
.933333 1 .8 rg
n 420 24 12 12 re f*
.933333 1 .8 rg
n 432 24 6 12 re f*
.933333 1 .8 rg
n 438 24 36 12 re f*
.933333 1 .8 rg
n 480 24 6 12 re f*
.933333 1 .8 rg
n 486 24 6 12 re f*
.933333 1 .8 rg
n 498 24 30 12 re f*
.933333 1 .8 rg
n 528 24 6 12 re f*
.933333 1 .8 rg
n 534 24 6 12 re f*
.933333 1 .8 rg
n 540 24 6 12 re f*
.933333 1 .8 rg
n 552 24 6 12 re f*
.933333 1 .8 rg
n 564 24 6 12 re f*
.933333 1 .8 rg
n 576 24 18 12 re f*
.933333 1 .8 rg
n 594 24 6 12 re f*
.933333 1 .8 rg
n 606 24 24 12 re f*
.933333 1 .8 rg
n 636 24 6 12 re f*
.933333 1 .8 rg
n 648 24 24 12 re f*
.933333 1 .8 rg
n 672 24 12 12 re f*
1 .941176 .941176 rg
n 690 24 30 12 re f*
.933333 1 .8 rg
n 720 24 6 12 re f*
1 .941176 .941176 rg
n 732 24 48 12 re f*
.933333 1 .8 rg
n 780 24 12 12 re f*
.933333 1 .8 rg
n 792 24 18 12 re f*
.933333 1 .8 rg
n 816 24 6 12 re f*
.933333 1 .8 rg
n 828 24 36 12 re f*
.933333 1 .8 rg
n 870 24 18 12 re f*
.933333 1 .8 rg
n 888 24 6 12 re f*
.933333 1 .8 rg
n 900 24 18 12 re f*
.933333 1 .8 rg
n 918 24 6 12 re f*
.933333 1 .8 rg
n 924 24 6 12 re f*
.933333 1 .8 rg
n 930 24 6 12 re f*
.933333 1 .8 rg
n 942 24 12 12 re f*
.933333 1 .8 rg
n 954 24 18 12 re f*
.933333 1 .8 rg
n 972 24 36 12 re f*
.933333 1 .8 rg
n 1014 24 6 12 re f*
.933333 1 .8 rg
n 1026 24 36 12 re f*
.933333 1 .8 rg
n 1068 24 36 12 re f*
.933333 1 .8 rg
n 1104 24 6 12 re f*
.933333 1 .8 rg
n 1116 24 36 12 re f*
.933333 1 .8 rg
n 1152 24 18 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 42 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 138 0 36 12 re f*
.933333 1 .8 rg
n 180 0 18 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 36 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
1 .941176 .941176 rg
n 258 0 30 12 re f*
.933333 1 .8 rg
n 294 0 12 12 re f*
.933333 1 .8 rg
n 312 0 18 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 336 0 36 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 18 12 re f*
.933333 1 .8 rg
n 414 0 24 12 re f*
1 .941176 .941176 rg
n 444 0 48 12 re f*
.933333 1 .8 rg
n 498 0 12 12 re f*
.933333 1 .8 rg
n 516 0 18 12 re f*
.933333 1 .8 rg
n 540 0 6 12 re f*
.933333 1 .8 rg
n 552 0 18 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
.933333 1 .8 rg
n 588 0 36 12 re f*
.933333 1 .8 rg
n 630 0 24 12 re f*
1 .941176 .941176 rg
n 660 0 36 12 re f*
.933333 1 .8 rg
n 696 0 12 12 re f*
BT 1 0 0 1 0 146 Tm 12 TL /F5 10 Tf 0 0 0 rg (compare) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (op) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg (  ) Tj ([) Tj .729412 .129412 .129412 rg ('rolling_sum') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('rolling_mean') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('rolling_std') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('rolling_min') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('rolling_median') Tj 0 0 0 rg (],) Tj  T* (             ) Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (rolling_sum) Tj (,) Tj ( ) Tj (rolling_mean) Tj (,) Tj ( ) Tj (rolling_std) Tj (,) Tj ( ) Tj (rolling_min) Tj (,) Tj ( ) Tj (rolling_median) Tj (],) Tj  T* (             ) Tj (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sum) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (min) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (rolling) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (median) Tj (]\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (v) Tj (:) Tj ( ) Tj (timer) Tj (\() Tj (v) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj .729412 .129412 .129412 rg ('pyg') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('pandas') Tj 0 0 0 rg (\)\() Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pyg) Tj (:) Tj ( ) Tj (pyg) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)\() Tj (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pandas) Tj (:) Tj ( ) Tj (pandas) Tj (\(\)\)) Tj  T*  T* (compare) Tj ( ) Tj .188235 .188235 .188235 rg (+=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (op) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg (  ) Tj ([) Tj .729412 .129412 .129412 rg ('expanding_sum') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('expanding_mean') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('expanding_std') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('expanding_min') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('expanding_median') Tj 0 0 0 rg (],) Tj  T* (             ) Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (expanding_sum) Tj (,) Tj ( ) Tj (expanding_mean) Tj (,) Tj ( ) Tj (expanding_std) Tj (,) Tj ( ) Tj (expanding_min) Tj (,) Tj ( ) Tj (expanding_median) Tj (],) Tj  T* (             ) Tj (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (sum) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (min) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (expanding) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (median) Tj (]\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (v) Tj (:) Tj ( ) Tj (timer) Tj (\() Tj (v) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj .729412 .129412 .129412 rg ('pyg') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('pandas') Tj 0 0 0 rg (\)\() Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pyg) Tj (:) Tj ( ) Tj (pyg) Tj (\() Tj (s) Tj (\)\)\() Tj (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pandas) Tj (:) Tj ( ) Tj (pandas) Tj (\(\)\)) Tj  T*  T* (compare) Tj ( ) Tj .188235 .188235 .188235 rg (+=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (op) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg (  ) Tj ([) Tj .729412 .129412 .129412 rg ('ewma') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ewmstd') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('ewmvar') Tj 0 0 0 rg (],) Tj  T* (             ) Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (ewma) Tj (,) Tj ( ) Tj (ewmstd) Tj (,) Tj ( ) Tj (ewmvar) Tj (],) Tj  T* (             ) Tj (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (std) Tj (,) Tj ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (var) Tj (]\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (v) Tj (:) Tj ( ) Tj (timer) Tj (\() Tj (v) Tj (,) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj .729412 .129412 .129412 rg ('pyg') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('pandas') Tj 0 0 0 rg (\)\() Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pyg) Tj (:) Tj ( ) Tj (pyg) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)\() Tj (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pandas) Tj (:) Tj ( ) Tj (pandas) Tj (\(\)\)) Tj  T*  T* 0 .439216 .12549 rg (print) Tj 0 0 0 rg (\() Tj (compare) Tj (\() Tj (winner) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pyg) Tj (,) Tj ( ) Tj (pandas) Tj (:) Tj ( ) Tj .729412 .129412 .129412 rg ('pyg') Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pyg) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg (pandas) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (0.8) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('pandas') Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (pyg) Tj ( ) Tj .188235 .188235 .188235 rg (>) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1.2) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (pandas) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('draw') Tj 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 227.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (pyg and numpy arrays) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 209.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg supports numpy arrays natively. Indeed, pyg is 3-5 times faster on numpy arrays.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 131.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 6 12 re f*
.933333 1 .8 rg
n 12 60 6 12 re f*
.933333 1 .8 rg
n 24 60 6 12 re f*
.933333 1 .8 rg
n 30 60 6 12 re f*
.933333 1 .8 rg
n 36 60 36 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 18 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 48 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 120 48 6 12 re f*
.933333 1 .8 rg
n 126 48 6 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 150 48 48 12 re f*
.933333 1 .8 rg
n 198 48 6 12 re f*
.933333 1 .8 rg
n 204 48 6 12 re f*
.933333 1 .8 rg
n 210 48 12 12 re f*
.933333 1 .8 rg
n 222 48 6 12 re f*
.933333 1 .8 rg
n 234 48 30 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 42 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 6 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 144 36 42 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 198 36 12 12 re f*
.933333 1 .8 rg
n 222 36 6 12 re f*
.933333 1 .8 rg
n 234 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 36 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 144 24 36 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 12 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 234 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 36 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 144 12 36 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 12 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 234 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 42 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 42 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 12 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 234 0 30 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (s) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ts_count) Tj (\() Tj (a) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_count) Tj (\() Tj (s) Tj (\)\)) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ts_mean) Tj (\() Tj (a) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_mean) Tj (\() Tj (s) Tj (\)\)) Tj (  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ts_sum) Tj (\() Tj (a) Tj (\)) Tj (  ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_sum) Tj (\() Tj (s) Tj (\)\)) Tj (   ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ts_std) Tj (\() Tj (a) Tj (\)) Tj (  ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_std) Tj (\() Tj (s) Tj (\)\)) Tj (   ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ts_skew) Tj (\() Tj (a) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ts_skew) Tj (\() Tj (s) Tj (\)\)) Tj (  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 68.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 24 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 102 36 6 12 re f*
.933333 1 .8 rg
n 114 36 12 12 re f*
.933333 1 .8 rg
n 126 36 6 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 150 36 24 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
.933333 1 .8 rg
n 180 36 6 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 192 36 12 12 re f*
.933333 1 .8 rg
n 204 36 12 12 re f*
.933333 1 .8 rg
n 216 36 6 12 re f*
.933333 1 .8 rg
n 222 36 18 12 re f*
.933333 1 .8 rg
n 240 36 12 12 re f*
.933333 1 .8 rg
n 372 36 6 12 re f*
.933333 1 .8 rg
n 384 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 36 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 126 24 12 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 162 24 36 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 12 12 re f*
.933333 1 .8 rg
n 228 24 12 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 246 24 18 12 re f*
.933333 1 .8 rg
n 264 24 12 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 384 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 36 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 12 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 36 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 12 12 re f*
.933333 1 .8 rg
n 228 12 12 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 246 12 18 12 re f*
.933333 1 .8 rg
n 264 12 12 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
.933333 1 .8 rg
n 384 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 144 0 12 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 180 0 36 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 252 0 36 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 300 0 12 12 re f*
.933333 1 .8 rg
n 312 0 12 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 18 12 re f*
.933333 1 .8 rg
n 348 0 12 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 384 0 30 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewma) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                    ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewmstd) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ewmstd) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewmvar) Tj (\() Tj (s) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ewmvar) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (                ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (ewmcor) Tj (\() Tj (s) Tj (,) Tj ( ) Tj (t) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (ewmcor) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (  ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (131) Tj T* ET
Q
Q
 
endstream
endobj
1102 0 obj
<<
/Length 32246
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 696.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 36 12 re f*
.933333 1 .8 rg
n 42 72 18 12 re f*
.933333 1 .8 rg
n 60 72 6 12 re f*
.933333 1 .8 rg
n 66 72 78 12 re f*
.933333 1 .8 rg
n 144 72 6 12 re f*
.933333 1 .8 rg
n 150 72 6 12 re f*
.933333 1 .8 rg
n 156 72 6 12 re f*
.933333 1 .8 rg
n 168 72 6 12 re f*
.933333 1 .8 rg
n 180 72 78 12 re f*
.933333 1 .8 rg
n 258 72 6 12 re f*
.933333 1 .8 rg
n 264 72 6 12 re f*
.933333 1 .8 rg
n 270 72 12 12 re f*
.933333 1 .8 rg
n 282 72 6 12 re f*
.933333 1 .8 rg
n 288 72 18 12 re f*
.933333 1 .8 rg
n 306 72 12 12 re f*
.933333 1 .8 rg
n 408 72 6 12 re f*
.933333 1 .8 rg
n 420 72 30 12 re f*
.933333 1 .8 rg
n 0 60 36 12 re f*
.933333 1 .8 rg
n 42 60 18 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 78 12 re f*
.933333 1 .8 rg
n 144 60 6 12 re f*
.933333 1 .8 rg
n 150 60 6 12 re f*
.933333 1 .8 rg
n 156 60 6 12 re f*
.933333 1 .8 rg
n 168 60 6 12 re f*
.933333 1 .8 rg
n 180 60 78 12 re f*
.933333 1 .8 rg
n 258 60 6 12 re f*
.933333 1 .8 rg
n 264 60 6 12 re f*
.933333 1 .8 rg
n 270 60 12 12 re f*
.933333 1 .8 rg
n 282 60 6 12 re f*
.933333 1 .8 rg
n 288 60 18 12 re f*
.933333 1 .8 rg
n 306 60 12 12 re f*
.933333 1 .8 rg
n 408 60 6 12 re f*
.933333 1 .8 rg
n 420 60 30 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 18 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 78 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 150 48 6 12 re f*
.933333 1 .8 rg
n 156 48 6 12 re f*
.933333 1 .8 rg
n 168 48 6 12 re f*
.933333 1 .8 rg
n 180 48 78 12 re f*
.933333 1 .8 rg
n 258 48 6 12 re f*
.933333 1 .8 rg
n 264 48 6 12 re f*
.933333 1 .8 rg
n 270 48 12 12 re f*
.933333 1 .8 rg
n 282 48 6 12 re f*
.933333 1 .8 rg
n 288 48 18 12 re f*
.933333 1 .8 rg
n 306 48 12 12 re f*
.933333 1 .8 rg
n 408 48 6 12 re f*
.933333 1 .8 rg
n 420 48 30 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 84 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 6 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
.933333 1 .8 rg
n 186 36 84 12 re f*
.933333 1 .8 rg
n 270 36 6 12 re f*
.933333 1 .8 rg
n 276 36 6 12 re f*
.933333 1 .8 rg
n 282 36 12 12 re f*
.933333 1 .8 rg
n 294 36 6 12 re f*
.933333 1 .8 rg
n 300 36 18 12 re f*
.933333 1 .8 rg
n 318 36 12 12 re f*
.933333 1 .8 rg
n 408 36 6 12 re f*
.933333 1 .8 rg
n 420 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 78 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 180 24 78 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
.933333 1 .8 rg
n 270 24 12 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 288 24 18 12 re f*
.933333 1 .8 rg
n 306 24 12 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 420 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 84 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 84 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 282 12 12 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 300 12 18 12 re f*
.933333 1 .8 rg
n 318 12 12 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 420 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 96 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 96 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 12 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 324 0 18 12 re f*
.933333 1 .8 rg
n 342 0 12 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
.933333 1 .8 rg
n 420 0 30 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_sum) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_sum) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_min) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_min) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_max) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_max) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_mean) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_mean) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (             ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_std) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_std) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_skew) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_skew) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (             ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (expanding_median) Tj (\() Tj (s) Tj (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (expanding_median) Tj (\() Tj (a) Tj (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (         ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 597.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
.933333 1 .8 rg
n 0 72 36 12 re f*
.933333 1 .8 rg
n 42 72 18 12 re f*
.933333 1 .8 rg
n 60 72 6 12 re f*
.933333 1 .8 rg
n 66 72 66 12 re f*
.933333 1 .8 rg
n 132 72 6 12 re f*
.933333 1 .8 rg
n 138 72 6 12 re f*
.933333 1 .8 rg
n 144 72 6 12 re f*
.933333 1 .8 rg
n 150 72 12 12 re f*
.933333 1 .8 rg
n 162 72 6 12 re f*
.933333 1 .8 rg
n 174 72 6 12 re f*
.933333 1 .8 rg
n 186 72 66 12 re f*
.933333 1 .8 rg
n 252 72 6 12 re f*
.933333 1 .8 rg
n 258 72 6 12 re f*
.933333 1 .8 rg
n 264 72 6 12 re f*
.933333 1 .8 rg
n 270 72 12 12 re f*
.933333 1 .8 rg
n 282 72 12 12 re f*
.933333 1 .8 rg
n 294 72 6 12 re f*
.933333 1 .8 rg
n 300 72 18 12 re f*
.933333 1 .8 rg
n 318 72 12 12 re f*
.933333 1 .8 rg
n 420 72 6 12 re f*
.933333 1 .8 rg
n 432 72 30 12 re f*
.933333 1 .8 rg
n 0 60 36 12 re f*
.933333 1 .8 rg
n 42 60 18 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 66 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 138 60 6 12 re f*
.933333 1 .8 rg
n 144 60 6 12 re f*
.933333 1 .8 rg
n 150 60 12 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 174 60 6 12 re f*
.933333 1 .8 rg
n 186 60 66 12 re f*
.933333 1 .8 rg
n 252 60 6 12 re f*
.933333 1 .8 rg
n 258 60 6 12 re f*
.933333 1 .8 rg
n 264 60 6 12 re f*
.933333 1 .8 rg
n 270 60 12 12 re f*
.933333 1 .8 rg
n 282 60 12 12 re f*
.933333 1 .8 rg
n 294 60 6 12 re f*
.933333 1 .8 rg
n 300 60 18 12 re f*
.933333 1 .8 rg
n 318 60 12 12 re f*
.933333 1 .8 rg
n 420 60 6 12 re f*
.933333 1 .8 rg
n 432 60 30 12 re f*
.933333 1 .8 rg
n 0 48 36 12 re f*
.933333 1 .8 rg
n 42 48 18 12 re f*
.933333 1 .8 rg
n 60 48 6 12 re f*
.933333 1 .8 rg
n 66 48 66 12 re f*
.933333 1 .8 rg
n 132 48 6 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 144 48 6 12 re f*
.933333 1 .8 rg
n 150 48 12 12 re f*
.933333 1 .8 rg
n 162 48 6 12 re f*
.933333 1 .8 rg
n 174 48 6 12 re f*
.933333 1 .8 rg
n 186 48 66 12 re f*
.933333 1 .8 rg
n 252 48 6 12 re f*
.933333 1 .8 rg
n 258 48 6 12 re f*
.933333 1 .8 rg
n 264 48 6 12 re f*
.933333 1 .8 rg
n 270 48 12 12 re f*
.933333 1 .8 rg
n 282 48 12 12 re f*
.933333 1 .8 rg
n 294 48 6 12 re f*
.933333 1 .8 rg
n 300 48 18 12 re f*
.933333 1 .8 rg
n 318 48 12 12 re f*
.933333 1 .8 rg
n 420 48 6 12 re f*
.933333 1 .8 rg
n 432 48 30 12 re f*
.933333 1 .8 rg
n 0 36 36 12 re f*
.933333 1 .8 rg
n 42 36 18 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 66 36 72 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 12 12 re f*
.933333 1 .8 rg
n 168 36 6 12 re f*
.933333 1 .8 rg
n 180 36 6 12 re f*
.933333 1 .8 rg
n 192 36 72 12 re f*
.933333 1 .8 rg
n 264 36 6 12 re f*
.933333 1 .8 rg
n 270 36 6 12 re f*
.933333 1 .8 rg
n 276 36 6 12 re f*
.933333 1 .8 rg
n 282 36 12 12 re f*
.933333 1 .8 rg
n 294 36 12 12 re f*
.933333 1 .8 rg
n 306 36 6 12 re f*
.933333 1 .8 rg
n 312 36 18 12 re f*
.933333 1 .8 rg
n 330 36 12 12 re f*
.933333 1 .8 rg
n 420 36 6 12 re f*
.933333 1 .8 rg
n 432 36 30 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 18 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 66 24 66 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 186 24 66 12 re f*
.933333 1 .8 rg
n 252 24 6 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
.933333 1 .8 rg
n 270 24 12 12 re f*
.933333 1 .8 rg
n 282 24 12 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 18 12 re f*
.933333 1 .8 rg
n 318 24 12 12 re f*
.933333 1 .8 rg
n 420 24 6 12 re f*
.933333 1 .8 rg
n 432 24 30 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 72 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 72 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 270 12 6 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 282 12 12 12 re f*
.933333 1 .8 rg
n 294 12 12 12 re f*
.933333 1 .8 rg
n 306 12 6 12 re f*
.933333 1 .8 rg
n 312 12 18 12 re f*
.933333 1 .8 rg
n 330 12 12 12 re f*
.933333 1 .8 rg
n 420 12 6 12 re f*
.933333 1 .8 rg
n 432 12 30 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 18 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 84 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 12 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 204 0 84 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 6 12 re f*
.933333 1 .8 rg
n 306 0 12 12 re f*
.933333 1 .8 rg
n 318 0 12 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 336 0 18 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 432 0 30 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_sum) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_sum) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_min) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_min) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_max) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_max) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_mean) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_mean) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (             ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_std) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_std) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (               ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_skew) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_skew) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (             ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (rolling_median) Tj (\() Tj (s) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (rolling_median) Tj (\() Tj (a) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj (         ) Tj .188235 .188235 .188235 rg (<) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 564.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (pandas treatment of nan) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Suppose we have weekly data that at some point we resample to daily\205 The two look the same\205) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 479.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 556 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 12 12 re f*
.933333 1 .8 rg
n 18 48 6 12 re f*
.933333 1 .8 rg
n 30 48 42 12 re f*
.933333 1 .8 rg
n 72 48 6 12 re f*
1 .941176 .941176 rg
n 78 48 60 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
1 .941176 .941176 rg
n 150 48 42 12 re f*
.933333 1 .8 rg
n 192 48 6 12 re f*
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 6 12 re f*
.933333 1 .8 rg
n 42 36 36 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 84 36 12 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
1 .941176 .941176 rg
n 102 36 60 12 re f*
.933333 1 .8 rg
n 162 36 6 12 re f*
1 .941176 .941176 rg
n 168 36 24 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 54 24 12 12 re f*
.933333 1 .8 rg
n 66 24 6 12 re f*
.933333 1 .8 rg
n 72 24 36 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 12 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 36 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
.933333 1 .8 rg
n 174 24 36 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 240 24 24 12 re f*
.933333 1 .8 rg
n 264 24 12 12 re f*
.933333 1 .8 rg
n 282 24 36 12 re f*
.933333 1 .8 rg
n 318 24 6 12 re f*
.933333 1 .8 rg
n 324 24 12 12 re f*
.933333 1 .8 rg
n 336 24 6 12 re f*
.933333 1 .8 rg
n 342 24 24 12 re f*
.933333 1 .8 rg
n 366 24 6 12 re f*
1 .941176 .941176 rg
n 372 24 24 12 re f*
.933333 1 .8 rg
n 396 24 18 12 re f*
.933333 1 .8 rg
n 420 24 36 12 re f*
.933333 1 .8 rg
n 456 24 6 12 re f*
.933333 1 .8 rg
n 462 24 24 12 re f*
.933333 1 .8 rg
n 492 24 6 12 re f*
1 .941176 .941176 rg
n 504 24 48 12 re f*
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 36 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 42 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 24 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 180 12 30 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 24 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
1 .941176 .941176 rg
n 258 12 42 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 30 12 re f*
.933333 1 .8 rg
n 138 0 12 12 re f*
.933333 1 .8 rg
n 156 0 24 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (t0) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dt_bump) Tj (\() Tj .729412 .129412 .129412 rg ('20210301') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('-999w') Tj 0 0 0 rg (\)) Tj  T* (days) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (drange) Tj (\() Tj (t0) Tj (,) Tj .729412 .129412 .129412 rg ('20210301') Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ('1b') Tj 0 0 0 rg (\)) Tj  T* (weekly) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj (t0) Tj (,) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ('1w') Tj 0 0 0 rg (\)\);) Tj ( ) Tj (weekly) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('weekly') Tj 0 0 0 rg  T* (daily) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (weekly) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (\);) Tj ( ) Tj (daily) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('daily') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (weekly) Tj (,) Tj (daily) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 447.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.641205 Tw (\205 but any calculation using the daily will yield a different result from a calculation on the weekly which is then) Tj T* 0 Tw (resampled to daily:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 429.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 754 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 18 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 24 12 re f*
.933333 1 .8 rg
n 174 0 12 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 42 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 24 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 282 0 30 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 318 0 18 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 6 12 re f*
.933333 1 .8 rg
n 360 0 24 12 re f*
.933333 1 .8 rg
n 384 0 24 12 re f*
.933333 1 .8 rg
n 414 0 24 12 re f*
.933333 1 .8 rg
n 444 0 6 12 re f*
.933333 1 .8 rg
n 456 0 6 12 re f*
.933333 1 .8 rg
n 462 0 6 12 re f*
.933333 1 .8 rg
n 474 0 276 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (weekly) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (\),) Tj ( ) Tj (daily) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## The result depends on what is done first...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 402.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 670 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 108 0 24 12 re f*
.933333 1 .8 rg
n 132 0 12 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 42 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 24 12 re f*
.933333 1 .8 rg
n 222 0 12 12 re f*
.933333 1 .8 rg
n 240 0 30 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 24 12 re f*
.933333 1 .8 rg
n 300 0 24 12 re f*
.933333 1 .8 rg
n 330 0 24 12 re f*
.933333 1 .8 rg
n 360 0 6 12 re f*
.933333 1 .8 rg
n 372 0 6 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 276 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (weekly) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (diff) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (\),) Tj ( ) Tj (daily) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (diff) Tj (\(\)],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## The result depends on what is done first...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 382.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Indeed, for diff, daily.diff\(\) is all nan!) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 349.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (pyg.timeseries treatment of nans) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 319.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .360178 Tw (pyg treats nan as if they are not there, so the fact that we resampled the data and introduced lots of nan\222s does not) Tj T* 0 Tw (affect the calculations. We find this to be a more logical \(and less error prone\) approach.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 300.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 592 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 36 12 re f*
.933333 1 .8 rg
n 84 0 12 12 re f*
.933333 1 .8 rg
n 96 0 24 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 36 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 174 0 6 12 re f*
.933333 1 .8 rg
n 180 0 6 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 192 0 42 12 re f*
.933333 1 .8 rg
n 234 0 6 12 re f*
.933333 1 .8 rg
n 240 0 24 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 282 0 24 12 re f*
.933333 1 .8 rg
n 306 0 6 12 re f*
.933333 1 .8 rg
n 312 0 30 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 348 0 6 12 re f*
.933333 1 .8 rg
n 354 0 18 12 re f*
.933333 1 .8 rg
n 378 0 24 12 re f*
.933333 1 .8 rg
n 408 0 6 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 426 0 12 12 re f*
.933333 1 .8 rg
n 444 0 144 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (nona) Tj (\() Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (ewma) Tj (\() Tj (weekly) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (\),) Tj ( ) Tj (ewma) Tj (\() Tj (daily) Tj (,) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## The two match exactly) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 273.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 694 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 24 12 re f*
.933333 1 .8 rg
n 24 0 6 12 re f*
.933333 1 .8 rg
n 30 0 12 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 36 12 re f*
.933333 1 .8 rg
n 84 0 12 12 re f*
.933333 1 .8 rg
n 96 0 24 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 36 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 42 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 246 0 12 12 re f*
.933333 1 .8 rg
n 264 0 24 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 30 12 re f*
.933333 1 .8 rg
n 324 0 18 12 re f*
.933333 1 .8 rg
n 348 0 24 12 re f*
.933333 1 .8 rg
n 378 0 6 12 re f*
.933333 1 .8 rg
n 390 0 6 12 re f*
.933333 1 .8 rg
n 396 0 12 12 re f*
.933333 1 .8 rg
n 414 0 276 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (nona) Tj (\() Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (diff) Tj (\() Tj (weekly) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (\),) Tj ( ) Tj (diff) Tj (\() Tj (daily) Tj (\)],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## The result depends on what is done first...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 241.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (Using pyg.timeseries to manage state) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 187.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .469689 Tw (One of the problem in timeseries analysis is writing research code that works in analysing past data but ideally, the) Tj T* 0 Tw .958822 Tw (same code can be used in live application. One easy approach is \223stick the extra data point at the end and run it) Tj T* 0 Tw .318766 Tw (again from 1980\224. This leaves us with a single code base but for many live applications \(e.g. live trading\), this is not) Tj T* 0 Tw (viable.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 145.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .401339 Tw (Further, given our positions today, we may want to run simulations of \223what happens next?\224 to understand what the) Tj T* 0 Tw .460829 Tw (system is likely to do should various events occur. Risk calculations are expensive and re-running 10k Monte Carlo) Tj T* 0 Tw (scenarios, each time running from 1980 is expensive.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 115.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .264947 Tw (Conversely, we can run research and live systems on two separate code base. This makes live systems responsive) Tj T* 0 Tw (but six months down the line, we realise research code base and live code base did not do quite the same thing.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 97.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg approaches this problem by exposing the internal state of each of its calculation. Each function has two versions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 91.03937 cm
Q
q
1 0 0 1 40.01575 91.03937 cm
Q
q
1 0 0 1 40.01575 79.03937 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (function\(\205\) returns the calculation as performed by pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 73.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (132) Tj T* ET
Q
Q
 
endstream
endobj
1103 0 obj
<<
/Length 24906
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .156705 Tw (function_\(\205\) returns a dictionary of dict\(data = , state = \). The data agrees with function\(\205\) while the state is a) Tj T* 0 Tw (dict we can instantiate new calculations with.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 763.0394 cm
Q
q
1 0 0 1 40.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 622 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 18 12 re f*
.933333 1 .8 rg
n 54 36 36 12 re f*
.933333 1 .8 rg
n 96 36 6 12 re f*
.933333 1 .8 rg
n 0 24 42 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 60 24 12 12 re f*
.933333 1 .8 rg
n 72 24 6 12 re f*
.933333 1 .8 rg
n 78 24 36 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 12 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 36 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 180 24 36 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 246 24 24 12 re f*
.933333 1 .8 rg
n 270 24 12 12 re f*
.933333 1 .8 rg
n 288 24 36 12 re f*
.933333 1 .8 rg
n 324 24 6 12 re f*
.933333 1 .8 rg
n 330 24 6 12 re f*
.933333 1 .8 rg
n 336 24 24 12 re f*
.933333 1 .8 rg
n 360 24 6 12 re f*
.933333 1 .8 rg
n 366 24 6 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 378 24 12 12 re f*
.933333 1 .8 rg
n 0 12 84 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 102 12 30 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 42 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 12 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 0 0 84 12 re f*
.933333 1 .8 rg
n 90 0 528 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* (history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj /F5 10 Tf 0 0 0 rg (,) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (history_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma_) Tj (\() Tj (history) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (history_signal) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# The output consists of 'data' and 'state' where data matches a normal ewma calculation) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 657.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 556 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 24 12 re f*
.933333 1 .8 rg
n 30 24 6 12 re f*
.933333 1 .8 rg
n 42 24 12 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 60 24 36 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 12 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 36 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 162 24 36 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 216 24 6 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 228 24 12 12 re f*
.933333 1 .8 rg
n 240 24 12 12 re f*
.933333 1 .8 rg
n 258 24 36 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 6 12 re f*
.933333 1 .8 rg
n 306 24 12 12 re f*
.933333 1 .8 rg
n 0 12 66 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 84 12 24 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 114 12 24 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 12 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 30 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 84 12 re f*
.933333 1 .8 rg
n 306 12 6 12 re f*
.933333 1 .8 rg
n 312 12 30 12 re f*
.933333 1 .8 rg
n 342 12 6 12 re f*
.933333 1 .8 rg
n 354 12 198 12 re f*
1 .941176 .941176 rg
n 0 0 156 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 66 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (live) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (9) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (live_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (live) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (history_signal) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## I only feed in live timeseries) Tj /F5 10 Tf 0 0 0 rg  T* .729412 .129412 .129412 rg ('live: from today onwards') Tj 0 0 0 rg (,) Tj ( ) Tj (live_signal) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 594.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 820 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 60 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 78 36 12 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 36 12 re f*
.933333 1 .8 rg
n 132 36 12 12 re f*
.933333 1 .8 rg
n 144 36 42 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 198 36 24 12 re f*
.933333 1 .8 rg
n 222 36 12 12 re f*
.933333 1 .8 rg
n 0 24 72 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 90 24 24 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 60 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 12 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 12 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 66 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 72 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 12 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 240 12 24 12 re f*
.933333 1 .8 rg
n 276 12 540 12 re f*
.933333 1 .8 rg
n 0 0 72 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 78 0 12 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 18 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (joint_data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (history) Tj (,) Tj ( ) Tj (live) Tj (]\)) Tj  T* (joint_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (joint_data) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (eq) Tj (\() Tj (live_signal) Tj (,) Tj ( ) Tj (joint_signal) Tj ([) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (\):]\)) Tj (  ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# The live signal is the same, even though it only received live data for its calculation.) Tj /F5 10 Tf 0 0 0 rg  T* (joint_signal) Tj ([) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (\):]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 574.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This allows us to set up three parallel pipelines that share a virtually identical codebase:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 568.6394 cm
Q
q
1 0 0 1 40.01575 444.6394 cm
q
1 1 1 rg
n 0 124 515.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 108 515.2441 -18 re f*
1 1 1 rg
n 0 90 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 72 515.2441 -18 re f*
1 1 1 rg
n 0 54 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 515.2441 -18 re f*
1 1 1 rg
n 0 18 515.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 124 515.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 111 cm
q
.960784 .960784 .862745 rg
n 0 0 98.40945 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 27.53472 0 Td (workflow) Tj T* -27.53472 0 Td ET
Q
Q
q
1 0 0 1 116.4094 111 cm
q
.960784 .960784 .862745 rg
n 0 0 135.2126 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 37.8763 0 Td (historic data) Tj T* -37.8763 0 Td ET
Q
Q
q
1 0 0 1 263.622 111 cm
q
.960784 .960784 .862745 rg
n 0 0 142.5732 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 51.27661 0 Td (live data) Tj T* -51.27661 0 Td ET
Q
Q
q
1 0 0 1 418.1953 111 cm
q
.960784 .960784 .862745 rg
n 0 0 91.04882 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 15.50441 0 Td (risk analysis) Tj T* -15.50441 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (when run?) Tj T* ET
Q
Q
q
1 0 0 1 116.4094 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (research/overnight) Tj T* ET
Q
Q
q
1 0 0 1 263.622 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (live) Tj T* ET
Q
Q
q
1 0 0 1 418.1953 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (overnight) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (data source?) Tj T* ET
Q
Q
q
1 0 0 1 116.4094 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ts = long timeseries) Tj T* ET
Q
Q
q
1 0 0 1 263.622 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a = short ts/array) Tj T* ET
Q
Q
q
1 0 0 1 418.1953 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1000\222s of sims) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (speed?) Tj T* ET
Q
Q
q
1 0 0 1 116.4094 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (slow, non-critical) Tj T* ET
Q
Q
q
1 0 0 1 263.622 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (instantenous) Tj T* ET
Q
Q
q
1 0 0 1 418.1953 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (quick) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (apply f to data) Tj T* ET
Q
Q
q
1 0 0 1 116.4094 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (x_ = f_\(ts\)) Tj T* ET
Q
Q
q
1 0 0 1 263.622 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (x = f\(a, **x_\)) Tj T* ET
Q
Q
q
1 0 0 1 418.1953 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (same as live) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (apply g) Tj T* ET
Q
Q
q
1 0 0 1 116.4094 21 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (y_ = g_\(ts, ) Tj 1 0 0 rg (x_) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 263.622 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (y = g\(a, x, **y_\)) Tj T* ET
Q
Q
q
1 0 0 1 418.1953 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (same as live) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (final result h) Tj T* ET
Q
Q
q
1 0 0 1 116.4094 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (z_ = h_\(ts, ) Tj 1 0 0 rg (x_) Tj 0 0 0 rg (, ) Tj 1 0 0 rg (y_) Tj 0 0 0 rg (\)) Tj T* ET
Q
Q
q
1 0 0 1 263.622 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (z = h\(a, x, y, **z_\)) Tj T* ET
Q
Q
q
1 0 0 1 418.1953 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (same as live) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 108 m 515.2441 108 l S
n 0 90 m 515.2441 90 l S
n 0 72 m 515.2441 72 l S
n 0 54 m 515.2441 54 l S
n 0 36 m 515.2441 36 l S
n 0 18 m 515.2441 18 l S
n 110.4094 0 m 110.4094 124 l S
n 257.622 0 m 257.622 124 l S
n 412.1953 0 m 412.1953 124 l S
n 0 124 m 515.2441 124 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 124 l S
n 515.2441 0 m 515.2441 124 l S
Q
Q
Q
q
1 0 0 1 40.01575 444.6394 cm
Q
q
1 0 0 1 40.01575 390.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .159719 Tw (Note that for live trading or risk analysis, we tend to switch and run on numpy arrays rather than pandas object. This) Tj T* 0 Tw 2.059064 Tw (speeds up the calculations while introduces no code change. In the example below we explore how to create) Tj T* 0 Tw .002006 Tw (state-aware, functions within pyg. The paradigm is that for most functions, function_ will return not just the timeseries) Tj T* 0 Tw (output but also the states.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 360.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (Example: creating a function exposing its state) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 330.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.076948 Tw (Suppose we try to write an ewma crossover function \(the difference of two ewma\). We want to normalize it by its own) Tj T* 0 Tw (volatility. Traditionally we will write:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 179.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 150 re B*
Q
q
.933333 1 .8 rg
n 0 132 18 12 re f*
.933333 1 .8 rg
n 24 132 96 12 re f*
.933333 1 .8 rg
n 120 132 6 12 re f*
.933333 1 .8 rg
n 126 132 6 12 re f*
.933333 1 .8 rg
n 132 132 6 12 re f*
.933333 1 .8 rg
n 144 132 24 12 re f*
.933333 1 .8 rg
n 168 132 6 12 re f*
.933333 1 .8 rg
n 180 132 24 12 re f*
.933333 1 .8 rg
n 204 132 6 12 re f*
.933333 1 .8 rg
n 216 132 18 12 re f*
.933333 1 .8 rg
n 234 132 12 12 re f*
.933333 1 .8 rg
n 24 120 54 12 re f*
.933333 1 .8 rg
n 84 120 6 12 re f*
.933333 1 .8 rg
n 96 120 6 12 re f*
.933333 1 .8 rg
n 102 120 6 12 re f*
.933333 1 .8 rg
n 108 120 18 12 re f*
.933333 1 .8 rg
n 126 120 6 12 re f*
.933333 1 .8 rg
n 132 120 24 12 re f*
.933333 1 .8 rg
n 156 120 6 12 re f*
.933333 1 .8 rg
n 162 120 6 12 re f*
.933333 1 .8 rg
n 168 120 24 12 re f*
.933333 1 .8 rg
n 192 120 12 12 re f*
.933333 1 .8 rg
n 24 108 54 12 re f*
.933333 1 .8 rg
n 84 108 6 12 re f*
.933333 1 .8 rg
n 96 108 6 12 re f*
.933333 1 .8 rg
n 102 108 6 12 re f*
.933333 1 .8 rg
n 108 108 18 12 re f*
.933333 1 .8 rg
n 126 108 6 12 re f*
.933333 1 .8 rg
n 132 108 24 12 re f*
.933333 1 .8 rg
n 156 108 6 12 re f*
.933333 1 .8 rg
n 162 108 6 12 re f*
.933333 1 .8 rg
n 168 108 24 12 re f*
.933333 1 .8 rg
n 192 108 12 12 re f*
.933333 1 .8 rg
n 24 96 60 12 re f*
.933333 1 .8 rg
n 90 96 6 12 re f*
.933333 1 .8 rg
n 102 96 54 12 re f*
.933333 1 .8 rg
n 162 96 6 12 re f*
.933333 1 .8 rg
n 174 96 54 12 re f*
.933333 1 .8 rg
n 24 84 60 12 re f*
.933333 1 .8 rg
n 90 84 6 12 re f*
.933333 1 .8 rg
n 102 84 6 12 re f*
.933333 1 .8 rg
n 108 84 60 12 re f*
.933333 1 .8 rg
n 168 84 12 12 re f*
.933333 1 .8 rg
n 180 84 6 12 re f*
.933333 1 .8 rg
n 186 84 6 12 re f*
.933333 1 .8 rg
n 192 84 6 12 re f*
.933333 1 .8 rg
n 198 84 18 12 re f*
.933333 1 .8 rg
n 216 84 6 12 re f*
.933333 1 .8 rg
n 222 84 18 12 re f*
.933333 1 .8 rg
n 240 84 6 12 re f*
.933333 1 .8 rg
n 246 84 6 12 re f*
.933333 1 .8 rg
n 252 84 24 12 re f*
.933333 1 .8 rg
n 276 84 12 12 re f*
.933333 1 .8 rg
n 288 84 12 12 re f*
.933333 1 .8 rg
n 300 84 18 12 re f*
.933333 1 .8 rg
n 24 72 60 12 re f*
.933333 1 .8 rg
n 84 72 6 12 re f*
.933333 1 .8 rg
n 90 72 60 12 re f*
.933333 1 .8 rg
n 150 72 12 12 re f*
.933333 1 .8 rg
n 162 72 6 12 re f*
.933333 1 .8 rg
n 168 72 6 12 re f*
.933333 1 .8 rg
n 180 72 6 12 re f*
.933333 1 .8 rg
n 192 72 12 12 re f*
.933333 1 .8 rg
n 204 72 6 12 re f*
.933333 1 .8 rg
n 210 72 18 12 re f*
.933333 1 .8 rg
n 24 60 60 12 re f*
.933333 1 .8 rg
n 90 60 6 12 re f*
.933333 1 .8 rg
n 102 60 60 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 168 60 60 12 re f*
.933333 1 .8 rg
n 24 48 36 12 re f*
.933333 1 .8 rg
n 66 48 60 12 re f*
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 12 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 42 24 36 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 12 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 36 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 36 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 30 12 re f*
.933333 1 .8 rg
n 240 24 12 12 re f*
.933333 1 .8 rg
n 258 24 36 12 re f*
.933333 1 .8 rg
n 294 24 6 12 re f*
.933333 1 .8 rg
n 300 24 6 12 re f*
.933333 1 .8 rg
n 306 24 24 12 re f*
.933333 1 .8 rg
n 330 24 18 12 re f*
.933333 1 .8 rg
n 354 24 24 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 396 24 12 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 420 24 24 12 re f*
.933333 1 .8 rg
n 450 24 6 12 re f*
.933333 1 .8 rg
n 462 24 12 12 re f*
.933333 1 .8 rg
n 474 24 6 12 re f*
.933333 1 .8 rg
n 486 24 18 12 re f*
.933333 1 .8 rg
n 510 24 6 12 re f*
.933333 1 .8 rg
n 522 24 12 12 re f*
.933333 1 .8 rg
n 0 12 48 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 96 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 24 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 24 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 258 12 18 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 134 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (pandas_crossover) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\):) Tj  T* (    ) Tj (fast_ewma) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj (fast) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj  T* (    ) Tj (slow_ewma) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj (slow) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj  T* (    ) Tj (raw_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast_ewma) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (slow_ewma) Tj  T* (    ) Tj (signal_rms) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (\() Tj (raw_signal) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ewm) Tj (\() Tj (vol) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (mean) Tj (\(\)) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf .376471 0 .878431 rg (0.5) Tj /F5 10 Tf 0 0 0 rg  T* (    ) Tj (signal_rms) Tj ([) Tj (signal_rms) Tj .188235 .188235 .188235 rg (==) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (nan) Tj  T* (    ) Tj (normalized) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (raw_signal) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (signal_rms) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (normalized) Tj  T*  T* (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (10000) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (9999) Tj /F5 10 Tf 0 0 0 rg (\)\);) Tj ( ) Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg  T* (pandas_x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pandas_crossover) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\)) Tj  T* (pandas_x) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 159.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can quickly rewrite it using pyg:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 56.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 102 re B*
Q
q
.933333 1 .8 rg
n 0 84 18 12 re f*
.933333 1 .8 rg
n 24 84 54 12 re f*
.933333 1 .8 rg
n 78 84 6 12 re f*
.933333 1 .8 rg
n 84 84 6 12 re f*
.933333 1 .8 rg
n 90 84 6 12 re f*
.933333 1 .8 rg
n 102 84 24 12 re f*
.933333 1 .8 rg
n 126 84 6 12 re f*
.933333 1 .8 rg
n 138 84 24 12 re f*
.933333 1 .8 rg
n 162 84 6 12 re f*
.933333 1 .8 rg
n 174 84 18 12 re f*
.933333 1 .8 rg
n 192 84 12 12 re f*
.933333 1 .8 rg
n 24 72 54 12 re f*
.933333 1 .8 rg
n 84 72 6 12 re f*
.933333 1 .8 rg
n 96 72 24 12 re f*
.933333 1 .8 rg
n 120 72 6 12 re f*
.933333 1 .8 rg
n 126 72 6 12 re f*
.933333 1 .8 rg
n 132 72 6 12 re f*
.933333 1 .8 rg
n 144 72 24 12 re f*
.933333 1 .8 rg
n 168 72 6 12 re f*
.933333 1 .8 rg
n 24 60 54 12 re f*
.933333 1 .8 rg
n 84 60 6 12 re f*
.933333 1 .8 rg
n 96 60 24 12 re f*
.933333 1 .8 rg
n 120 60 6 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 144 60 24 12 re f*
.933333 1 .8 rg
n 168 60 6 12 re f*
.933333 1 .8 rg
n 24 48 60 12 re f*
.933333 1 .8 rg
n 90 48 6 12 re f*
.933333 1 .8 rg
n 102 48 54 12 re f*
.933333 1 .8 rg
n 162 48 6 12 re f*
.933333 1 .8 rg
n 174 48 54 12 re f*
.933333 1 .8 rg
n 24 36 60 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 102 36 36 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 60 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 216 36 18 12 re f*
.933333 1 .8 rg
n 234 36 6 12 re f*
.933333 1 .8 rg
n 24 24 60 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 24 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 60 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 24 12 60 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 102 12 60 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 60 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 60 12 re f*
BT 1 0 0 1 0 86 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (crossover) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\):) Tj  T* (    ) Tj (fast_ewma) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (\)) Tj  T* (    ) Tj (slow_ewma) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (slow) Tj (\)) Tj  T* (    ) Tj (raw_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast_ewma) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (slow_ewma) Tj  T* (    ) Tj (signal_rms) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewmrms) Tj (\() Tj (raw_signal) Tj (,) Tj ( ) Tj (vol) Tj (\)) Tj  T* (    ) Tj (signal_rms) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (v2na) Tj (\() Tj (signal_rms) Tj (\)) Tj  T* (    ) Tj (normalized) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (raw_signal) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (signal_rms) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (normalized) Tj  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (133) Tj T* ET
Q
Q
 
endstream
endobj
1104 0 obj
<<
/Length 34931
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 6 12 re f*
.933333 1 .8 rg
n 12 24 6 12 re f*
.933333 1 .8 rg
n 24 24 54 12 re f*
.933333 1 .8 rg
n 78 24 6 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 102 24 24 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 138 24 24 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 18 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 18 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 48 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 18 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 30 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (x) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (crossover) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj 0 .439216 .12549 rg (abs) Tj 0 0 0 rg (\() Tj (x) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg (pandas_x) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (max) Tj (\(\)) Tj .188235 .188235 .188235 rg (<) Tj /F6 10 Tf .376471 0 .878431 rg (1e-10) Tj /F5 10 Tf 0 0 0 rg  T* (x) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 724.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And with very little additional effort, we can write a new function that also exposes the internal state:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 501.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 736 222 re B*
Q
q
.933333 1 .8 rg
n 0 204 30 12 re f*
.933333 1 .8 rg
n 36 204 6 12 re f*
1 .941176 .941176 rg
n 48 204 36 12 re f*
.933333 1 .8 rg
n 0 192 18 12 re f*
.933333 1 .8 rg
n 24 192 60 12 re f*
.933333 1 .8 rg
n 84 192 6 12 re f*
.933333 1 .8 rg
n 90 192 6 12 re f*
.933333 1 .8 rg
n 96 192 6 12 re f*
.933333 1 .8 rg
n 108 192 24 12 re f*
.933333 1 .8 rg
n 132 192 6 12 re f*
.933333 1 .8 rg
n 144 192 24 12 re f*
.933333 1 .8 rg
n 168 192 6 12 re f*
.933333 1 .8 rg
n 180 192 18 12 re f*
.933333 1 .8 rg
n 198 192 6 12 re f*
.933333 1 .8 rg
n 210 192 42 12 re f*
.933333 1 .8 rg
n 258 192 6 12 re f*
.933333 1 .8 rg
n 270 192 24 12 re f*
.933333 1 .8 rg
n 294 192 12 12 re f*
.933333 1 .8 rg
n 24 180 30 12 re f*
.933333 1 .8 rg
n 60 180 6 12 re f*
.933333 1 .8 rg
n 72 180 24 12 re f*
.933333 1 .8 rg
n 96 180 6 12 re f*
.933333 1 .8 rg
n 102 180 24 12 re f*
.933333 1 .8 rg
n 132 180 6 12 re f*
.933333 1 .8 rg
n 144 180 18 12 re f*
.933333 1 .8 rg
n 168 180 24 12 re f*
.933333 1 .8 rg
n 198 180 6 12 re f*
.933333 1 .8 rg
n 210 180 18 12 re f*
.933333 1 .8 rg
n 234 180 18 12 re f*
.933333 1 .8 rg
n 258 180 6 12 re f*
.933333 1 .8 rg
n 270 180 18 12 re f*
.933333 1 .8 rg
n 294 180 12 12 re f*
.933333 1 .8 rg
n 312 180 42 12 re f*
.933333 1 .8 rg
n 360 180 12 12 re f*
.933333 1 .8 rg
n 378 180 24 12 re f*
.933333 1 .8 rg
n 408 180 24 12 re f*
.933333 1 .8 rg
n 438 180 42 12 re f*
.933333 1 .8 rg
n 24 168 60 12 re f*
.933333 1 .8 rg
n 90 168 6 12 re f*
.933333 1 .8 rg
n 102 168 30 12 re f*
.933333 1 .8 rg
n 132 168 6 12 re f*
.933333 1 .8 rg
n 138 168 6 12 re f*
.933333 1 .8 rg
n 144 168 6 12 re f*
.933333 1 .8 rg
n 156 168 24 12 re f*
.933333 1 .8 rg
n 180 168 6 12 re f*
.933333 1 .8 rg
n 192 168 42 12 re f*
.933333 1 .8 rg
n 240 168 6 12 re f*
.933333 1 .8 rg
n 252 168 30 12 re f*
.933333 1 .8 rg
n 282 168 6 12 re f*
.933333 1 .8 rg
n 288 168 24 12 re f*
.933333 1 .8 rg
n 312 168 6 12 re f*
.933333 1 .8 rg
n 24 156 60 12 re f*
.933333 1 .8 rg
n 90 156 6 12 re f*
.933333 1 .8 rg
n 102 156 30 12 re f*
.933333 1 .8 rg
n 132 156 6 12 re f*
.933333 1 .8 rg
n 138 156 6 12 re f*
.933333 1 .8 rg
n 144 156 6 12 re f*
.933333 1 .8 rg
n 156 156 24 12 re f*
.933333 1 .8 rg
n 180 156 6 12 re f*
.933333 1 .8 rg
n 192 156 42 12 re f*
.933333 1 .8 rg
n 240 156 6 12 re f*
.933333 1 .8 rg
n 252 156 30 12 re f*
.933333 1 .8 rg
n 282 156 6 12 re f*
.933333 1 .8 rg
n 288 156 24 12 re f*
.933333 1 .8 rg
n 312 156 6 12 re f*
.933333 1 .8 rg
n 24 144 60 12 re f*
.933333 1 .8 rg
n 90 144 6 12 re f*
.933333 1 .8 rg
n 102 144 60 12 re f*
.933333 1 .8 rg
n 162 144 6 12 re f*
.933333 1 .8 rg
n 168 144 24 12 re f*
.933333 1 .8 rg
n 198 144 6 12 re f*
.933333 1 .8 rg
n 210 144 60 12 re f*
.933333 1 .8 rg
n 270 144 6 12 re f*
.933333 1 .8 rg
n 276 144 24 12 re f*
.933333 1 .8 rg
n 24 132 60 12 re f*
.933333 1 .8 rg
n 90 132 6 12 re f*
.933333 1 .8 rg
n 102 132 42 12 re f*
.933333 1 .8 rg
n 144 132 6 12 re f*
.933333 1 .8 rg
n 150 132 60 12 re f*
.933333 1 .8 rg
n 210 132 6 12 re f*
.933333 1 .8 rg
n 222 132 18 12 re f*
.933333 1 .8 rg
n 240 132 6 12 re f*
.933333 1 .8 rg
n 252 132 42 12 re f*
.933333 1 .8 rg
n 300 132 6 12 re f*
.933333 1 .8 rg
n 312 132 30 12 re f*
.933333 1 .8 rg
n 342 132 6 12 re f*
.933333 1 .8 rg
n 348 132 18 12 re f*
.933333 1 .8 rg
n 366 132 6 12 re f*
.933333 1 .8 rg
n 24 120 60 12 re f*
.933333 1 .8 rg
n 90 120 6 12 re f*
.933333 1 .8 rg
n 102 120 60 12 re f*
.933333 1 .8 rg
n 162 120 6 12 re f*
.933333 1 .8 rg
n 168 120 24 12 re f*
.933333 1 .8 rg
n 192 120 6 12 re f*
.933333 1 .8 rg
n 198 120 60 12 re f*
.933333 1 .8 rg
n 258 120 6 12 re f*
.933333 1 .8 rg
n 264 120 24 12 re f*
.933333 1 .8 rg
n 288 120 6 12 re f*
.933333 1 .8 rg
n 24 108 36 12 re f*
.933333 1 .8 rg
n 66 108 24 12 re f*
.933333 1 .8 rg
n 90 108 6 12 re f*
.933333 1 .8 rg
n 96 108 24 12 re f*
.933333 1 .8 rg
n 126 108 6 12 re f*
.933333 1 .8 rg
n 138 108 60 12 re f*
.933333 1 .8 rg
n 198 108 6 12 re f*
.933333 1 .8 rg
n 210 108 30 12 re f*
.933333 1 .8 rg
n 246 108 6 12 re f*
.933333 1 .8 rg
n 258 108 24 12 re f*
.933333 1 .8 rg
n 282 108 6 12 re f*
.933333 1 .8 rg
n 288 108 24 12 re f*
.933333 1 .8 rg
n 318 108 6 12 re f*
.933333 1 .8 rg
n 330 108 60 12 re f*
.933333 1 .8 rg
n 390 108 6 12 re f*
.933333 1 .8 rg
n 396 108 30 12 re f*
.933333 1 .8 rg
n 426 108 6 12 re f*
.933333 1 .8 rg
n 438 108 24 12 re f*
.933333 1 .8 rg
n 468 108 6 12 re f*
.933333 1 .8 rg
n 480 108 60 12 re f*
.933333 1 .8 rg
n 540 108 6 12 re f*
.933333 1 .8 rg
n 546 108 30 12 re f*
.933333 1 .8 rg
n 576 108 6 12 re f*
.933333 1 .8 rg
n 588 108 18 12 re f*
.933333 1 .8 rg
n 612 108 6 12 re f*
.933333 1 .8 rg
n 624 108 60 12 re f*
.933333 1 .8 rg
n 684 108 6 12 re f*
.933333 1 .8 rg
n 690 108 30 12 re f*
.933333 1 .8 rg
n 720 108 12 12 re f*
.933333 1 .8 rg
n 0 84 60 12 re f*
.933333 1 .8 rg
n 60 84 6 12 re f*
.933333 1 .8 rg
n 66 84 36 12 re f*
.933333 1 .8 rg
n 108 84 6 12 re f*
.933333 1 .8 rg
n 120 84 6 12 re f*
1 .941176 .941176 rg
n 126 84 36 12 re f*
.933333 1 .8 rg
n 162 84 6 12 re f*
1 .941176 .941176 rg
n 174 84 42 12 re f*
.933333 1 .8 rg
n 216 84 6 12 re f*
.933333 1 .8 rg
n 228 84 432 12 re f*
.933333 1 .8 rg
n 0 60 18 12 re f*
.933333 1 .8 rg
n 24 60 54 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 84 60 6 12 re f*
.933333 1 .8 rg
n 90 60 6 12 re f*
.933333 1 .8 rg
n 102 60 24 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 138 60 24 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 174 60 18 12 re f*
.933333 1 .8 rg
n 192 60 6 12 re f*
.933333 1 .8 rg
n 204 60 30 12 re f*
.933333 1 .8 rg
n 240 60 6 12 re f*
.933333 1 .8 rg
n 252 60 24 12 re f*
.933333 1 .8 rg
n 276 60 12 12 re f*
.933333 1 .8 rg
n 24 48 36 12 re f*
.933333 1 .8 rg
n 66 48 60 12 re f*
.933333 1 .8 rg
n 126 48 6 12 re f*
.933333 1 .8 rg
n 132 48 6 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 150 48 24 12 re f*
.933333 1 .8 rg
n 174 48 6 12 re f*
.933333 1 .8 rg
n 186 48 24 12 re f*
.933333 1 .8 rg
n 210 48 6 12 re f*
.933333 1 .8 rg
n 222 48 18 12 re f*
.933333 1 .8 rg
n 240 48 6 12 re f*
.933333 1 .8 rg
n 252 48 42 12 re f*
.933333 1 .8 rg
n 300 48 6 12 re f*
.933333 1 .8 rg
n 312 48 30 12 re f*
.933333 1 .8 rg
n 342 48 6 12 re f*
.933333 1 .8 rg
n 348 48 6 12 re f*
.933333 1 .8 rg
n 354 48 24 12 re f*
.933333 1 .8 rg
n 0 24 12 12 re f*
.933333 1 .8 rg
n 18 24 6 12 re f*
.933333 1 .8 rg
n 30 24 60 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 24 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 24 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 186 24 18 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 12 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 78 12 12 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 24 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 18 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 54 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
.933333 1 .8 rg
n 252 12 6 12 re f*
.933333 1 .8 rg
n 258 12 6 12 re f*
.933333 1 .8 rg
n 270 12 24 12 re f*
.933333 1 .8 rg
n 294 12 6 12 re f*
.933333 1 .8 rg
n 306 12 24 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 342 12 18 12 re f*
.933333 1 .8 rg
n 360 12 12 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 24 12 re f*
BT 1 0 0 1 0 206 Tm 12 TL /F5 10 Tf 0 0 0 rg (_data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('data') Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (crossover_) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ({},) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ({},) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ({}\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (instate) Tj ( ) Tj /F6 10 Tf (is) Tj /F5 10 Tf ( ) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (instate) Tj  T* (    ) Tj (fast_ewma_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (fast) Tj (\)) Tj  T* (    ) Tj (slow_ewma_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (slow) Tj (\)) Tj  T* (    ) Tj (raw_signal) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj ( ) Tj .188235 .188235 .188235 rg (-) Tj 0 0 0 rg ( ) Tj (slow_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj  T* (    ) Tj (signal_rms) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewmrms_) Tj (\() Tj (raw_signal) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (vol) Tj (\)) Tj  T* (    ) Tj (normalized) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (raw_signal) Tj .188235 .188235 .188235 rg (/) Tj 0 0 0 rg (v2na) Tj (\() Tj (signal_rms) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (data) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (normalized) Tj (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (Dict) Tj (\() Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (fast_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (,) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (slow_ewma_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (signal_rms) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (\)\)) Tj  T*  T* (crossover_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (output) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('data') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('state') Tj 0 0 0 rg (]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (# output declares the function to have a dict output and is used by cell) Tj /F5 10 Tf 0 0 0 rg  T*  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (crossover) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (None) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (crossover_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (,) Tj ( ) Tj (instate) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (state) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj  T*  T* (x_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (crossover_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (eq) Tj (\() Tj (x) Tj (,) Tj ( ) Tj (x_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (\)) Tj ( ) Tj /F6 10 Tf (and) Tj /F5 10 Tf ( ) Tj (eq) Tj (\() Tj (x) Tj (,) Tj ( ) Tj (crossover) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\)\)) Tj  T* (x_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 469.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.585205 Tw (The three give idential results and we can also verify that crossover_ will allow us to split the evaluation to the) Tj T* 0 Tw (long-history and the new data:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 390.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
.933333 1 .8 rg
n 0 60 42 12 re f*
.933333 1 .8 rg
n 48 60 6 12 re f*
.933333 1 .8 rg
n 60 60 6 12 re f*
.933333 1 .8 rg
n 66 60 12 12 re f*
.933333 1 .8 rg
n 78 60 24 12 re f*
.933333 1 .8 rg
n 102 60 6 12 re f*
.933333 1 .8 rg
n 0 48 24 12 re f*
.933333 1 .8 rg
n 30 48 6 12 re f*
.933333 1 .8 rg
n 42 48 6 12 re f*
.933333 1 .8 rg
n 48 48 6 12 re f*
.933333 1 .8 rg
n 54 48 24 12 re f*
.933333 1 .8 rg
n 78 48 12 12 re f*
.933333 1 .8 rg
n 90 48 6 12 re f*
.933333 1 .8 rg
n 96 48 36 12 re f*
.933333 1 .8 rg
n 0 36 54 12 re f*
.933333 1 .8 rg
n 60 36 6 12 re f*
.933333 1 .8 rg
n 72 36 60 12 re f*
.933333 1 .8 rg
n 132 36 6 12 re f*
.933333 1 .8 rg
n 138 36 42 12 re f*
.933333 1 .8 rg
n 180 36 6 12 re f*
.933333 1 .8 rg
n 192 36 12 12 re f*
.933333 1 .8 rg
n 204 36 6 12 re f*
.933333 1 .8 rg
n 216 36 12 12 re f*
.933333 1 .8 rg
n 228 36 6 12 re f*
.933333 1 .8 rg
n 240 36 12 12 re f*
.933333 1 .8 rg
n 252 36 6 12 re f*
.933333 1 .8 rg
n 0 24 36 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 54 24 54 12 re f*
.933333 1 .8 rg
n 108 24 6 12 re f*
.933333 1 .8 rg
n 114 24 24 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 12 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 198 24 12 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
.933333 1 .8 rg
n 222 24 30 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 270 24 54 12 re f*
.933333 1 .8 rg
n 324 24 6 12 re f*
.933333 1 .8 rg
n 330 24 30 12 re f*
.933333 1 .8 rg
n 360 24 6 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 60 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 24 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 24 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 18 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
.933333 1 .8 rg
n 42 0 12 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 36 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 12 12 re f*
.933333 1 .8 rg
n 126 0 6 12 re f*
.933333 1 .8 rg
n 132 0 24 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 162 0 24 12 re f*
.933333 1 .8 rg
n 186 0 12 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 36 12 re f*
.933333 1 .8 rg
n 240 0 6 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 0 rg (history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj ([:) Tj /F6 10 Tf 0 0 .815686 rg (9900) Tj /F5 10 Tf 0 0 0 rg (]) Tj  T* (live) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (9900) Tj /F5 10 Tf 0 0 0 rg (:]) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj  T* (x_history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (crossover_) Tj (\() Tj (history) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (x_live) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (crossover) Tj (\() Tj (live) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x_history) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (\)) Tj  T* (x_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (crossover_) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (fast) Tj (,) Tj ( ) Tj (slow) Tj (,) Tj ( ) Tj (vol) Tj (\)) Tj  T* /F6 10 Tf 0 .501961 0 rg (assert) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (eq) Tj (\() Tj (x_live) Tj ( ) Tj (,) Tj ( ) Tj (x_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (9900) Tj /F5 10 Tf 0 0 0 rg (:]) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 370.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Have we gained anything?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 303.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 796 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 60 12 re f*
.933333 1 .8 rg
n 66 48 6 12 re f*
.933333 1 .8 rg
n 78 48 30 12 re f*
.933333 1 .8 rg
n 108 48 6 12 re f*
.933333 1 .8 rg
n 114 48 96 12 re f*
.933333 1 .8 rg
n 210 48 6 12 re f*
.933333 1 .8 rg
n 222 48 18 12 re f*
.933333 1 .8 rg
n 240 48 6 12 re f*
.933333 1 .8 rg
n 252 48 24 12 re f*
.933333 1 .8 rg
n 282 48 6 12 re f*
.933333 1 .8 rg
n 294 48 24 12 re f*
.933333 1 .8 rg
n 318 48 12 12 re f*
.933333 1 .8 rg
n 330 48 42 12 re f*
.933333 1 .8 rg
n 372 48 6 12 re f*
.933333 1 .8 rg
n 384 48 12 12 re f*
.933333 1 .8 rg
n 396 48 6 12 re f*
.933333 1 .8 rg
n 408 48 12 12 re f*
.933333 1 .8 rg
n 420 48 6 12 re f*
.933333 1 .8 rg
n 432 48 12 12 re f*
.933333 1 .8 rg
n 444 48 6 12 re f*
.933333 1 .8 rg
n 0 36 54 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 78 36 60 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 42 12 re f*
.933333 1 .8 rg
n 186 36 6 12 re f*
.933333 1 .8 rg
n 198 36 12 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 222 36 12 12 re f*
.933333 1 .8 rg
n 234 36 6 12 re f*
.933333 1 .8 rg
n 246 36 12 12 re f*
.933333 1 .8 rg
n 258 36 6 12 re f*
.933333 1 .8 rg
n 0 24 84 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 108 24 30 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 60 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 216 24 18 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 246 24 24 12 re f*
.933333 1 .8 rg
n 276 24 6 12 re f*
.933333 1 .8 rg
n 288 24 24 12 re f*
.933333 1 .8 rg
n 312 24 12 12 re f*
.933333 1 .8 rg
n 324 24 42 12 re f*
.933333 1 .8 rg
n 366 24 6 12 re f*
.933333 1 .8 rg
n 378 24 12 12 re f*
.933333 1 .8 rg
n 390 24 6 12 re f*
.933333 1 .8 rg
n 402 24 12 12 re f*
.933333 1 .8 rg
n 414 24 6 12 re f*
.933333 1 .8 rg
n 426 24 12 12 re f*
.933333 1 .8 rg
n 438 24 6 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 30 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 54 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 18 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 186 12 24 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 228 12 24 12 re f*
.933333 1 .8 rg
n 252 12 12 12 re f*
.933333 1 .8 rg
n 264 12 24 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 300 12 12 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 324 12 12 12 re f*
.933333 1 .8 rg
n 336 12 6 12 re f*
.933333 1 .8 rg
n 348 12 12 12 re f*
.933333 1 .8 rg
n 360 12 6 12 re f*
.933333 1 .8 rg
n 372 12 30 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 420 12 54 12 re f*
.933333 1 .8 rg
n 474 12 6 12 re f*
.933333 1 .8 rg
n 480 12 30 12 re f*
.933333 1 .8 rg
n 510 12 6 12 re f*
1 .941176 .941176 rg
n 0 0 60 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 60 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 72 12 re f*
.933333 1 .8 rg
n 210 0 12 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
1 .941176 .941176 rg
n 258 0 84 12 re f*
.933333 1 .8 rg
n 342 0 6 12 re f*
.933333 1 .8 rg
n 354 0 84 12 re f*
.933333 1 .8 rg
n 438 0 6 12 re f*
.933333 1 .8 rg
n 444 0 72 12 re f*
.933333 1 .8 rg
n 516 0 12 12 re f*
.933333 1 .8 rg
n 528 0 24 12 re f*
.933333 1 .8 rg
n 552 0 6 12 re f*
1 .941176 .941176 rg
n 564 0 66 12 re f*
.933333 1 .8 rg
n 630 0 6 12 re f*
.933333 1 .8 rg
n 642 0 36 12 re f*
.933333 1 .8 rg
n 678 0 6 12 re f*
.933333 1 .8 rg
n 684 0 72 12 re f*
.933333 1 .8 rg
n 756 0 12 12 re f*
.933333 1 .8 rg
n 768 0 24 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 0 rg (pandas_old) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (timer) Tj (\() Tj (pandas_crossover) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (history) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (x_history) Tj (  ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (crossover_) Tj (\() Tj (history) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (x_history_time) Tj (  ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (timer) Tj (\() Tj (crossover_) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (history) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (x_live) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (timer) Tj (\() Tj (crossover) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (True) Tj /F5 10 Tf 0 0 0 rg (\)\() Tj (live) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x_history) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (\)) Tj  T* .729412 .129412 .129412 rg ('pandas: ') Tj 0 0 0 rg (,) Tj ( ) Tj (pandas_old) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (microseconds) Tj .188235 .188235 .188235 rg (//) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('pyg history:') Tj 0 0 0 rg (,) Tj ( ) Tj (x_history_time) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (microseconds) Tj .188235 .188235 .188235 rg (//) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('pyg_live:') Tj 0 0 0 rg (,) Tj ( ) Tj (x_live) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (microseconds) Tj .188235 .188235 .188235 rg (//) Tj /F6 10 Tf 0 0 .815686 rg (1000) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 271.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .805705 Tw (We see that pyg is already faster than pandas. Running just the new data using numpy arrays, is about 4-5 times) Tj T* 0 Tw (faster still. Indeed, running 10k 100-day forward scenarios take about 2 seconds at most.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 241.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 54 12 re f*
.933333 1 .8 rg
n 60 12 6 12 re f*
.933333 1 .8 rg
n 72 12 12 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 36 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 36 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 12 12 re f*
.933333 1 .8 rg
n 204 12 18 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 228 12 30 12 re f*
.933333 1 .8 rg
n 258 12 12 12 re f*
.933333 1 .8 rg
n 0 0 66 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
.933333 1 .8 rg
n 84 0 30 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 54 12 re f*
.933333 1 .8 rg
n 174 0 12 12 re f*
.933333 1 .8 rg
n 186 0 54 12 re f*
.933333 1 .8 rg
n 246 0 6 12 re f*
.933333 1 .8 rg
n 258 0 12 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 282 0 12 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 306 0 12 12 re f*
.933333 1 .8 rg
n 318 0 6 12 re f*
.933333 1 .8 rg
n 330 0 30 12 re f*
.933333 1 .8 rg
n 366 0 6 12 re f*
.933333 1 .8 rg
n 378 0 54 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
.933333 1 .8 rg
n 438 0 30 12 re f*
.933333 1 .8 rg
n 468 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (scenarios) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,\() Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (10000) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (x_scenarios) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (timer) Tj (\() Tj (crossover) Tj (\)\() Tj (scenarios) Tj ( ) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x_history) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (state) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 221.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Using cells, our code looks like this, with live and historical codebase looking pretty similar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 178.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 526 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 54 12 re f*
.933333 1 .8 rg
n 60 24 6 12 re f*
.933333 1 .8 rg
n 72 24 24 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 102 24 60 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 6 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 198 24 42 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
.933333 1 .8 rg
n 252 24 24 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 294 24 12 12 re f*
.933333 1 .8 rg
n 306 24 6 12 re f*
.933333 1 .8 rg
n 318 24 24 12 re f*
.933333 1 .8 rg
n 348 24 6 12 re f*
.933333 1 .8 rg
n 360 24 12 12 re f*
.933333 1 .8 rg
n 372 24 6 12 re f*
.933333 1 .8 rg
n 384 24 18 12 re f*
.933333 1 .8 rg
n 408 24 6 12 re f*
.933333 1 .8 rg
n 420 24 12 12 re f*
.933333 1 .8 rg
n 432 24 18 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 24 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 54 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 174 12 24 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 210 12 24 12 re f*
.933333 1 .8 rg
n 240 12 6 12 re f*
.933333 1 .8 rg
n 252 12 12 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 276 12 24 12 re f*
.933333 1 .8 rg
n 306 12 6 12 re f*
.933333 1 .8 rg
n 318 12 12 12 re f*
.933333 1 .8 rg
n 330 12 6 12 re f*
.933333 1 .8 rg
n 342 12 18 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 378 12 12 12 re f*
.933333 1 .8 rg
n 390 12 6 12 re f*
.933333 1 .8 rg
n 402 12 30 12 re f*
.933333 1 .8 rg
n 438 12 6 12 re f*
.933333 1 .8 rg
n 450 12 54 12 re f*
.933333 1 .8 rg
n 504 12 18 12 re f*
.933333 1 .8 rg
n 0 0 54 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (x_history) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (crossover_) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (history) Tj (,) Tj ( ) Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\)\(\)) Tj  T* (x_live) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cell) Tj (\() Tj (crossover) Tj (,) Tj ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (live) Tj (,) Tj ( ) Tj (fast) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (10) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (slow) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (state) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (x_history) Tj (\)\(\)) Tj  T* (x_history) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 151.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 544 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 84 0 36 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 126 0 36 12 re f*
.933333 1 .8 rg
n 162 0 6 12 re f*
.933333 1 .8 rg
n 168 0 24 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 204 0 48 12 re f*
.933333 1 .8 rg
n 252 0 6 12 re f*
.933333 1 .8 rg
n 258 0 30 12 re f*
.933333 1 .8 rg
n 288 0 6 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
.933333 1 .8 rg
n 300 0 18 12 re f*
.933333 1 .8 rg
n 318 0 24 12 re f*
.933333 1 .8 rg
n 348 0 48 12 re f*
.933333 1 .8 rg
n 396 0 6 12 re f*
.933333 1 .8 rg
n 402 0 24 12 re f*
.933333 1 .8 rg
n 426 0 6 12 re f*
.933333 1 .8 rg
n 432 0 6 12 re f*
.933333 1 .8 rg
n 438 0 18 12 re f*
.933333 1 .8 rg
n 456 0 24 12 re f*
.933333 1 .8 rg
n 486 0 24 12 re f*
.933333 1 .8 rg
n 516 0 6 12 re f*
.933333 1 .8 rg
n 528 0 6 12 re f*
.933333 1 .8 rg
n 534 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (x_live) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (data) Tj (,) Tj ( ) Tj (pandas_x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (index) Tj ([) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (:]\),) Tj ( ) Tj (pandas_x) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (iloc) Tj ([) Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (100) Tj /F5 10 Tf 0 0 0 rg (:]],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 116.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.timeseries decorators) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 74.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.0839 Tw (There are a few decorators that are relevant to timeseries analysis ## pd2np and compiled We write most of our) Tj T* 0 Tw .483606 Tw (underlying functions assuming the function parameters are 1-d numpy arrays. If you want them numba.jit compiled,) Tj T* 0 Tw (please use the compiled operator.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries decorators) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (134) Tj T* ET
Q
Q
 
endstream
endobj
1105 0 obj
<<
/Length 18858
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 624.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 162 re B*
Q
q
.933333 1 .8 rg
n 0 144 24 12 re f*
.933333 1 .8 rg
n 30 144 18 12 re f*
.933333 1 .8 rg
n 54 144 36 12 re f*
.933333 1 .8 rg
n 96 144 6 12 re f*
.933333 1 .8 rg
n 0 132 36 12 re f*
.933333 1 .8 rg
n 42 132 36 12 re f*
.933333 1 .8 rg
n 84 132 12 12 re f*
.933333 1 .8 rg
n 102 132 12 12 re f*
.933333 1 .8 rg
n 114 132 6 12 re f*
.933333 1 .8 rg
n 126 132 36 12 re f*
.933333 1 .8 rg
n 168 132 30 12 re f*
.933333 1 .8 rg
n 204 132 12 12 re f*
.933333 1 .8 rg
n 222 132 12 12 re f*
.933333 1 .8 rg
n 0 120 36 12 re f*
.933333 1 .8 rg
n 0 108 54 12 re f*
.933333 1 .8 rg
n 0 96 18 12 re f*
.933333 1 .8 rg
n 24 96 30 12 re f*
.933333 1 .8 rg
n 54 96 6 12 re f*
.933333 1 .8 rg
n 60 96 6 12 re f*
.933333 1 .8 rg
n 66 96 6 12 re f*
.933333 1 .8 rg
n 78 96 30 12 re f*
.933333 1 .8 rg
n 114 96 6 12 re f*
.933333 1 .8 rg
n 126 96 18 12 re f*
.933333 1 .8 rg
n 144 96 12 12 re f*
.933333 1 .8 rg
n 24 84 18 12 re f*
.933333 1 .8 rg
n 48 84 6 12 re f*
.933333 1 .8 rg
n 60 84 12 12 re f*
.933333 1 .8 rg
n 72 84 6 12 re f*
.933333 1 .8 rg
n 78 84 60 12 re f*
.933333 1 .8 rg
n 138 84 6 12 re f*
.933333 1 .8 rg
n 144 84 6 12 re f*
.933333 1 .8 rg
n 150 84 6 12 re f*
.933333 1 .8 rg
n 24 72 18 12 re f*
.933333 1 .8 rg
n 48 72 6 12 re f*
.933333 1 .8 rg
n 60 72 12 12 re f*
.933333 1 .8 rg
n 78 72 30 12 re f*
.933333 1 .8 rg
n 108 72 6 12 re f*
.933333 1 .8 rg
n 114 72 6 12 re f*
.933333 1 .8 rg
n 120 72 6 12 re f*
.933333 1 .8 rg
n 126 72 30 12 re f*
.933333 1 .8 rg
n 156 72 6 12 re f*
.933333 1 .8 rg
n 162 72 6 12 re f*
.933333 1 .8 rg
n 168 72 18 12 re f*
.933333 1 .8 rg
n 48 60 12 12 re f*
.933333 1 .8 rg
n 66 60 12 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 84 60 30 12 re f*
.933333 1 .8 rg
n 114 60 6 12 re f*
.933333 1 .8 rg
n 120 60 6 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 138 60 18 12 re f*
.933333 1 .8 rg
n 72 48 18 12 re f*
.933333 1 .8 rg
n 90 48 6 12 re f*
.933333 1 .8 rg
n 96 48 6 12 re f*
.933333 1 .8 rg
n 102 48 6 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 126 48 12 12 re f*
.933333 1 .8 rg
n 138 48 6 12 re f*
.933333 1 .8 rg
n 144 48 18 12 re f*
.933333 1 .8 rg
n 48 36 24 12 re f*
.933333 1 .8 rg
n 72 36 6 12 re f*
.933333 1 .8 rg
n 72 24 30 12 re f*
.933333 1 .8 rg
n 108 24 12 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 132 24 6 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 72 12 18 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 30 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 18 12 re f*
BT 1 0 0 1 0 146 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pandas) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pd) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf .313725 .313725 .313725 rg (@pd2np) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf .313725 .313725 .313725 rg (@compiled) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (sumsq) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (total) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf .376471 0 .878431 rg (0.0) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (res) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (empty_like) Tj (\() Tj (a) Tj (\)) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (i) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (range) Tj 0 0 0 rg (\() Tj (a) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (shape) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]\):) Tj  T* (        ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (isnan) Tj (\() Tj (a) Tj ([) Tj (i) Tj (]\):) Tj  T* (            ) Tj (res) Tj ([) Tj (i) Tj (]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (nan) Tj  T* (        ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg (:) Tj  T* (            ) Tj (total) Tj ( ) Tj .188235 .188235 .188235 rg (+=) Tj 0 0 0 rg ( ) Tj (a) Tj ([) Tj (i) Tj (]) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg  T* (            ) Tj (res) Tj ([) Tj (i) Tj (]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (total) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (res) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 604.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It is not surpising that sumsq works for arrays. Notice how np.isnan is handled to ensure nans are skipped.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 573.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 12 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 36 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (arange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (sumsq) Tj (\() Tj (a) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 541.4394 cm
q
BT 1 0 0 1 0 14 Tm .345909 Tw 12 TL /F2 10 Tf 0 0 0 rg (pd2np) Tj /F1 10 Tf ( will convert a pandas Series to arrays, run the function and convert back to pandas. This will only work for a) Tj T* 0 Tw (1-dimensional objects, so no df nor 2-d np.ndarray.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 510.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 12 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 36 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 102 12 36 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 12 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (s) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (sumsq) Tj (\() Tj (s) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 477.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.8 Tm /F3 14 Tf 16.8 TL (loop) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 447.8394 cm
q
BT 1 0 0 1 0 14 Tm 1.60745 Tw 12 TL /F1 10 Tf 0 0 0 rg (We decorate sumsq with the ) Tj /F2 10 Tf (loop) Tj /F1 10 Tf ( decorator. Once we introduce loop, The function will loop over columns of a) Tj T* 0 Tw (DataFrame or a numpy array:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 261.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 186 re B*
Q
q
.933333 1 .8 rg
n 0 168 30 12 re f*
.933333 1 .8 rg
n 30 168 6 12 re f*
.933333 1 .8 rg
n 36 168 12 12 re f*
.933333 1 .8 rg
n 48 168 6 12 re f*
.933333 1 .8 rg
n 54 168 54 12 re f*
.933333 1 .8 rg
n 108 168 6 12 re f*
.933333 1 .8 rg
n 120 168 24 12 re f*
.933333 1 .8 rg
n 144 168 6 12 re f*
.933333 1 .8 rg
n 156 168 24 12 re f*
.933333 1 .8 rg
n 180 168 6 12 re f*
.933333 1 .8 rg
n 192 168 12 12 re f*
.933333 1 .8 rg
n 204 168 6 12 re f*
.933333 1 .8 rg
n 210 168 42 12 re f*
.933333 1 .8 rg
n 252 168 6 12 re f*
.933333 1 .8 rg
n 0 156 36 12 re f*
.933333 1 .8 rg
n 0 144 54 12 re f*
.933333 1 .8 rg
n 0 132 18 12 re f*
.933333 1 .8 rg
n 24 132 30 12 re f*
.933333 1 .8 rg
n 54 132 6 12 re f*
.933333 1 .8 rg
n 60 132 6 12 re f*
.933333 1 .8 rg
n 66 132 6 12 re f*
.933333 1 .8 rg
n 78 132 30 12 re f*
.933333 1 .8 rg
n 114 132 6 12 re f*
.933333 1 .8 rg
n 126 132 6 12 re f*
.933333 1 .8 rg
n 132 132 12 12 re f*
.933333 1 .8 rg
n 24 120 18 12 re f*
.933333 1 .8 rg
n 48 120 6 12 re f*
.933333 1 .8 rg
n 60 120 12 12 re f*
.933333 1 .8 rg
n 72 120 6 12 re f*
.933333 1 .8 rg
n 78 120 60 12 re f*
.933333 1 .8 rg
n 138 120 6 12 re f*
.933333 1 .8 rg
n 144 120 6 12 re f*
.933333 1 .8 rg
n 150 120 6 12 re f*
.933333 1 .8 rg
n 24 108 18 12 re f*
.933333 1 .8 rg
n 48 108 6 12 re f*
.933333 1 .8 rg
n 60 108 12 12 re f*
.933333 1 .8 rg
n 78 108 30 12 re f*
.933333 1 .8 rg
n 108 108 6 12 re f*
.933333 1 .8 rg
n 114 108 6 12 re f*
.933333 1 .8 rg
n 120 108 6 12 re f*
.933333 1 .8 rg
n 126 108 30 12 re f*
.933333 1 .8 rg
n 156 108 6 12 re f*
.933333 1 .8 rg
n 162 108 6 12 re f*
.933333 1 .8 rg
n 168 108 18 12 re f*
.933333 1 .8 rg
n 48 96 12 12 re f*
.933333 1 .8 rg
n 66 96 12 12 re f*
.933333 1 .8 rg
n 78 96 6 12 re f*
.933333 1 .8 rg
n 84 96 30 12 re f*
.933333 1 .8 rg
n 114 96 6 12 re f*
.933333 1 .8 rg
n 120 96 6 12 re f*
.933333 1 .8 rg
n 126 96 6 12 re f*
.933333 1 .8 rg
n 132 96 6 12 re f*
.933333 1 .8 rg
n 138 96 18 12 re f*
.933333 1 .8 rg
n 72 84 18 12 re f*
.933333 1 .8 rg
n 90 84 6 12 re f*
.933333 1 .8 rg
n 96 84 6 12 re f*
.933333 1 .8 rg
n 102 84 6 12 re f*
.933333 1 .8 rg
n 114 84 6 12 re f*
.933333 1 .8 rg
n 126 84 12 12 re f*
.933333 1 .8 rg
n 138 84 6 12 re f*
.933333 1 .8 rg
n 144 84 18 12 re f*
.933333 1 .8 rg
n 48 72 24 12 re f*
.933333 1 .8 rg
n 72 72 6 12 re f*
.933333 1 .8 rg
n 72 60 30 12 re f*
.933333 1 .8 rg
n 108 60 12 12 re f*
.933333 1 .8 rg
n 126 60 6 12 re f*
.933333 1 .8 rg
n 132 60 6 12 re f*
.933333 1 .8 rg
n 138 60 6 12 re f*
.933333 1 .8 rg
n 144 60 6 12 re f*
.933333 1 .8 rg
n 150 60 12 12 re f*
.933333 1 .8 rg
n 162 60 6 12 re f*
.933333 1 .8 rg
n 72 48 18 12 re f*
.933333 1 .8 rg
n 90 48 6 12 re f*
.933333 1 .8 rg
n 96 48 6 12 re f*
.933333 1 .8 rg
n 102 48 6 12 re f*
.933333 1 .8 rg
n 114 48 6 12 re f*
.933333 1 .8 rg
n 126 48 30 12 re f*
.933333 1 .8 rg
n 24 36 36 12 re f*
.933333 1 .8 rg
n 66 36 18 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 12 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 48 12 54 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 24 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 222 12 12 12 re f*
.933333 1 .8 rg
n 240 12 36 12 re f*
.933333 1 .8 rg
n 276 12 6 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 294 12 12 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
BT 1 0 0 1 0 170 Tm 12 TL /F6 10 Tf .313725 .313725 .313725 rg (@loop) Tj /F5 10 Tf 0 0 0 rg (\() Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (DataFrame) Tj (,) Tj ( ) Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (,) Tj ( ) Tj 0 .439216 .12549 rg (list) Tj 0 0 0 rg (,) Tj ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ndarray) Tj (\)) Tj  T* /F6 10 Tf .313725 .313725 .313725 rg (@pd2np) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf .313725 .313725 .313725 rg (@compiled) Tj /F5 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (sumsq) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (total) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (\):) Tj  T* (    ) Tj (res) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (empty_like) Tj (\() Tj (a) Tj (\)) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (i) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj 0 .439216 .12549 rg (range) Tj 0 0 0 rg (\() Tj (a) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (shape) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]\):) Tj  T* (        ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (isnan) Tj (\() Tj (a) Tj ([) Tj (i) Tj (]\):) Tj  T* (            ) Tj (res) Tj ([) Tj (i) Tj (]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (nan) Tj  T* (        ) Tj /F6 10 Tf 0 .501961 0 rg (else) Tj /F5 10 Tf 0 0 0 rg (:) Tj  T* (            ) Tj (total) Tj ( ) Tj .188235 .188235 .188235 rg (+=) Tj 0 0 0 rg ( ) Tj (a) Tj ([) Tj (i) Tj (]) Tj .188235 .188235 .188235 rg (**) Tj /F6 10 Tf 0 0 .815686 rg (2) Tj /F5 10 Tf 0 0 0 rg  T* (            ) Tj (res) Tj ([) Tj (i) Tj (]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (total) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (res) Tj  T*  T* (df) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (DataFrame) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj .188235 .188235 .188235 rg (+) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (df) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 234.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sumsq) Tj (\() Tj (df) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 214.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Indeed, since we asked it to loop over dict, list and numpy array \(2d\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 195.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 24 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 6 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 12 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sumsq) Tj (\() Tj 0 .439216 .12549 rg (dict) Tj 0 0 0 rg (\() Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj (,) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (a) Tj .188235 .188235 .188235 rg (+) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 168.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 30 0 6 12 re f*
.933333 1 .8 rg
n 36 0 12 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 36 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (sumsq) Tj (\() Tj (df) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 135.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (presync: manage indexing and date stamps) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 117.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Suppose the function takes two \(or more\) timeseries.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 75.03937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 48 12 re f*
.933333 1 .8 rg
n 48 24 6 12 re f*
.933333 1 .8 rg
n 54 24 30 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
1 .941176 .941176 rg
n 102 24 42 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 30 12 6 12 re f*
.933333 1 .8 rg
n 36 12 12 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 54 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 12 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 42 12 re f*
.933333 1 .8 rg
n 180 12 6 12 re f*
.933333 1 .8 rg
n 0 0 36 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F6 10 Tf .313725 .313725 .313725 rg (@presync) Tj /F5 10 Tf 0 0 0 rg (\() Tj (index) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('inner') Tj 0 0 0 rg (\)) Tj  T* /F6 10 Tf .313725 .313725 .313725 rg (@loop) Tj /F5 10 Tf 0 0 0 rg (\() Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (DataFrame) Tj (,) Tj ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ndarray) Tj (\)) Tj  T* /F6 10 Tf .313725 .313725 .313725 rg (@pd2np) Tj /F5 10 Tf 0 0 0 rg  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries decorators) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (135) Tj T* ET
Q
Q
 
endstream
endobj
1106 0 obj
<<
/Length 23595
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 42 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 72 12 6 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 12 12 re f*
.933333 1 .8 rg
n 24 0 36 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (def) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .376471 .690196 rg (product) Tj /F5 10 Tf 0 0 0 rg (\() Tj (a) Tj (,) Tj ( ) Tj (b) Tj (\):) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (a) Tj ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg ( ) Tj (b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 717.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 12 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 36 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 12 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 12 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 36 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (arange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\);) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (arange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (product) Tj (\() Tj (a) Tj (,) Tj (b) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 697.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What happens when the weights and the timeseries are unsynchronized?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 654.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 12 12 re f*
.933333 1 .8 rg
n 18 24 6 12 re f*
.933333 1 .8 rg
n 30 24 12 12 re f*
.933333 1 .8 rg
n 42 24 6 12 re f*
.933333 1 .8 rg
n 48 24 36 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 96 24 6 12 re f*
.933333 1 .8 rg
n 108 24 36 12 re f*
.933333 1 .8 rg
n 144 24 6 12 re f*
.933333 1 .8 rg
n 150 24 6 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 162 24 12 12 re f*
.933333 1 .8 rg
n 180 24 6 12 re f*
.933333 1 .8 rg
n 192 24 12 12 re f*
.933333 1 .8 rg
n 204 24 6 12 re f*
.933333 1 .8 rg
n 210 24 24 12 re f*
.933333 1 .8 rg
n 240 24 6 12 re f*
1 .941176 .941176 rg
n 252 24 18 12 re f*
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 12 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 48 12 36 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 108 12 36 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 162 12 6 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 174 12 18 12 re f*
.933333 1 .8 rg
n 198 12 12 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 216 12 24 12 re f*
.933333 1 .8 rg
n 246 12 6 12 re f*
1 .941176 .941176 rg
n 258 12 18 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 12 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 120 0 24 12 re f*
.933333 1 .8 rg
n 144 0 6 12 re f*
.933333 1 .8 rg
n 150 0 6 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (a_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (4) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj ( ) Tj (;) Tj ( ) Tj (a_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('a') Tj 0 0 0 rg  T* (b_) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (b) Tj (,) Tj ( ) Tj (drange) Tj (\() Tj .188235 .188235 .188235 rg (-) Tj /F6 10 Tf 0 0 .815686 rg (3) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)\);) Tj ( ) Tj (b_) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (a_) Tj (,) Tj ( ) Tj (b_) Tj (],) Tj ( ) Tj (axis) Tj .188235 .188235 .188235 rg (=) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 627.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 72 0 12 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 144 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (product) Tj (\() Tj (a_) Tj (,) Tj ( ) Tj (b_) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## just the inner values) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 12 12 re f*
.933333 1 .8 rg
n 78 0 6 12 re f*
.933333 1 .8 rg
n 90 0 12 12 re f*
.933333 1 .8 rg
n 102 0 6 12 re f*
.933333 1 .8 rg
n 114 0 78 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (product) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (oj) Tj (\() Tj (a_) Tj (,) Tj ( ) Tj (b_) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## outer join) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 574.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 30 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 126 0 12 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 180 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (product) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (oj) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ffill) Tj (\() Tj (a_) Tj (,) Tj ( ) Tj (b_) Tj (\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## outer join and forward-fill) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 543.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf .12549 .262745 .360784 rg (presync and numpy arrays) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 501.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.883005 Tw (When we deal with thousands of equities, one way of speeding calculations is by stacking them all onto huge) Tj T* 0 Tw 1.347584 Tw (dataframes. This does work but one is always busy fiddling with \221the universe\222 one is trading. We took a slightly) Tj T* 0 Tw (different approach:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 495.8394 cm
Q
q
1 0 0 1 40.01575 495.8394 cm
Q
q
1 0 0 1 40.01575 483.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We define a global timestamp.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 477.8394 cm
Q
q
1 0 0 1 40.01575 453.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .359672 Tw (We then sample each timeseries to that global timestamp, dropping the early history where the data is all nan.) Tj T* 0 Tw (\(df_fillna\(ts, index, method = \221fnna\222\)\).) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 447.8394 cm
Q
q
1 0 0 1 40.01575 435.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We then do our research on these numpy arrays.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 429.8394 cm
Q
q
1 0 0 1 40.01575 417.8394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Finally, once we are done, we resample back to the global timestamp.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 417.8394 cm
Q
q
1 0 0 1 40.01575 375.8394 cm
q
BT 1 0 0 1 0 26 Tm 1.391205 Tw 12 TL /F1 10 Tf 0 0 0 rg (While we are in numpy arrays, we can \221inner join\222 by recognising the \221end\222 of each array shares the same date.) Tj T* 0 Tw 1.74294 Tw (Indeed df_index, df_reindex and presync all work seemlessly on np.ndarray as well as DataFrames, under that) Tj T* 0 Tw (assumption that ) Tj /F2 10 Tf (the end of all arrays are in sync) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 345.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .778205 Tw (We find this approach saves on memory and on computation time. It also lends itself to being able to retrieve and) Tj T* 0 Tw (create specific universes for specific trading ideas. It is not without its own issues but that is a separate discussion.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 315.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 6 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 24 12 12 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 42 12 36 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 6 12 re f*
.933333 1 .8 rg
n 90 12 12 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 120 12 6 12 re f*
.933333 1 .8 rg
n 132 12 12 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 36 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 204 12 6 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 0 0 6 12 re f*
.933333 1 .8 rg
n 6 0 6 12 re f*
.933333 1 .8 rg
n 18 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (a) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (arange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\);) Tj ( ) Tj (b) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (arange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (a) Tj (,) Tj ( ) Tj (b) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 288.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 6 12 re f*
.933333 1 .8 rg
n 54 0 6 12 re f*
.933333 1 .8 rg
n 66 0 6 12 re f*
.933333 1 .8 rg
n 72 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (product) Tj (\() Tj (a) Tj (,) Tj ( ) Tj (b) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 249.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 18 12 6 12 re f*
.933333 1 .8 rg
n 30 12 48 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
1 .941176 .941176 rg
n 84 12 24 12 re f*
.933333 1 .8 rg
n 108 12 6 12 re f*
.933333 1 .8 rg
n 0 0 30 12 re f*
.933333 1 .8 rg
n 36 0 6 12 re f*
.933333 1 .8 rg
n 48 0 12 12 re f*
.933333 1 .8 rg
n 60 0 6 12 re f*
.933333 1 .8 rg
n 66 0 30 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 102 0 12 12 re f*
.933333 1 .8 rg
n 114 0 6 12 re f*
.933333 1 .8 rg
n 120 0 36 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
1 .941176 .941176 rg
n 162 0 36 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
1 .941176 .941176 rg
n 228 0 24 12 re f*
.933333 1 .8 rg
n 252 0 12 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (us) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (calendar) Tj (\() Tj .729412 .129412 .129412 rg ('US') Tj 0 0 0 rg (\)) Tj  T* (dates) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Index) Tj (\() Tj (us) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drange) Tj (\() Tj .729412 .129412 .129412 rg ('-40y') Tj 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (,) Tj .729412 .129412 .129412 rg ('1b') Tj 0 0 0 rg (\)\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 198.6394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 796 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 48 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 66 24 48 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 30 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 168 24 6 12 re f*
1 .941176 .941176 rg
n 174 24 36 12 re f*
.933333 1 .8 rg
n 210 24 6 12 re f*
1 .941176 .941176 rg
n 222 24 36 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
1 .941176 .941176 rg
n 270 24 36 12 re f*
.933333 1 .8 rg
n 306 24 12 12 re f*
.933333 1 .8 rg
n 324 24 6 12 re f*
.933333 1 .8 rg
n 336 24 6 12 re f*
.933333 1 .8 rg
n 348 24 6 12 re f*
.933333 1 .8 rg
n 354 24 30 12 re f*
.933333 1 .8 rg
n 384 24 6 12 re f*
.933333 1 .8 rg
n 396 24 24 12 re f*
.933333 1 .8 rg
n 420 24 6 12 re f*
.933333 1 .8 rg
n 432 24 24 12 re f*
.933333 1 .8 rg
n 456 24 12 12 re f*
.933333 1 .8 rg
n 0 12 48 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 48 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 12 12 re f*
.933333 1 .8 rg
n 138 12 6 12 re f*
.933333 1 .8 rg
n 150 12 36 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 6 12 re f*
.933333 1 .8 rg
n 210 12 12 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 228 12 36 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 270 12 12 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 288 12 36 12 re f*
.933333 1 .8 rg
n 324 12 6 12 re f*
.933333 1 .8 rg
n 330 12 36 12 re f*
.933333 1 .8 rg
n 366 12 6 12 re f*
.933333 1 .8 rg
n 372 12 6 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
.933333 1 .8 rg
n 384 12 6 12 re f*
.933333 1 .8 rg
n 390 12 6 12 re f*
.933333 1 .8 rg
n 396 12 6 12 re f*
.933333 1 .8 rg
n 402 12 6 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
.933333 1 .8 rg
n 414 12 12 12 re f*
.933333 1 .8 rg
n 432 12 12 12 re f*
.933333 1 .8 rg
n 444 12 6 12 re f*
.933333 1 .8 rg
n 450 12 36 12 re f*
.933333 1 .8 rg
n 486 12 6 12 re f*
1 .941176 .941176 rg
n 492 12 12 12 re f*
.878431 .878431 .878431 rg
n 504 12 12 12 re f*
1 .941176 .941176 rg
n 516 12 12 12 re f*
.933333 1 .8 rg
n 528 12 6 12 re f*
.933333 1 .8 rg
n 534 12 6 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (universe) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (dictable) Tj (\() Tj (stock) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj .729412 .129412 .129412 rg ('msft') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('appl') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('tsla') Tj 0 0 0 rg (],) Tj ( ) Tj (n) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj /F6 10 Tf 0 0 .815686 rg (10000) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (8000) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (7000) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj  T* (universe) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (universe) Tj (\() Tj (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (n) Tj (:) Tj ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj (n) Tj .188235 .188235 .188235 rg (+) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (us) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (drange) Tj (\() Tj .729412 .129412 .129412 rg ('-) Tj /F6 10 Tf .733333 .4 .533333 rg (%i) Tj /F5 10 Tf .729412 .129412 .129412 rg (b') Tj .188235 .188235 .188235 rg (%) Tj /F6 10 Tf 0 .501961 0 rg (n) Tj /F5 10 Tf 0 0 0 rg (, 0, '1b'\)\)[np.random.normal\(0,1,n+1\)) Tj (>) Tj (-1]\)) Tj T* (universe) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 135.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 48 12 re f*
.933333 1 .8 rg
n 54 36 6 12 re f*
.933333 1 .8 rg
n 66 36 48 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 18 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 156 36 36 12 re f*
.933333 1 .8 rg
n 198 36 12 12 re f*
.933333 1 .8 rg
n 210 36 6 12 re f*
.933333 1 .8 rg
n 222 36 12 12 re f*
.933333 1 .8 rg
n 234 36 6 12 re f*
.933333 1 .8 rg
n 240 36 36 12 re f*
.933333 1 .8 rg
n 276 36 6 12 re f*
.933333 1 .8 rg
n 0 24 48 12 re f*
.933333 1 .8 rg
n 54 24 6 12 re f*
.933333 1 .8 rg
n 66 24 48 12 re f*
.933333 1 .8 rg
n 114 24 6 12 re f*
.933333 1 .8 rg
n 120 24 30 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 168 24 36 12 re f*
.933333 1 .8 rg
n 210 24 18 12 re f*
.933333 1 .8 rg
n 234 24 6 12 re f*
.933333 1 .8 rg
n 246 24 36 12 re f*
.933333 1 .8 rg
n 282 24 6 12 re f*
.933333 1 .8 rg
n 288 24 18 12 re f*
.933333 1 .8 rg
n 306 24 12 12 re f*
.933333 1 .8 rg
n 0 12 48 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 48 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 18 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 198 12 18 12 re f*
.933333 1 .8 rg
n 216 12 6 12 re f*
.933333 1 .8 rg
n 228 12 36 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 270 12 18 12 re f*
.933333 1 .8 rg
n 288 12 6 12 re f*
.933333 1 .8 rg
n 300 12 12 12 re f*
.933333 1 .8 rg
n 312 12 12 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (universe) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (universe) Tj (\() Tj (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (ts) Tj (:) Tj ( ) Tj (ts) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (values) Tj (\)) Tj  T* (universe) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (universe) Tj (\() Tj (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj ( ) Tj (:) Tj ( ) Tj (cumsum) Tj (\() Tj (rtn) Tj (\)\)) Tj  T* (universe) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (universe) Tj (\() Tj (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (rtn) Tj (:) Tj ( ) Tj (ewmstd) Tj (\() Tj (rtn) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (30) Tj /F5 10 Tf 0 0 0 rg (\)\)) Tj  T* (universe) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 109.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
.933333 1 .8 rg
n 0 0 42 12 re f*
.933333 1 .8 rg
n 42 0 6 12 re f*
.933333 1 .8 rg
n 48 0 36 12 re f*
.933333 1 .8 rg
n 90 0 18 12 re f*
.933333 1 .8 rg
n 108 0 6 12 re f*
.933333 1 .8 rg
n 120 0 12 12 re f*
.933333 1 .8 rg
n 132 0 6 12 re f*
.933333 1 .8 rg
n 138 0 30 12 re f*
.933333 1 .8 rg
n 168 0 6 12 re f*
.933333 1 .8 rg
n 174 0 18 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 12 12 re f*
.933333 1 .8 rg
n 222 0 48 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 276 0 18 12 re f*
.933333 1 .8 rg
n 294 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (presync) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (tss) Tj (:) Tj ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (array) Tj (\() Tj (tss) Tj (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (T) Tj (\)\() Tj (universe) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (vol) Tj (\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 70.23937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 48 12 re f*
.933333 1 .8 rg
n 54 12 6 12 re f*
.933333 1 .8 rg
n 66 12 48 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 12 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
.933333 1 .8 rg
n 138 12 36 12 re f*
.933333 1 .8 rg
n 180 12 30 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 60 12 re f*
.933333 1 .8 rg
n 282 12 6 12 re f*
.933333 1 .8 rg
n 288 12 30 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 330 12 30 12 re f*
.933333 1 .8 rg
n 360 12 12 12 re f*
1 .941176 .941176 rg
n 378 12 30 12 re f*
.933333 1 .8 rg
n 408 12 6 12 re f*
1 .941176 .941176 rg
n 420 12 42 12 re f*
.933333 1 .8 rg
n 462 12 6 12 re f*
1 .941176 .941176 rg
n 474 12 30 12 re f*
.933333 1 .8 rg
n 504 12 6 12 re f*
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (universe) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (universe) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (do) Tj (\() Tj /F6 10 Tf 0 .501961 0 rg (lambda) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (value) Tj (:) Tj ( ) Tj (np_reindex) Tj (\() Tj (value) Tj (,) Tj ( ) Tj (dates) Tj (\),) Tj ( ) Tj .729412 .129412 .129412 rg ('rtn') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('price') Tj 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('vol') Tj 0 0 0 rg (\)) Tj  T* (universe) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries decorators) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (136) Tj T* ET
Q
Q
 
endstream
endobj
1107 0 obj
<<
/Length 11008
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 756.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 18 12 re f*
.933333 1 .8 rg
n 24 12 6 12 re f*
.933333 1 .8 rg
n 36 12 12 12 re f*
.933333 1 .8 rg
n 48 12 6 12 re f*
.933333 1 .8 rg
n 54 12 36 12 re f*
.933333 1 .8 rg
n 90 12 6 12 re f*
.933333 1 .8 rg
n 96 12 48 12 re f*
.933333 1 .8 rg
n 144 12 6 12 re f*
.933333 1 .8 rg
n 150 12 18 12 re f*
.933333 1 .8 rg
n 168 12 6 12 re f*
.933333 1 .8 rg
n 180 12 24 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
.933333 1 .8 rg
n 222 12 6 12 re f*
.933333 1 .8 rg
n 228 12 12 12 re f*
.933333 1 .8 rg
n 246 12 18 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 270 12 42 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
.933333 1 .8 rg
n 330 12 48 12 re f*
.933333 1 .8 rg
n 378 12 6 12 re f*
.933333 1 .8 rg
n 384 12 30 12 re f*
.933333 1 .8 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (vol) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\() Tj (universe) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (vol) Tj (,) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\);) Tj ( ) Tj (vol) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (columns) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (universe) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (stock) Tj  T* (vol) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 721.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (pyg.timeseries.ewma) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The ewm functions implement the concept of time which we think is worthwhile explaining. We start with an example) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 636.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 24 12 re f*
.933333 1 .8 rg
n 30 48 18 12 re f*
.933333 1 .8 rg
n 54 48 36 12 re f*
.933333 1 .8 rg
n 96 48 6 12 re f*
.933333 1 .8 rg
n 102 48 6 12 re f*
.933333 1 .8 rg
n 114 48 36 12 re f*
.933333 1 .8 rg
n 156 48 30 12 re f*
.933333 1 .8 rg
n 192 48 12 12 re f*
.933333 1 .8 rg
n 210 48 12 12 re f*
.933333 1 .8 rg
n 222 48 6 12 re f*
.933333 1 .8 rg
n 234 48 36 12 re f*
.933333 1 .8 rg
n 276 48 36 12 re f*
.933333 1 .8 rg
n 318 48 12 12 re f*
.933333 1 .8 rg
n 336 48 12 12 re f*
.933333 1 .8 rg
n 0 36 18 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 36 36 12 12 re f*
.933333 1 .8 rg
n 48 36 6 12 re f*
.933333 1 .8 rg
n 54 36 36 12 re f*
.933333 1 .8 rg
n 90 36 6 12 re f*
.933333 1 .8 rg
n 96 36 12 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 36 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 156 36 36 12 re f*
.933333 1 .8 rg
n 192 36 6 12 re f*
.933333 1 .8 rg
n 198 36 24 12 re f*
.933333 1 .8 rg
n 222 36 6 12 re f*
.933333 1 .8 rg
n 228 36 6 12 re f*
.933333 1 .8 rg
n 234 36 6 12 re f*
.933333 1 .8 rg
n 240 36 24 12 re f*
.933333 1 .8 rg
n 264 36 12 12 re f*
.933333 1 .8 rg
n 282 36 36 12 re f*
.933333 1 .8 rg
n 318 36 6 12 re f*
.933333 1 .8 rg
n 324 36 24 12 re f*
.933333 1 .8 rg
n 348 36 6 12 re f*
.933333 1 .8 rg
n 354 36 24 12 re f*
.933333 1 .8 rg
n 378 36 6 12 re f*
1 .941176 .941176 rg
n 390 36 24 12 re f*
.933333 1 .8 rg
n 414 36 12 12 re f*
.933333 1 .8 rg
n 0 24 30 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 48 24 36 12 re f*
.933333 1 .8 rg
n 84 24 6 12 re f*
.933333 1 .8 rg
n 90 24 18 12 re f*
.933333 1 .8 rg
n 108 24 12 12 re f*
.933333 1 .8 rg
n 126 24 30 12 re f*
.933333 1 .8 rg
n 156 24 6 12 re f*
.933333 1 .8 rg
n 162 24 24 12 re f*
.933333 1 .8 rg
n 192 24 6 12 re f*
1 .941176 .941176 rg
n 204 24 42 12 re f*
.933333 1 .8 rg
n 0 12 36 12 re f*
.933333 1 .8 rg
n 42 12 6 12 re f*
.933333 1 .8 rg
n 54 12 24 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 30 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 126 12 12 12 re f*
.933333 1 .8 rg
n 138 12 12 12 re f*
.933333 1 .8 rg
n 156 12 36 12 re f*
.933333 1 .8 rg
n 192 12 6 12 re f*
.933333 1 .8 rg
n 198 12 24 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
1 .941176 .941176 rg
n 240 12 48 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 30 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 36 12 re f*
.933333 1 .8 rg
n 144 0 12 12 re f*
.933333 1 .8 rg
n 162 0 24 12 re f*
.933333 1 .8 rg
n 192 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 24 12 re f*
.933333 1 .8 rg
n 246 0 12 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (from) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pyg) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj .188235 .188235 .188235 rg (*) Tj 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (numpy) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (np) Tj /F5 10 Tf 0 0 0 rg (;) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pandas) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf 0 .501961 0 rg (as) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (pd) Tj /F5 10 Tf 0 0 0 rg  T* (rtn) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf .376471 0 .878431 rg (0.01) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (5218) Tj /F5 10 Tf 0 0 0 rg (\),) Tj ( ) Tj (drange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2000) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2020) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('1b') Tj 0 0 0 rg (\)\)) Tj  T* (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cumsum) Tj (\() Tj (rtn) Tj (\);) Tj ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('price') Tj 0 0 0 rg  T* (smooth) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (price) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\);) Tj ( ) Tj (smooth) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('smooth') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (price) Tj (,) Tj ( ) Tj (smooth) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (plot) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 102.6622 379.2705 cm
q
389.9513 0 0 248.9689 0 0 cm
/FormXob.8b531f9e59f36327d5032261fec8d29c Do
Q
Q
q
1 0 0 1 40.01575 312.4705 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
.933333 1 .8 rg
n 0 48 300 12 re f*
.933333 1 .8 rg
n 0 36 18 12 re f*
.933333 1 .8 rg
n 24 36 6 12 re f*
.933333 1 .8 rg
n 36 36 30 12 re f*
.933333 1 .8 rg
n 66 36 6 12 re f*
.933333 1 .8 rg
n 72 36 24 12 re f*
.933333 1 .8 rg
n 96 36 12 12 re f*
.933333 1 .8 rg
n 0 24 18 12 re f*
.933333 1 .8 rg
n 18 24 6 12 re f*
.933333 1 .8 rg
n 24 24 12 12 re f*
.933333 1 .8 rg
n 36 24 6 12 re f*
.933333 1 .8 rg
n 42 24 24 12 re f*
.933333 1 .8 rg
n 66 24 12 12 re f*
.933333 1 .8 rg
n 78 24 12 12 re f*
.933333 1 .8 rg
n 90 24 6 12 re f*
.933333 1 .8 rg
n 96 24 24 12 re f*
.933333 1 .8 rg
n 120 24 12 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 150 24 12 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 168 24 18 12 re f*
.933333 1 .8 rg
n 0 12 60 12 re f*
.933333 1 .8 rg
n 66 12 6 12 re f*
.933333 1 .8 rg
n 78 12 24 12 re f*
.933333 1 .8 rg
n 102 12 6 12 re f*
.933333 1 .8 rg
n 108 12 18 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 138 12 12 12 re f*
.933333 1 .8 rg
n 150 12 12 12 re f*
.933333 1 .8 rg
n 168 12 60 12 re f*
.933333 1 .8 rg
n 228 12 6 12 re f*
.933333 1 .8 rg
n 234 12 24 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
1 .941176 .941176 rg
n 276 12 72 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 18 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 60 12 re f*
.933333 1 .8 rg
n 156 0 12 12 re f*
.933333 1 .8 rg
n 174 0 24 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 216 0 6 12 re f*
.933333 1 .8 rg
n 222 0 6 12 re f*
.933333 1 .8 rg
n 228 0 6 12 re f*
.933333 1 .8 rg
n 234 0 24 12 re f*
.933333 1 .8 rg
n 258 0 12 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F8 10 Tf .501961 .501961 .501961 rg (## now suppose somewhow we lost 4 years of data...) Tj /F5 10 Tf 0 0 0 rg  T* (bad) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (copy) Tj (\(\)) Tj  T* (bad) Tj ([) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2008) Tj /F5 10 Tf 0 0 0 rg (\):) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2012) Tj /F5 10 Tf 0 0 0 rg (\)]) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (nan) Tj  T* (smooth_bad) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (bad) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (\);) Tj ( ) Tj (smooth_bad) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('smooth_bad') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (bad) Tj (,) Tj ( ) Tj (smooth_bad) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (plot) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 102.6622 55.50161 cm
q
389.9513 0 0 248.9689 0 0 cm
/FormXob.637d4621e4e40c1e0d2dd14ffd25f01a Do
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries.ewma) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (137) Tj T* ET
Q
Q
 
endstream
endobj
1108 0 obj
<<
/Length 16692
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
.933333 1 .8 rg
n 0 24 96 12 re f*
.933333 1 .8 rg
n 102 24 6 12 re f*
.933333 1 .8 rg
n 114 24 24 12 re f*
.933333 1 .8 rg
n 138 24 6 12 re f*
.933333 1 .8 rg
n 144 24 18 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 174 24 12 12 re f*
.933333 1 .8 rg
n 186 24 6 12 re f*
.933333 1 .8 rg
n 198 24 24 12 re f*
.933333 1 .8 rg
n 228 24 6 12 re f*
1 .941176 .941176 rg
n 240 24 18 12 re f*
.933333 1 .8 rg
n 258 24 6 12 re f*
.933333 1 .8 rg
n 0 12 96 12 re f*
.933333 1 .8 rg
n 96 12 6 12 re f*
.933333 1 .8 rg
n 102 12 24 12 re f*
.933333 1 .8 rg
n 132 12 6 12 re f*
1 .941176 .941176 rg
n 144 12 192 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 18 12 re f*
.933333 1 .8 rg
n 84 0 6 12 re f*
.933333 1 .8 rg
n 96 0 60 12 re f*
.933333 1 .8 rg
n 156 0 6 12 re f*
.933333 1 .8 rg
n 168 0 96 12 re f*
.933333 1 .8 rg
n 264 0 12 12 re f*
.933333 1 .8 rg
n 282 0 24 12 re f*
.933333 1 .8 rg
n 312 0 6 12 re f*
.933333 1 .8 rg
n 324 0 6 12 re f*
.933333 1 .8 rg
n 330 0 6 12 re f*
.933333 1 .8 rg
n 336 0 6 12 re f*
.933333 1 .8 rg
n 342 0 24 12 re f*
.933333 1 .8 rg
n 366 0 12 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 0 rg (smooth_with_time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (bad) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (50) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('b') Tj 0 0 0 rg (\)) Tj  T* (smooth_with_time) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('smooth_with_business_day_clock') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (bad) Tj (,) Tj ( ) Tj (smooth_bad) Tj (,) Tj ( ) Tj (smooth_with_time) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (plot) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 102.6622 487.2705 cm
q
389.9513 0 0 248.9689 0 0 cm
/FormXob.dbcd17293d72fd6a84d0d10c901d1d9c Do
Q
Q
q
1 0 0 1 40.01575 445.2705 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .140205 Tw (What happened here? How can smooth with clock track better? The answer is that if you provide a clock, ewma can) Tj T* 0 Tw .661147 Tw (recognise that 4 years have passed. The old data is irrelevant, it forgets the old position and start with most of the) Tj T* 0 Tw (weight on the more recent observations) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 412.4705 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (What happens if the clock does not move at all?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 370.4705 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.194205 Tw (Suppose we now choose to calculate daily ewma but we are doing this with intraday data. If the number of data) Tj T* 0 Tw .449243 Tw (points per day is constant and known, then this can be done with ease. Using time parameter, we can do this even) Tj T* 0 Tw (for an irregularly spaced timeseries. We first just create some fake data:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 159.6705 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 592 210 re B*
Q
q
.933333 1 .8 rg
n 0 192 36 12 re f*
.933333 1 .8 rg
n 42 192 48 12 re f*
.933333 1 .8 rg
n 0 180 18 12 re f*
.933333 1 .8 rg
n 24 180 6 12 re f*
.933333 1 .8 rg
n 36 180 48 12 re f*
.933333 1 .8 rg
n 84 180 6 12 re f*
.933333 1 .8 rg
n 90 180 54 12 re f*
.933333 1 .8 rg
n 144 180 6 12 re f*
.933333 1 .8 rg
n 150 180 42 12 re f*
.933333 1 .8 rg
n 198 180 6 12 re f*
.933333 1 .8 rg
n 210 180 6 12 re f*
.933333 1 .8 rg
n 216 180 6 12 re f*
.933333 1 .8 rg
n 0 168 48 12 re f*
.933333 1 .8 rg
n 54 168 6 12 re f*
.933333 1 .8 rg
n 66 168 6 12 re f*
.933333 1 .8 rg
n 72 168 6 12 re f*
.933333 1 .8 rg
n 84 168 18 12 re f*
.933333 1 .8 rg
n 108 168 6 12 re f*
.933333 1 .8 rg
n 120 168 12 12 re f*
.933333 1 .8 rg
n 138 168 36 12 re f*
.933333 1 .8 rg
n 174 168 6 12 re f*
.933333 1 .8 rg
n 180 168 24 12 re f*
.933333 1 .8 rg
n 204 168 6 12 re f*
.933333 1 .8 rg
n 216 168 24 12 re f*
.933333 1 .8 rg
n 240 168 6 12 re f*
.933333 1 .8 rg
n 252 168 18 12 re f*
.933333 1 .8 rg
n 270 168 12 12 re f*
.933333 1 .8 rg
n 0 156 12 12 re f*
.933333 1 .8 rg
n 18 156 6 12 re f*
.933333 1 .8 rg
n 30 156 12 12 re f*
.933333 1 .8 rg
n 42 156 6 12 re f*
.933333 1 .8 rg
n 48 156 36 12 re f*
.933333 1 .8 rg
n 84 156 6 12 re f*
.933333 1 .8 rg
n 90 156 12 12 re f*
.933333 1 .8 rg
n 102 156 6 12 re f*
.933333 1 .8 rg
n 108 156 36 12 re f*
.933333 1 .8 rg
n 144 156 6 12 re f*
.933333 1 .8 rg
n 150 156 36 12 re f*
.933333 1 .8 rg
n 186 156 6 12 re f*
.933333 1 .8 rg
n 192 156 24 12 re f*
.933333 1 .8 rg
n 216 156 6 12 re f*
.933333 1 .8 rg
n 222 156 12 12 re f*
.933333 1 .8 rg
n 234 156 6 12 re f*
.933333 1 .8 rg
n 246 156 6 12 re f*
.933333 1 .8 rg
n 252 156 6 12 re f*
.933333 1 .8 rg
n 264 156 18 12 re f*
.933333 1 .8 rg
n 282 156 6 12 re f*
.933333 1 .8 rg
n 288 156 48 12 re f*
.933333 1 .8 rg
n 336 156 18 12 re f*
.933333 1 .8 rg
n 360 156 48 12 re f*
.933333 1 .8 rg
n 408 156 6 12 re f*
.933333 1 .8 rg
n 0 144 30 12 re f*
.933333 1 .8 rg
n 36 144 6 12 re f*
.933333 1 .8 rg
n 48 144 36 12 re f*
.933333 1 .8 rg
n 84 144 6 12 re f*
.933333 1 .8 rg
n 90 144 12 12 re f*
.933333 1 .8 rg
n 102 144 12 12 re f*
.933333 1 .8 rg
n 120 144 30 12 re f*
.933333 1 .8 rg
n 150 144 6 12 re f*
.933333 1 .8 rg
n 156 144 24 12 re f*
.933333 1 .8 rg
n 186 144 6 12 re f*
1 .941176 .941176 rg
n 198 144 60 12 re f*
.933333 1 .8 rg
n 0 120 24 12 re f*
.933333 1 .8 rg
n 30 120 6 12 re f*
.933333 1 .8 rg
n 42 120 12 12 re f*
.933333 1 .8 rg
n 54 120 6 12 re f*
.933333 1 .8 rg
n 60 120 30 12 re f*
.933333 1 .8 rg
n 90 120 12 12 re f*
.933333 1 .8 rg
n 102 120 6 12 re f*
.933333 1 .8 rg
n 114 120 18 12 re f*
.933333 1 .8 rg
n 138 120 6 12 re f*
.933333 1 .8 rg
n 150 120 12 12 re f*
.933333 1 .8 rg
n 168 120 36 12 re f*
.933333 1 .8 rg
n 204 120 6 12 re f*
.933333 1 .8 rg
n 210 120 24 12 re f*
.933333 1 .8 rg
n 234 120 6 12 re f*
.933333 1 .8 rg
n 246 120 24 12 re f*
.933333 1 .8 rg
n 270 120 6 12 re f*
.933333 1 .8 rg
n 282 120 18 12 re f*
.933333 1 .8 rg
n 300 120 6 12 re f*
.933333 1 .8 rg
n 312 120 12 12 re f*
.933333 1 .8 rg
n 330 120 6 12 re f*
.933333 1 .8 rg
n 336 120 6 12 re f*
.933333 1 .8 rg
n 342 120 24 12 re f*
.933333 1 .8 rg
n 366 120 6 12 re f*
.933333 1 .8 rg
n 372 120 6 12 re f*
.933333 1 .8 rg
n 378 120 6 12 re f*
.933333 1 .8 rg
n 390 120 18 12 re f*
.933333 1 .8 rg
n 414 120 6 12 re f*
.933333 1 .8 rg
n 420 120 6 12 re f*
.933333 1 .8 rg
n 426 120 24 12 re f*
.933333 1 .8 rg
n 450 120 6 12 re f*
.933333 1 .8 rg
n 456 120 6 12 re f*
.933333 1 .8 rg
n 462 120 12 12 re f*
.933333 1 .8 rg
n 474 120 12 12 re f*
.933333 1 .8 rg
n 492 120 96 12 re f*
.933333 1 .8 rg
n 0 108 54 12 re f*
.933333 1 .8 rg
n 60 108 6 12 re f*
.933333 1 .8 rg
n 72 108 24 12 re f*
.933333 1 .8 rg
n 96 108 6 12 re f*
.933333 1 .8 rg
n 102 108 12 12 re f*
.933333 1 .8 rg
n 114 108 6 12 re f*
.933333 1 .8 rg
n 120 108 36 12 re f*
.933333 1 .8 rg
n 156 108 6 12 re f*
.933333 1 .8 rg
n 162 108 36 12 re f*
.933333 1 .8 rg
n 198 108 6 12 re f*
.933333 1 .8 rg
n 204 108 6 12 re f*
.933333 1 .8 rg
n 210 108 6 12 re f*
.933333 1 .8 rg
n 216 108 6 12 re f*
.933333 1 .8 rg
n 222 108 6 12 re f*
.933333 1 .8 rg
n 228 108 18 12 re f*
.933333 1 .8 rg
n 246 108 6 12 re f*
.933333 1 .8 rg
n 252 108 24 12 re f*
.933333 1 .8 rg
n 276 108 12 12 re f*
.933333 1 .8 rg
n 288 108 6 12 re f*
.933333 1 .8 rg
n 294 108 6 12 re f*
.933333 1 .8 rg
n 300 108 6 12 re f*
.933333 1 .8 rg
n 0 84 12 12 re f*
.933333 1 .8 rg
n 18 84 6 12 re f*
.933333 1 .8 rg
n 30 84 12 12 re f*
.933333 1 .8 rg
n 42 84 6 12 re f*
.933333 1 .8 rg
n 48 84 36 12 re f*
.933333 1 .8 rg
n 84 84 6 12 re f*
.933333 1 .8 rg
n 90 84 12 12 re f*
.933333 1 .8 rg
n 102 84 6 12 re f*
.933333 1 .8 rg
n 108 84 36 12 re f*
.933333 1 .8 rg
n 144 84 6 12 re f*
.933333 1 .8 rg
n 150 84 36 12 re f*
.933333 1 .8 rg
n 186 84 6 12 re f*
.933333 1 .8 rg
n 192 84 24 12 re f*
.933333 1 .8 rg
n 216 84 6 12 re f*
.933333 1 .8 rg
n 222 84 12 12 re f*
.933333 1 .8 rg
n 234 84 6 12 re f*
.933333 1 .8 rg
n 246 84 6 12 re f*
.933333 1 .8 rg
n 252 84 6 12 re f*
.933333 1 .8 rg
n 264 84 18 12 re f*
.933333 1 .8 rg
n 282 84 6 12 re f*
.933333 1 .8 rg
n 288 84 24 12 re f*
.933333 1 .8 rg
n 312 84 18 12 re f*
.933333 1 .8 rg
n 336 84 24 12 re f*
.933333 1 .8 rg
n 360 84 6 12 re f*
.933333 1 .8 rg
n 0 72 30 12 re f*
.933333 1 .8 rg
n 36 72 6 12 re f*
.933333 1 .8 rg
n 48 72 36 12 re f*
.933333 1 .8 rg
n 84 72 6 12 re f*
.933333 1 .8 rg
n 90 72 12 12 re f*
.933333 1 .8 rg
n 102 72 12 12 re f*
.933333 1 .8 rg
n 120 72 30 12 re f*
.933333 1 .8 rg
n 150 72 6 12 re f*
.933333 1 .8 rg
n 156 72 24 12 re f*
.933333 1 .8 rg
n 186 72 6 12 re f*
1 .941176 .941176 rg
n 198 72 60 12 re f*
.933333 1 .8 rg
n 0 60 30 12 re f*
.933333 1 .8 rg
n 36 60 6 12 re f*
.933333 1 .8 rg
n 48 60 30 12 re f*
.933333 1 .8 rg
n 78 60 6 12 re f*
.933333 1 .8 rg
n 84 60 54 12 re f*
.933333 1 .8 rg
n 138 60 6 12 re f*
.933333 1 .8 rg
n 150 60 192 12 re f*
.933333 1 .8 rg
n 0 36 24 12 re f*
.933333 1 .8 rg
n 30 36 6 12 re f*
.933333 1 .8 rg
n 42 36 36 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 84 36 24 12 re f*
.933333 1 .8 rg
n 108 36 6 12 re f*
.933333 1 .8 rg
n 114 36 24 12 re f*
.933333 1 .8 rg
n 138 36 6 12 re f*
.933333 1 .8 rg
n 144 36 6 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 0 12 30 12 re f*
.933333 1 .8 rg
n 36 12 6 12 re f*
.933333 1 .8 rg
n 48 12 30 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 84 12 42 12 re f*
.933333 1 .8 rg
n 126 12 6 12 re f*
.933333 1 .8 rg
n 132 12 24 12 re f*
.933333 1 .8 rg
n 156 12 6 12 re f*
.933333 1 .8 rg
n 168 12 36 12 re f*
.933333 1 .8 rg
n 210 12 6 12 re f*
1 .941176 .941176 rg
n 222 12 42 12 re f*
.933333 1 .8 rg
n 264 12 12 12 re f*
.933333 1 .8 rg
n 282 12 30 12 re f*
.933333 1 .8 rg
n 312 12 6 12 re f*
.933333 1 .8 rg
n 318 12 24 12 re f*
.933333 1 .8 rg
n 348 12 6 12 re f*
1 .941176 .941176 rg
n 360 12 42 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 30 12 re f*
.933333 1 .8 rg
n 96 0 6 12 re f*
.933333 1 .8 rg
n 108 0 30 12 re f*
.933333 1 .8 rg
n 138 0 12 12 re f*
.933333 1 .8 rg
n 156 0 24 12 re f*
.933333 1 .8 rg
n 186 0 6 12 re f*
.933333 1 .8 rg
n 198 0 6 12 re f*
.933333 1 .8 rg
n 204 0 6 12 re f*
.933333 1 .8 rg
n 210 0 6 12 re f*
.933333 1 .8 rg
n 216 0 30 12 re f*
.933333 1 .8 rg
n 246 0 12 12 re f*
.933333 1 .8 rg
n 258 0 6 12 re f*
.933333 1 .8 rg
n 264 0 24 12 re f*
.933333 1 .8 rg
n 288 0 12 12 re f*
BT 1 0 0 1 0 194 Tm 12 TL /F6 10 Tf 0 .501961 0 rg (import) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf .054902 .517647 .709804 rg (datetime) Tj /F5 10 Tf 0 0 0 rg  T* (bar) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (datetime) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (timedelta) Tj (\() Tj (minutes) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (5) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* (all_bars) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj ([) Tj (t) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (drange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2020) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (2021) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (bar) Tj (\)]) Tj  T* (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf .376471 0 .878431 rg (0.01) Tj /F5 10 Tf .188235 .188235 .188235 rg (/) Tj /F6 10 Tf 0 0 .815686 rg (24) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (all_bars) Tj (\)\),) Tj ( ) Tj (all_bars) Tj (\)) Tj  T* (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cumsum) Tj (\() Tj (ts) Tj (\);) Tj ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('intraday') Tj 0 0 0 rg  T*  T* (bars) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (array) Tj (\([) Tj (t) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (for) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj ( ) Tj /F6 10 Tf (in) Tj /F5 10 Tf ( ) Tj (drange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2020) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (2021) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (bar) Tj (\)) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (if) Tj /F5 10 Tf 0 0 0 rg ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (hour) Tj .188235 .188235 .188235 rg (>) Tj (=) Tj /F6 10 Tf 0 0 .815686 rg (8) Tj /F5 10 Tf 0 0 0 rg ( ) Tj /F6 10 Tf (and) Tj /F5 10 Tf ( ) Tj (t) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (hour) Tj .188235 .188235 .188235 rg (<) Tj (=) Tj /F6 10 Tf 0 0 .815686 rg (17) Tj /F5 10 Tf 0 0 0 rg (]\)) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## trading hours) Tj /F5 10 Tf 0 0 0 rg  T* (irregular) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (bars) Tj ([) Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (bars) Tj (\)\)) Tj .188235 .188235 .188235 rg (>) Tj /F6 10 Tf 0 0 .815686 rg (0) Tj /F5 10 Tf 0 0 0 rg (]) Tj  T*  T* (ts) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (Series) Tj (\() Tj (np) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (random) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (normal) Tj (\() Tj /F6 10 Tf .376471 0 .878431 rg (0.01) Tj /F5 10 Tf .188235 .188235 .188235 rg (/) Tj /F6 10 Tf 0 0 .815686 rg (24) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj 0 .439216 .12549 rg (len) Tj 0 0 0 rg (\() Tj (bars) Tj (\)\),) Tj ( ) Tj (bars) Tj (\)) Tj  T* (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (cumsum) Tj (\() Tj (ts) Tj (\);) Tj ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('intraday') Tj 0 0 0 rg  T* (price) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj ([) Tj (irregular) Tj (]) Tj ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## remove half the bars randomly) Tj /F5 10 Tf 0 0 0 rg  T*  T* (days) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (drange) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2020) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (2021) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T*  T* (daily) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (price) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (,) Tj ( ) Tj (method) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('ffill') Tj 0 0 0 rg (\);) Tj ( ) Tj (daily) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('daily') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (price) Tj (,) Tj ( ) Tj (daily) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ffill) Tj (\(\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (plot) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries.ewma) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (138) Tj T* ET
Q
Q
 
endstream
endobj
1109 0 obj
<<
/Length 9285
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 110.1612 537.0706 cm
q
374.9531 0 0 249.9688 0 0 cm
/FormXob.16921e2991332acfab095a6a44d4411a Do
Q
Q
q
1 0 0 1 40.01575 531.0706 cm
Q
q
1 0 0 1 40.01575 531.0706 cm
Q
q
1 0 0 1 40.01575 507.0706 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.099829 Tw 12 TL /F1 10 Tf 0 0 0 rg (By setting clock to ) Tj /F2 10 Tf (d) Tj /F1 10 Tf (aily we tell ewma that all the hourly data in the same day are \221on same clock\222. And it will use) Tj T* 0 Tw (historic end-of-day prices while updating today the last point until the cloc moves to tomorrow\222s reading) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 501.0706 cm
Q
q
1 0 0 1 40.01575 489.0706 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If we set the clock to ) Tj /F2 10 Tf (f) Tj /F1 10 Tf (raction, it will update continuously throuout the day) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 489.0706 cm
Q
q
1 0 0 1 40.01575 434.2706 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 694 54 re B*
Q
q
.933333 1 .8 rg
n 0 36 72 12 re f*
.933333 1 .8 rg
n 78 36 6 12 re f*
.933333 1 .8 rg
n 90 36 24 12 re f*
.933333 1 .8 rg
n 114 36 6 12 re f*
.933333 1 .8 rg
n 120 36 30 12 re f*
.933333 1 .8 rg
n 150 36 6 12 re f*
.933333 1 .8 rg
n 162 36 12 12 re f*
.933333 1 .8 rg
n 174 36 6 12 re f*
1 .941176 .941176 rg
n 186 36 18 12 re f*
.933333 1 .8 rg
n 204 36 12 12 re f*
.933333 1 .8 rg
n 222 36 72 12 re f*
.933333 1 .8 rg
n 294 36 6 12 re f*
.933333 1 .8 rg
n 300 36 24 12 re f*
.933333 1 .8 rg
n 330 36 6 12 re f*
1 .941176 .941176 rg
n 342 36 102 12 re f*
.933333 1 .8 rg
n 450 36 240 12 re f*
.933333 1 .8 rg
n 0 24 120 12 re f*
.933333 1 .8 rg
n 126 24 6 12 re f*
.933333 1 .8 rg
n 138 24 24 12 re f*
.933333 1 .8 rg
n 162 24 6 12 re f*
.933333 1 .8 rg
n 168 24 30 12 re f*
.933333 1 .8 rg
n 198 24 6 12 re f*
.933333 1 .8 rg
n 210 24 12 12 re f*
.933333 1 .8 rg
n 222 24 6 12 re f*
.933333 1 .8 rg
n 234 24 24 12 re f*
.933333 1 .8 rg
n 264 24 6 12 re f*
1 .941176 .941176 rg
n 276 24 18 12 re f*
.933333 1 .8 rg
n 294 24 12 12 re f*
.933333 1 .8 rg
n 312 24 120 12 re f*
.933333 1 .8 rg
n 432 24 6 12 re f*
.933333 1 .8 rg
n 438 24 24 12 re f*
.933333 1 .8 rg
n 468 24 6 12 re f*
1 .941176 .941176 rg
n 480 24 210 12 re f*
.933333 1 .8 rg
n 0 12 72 12 re f*
.933333 1 .8 rg
n 78 12 6 12 re f*
.933333 1 .8 rg
n 90 12 24 12 re f*
.933333 1 .8 rg
n 114 12 6 12 re f*
.933333 1 .8 rg
n 120 12 30 12 re f*
.933333 1 .8 rg
n 150 12 6 12 re f*
.933333 1 .8 rg
n 162 12 12 12 re f*
.933333 1 .8 rg
n 174 12 12 12 re f*
.933333 1 .8 rg
n 192 12 72 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 270 12 24 12 re f*
.933333 1 .8 rg
n 300 12 6 12 re f*
1 .941176 .941176 rg
n 312 12 84 12 re f*
.933333 1 .8 rg
n 0 0 12 12 re f*
.933333 1 .8 rg
n 12 0 6 12 re f*
.933333 1 .8 rg
n 18 0 36 12 re f*
.933333 1 .8 rg
n 54 0 12 12 re f*
.933333 1 .8 rg
n 66 0 72 12 re f*
.933333 1 .8 rg
n 138 0 6 12 re f*
.933333 1 .8 rg
n 150 0 120 12 re f*
.933333 1 .8 rg
n 270 0 6 12 re f*
.933333 1 .8 rg
n 282 0 72 12 re f*
.933333 1 .8 rg
n 354 0 12 12 re f*
.933333 1 .8 rg
n 372 0 24 12 re f*
.933333 1 .8 rg
n 402 0 6 12 re f*
.933333 1 .8 rg
n 414 0 6 12 re f*
.933333 1 .8 rg
n 420 0 6 12 re f*
.933333 1 .8 rg
n 426 0 6 12 re f*
.933333 1 .8 rg
n 432 0 30 12 re f*
.933333 1 .8 rg
n 462 0 18 12 re f*
.933333 1 .8 rg
n 480 0 12 12 re f*
.933333 1 .8 rg
n 492 0 6 12 re f*
.933333 1 .8 rg
n 498 0 24 12 re f*
.933333 1 .8 rg
n 522 0 6 12 re f*
.933333 1 .8 rg
n 528 0 12 12 re f*
.933333 1 .8 rg
n 540 0 6 12 re f*
.933333 1 .8 rg
n 546 0 12 12 re f*
.933333 1 .8 rg
n 558 0 18 12 re f*
.933333 1 .8 rg
n 576 0 6 12 re f*
.933333 1 .8 rg
n 582 0 24 12 re f*
.933333 1 .8 rg
n 606 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 0 rg (smooth_intra) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (price) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj .729412 .129412 .129412 rg ('f') Tj 0 0 0 rg (\);) Tj ( ) Tj (smooth_intra) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('smooth_intraday') Tj 0 0 0 rg ( ) Tj /F8 10 Tf .501961 .501961 .501961 rg (## roughly matching using irregular bars) Tj /F5 10 Tf 0 0 0 rg  T* (smooth_intra_using_d) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (price) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (,) Tj ( ) Tj (time) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('d') Tj 0 0 0 rg (\);) Tj ( ) Tj (smooth_intra_using_d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('smooth_intraday_using_daily_clock') Tj 0 0 0 rg  T* (smooth_daily) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj (ewma) Tj (\() Tj (daily) Tj (,) Tj ( ) Tj /F6 10 Tf 0 0 .815686 rg (20) Tj /F5 10 Tf 0 0 0 rg (\);) Tj ( ) Tj (smooth_daily) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (name) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('smooth_daily') Tj 0 0 0 rg  T* (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (smooth_daily) Tj (,) Tj ( ) Tj (smooth_intra_using_d) Tj (,) Tj ( ) Tj (smooth_intra) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (ffill) Tj (\(\)[) Tj (dt) Tj (\() Tj /F6 10 Tf 0 0 .815686 rg (2020) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (12) Tj /F5 10 Tf 0 0 0 rg (,) Tj /F6 10 Tf 0 0 .815686 rg (15) Tj /F5 10 Tf 0 0 0 rg (\):]) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (plot) Tj (\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 103.1621 171.3025 cm
q
388.9514 0 0 254.9681 0 0 cm
/FormXob.07d784879f56f2518a9854af4885a8b0 Do
Q
Q
q
1 0 0 1 40.01575 165.3025 cm
Q
q
1 0 0 1 40.01575 165.3025 cm
Q
q
1 0 0 1 40.01575 153.3025 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (smooth_daily is calculated on daily basis and is constant within the day and experiences jumps on EOD) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 147.3025 cm
Q
q
1 0 0 1 40.01575 123.3025 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .121268 Tw (time = \221d\222 option front-runs daily, but at the price of being more volatile intra-day. On end-of-day the two version) Tj T* 0 Tw (aggree) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 117.3025 cm
Q
q
1 0 0 1 40.01575 105.3025 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (time = \221f\222 is a smoother version of daily. It is leading, but not by much) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 105.3025 cm
Q
q
1 0 0 1 40.01575 74.50249 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 538 30 re B*
Q
q
.933333 1 .8 rg
n 0 12 12 12 re f*
.933333 1 .8 rg
n 12 12 6 12 re f*
.933333 1 .8 rg
n 18 12 36 12 re f*
.933333 1 .8 rg
n 54 12 12 12 re f*
.933333 1 .8 rg
n 66 12 120 12 re f*
.933333 1 .8 rg
n 186 12 6 12 re f*
.933333 1 .8 rg
n 192 12 42 12 re f*
.933333 1 .8 rg
n 234 12 6 12 re f*
.933333 1 .8 rg
n 240 12 24 12 re f*
.933333 1 .8 rg
n 264 12 6 12 re f*
.933333 1 .8 rg
n 276 12 36 12 re f*
.933333 1 .8 rg
n 318 12 6 12 re f*
1 .941176 .941176 rg
n 330 12 42 12 re f*
.933333 1 .8 rg
n 372 12 12 12 re f*
.933333 1 .8 rg
n 390 12 72 12 re f*
.933333 1 .8 rg
n 462 12 12 12 re f*
.933333 1 .8 rg
n 480 12 24 12 re f*
.933333 1 .8 rg
n 510 12 6 12 re f*
.933333 1 .8 rg
n 522 12 6 12 re f*
.933333 1 .8 rg
n 528 12 6 12 re f*
.933333 1 .8 rg
n 0 0 450 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 0 rg (pd) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (concat) Tj (\([) Tj (smooth_intra_using_d) Tj .188235 .188235 .188235 rg (.) Tj 0 0 0 rg (reindex) Tj (\() Tj (days) Tj (,) Tj ( ) Tj (method) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ('ffill') Tj 0 0 0 rg (\),) Tj ( ) Tj (smooth_daily) Tj (],) Tj ( ) Tj (axis) Tj ( ) Tj .188235 .188235 .188235 rg (=) Tj 0 0 0 rg ( ) Tj /F6 10 Tf 0 0 .815686 rg (1) Tj /F5 10 Tf 0 0 0 rg (\)) Tj  T* /F8 10 Tf .501961 .501961 .501961 rg (## on end-of-day we have an exact match between time = 'd' and daily smooth) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (pyg.timeseries.ewma) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (139) Tj T* ET
Q
Q
 
endstream
endobj
1110 0 obj
<<
/Length 4026
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F3 14 Tf .12549 .262745 .360784 rg (What are valid time parameters?) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 758.2394 cm
Q
q
1 0 0 1 40.01575 758.2394 cm
Q
q
1 0 0 1 40.01575 746.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (None: If None is provided, any \(non-nan\) observation is considered to be a clock ticking) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 740.2394 cm
Q
q
1 0 0 1 40.01575 728.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (i: index of timeseries. The clock ticks also for nan observations. This is the default for pandas) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 722.2394 cm
Q
q
1 0 0 1 40.01575 710.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (f: fraction of day) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 704.2394 cm
Q
q
1 0 0 1 40.01575 692.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (b/d/w/m/q/y: business day/daily/weekly/monthly/quarterly or yearly) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 686.2394 cm
Q
q
1 0 0 1 40.01575 674.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Calendar: the business day as defined by the calendar provided) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 668.2394 cm
Q
q
1 0 0 1 40.01575 656.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For full control, you can provide a timeseries of non-decreasing times matching the original array) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 656.2394 cm
Q
q
1 0 0 1 40.01575 649.4394 cm
q
Q
Q
q
1 0 0 1 40.01575 614.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Indices and tables) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 602.2394 cm
Q
q
1 0 0 1 40.01575 602.2394 cm
Q
q
1 0 0 1 40.01575 590.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (genindex) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 584.2394 cm
Q
q
1 0 0 1 40.01575 572.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 48 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (modindex) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 566.2394 cm
Q
q
1 0 0 1 40.01575 554.2394 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
.933333 1 .8 rg
n 0 0 36 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (search) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 40.01575 554.2394 cm
Q
q
1 0 0 1 40.01575 554.2394 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Indices and tables) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (140) Tj T* ET
Q
Q
 
endstream
endobj
1111 0 obj
<<
/Length 870
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Python Module Index) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 744.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 256.3496 20.4 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 2.4 Tm /F3 12 Tf 14.4 TL (p) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 726.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (pyg) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 708.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base._getitem) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 690.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base._inspect) Tj  T* ET
Q
Q
q
1 0 0 1 40.01575 672.6394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (pyg.base._types) Tj  T* ET
Q
Q
 
endstream
endobj
1112 0 obj
<<
/Nums [ 0 1113 0 R 1 1114 0 R 2 1115 0 R 3 1116 0 R 4 1117 0 R 
  5 1118 0 R 6 1119 0 R 7 1120 0 R 8 1121 0 R 9 1122 0 R 
  10 1123 0 R 11 1124 0 R 12 1125 0 R 13 1126 0 R 14 1127 0 R 
  15 1128 0 R 16 1129 0 R 17 1130 0 R 18 1131 0 R 19 1132 0 R 
  20 1133 0 R 21 1134 0 R 22 1135 0 R 23 1136 0 R 24 1137 0 R 
  25 1138 0 R 26 1139 0 R 27 1140 0 R 28 1141 0 R 29 1142 0 R 
  30 1143 0 R 31 1144 0 R 32 1145 0 R 33 1146 0 R 34 1147 0 R 
  35 1148 0 R 36 1149 0 R 37 1150 0 R 38 1151 0 R 39 1152 0 R 
  40 1153 0 R 41 1154 0 R 42 1155 0 R 43 1156 0 R 44 1157 0 R 
  45 1158 0 R 46 1159 0 R 47 1160 0 R 48 1161 0 R 49 1162 0 R 
  50 1163 0 R 51 1164 0 R 52 1165 0 R 53 1166 0 R 54 1167 0 R 
  55 1168 0 R 56 1169 0 R 57 1170 0 R 58 1171 0 R 59 1172 0 R 
  60 1173 0 R 61 1174 0 R 62 1175 0 R 63 1176 0 R 64 1177 0 R 
  65 1178 0 R 66 1179 0 R 67 1180 0 R 68 1181 0 R 69 1182 0 R 
  70 1183 0 R 71 1184 0 R 72 1185 0 R 73 1186 0 R 74 1187 0 R 
  75 1188 0 R 76 1189 0 R 77 1190 0 R 78 1191 0 R 79 1192 0 R 
  80 1193 0 R 81 1194 0 R 82 1195 0 R 83 1196 0 R 84 1197 0 R 
  85 1198 0 R 86 1199 0 R 87 1200 0 R 88 1201 0 R 89 1202 0 R 
  90 1203 0 R 91 1204 0 R 92 1205 0 R 93 1206 0 R 94 1207 0 R 
  95 1208 0 R 96 1209 0 R 97 1210 0 R 98 1211 0 R 99 1212 0 R 
  100 1213 0 R 101 1214 0 R 102 1215 0 R 103 1216 0 R 104 1217 0 R 
  105 1218 0 R 106 1219 0 R 107 1220 0 R 108 1221 0 R 109 1222 0 R 
  110 1223 0 R 111 1224 0 R 112 1225 0 R 113 1226 0 R 114 1227 0 R 
  115 1228 0 R 116 1229 0 R 117 1230 0 R 118 1231 0 R 119 1232 0 R 
  120 1233 0 R 121 1234 0 R 122 1235 0 R 123 1236 0 R 124 1237 0 R 
  125 1238 0 R 126 1239 0 R 127 1240 0 R 128 1241 0 R 129 1242 0 R 
  130 1243 0 R 131 1244 0 R 132 1245 0 R 133 1246 0 R 134 1247 0 R 
  135 1248 0 R 136 1249 0 R 137 1250 0 R 138 1251 0 R 139 1252 0 R 
  140 1253 0 R 141 1254 0 R 142 1255 0 R 143 1256 0 R 144 1257 0 R 
  145 1258 0 R 146 1259 0 R 147 1260 0 R 148 1261 0 R 149 1262 0 R 
  150 1263 0 R ]
>>
endobj
1113 0 obj
<<
/S /D /St 1
>>
endobj
1114 0 obj
<<
/S /D /St 2
>>
endobj
1115 0 obj
<<
/S /r /St 1
>>
endobj
1116 0 obj
<<
/S /r /St 2
>>
endobj
1117 0 obj
<<
/S /r /St 3
>>
endobj
1118 0 obj
<<
/S /r /St 4
>>
endobj
1119 0 obj
<<
/S /r /St 5
>>
endobj
1120 0 obj
<<
/S /r /St 6
>>
endobj
1121 0 obj
<<
/S /r /St 7
>>
endobj
1122 0 obj
<<
/S /r /St 8
>>
endobj
1123 0 obj
<<
/S /D /St 1
>>
endobj
1124 0 obj
<<
/S /D /St 2
>>
endobj
1125 0 obj
<<
/S /D /St 3
>>
endobj
1126 0 obj
<<
/S /D /St 4
>>
endobj
1127 0 obj
<<
/S /D /St 5
>>
endobj
1128 0 obj
<<
/S /D /St 6
>>
endobj
1129 0 obj
<<
/S /D /St 7
>>
endobj
1130 0 obj
<<
/S /D /St 8
>>
endobj
1131 0 obj
<<
/S /D /St 9
>>
endobj
1132 0 obj
<<
/S /D /St 10
>>
endobj
1133 0 obj
<<
/S /D /St 11
>>
endobj
1134 0 obj
<<
/S /D /St 12
>>
endobj
1135 0 obj
<<
/S /D /St 13
>>
endobj
1136 0 obj
<<
/S /D /St 14
>>
endobj
1137 0 obj
<<
/S /D /St 15
>>
endobj
1138 0 obj
<<
/S /D /St 16
>>
endobj
1139 0 obj
<<
/S /D /St 17
>>
endobj
1140 0 obj
<<
/S /D /St 18
>>
endobj
1141 0 obj
<<
/S /D /St 19
>>
endobj
1142 0 obj
<<
/S /D /St 20
>>
endobj
1143 0 obj
<<
/S /D /St 21
>>
endobj
1144 0 obj
<<
/S /D /St 22
>>
endobj
1145 0 obj
<<
/S /D /St 23
>>
endobj
1146 0 obj
<<
/S /D /St 24
>>
endobj
1147 0 obj
<<
/S /D /St 25
>>
endobj
1148 0 obj
<<
/S /D /St 26
>>
endobj
1149 0 obj
<<
/S /D /St 27
>>
endobj
1150 0 obj
<<
/S /D /St 28
>>
endobj
1151 0 obj
<<
/S /D /St 29
>>
endobj
1152 0 obj
<<
/S /D /St 30
>>
endobj
1153 0 obj
<<
/S /D /St 31
>>
endobj
1154 0 obj
<<
/S /D /St 32
>>
endobj
1155 0 obj
<<
/S /D /St 33
>>
endobj
1156 0 obj
<<
/S /D /St 34
>>
endobj
1157 0 obj
<<
/S /D /St 35
>>
endobj
1158 0 obj
<<
/S /D /St 36
>>
endobj
1159 0 obj
<<
/S /D /St 37
>>
endobj
1160 0 obj
<<
/S /D /St 38
>>
endobj
1161 0 obj
<<
/S /D /St 39
>>
endobj
1162 0 obj
<<
/S /D /St 40
>>
endobj
1163 0 obj
<<
/S /D /St 41
>>
endobj
1164 0 obj
<<
/S /D /St 42
>>
endobj
1165 0 obj
<<
/S /D /St 43
>>
endobj
1166 0 obj
<<
/S /D /St 44
>>
endobj
1167 0 obj
<<
/S /D /St 45
>>
endobj
1168 0 obj
<<
/S /D /St 46
>>
endobj
1169 0 obj
<<
/S /D /St 47
>>
endobj
1170 0 obj
<<
/S /D /St 48
>>
endobj
1171 0 obj
<<
/S /D /St 49
>>
endobj
1172 0 obj
<<
/S /D /St 50
>>
endobj
1173 0 obj
<<
/S /D /St 51
>>
endobj
1174 0 obj
<<
/S /D /St 52
>>
endobj
1175 0 obj
<<
/S /D /St 53
>>
endobj
1176 0 obj
<<
/S /D /St 54
>>
endobj
1177 0 obj
<<
/S /D /St 55
>>
endobj
1178 0 obj
<<
/S /D /St 56
>>
endobj
1179 0 obj
<<
/S /D /St 57
>>
endobj
1180 0 obj
<<
/S /D /St 58
>>
endobj
1181 0 obj
<<
/S /D /St 59
>>
endobj
1182 0 obj
<<
/S /D /St 60
>>
endobj
1183 0 obj
<<
/S /D /St 61
>>
endobj
1184 0 obj
<<
/S /D /St 62
>>
endobj
1185 0 obj
<<
/S /D /St 63
>>
endobj
1186 0 obj
<<
/S /D /St 64
>>
endobj
1187 0 obj
<<
/S /D /St 65
>>
endobj
1188 0 obj
<<
/S /D /St 66
>>
endobj
1189 0 obj
<<
/S /D /St 67
>>
endobj
1190 0 obj
<<
/S /D /St 68
>>
endobj
1191 0 obj
<<
/S /D /St 69
>>
endobj
1192 0 obj
<<
/S /D /St 70
>>
endobj
1193 0 obj
<<
/S /D /St 71
>>
endobj
1194 0 obj
<<
/S /D /St 72
>>
endobj
1195 0 obj
<<
/S /D /St 73
>>
endobj
1196 0 obj
<<
/S /D /St 74
>>
endobj
1197 0 obj
<<
/S /D /St 75
>>
endobj
1198 0 obj
<<
/S /D /St 76
>>
endobj
1199 0 obj
<<
/S /D /St 77
>>
endobj
1200 0 obj
<<
/S /D /St 78
>>
endobj
1201 0 obj
<<
/S /D /St 79
>>
endobj
1202 0 obj
<<
/S /D /St 80
>>
endobj
1203 0 obj
<<
/S /D /St 81
>>
endobj
1204 0 obj
<<
/S /D /St 82
>>
endobj
1205 0 obj
<<
/S /D /St 83
>>
endobj
1206 0 obj
<<
/S /D /St 84
>>
endobj
1207 0 obj
<<
/S /D /St 85
>>
endobj
1208 0 obj
<<
/S /D /St 86
>>
endobj
1209 0 obj
<<
/S /D /St 87
>>
endobj
1210 0 obj
<<
/S /D /St 88
>>
endobj
1211 0 obj
<<
/S /D /St 89
>>
endobj
1212 0 obj
<<
/S /D /St 90
>>
endobj
1213 0 obj
<<
/S /D /St 91
>>
endobj
1214 0 obj
<<
/S /D /St 92
>>
endobj
1215 0 obj
<<
/S /D /St 93
>>
endobj
1216 0 obj
<<
/S /D /St 94
>>
endobj
1217 0 obj
<<
/S /D /St 95
>>
endobj
1218 0 obj
<<
/S /D /St 96
>>
endobj
1219 0 obj
<<
/S /D /St 97
>>
endobj
1220 0 obj
<<
/S /D /St 98
>>
endobj
1221 0 obj
<<
/S /D /St 99
>>
endobj
1222 0 obj
<<
/S /D /St 100
>>
endobj
1223 0 obj
<<
/S /D /St 101
>>
endobj
1224 0 obj
<<
/S /D /St 102
>>
endobj
1225 0 obj
<<
/S /D /St 103
>>
endobj
1226 0 obj
<<
/S /D /St 104
>>
endobj
1227 0 obj
<<
/S /D /St 105
>>
endobj
1228 0 obj
<<
/S /D /St 106
>>
endobj
1229 0 obj
<<
/S /D /St 107
>>
endobj
1230 0 obj
<<
/S /D /St 108
>>
endobj
1231 0 obj
<<
/S /D /St 109
>>
endobj
1232 0 obj
<<
/S /D /St 110
>>
endobj
1233 0 obj
<<
/S /D /St 111
>>
endobj
1234 0 obj
<<
/S /D /St 112
>>
endobj
1235 0 obj
<<
/S /D /St 113
>>
endobj
1236 0 obj
<<
/S /D /St 114
>>
endobj
1237 0 obj
<<
/S /D /St 115
>>
endobj
1238 0 obj
<<
/S /D /St 116
>>
endobj
1239 0 obj
<<
/S /D /St 117
>>
endobj
1240 0 obj
<<
/S /D /St 118
>>
endobj
1241 0 obj
<<
/S /D /St 119
>>
endobj
1242 0 obj
<<
/S /D /St 120
>>
endobj
1243 0 obj
<<
/S /D /St 121
>>
endobj
1244 0 obj
<<
/S /D /St 122
>>
endobj
1245 0 obj
<<
/S /D /St 123
>>
endobj
1246 0 obj
<<
/S /D /St 124
>>
endobj
1247 0 obj
<<
/S /D /St 125
>>
endobj
1248 0 obj
<<
/S /D /St 126
>>
endobj
1249 0 obj
<<
/S /D /St 127
>>
endobj
1250 0 obj
<<
/S /D /St 128
>>
endobj
1251 0 obj
<<
/S /D /St 129
>>
endobj
1252 0 obj
<<
/S /D /St 130
>>
endobj
1253 0 obj
<<
/S /D /St 131
>>
endobj
1254 0 obj
<<
/S /D /St 132
>>
endobj
1255 0 obj
<<
/S /D /St 133
>>
endobj
1256 0 obj
<<
/S /D /St 134
>>
endobj
1257 0 obj
<<
/S /D /St 135
>>
endobj
1258 0 obj
<<
/S /D /St 136
>>
endobj
1259 0 obj
<<
/S /D /St 137
>>
endobj
1260 0 obj
<<
/S /D /St 138
>>
endobj
1261 0 obj
<<
/S /D /St 139
>>
endobj
1262 0 obj
<<
/S /D /St 140
>>
endobj
1263 0 obj
<<
/S /D /St 141
>>
endobj
xref
0 1264
0000000000 65535 f 
0000000073 00000 n 
0000000189 00000 n 
0000000296 00000 n 
0000000408 00000 n 
0000000615 00000 n 
0000000822 00000 n 
0000000991 00000 n 
0000001160 00000 n 
0000001329 00000 n 
0000001498 00000 n 
0000001668 00000 n 
0000001838 00000 n 
0000002008 00000 n 
0000002178 00000 n 
0000002348 00000 n 
0000002518 00000 n 
0000002688 00000 n 
0000002858 00000 n 
0000003028 00000 n 
0000003198 00000 n 
0000003368 00000 n 
0000003538 00000 n 
0000003708 00000 n 
0000003878 00000 n 
0000004048 00000 n 
0000004218 00000 n 
0000004388 00000 n 
0000004558 00000 n 
0000004728 00000 n 
0000004898 00000 n 
0000005068 00000 n 
0000005238 00000 n 
0000005408 00000 n 
0000005578 00000 n 
0000005748 00000 n 
0000005918 00000 n 
0000006088 00000 n 
0000006258 00000 n 
0000006428 00000 n 
0000006598 00000 n 
0000006768 00000 n 
0000006938 00000 n 
0000007108 00000 n 
0000007278 00000 n 
0000007448 00000 n 
0000007618 00000 n 
0000007788 00000 n 
0000007958 00000 n 
0000008128 00000 n 
0000008298 00000 n 
0000008468 00000 n 
0000008638 00000 n 
0000008808 00000 n 
0000008978 00000 n 
0000009148 00000 n 
0000009318 00000 n 
0000009488 00000 n 
0000009658 00000 n 
0000009828 00000 n 
0000009998 00000 n 
0000010168 00000 n 
0000010338 00000 n 
0000010508 00000 n 
0000010678 00000 n 
0000010848 00000 n 
0000011018 00000 n 
0000011188 00000 n 
0000011358 00000 n 
0000011528 00000 n 
0000011698 00000 n 
0000011868 00000 n 
0000012038 00000 n 
0000012208 00000 n 
0000012378 00000 n 
0000012548 00000 n 
0000012718 00000 n 
0000012888 00000 n 
0000013058 00000 n 
0000013228 00000 n 
0000013398 00000 n 
0000013568 00000 n 
0000013738 00000 n 
0000013908 00000 n 
0000014078 00000 n 
0000014248 00000 n 
0000014418 00000 n 
0000015215 00000 n 
0000015385 00000 n 
0000015555 00000 n 
0000015725 00000 n 
0000015895 00000 n 
0000016065 00000 n 
0000016235 00000 n 
0000016405 00000 n 
0000016575 00000 n 
0000016745 00000 n 
0000016915 00000 n 
0000017085 00000 n 
0000017255 00000 n 
0000017425 00000 n 
0000017596 00000 n 
0000017767 00000 n 
0000017938 00000 n 
0000018109 00000 n 
0000018280 00000 n 
0000018451 00000 n 
0000018622 00000 n 
0000018793 00000 n 
0000018964 00000 n 
0000019135 00000 n 
0000019306 00000 n 
0000019477 00000 n 
0000019648 00000 n 
0000019819 00000 n 
0000019990 00000 n 
0000020161 00000 n 
0000020332 00000 n 
0000020503 00000 n 
0000020674 00000 n 
0000020845 00000 n 
0000021016 00000 n 
0000021187 00000 n 
0000021358 00000 n 
0000021529 00000 n 
0000021700 00000 n 
0000021871 00000 n 
0000022042 00000 n 
0000022213 00000 n 
0000022384 00000 n 
0000022555 00000 n 
0000022726 00000 n 
0000022897 00000 n 
0000023068 00000 n 
0000023239 00000 n 
0000023410 00000 n 
0000023581 00000 n 
0000023752 00000 n 
0000023923 00000 n 
0000024094 00000 n 
0000024265 00000 n 
0000024436 00000 n 
0000024607 00000 n 
0000024778 00000 n 
0000024949 00000 n 
0000025120 00000 n 
0000025291 00000 n 
0000025462 00000 n 
0000025633 00000 n 
0000025804 00000 n 
0000025975 00000 n 
0000026146 00000 n 
0000026317 00000 n 
0000026488 00000 n 
0000026659 00000 n 
0000026830 00000 n 
0000027001 00000 n 
0000027172 00000 n 
0000027343 00000 n 
0000027514 00000 n 
0000027685 00000 n 
0000027856 00000 n 
0000028027 00000 n 
0000028198 00000 n 
0000028369 00000 n 
0000028540 00000 n 
0000028711 00000 n 
0000028882 00000 n 
0000029053 00000 n 
0000029224 00000 n 
0000029395 00000 n 
0000029566 00000 n 
0000029737 00000 n 
0000030649 00000 n 
0000030820 00000 n 
0000030991 00000 n 
0000031162 00000 n 
0000031333 00000 n 
0000031504 00000 n 
0000031675 00000 n 
0000031846 00000 n 
0000032017 00000 n 
0000032188 00000 n 
0000032359 00000 n 
0000032530 00000 n 
0000032701 00000 n 
0000032872 00000 n 
0000033043 00000 n 
0000033214 00000 n 
0000033385 00000 n 
0000033556 00000 n 
0000033727 00000 n 
0000033898 00000 n 
0000034069 00000 n 
0000034240 00000 n 
0000034411 00000 n 
0000034582 00000 n 
0000034753 00000 n 
0000034924 00000 n 
0000035095 00000 n 
0000035266 00000 n 
0000035437 00000 n 
0000035608 00000 n 
0000035779 00000 n 
0000035950 00000 n 
0000036121 00000 n 
0000036292 00000 n 
0000036463 00000 n 
0000036634 00000 n 
0000036805 00000 n 
0000036976 00000 n 
0000037147 00000 n 
0000037318 00000 n 
0000037489 00000 n 
0000037660 00000 n 
0000037831 00000 n 
0000038002 00000 n 
0000038173 00000 n 
0000038344 00000 n 
0000038515 00000 n 
0000038686 00000 n 
0000038857 00000 n 
0000039028 00000 n 
0000039199 00000 n 
0000039370 00000 n 
0000039541 00000 n 
0000039712 00000 n 
0000039883 00000 n 
0000040054 00000 n 
0000040225 00000 n 
0000040396 00000 n 
0000040567 00000 n 
0000040738 00000 n 
0000040909 00000 n 
0000041080 00000 n 
0000041251 00000 n 
0000041422 00000 n 
0000041593 00000 n 
0000041764 00000 n 
0000041935 00000 n 
0000042106 00000 n 
0000042277 00000 n 
0000042448 00000 n 
0000042619 00000 n 
0000042790 00000 n 
0000042961 00000 n 
0000043132 00000 n 
0000043303 00000 n 
0000043474 00000 n 
0000043645 00000 n 
0000043816 00000 n 
0000043987 00000 n 
0000044158 00000 n 
0000044329 00000 n 
0000044500 00000 n 
0000044671 00000 n 
0000044842 00000 n 
0000045013 00000 n 
0000045930 00000 n 
0000046101 00000 n 
0000046272 00000 n 
0000046443 00000 n 
0000046614 00000 n 
0000046785 00000 n 
0000046956 00000 n 
0000047127 00000 n 
0000047298 00000 n 
0000047469 00000 n 
0000047640 00000 n 
0000047811 00000 n 
0000047982 00000 n 
0000048153 00000 n 
0000048324 00000 n 
0000048495 00000 n 
0000048666 00000 n 
0000048837 00000 n 
0000049008 00000 n 
0000049179 00000 n 
0000049350 00000 n 
0000049521 00000 n 
0000049692 00000 n 
0000049863 00000 n 
0000050034 00000 n 
0000050205 00000 n 
0000050376 00000 n 
0000050547 00000 n 
0000050718 00000 n 
0000050889 00000 n 
0000051060 00000 n 
0000051231 00000 n 
0000051402 00000 n 
0000051573 00000 n 
0000051744 00000 n 
0000051915 00000 n 
0000052086 00000 n 
0000052257 00000 n 
0000052428 00000 n 
0000052599 00000 n 
0000052770 00000 n 
0000052941 00000 n 
0000053112 00000 n 
0000053283 00000 n 
0000053454 00000 n 
0000053625 00000 n 
0000053796 00000 n 
0000053967 00000 n 
0000054138 00000 n 
0000054309 00000 n 
0000054480 00000 n 
0000054651 00000 n 
0000054822 00000 n 
0000054993 00000 n 
0000055164 00000 n 
0000055335 00000 n 
0000055506 00000 n 
0000055677 00000 n 
0000055848 00000 n 
0000056019 00000 n 
0000056190 00000 n 
0000056361 00000 n 
0000056532 00000 n 
0000056703 00000 n 
0000056874 00000 n 
0000057045 00000 n 
0000057216 00000 n 
0000057387 00000 n 
0000057558 00000 n 
0000057729 00000 n 
0000057900 00000 n 
0000058071 00000 n 
0000058242 00000 n 
0000058413 00000 n 
0000058584 00000 n 
0000058755 00000 n 
0000058926 00000 n 
0000059097 00000 n 
0000059268 00000 n 
0000059439 00000 n 
0000059610 00000 n 
0000059781 00000 n 
0000059952 00000 n 
0000060123 00000 n 
0000060294 00000 n 
0000061211 00000 n 
0000061382 00000 n 
0000061553 00000 n 
0000061724 00000 n 
0000061895 00000 n 
0000062066 00000 n 
0000062237 00000 n 
0000062408 00000 n 
0000062579 00000 n 
0000062750 00000 n 
0000062921 00000 n 
0000063092 00000 n 
0000063263 00000 n 
0000063434 00000 n 
0000063605 00000 n 
0000063776 00000 n 
0000063947 00000 n 
0000064118 00000 n 
0000064289 00000 n 
0000064460 00000 n 
0000064631 00000 n 
0000064802 00000 n 
0000064973 00000 n 
0000065144 00000 n 
0000065315 00000 n 
0000065486 00000 n 
0000065657 00000 n 
0000065828 00000 n 
0000065999 00000 n 
0000066170 00000 n 
0000066341 00000 n 
0000066512 00000 n 
0000066683 00000 n 
0000066854 00000 n 
0000067025 00000 n 
0000067196 00000 n 
0000067367 00000 n 
0000067538 00000 n 
0000067709 00000 n 
0000067880 00000 n 
0000068051 00000 n 
0000068222 00000 n 
0000068393 00000 n 
0000068564 00000 n 
0000068735 00000 n 
0000068906 00000 n 
0000069077 00000 n 
0000069248 00000 n 
0000069419 00000 n 
0000069590 00000 n 
0000069761 00000 n 
0000069932 00000 n 
0000070103 00000 n 
0000070274 00000 n 
0000070445 00000 n 
0000070616 00000 n 
0000070787 00000 n 
0000070958 00000 n 
0000071129 00000 n 
0000071300 00000 n 
0000071471 00000 n 
0000071642 00000 n 
0000071813 00000 n 
0000071984 00000 n 
0000072155 00000 n 
0000072326 00000 n 
0000072497 00000 n 
0000072668 00000 n 
0000072839 00000 n 
0000073010 00000 n 
0000073181 00000 n 
0000073352 00000 n 
0000073523 00000 n 
0000073694 00000 n 
0000073865 00000 n 
0000074036 00000 n 
0000074207 00000 n 
0000074378 00000 n 
0000074549 00000 n 
0000074720 00000 n 
0000074891 00000 n 
0000075062 00000 n 
0000075233 00000 n 
0000075404 00000 n 
0000075575 00000 n 
0000076492 00000 n 
0000076663 00000 n 
0000076834 00000 n 
0000077005 00000 n 
0000077176 00000 n 
0000077347 00000 n 
0000077518 00000 n 
0000077689 00000 n 
0000077860 00000 n 
0000078031 00000 n 
0000078202 00000 n 
0000078373 00000 n 
0000078544 00000 n 
0000078715 00000 n 
0000078886 00000 n 
0000079057 00000 n 
0000079228 00000 n 
0000079399 00000 n 
0000079570 00000 n 
0000079741 00000 n 
0000079912 00000 n 
0000080083 00000 n 
0000080254 00000 n 
0000080425 00000 n 
0000080596 00000 n 
0000080767 00000 n 
0000080938 00000 n 
0000081109 00000 n 
0000081280 00000 n 
0000081451 00000 n 
0000081622 00000 n 
0000081793 00000 n 
0000081964 00000 n 
0000082135 00000 n 
0000082306 00000 n 
0000082477 00000 n 
0000082648 00000 n 
0000082819 00000 n 
0000082990 00000 n 
0000083161 00000 n 
0000083332 00000 n 
0000083503 00000 n 
0000083674 00000 n 
0000083845 00000 n 
0000084016 00000 n 
0000084187 00000 n 
0000084358 00000 n 
0000084529 00000 n 
0000084700 00000 n 
0000084871 00000 n 
0000085042 00000 n 
0000085213 00000 n 
0000085384 00000 n 
0000085555 00000 n 
0000085726 00000 n 
0000085897 00000 n 
0000086068 00000 n 
0000086239 00000 n 
0000086410 00000 n 
0000086581 00000 n 
0000086752 00000 n 
0000086923 00000 n 
0000087094 00000 n 
0000087265 00000 n 
0000087436 00000 n 
0000087607 00000 n 
0000087778 00000 n 
0000087949 00000 n 
0000088120 00000 n 
0000088291 00000 n 
0000088462 00000 n 
0000088633 00000 n 
0000088804 00000 n 
0000088975 00000 n 
0000089146 00000 n 
0000089317 00000 n 
0000089488 00000 n 
0000089659 00000 n 
0000089830 00000 n 
0000090001 00000 n 
0000090172 00000 n 
0000090343 00000 n 
0000090514 00000 n 
0000090685 00000 n 
0000090856 00000 n 
0000091773 00000 n 
0000091944 00000 n 
0000092115 00000 n 
0000092286 00000 n 
0000092457 00000 n 
0000092628 00000 n 
0000092799 00000 n 
0000092970 00000 n 
0000093141 00000 n 
0000093312 00000 n 
0000093483 00000 n 
0000093654 00000 n 
0000093825 00000 n 
0000093996 00000 n 
0000094167 00000 n 
0000094503 00000 n 
0000094712 00000 n 
0000094833 00000 n 
0000094950 00000 n 
0000095057 00000 n 
0000095169 00000 n 
0000095248 00000 n 
0000095457 00000 n 
0000095666 00000 n 
0000095875 00000 n 
0000096084 00000 n 
0000096293 00000 n 
0000096502 00000 n 
0000096711 00000 n 
0000096920 00000 n 
0000097129 00000 n 
0000097338 00000 n 
0000097547 00000 n 
0000097756 00000 n 
0000097965 00000 n 
0000098174 00000 n 
0000098383 00000 n 
0000098592 00000 n 
0000098801 00000 n 
0000099010 00000 n 
0000099219 00000 n 
0000099428 00000 n 
0000099637 00000 n 
0000099846 00000 n 
0000100055 00000 n 
0000100264 00000 n 
0000100473 00000 n 
0000100682 00000 n 
0000100891 00000 n 
0000101100 00000 n 
0000101309 00000 n 
0000101519 00000 n 
0000101729 00000 n 
0000101939 00000 n 
0000102149 00000 n 
0000102345 00000 n 
0000102575 00000 n 
0000102785 00000 n 
0000102995 00000 n 
0000103205 00000 n 
0000103415 00000 n 
0000103625 00000 n 
0000103835 00000 n 
0000104045 00000 n 
0000104255 00000 n 
0000104426 00000 n 
0000104656 00000 n 
0000104866 00000 n 
0000105076 00000 n 
0000105286 00000 n 
0000105496 00000 n 
0000105706 00000 n 
0000105916 00000 n 
0000106127 00000 n 
0000106331 00000 n 
0000106569 00000 n 
0000106779 00000 n 
0000106989 00000 n 
0000107199 00000 n 
0000107409 00000 n 
0000107619 00000 n 
0000107829 00000 n 
0000108039 00000 n 
0000108249 00000 n 
0000108459 00000 n 
0000108669 00000 n 
0000108879 00000 n 
0000109089 00000 n 
0000109299 00000 n 
0000109509 00000 n 
0000109719 00000 n 
0000109929 00000 n 
0000110139 00000 n 
0000110349 00000 n 
0000110559 00000 n 
0000110769 00000 n 
0000110979 00000 n 
0000111189 00000 n 
0000111399 00000 n 
0000111609 00000 n 
0000111819 00000 n 
0000112029 00000 n 
0000112239 00000 n 
0000112449 00000 n 
0000112659 00000 n 
0000112869 00000 n 
0000113079 00000 n 
0000113289 00000 n 
0000113499 00000 n 
0000113709 00000 n 
0000113919 00000 n 
0000114129 00000 n 
0000114339 00000 n 
0000114549 00000 n 
0000114759 00000 n 
0000114969 00000 n 
0000115179 00000 n 
0000115389 00000 n 
0000115599 00000 n 
0000115809 00000 n 
0000116019 00000 n 
0000116229 00000 n 
0000116400 00000 n 
0000116630 00000 n 
0000116840 00000 n 
0000117050 00000 n 
0000117221 00000 n 
0000117451 00000 n 
0000117622 00000 n 
0000117830 00000 n 
0000118068 00000 n 
0000118278 00000 n 
0000118488 00000 n 
0000118698 00000 n 
0000118908 00000 n 
0000119118 00000 n 
0000119328 00000 n 
0000119538 00000 n 
0000119724 00000 n 
0000119839 00000 n 
0000120069 00000 n 
0000120279 00000 n 
0000120489 00000 n 
0000120699 00000 n 
0000120909 00000 n 
0000121119 00000 n 
0000121329 00000 n 
0000121539 00000 n 
0000121751 00000 n 
0000121962 00000 n 
0000122200 00000 n 
0000122410 00000 n 
0000122599 00000 n 
0000122795 00000 n 
0000123033 00000 n 
0000123243 00000 n 
0000123453 00000 n 
0000123663 00000 n 
0000123873 00000 n 
0000124083 00000 n 
0000124293 00000 n 
0000124503 00000 n 
0000124713 00000 n 
0000124923 00000 n 
0000125133 00000 n 
0000125343 00000 n 
0000125553 00000 n 
0000125763 00000 n 
0000125973 00000 n 
0000126183 00000 n 
0000126393 00000 n 
0000126603 00000 n 
0000152601 00000 n 
0000155311 00000 n 
0000178277 00000 n 
0000178602 00000 n 
0000203776 00000 n 
0000204051 00000 n 
0000224250 00000 n 
0000227449 00000 n 
0000243554 00000 n 
0000247279 00000 n 
0000247604 00000 n 
0000247814 00000 n 
0000247985 00000 n 
0000248156 00000 n 
0000248327 00000 n 
0000248573 00000 n 
0000248684 00000 n 
0000248943 00000 n 
0000249022 00000 n 
0000249186 00000 n 
0000249298 00000 n 
0000249468 00000 n 
0000249633 00000 n 
0000249747 00000 n 
0000249872 00000 n 
0000249996 00000 n 
0000250124 00000 n 
0000250255 00000 n 
0000250379 00000 n 
0000250495 00000 n 
0000250666 00000 n 
0000250779 00000 n 
0000250904 00000 n 
0000251033 00000 n 
0000251161 00000 n 
0000251286 00000 n 
0000251410 00000 n 
0000251530 00000 n 
0000251705 00000 n 
0000251815 00000 n 
0000251942 00000 n 
0000252071 00000 n 
0000252200 00000 n 
0000252316 00000 n 
0000252508 00000 n 
0000252620 00000 n 
0000252746 00000 n 
0000252879 00000 n 
0000253014 00000 n 
0000253148 00000 n 
0000253278 00000 n 
0000253403 00000 n 
0000253582 00000 n 
0000253690 00000 n 
0000253813 00000 n 
0000253940 00000 n 
0000254066 00000 n 
0000254196 00000 n 
0000254324 00000 n 
0000254452 00000 n 
0000254579 00000 n 
0000254690 00000 n 
0000254868 00000 n 
0000254979 00000 n 
0000255104 00000 n 
0000255230 00000 n 
0000255360 00000 n 
0000255485 00000 n 
0000255610 00000 n 
0000255737 00000 n 
0000255856 00000 n 
0000256034 00000 n 
0000256145 00000 n 
0000256259 00000 n 
0000256437 00000 n 
0000256552 00000 n 
0000256683 00000 n 
0000256813 00000 n 
0000256944 00000 n 
0000257076 00000 n 
0000257205 00000 n 
0000257338 00000 n 
0000257457 00000 n 
0000257632 00000 n 
0000257745 00000 n 
0000257873 00000 n 
0000257998 00000 n 
0000258122 00000 n 
0000258234 00000 n 
0000258416 00000 n 
0000258525 00000 n 
0000258648 00000 n 
0000258772 00000 n 
0000258894 00000 n 
0000259002 00000 n 
0000259164 00000 n 
0000259284 00000 n 
0000259410 00000 n 
0000259537 00000 n 
0000259665 00000 n 
0000259806 00000 n 
0000259942 00000 n 
0000260058 00000 n 
0000260229 00000 n 
0000260391 00000 n 
0000260490 00000 n 
0000260666 00000 n 
0000260784 00000 n 
0000260916 00000 n 
0000261051 00000 n 
0000261172 00000 n 
0000261369 00000 n 
0000261488 00000 n 
0000261603 00000 n 
0000261764 00000 n 
0000261877 00000 n 
0000262010 00000 n 
0000262138 00000 n 
0000262265 00000 n 
0000262378 00000 n 
0000262554 00000 n 
0000262718 00000 n 
0000262828 00000 n 
0000262953 00000 n 
0000263078 00000 n 
0000263206 00000 n 
0000263332 00000 n 
0000263459 00000 n 
0000263585 00000 n 
0000263711 00000 n 
0000263838 00000 n 
0000263964 00000 n 
0000264090 00000 n 
0000264219 00000 n 
0000264343 00000 n 
0000264472 00000 n 
0000264603 00000 n 
0000264713 00000 n 
0000264901 00000 n 
0000265021 00000 n 
0000265154 00000 n 
0000265287 00000 n 
0000265420 00000 n 
0000265554 00000 n 
0000265687 00000 n 
0000265820 00000 n 
0000265956 00000 n 
0000266090 00000 n 
0000266216 00000 n 
0000266329 00000 n 
0000266515 00000 n 
0000266633 00000 n 
0000266764 00000 n 
0000266895 00000 n 
0000267026 00000 n 
0000267158 00000 n 
0000267289 00000 n 
0000267420 00000 n 
0000267554 00000 n 
0000267690 00000 n 
0000267808 00000 n 
0000268009 00000 n 
0000268119 00000 n 
0000268245 00000 n 
0000268371 00000 n 
0000268498 00000 n 
0000268624 00000 n 
0000268750 00000 n 
0000268877 00000 n 
0000269002 00000 n 
0000269128 00000 n 
0000269239 00000 n 
0000269430 00000 n 
0000269552 00000 n 
0000269698 00000 n 
0000269842 00000 n 
0000269987 00000 n 
0000270148 00000 n 
0000270263 00000 n 
0000270391 00000 n 
0000270521 00000 n 
0000270648 00000 n 
0000270783 00000 n 
0000270912 00000 n 
0000271086 00000 n 
0000271206 00000 n 
0000271340 00000 n 
0000271466 00000 n 
0000271597 00000 n 
0000271743 00000 n 
0000271887 00000 n 
0000272026 00000 n 
0000272205 00000 n 
0000272364 00000 n 
0000272547 00000 n 
0000272703 00000 n 
0000272872 00000 n 
0000273042 00000 n 
0000273160 00000 n 
0000273290 00000 n 
0000273423 00000 n 
0000273612 00000 n 
0000273769 00000 n 
0000273903 00000 n 
0000274047 00000 n 
0000274169 00000 n 
0000274305 00000 n 
0000274438 00000 n 
0000274562 00000 n 
0000274696 00000 n 
0000274822 00000 n 
0000274969 00000 n 
0000275099 00000 n 
0000275269 00000 n 
0000275399 00000 n 
0000275553 00000 n 
0000275678 00000 n 
0000275803 00000 n 
0000275974 00000 n 
0000276081 00000 n 
0000276255 00000 n 
0000276401 00000 n 
0000276537 00000 n 
0000276682 00000 n 
0000276817 00000 n 
0000276944 00000 n 
0000277073 00000 n 
0000277200 00000 n 
0000277349 00000 n 
0000277482 00000 n 
0000277620 00000 n 
0000277744 00000 n 
0000277878 00000 n 
0000278016 00000 n 
0000278191 00000 n 
0000278305 00000 n 
0000278505 00000 n 
0000278682 00000 n 
0000278875 00000 n 
0000278995 00000 n 
0000279136 00000 n 
0000279285 00000 n 
0000279430 00000 n 
0000279611 00000 n 
0000279767 00000 n 
0000279918 00000 n 
0000280061 00000 n 
0000280194 00000 n 
0000280369 00000 n 
0000280520 00000 n 
0000280682 00000 n 
0000280840 00000 n 
0000281007 00000 n 
0000281142 00000 n 
0000281314 00000 n 
0000281443 00000 n 
0000281598 00000 n 
0000281719 00000 n 
0000281836 00000 n 
0000282011 00000 n 
0000282201 00000 n 
0000282321 00000 n 
0000282461 00000 n 
0000282604 00000 n 
0000282756 00000 n 
0000282939 00000 n 
0000283078 00000 n 
0000283264 00000 n 
0000283374 00000 n 
0000283561 00000 n 
0000283677 00000 n 
0000283857 00000 n 
0000284010 00000 n 
0000284147 00000 n 
0000284271 00000 n 
0000284396 00000 n 
0000285701 00000 n 
0000286625 00000 n 
0000286751 00000 n 
0000295663 00000 n 
0000304804 00000 n 
0000314019 00000 n 
0000323356 00000 n 
0000333039 00000 n 
0000342987 00000 n 
0000344845 00000 n 
0000344971 00000 n 
0000352526 00000 n 
0000360743 00000 n 
0000367961 00000 n 
0000375214 00000 n 
0000384055 00000 n 
0000392100 00000 n 
0000400064 00000 n 
0000408278 00000 n 
0000415328 00000 n 
0000422705 00000 n 
0000431003 00000 n 
0000438502 00000 n 
0000446029 00000 n 
0000454349 00000 n 
0000461875 00000 n 
0000468571 00000 n 
0000475442 00000 n 
0000482247 00000 n 
0000490211 00000 n 
0000497904 00000 n 
0000505369 00000 n 
0000513003 00000 n 
0000520093 00000 n 
0000527638 00000 n 
0000534170 00000 n 
0000541380 00000 n 
0000549310 00000 n 
0000557565 00000 n 
0000563922 00000 n 
0000572072 00000 n 
0000579484 00000 n 
0000587667 00000 n 
0000596570 00000 n 
0000604009 00000 n 
0000611388 00000 n 
0000618333 00000 n 
0000625382 00000 n 
0000631378 00000 n 
0000638910 00000 n 
0000645880 00000 n 
0000652607 00000 n 
0000659548 00000 n 
0000666041 00000 n 
0000674119 00000 n 
0000681066 00000 n 
0000688941 00000 n 
0000695908 00000 n 
0000703747 00000 n 
0000711692 00000 n 
0000719283 00000 n 
0000727575 00000 n 
0000733972 00000 n 
0000740040 00000 n 
0000747067 00000 n 
0000754422 00000 n 
0000762005 00000 n 
0000769899 00000 n 
0000777803 00000 n 
0000785048 00000 n 
0000791744 00000 n 
0000798781 00000 n 
0000806592 00000 n 
0000815893 00000 n 
0000823912 00000 n 
0000832595 00000 n 
0000841172 00000 n 
0000850390 00000 n 
0000857999 00000 n 
0000865729 00000 n 
0000873899 00000 n 
0000881044 00000 n 
0000888659 00000 n 
0000896311 00000 n 
0000904118 00000 n 
0000912645 00000 n 
0000920327 00000 n 
0000927578 00000 n 
0000934951 00000 n 
0000942503 00000 n 
0000949676 00000 n 
0000958354 00000 n 
0000966535 00000 n 
0000975361 00000 n 
0000983330 00000 n 
0000991553 00000 n 
0001000129 00000 n 
0001008502 00000 n 
0001017059 00000 n 
0001024845 00000 n 
0001033324 00000 n 
0001040614 00000 n 
0001048879 00000 n 
0001057268 00000 n 
0001064829 00000 n 
0001072845 00000 n 
0001081527 00000 n 
0001090053 00000 n 
0001097510 00000 n 
0001103108 00000 n 
0001111535 00000 n 
0001119548 00000 n 
0001128565 00000 n 
0001138367 00000 n 
0001147835 00000 n 
0001156806 00000 n 
0001164492 00000 n 
0001172088 00000 n 
0001179363 00000 n 
0001202090 00000 n 
0001230822 00000 n 
0001249029 00000 n 
0001274821 00000 n 
0001303953 00000 n 
0001328209 00000 n 
0001354331 00000 n 
0001375555 00000 n 
0001396569 00000 n 
0001421191 00000 n 
0001442493 00000 n 
0001465120 00000 n 
0001484702 00000 n 
0001503328 00000 n 
0001533782 00000 n 
0001563491 00000 n 
0001587298 00000 n 
0001608942 00000 n 
0001633360 00000 n 
0001660087 00000 n 
0001690491 00000 n 
0001710253 00000 n 
0001774733 00000 n 
0001807034 00000 n 
0001831995 00000 n 
0001866981 00000 n 
0001885894 00000 n 
0001909544 00000 n 
0001920607 00000 n 
0001937354 00000 n 
0001946693 00000 n 
0001950773 00000 n 
0001951696 00000 n 
0001953673 00000 n 
0001953709 00000 n 
0001953745 00000 n 
0001953781 00000 n 
0001953817 00000 n 
0001953853 00000 n 
0001953889 00000 n 
0001953925 00000 n 
0001953961 00000 n 
0001953997 00000 n 
0001954033 00000 n 
0001954069 00000 n 
0001954105 00000 n 
0001954141 00000 n 
0001954177 00000 n 
0001954213 00000 n 
0001954249 00000 n 
0001954285 00000 n 
0001954321 00000 n 
0001954357 00000 n 
0001954394 00000 n 
0001954431 00000 n 
0001954468 00000 n 
0001954505 00000 n 
0001954542 00000 n 
0001954579 00000 n 
0001954616 00000 n 
0001954653 00000 n 
0001954690 00000 n 
0001954727 00000 n 
0001954764 00000 n 
0001954801 00000 n 
0001954838 00000 n 
0001954875 00000 n 
0001954912 00000 n 
0001954949 00000 n 
0001954986 00000 n 
0001955023 00000 n 
0001955060 00000 n 
0001955097 00000 n 
0001955134 00000 n 
0001955171 00000 n 
0001955208 00000 n 
0001955245 00000 n 
0001955282 00000 n 
0001955319 00000 n 
0001955356 00000 n 
0001955393 00000 n 
0001955430 00000 n 
0001955467 00000 n 
0001955504 00000 n 
0001955541 00000 n 
0001955578 00000 n 
0001955615 00000 n 
0001955652 00000 n 
0001955689 00000 n 
0001955726 00000 n 
0001955763 00000 n 
0001955800 00000 n 
0001955837 00000 n 
0001955874 00000 n 
0001955911 00000 n 
0001955948 00000 n 
0001955985 00000 n 
0001956022 00000 n 
0001956059 00000 n 
0001956096 00000 n 
0001956133 00000 n 
0001956170 00000 n 
0001956207 00000 n 
0001956244 00000 n 
0001956281 00000 n 
0001956318 00000 n 
0001956355 00000 n 
0001956392 00000 n 
0001956429 00000 n 
0001956466 00000 n 
0001956503 00000 n 
0001956540 00000 n 
0001956577 00000 n 
0001956614 00000 n 
0001956651 00000 n 
0001956688 00000 n 
0001956725 00000 n 
0001956762 00000 n 
0001956799 00000 n 
0001956836 00000 n 
0001956873 00000 n 
0001956910 00000 n 
0001956947 00000 n 
0001956984 00000 n 
0001957021 00000 n 
0001957058 00000 n 
0001957095 00000 n 
0001957132 00000 n 
0001957169 00000 n 
0001957206 00000 n 
0001957243 00000 n 
0001957280 00000 n 
0001957317 00000 n 
0001957354 00000 n 
0001957391 00000 n 
0001957428 00000 n 
0001957465 00000 n 
0001957502 00000 n 
0001957539 00000 n 
0001957576 00000 n 
0001957613 00000 n 
0001957650 00000 n 
0001957687 00000 n 
0001957725 00000 n 
0001957763 00000 n 
0001957801 00000 n 
0001957839 00000 n 
0001957877 00000 n 
0001957915 00000 n 
0001957953 00000 n 
0001957991 00000 n 
0001958029 00000 n 
0001958067 00000 n 
0001958105 00000 n 
0001958143 00000 n 
0001958181 00000 n 
0001958219 00000 n 
0001958257 00000 n 
0001958295 00000 n 
0001958333 00000 n 
0001958371 00000 n 
0001958409 00000 n 
0001958447 00000 n 
0001958485 00000 n 
0001958523 00000 n 
0001958561 00000 n 
0001958599 00000 n 
0001958637 00000 n 
0001958675 00000 n 
0001958713 00000 n 
0001958751 00000 n 
0001958789 00000 n 
0001958827 00000 n 
0001958865 00000 n 
0001958903 00000 n 
0001958941 00000 n 
0001958979 00000 n 
0001959017 00000 n 
0001959055 00000 n 
0001959093 00000 n 
0001959131 00000 n 
0001959169 00000 n 
0001959207 00000 n 
0001959245 00000 n 
trailer
<<
/ID 
[<ce6d37675ffb1de9602ca02eed6351b3><ce6d37675ffb1de9602ca02eed6351b3>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 701 0 R
/Root 700 0 R
/Size 1264
>>
startxref
1959283
%%EOF
